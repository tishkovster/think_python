nose.plugins.cover: ERROR: Coverage not available: unable to import coverage module
test_bucket_operations (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_duplicate_headers (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_put (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_query_string (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_resign_uses_most_recent_date (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_resign_with_token (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_sign_with_token (tests.unit.auth.test_signers.TestHMACV1) ... ok
test_empty_fields_and_policy (tests.unit.auth.test_signers.TestS3SigV2Post) ... ok
test_presign_post (tests.unit.auth.test_signers.TestS3SigV2Post) ... ok
test_presign_post_with_security_token (tests.unit.auth.test_signers.TestS3SigV2Post) ... ok
test_presign_no_headers (tests.unit.auth.test_signers.TestS3SigV2Presign) ... ok
test_presign_with_content_headers (tests.unit.auth.test_signers.TestS3SigV2Presign) ... ok
test_presign_with_query_string (tests.unit.auth.test_signers.TestS3SigV2Presign) ... ok
test_presign_with_unused_headers (tests.unit.auth.test_signers.TestS3SigV2Presign) ... ok
test_presign_with_x_amz_headers (tests.unit.auth.test_signers.TestS3SigV2Presign) ... ok
test_blacklist_expect_headers (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_blacklist_headers (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_blacklist_trace_id (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_context_sets_signing_region (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_does_not_use_sha256_if_config_value_is_false (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_does_not_use_sha256_if_context_config_set (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_does_not_use_sha256_if_md5_set (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_query_string_params_in_urls (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_resign_with_content_hash (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_sha256_if_context_set_on_http (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_sha256_if_context_set_without_md5 (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_signature_is_not_normalized (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_uses_sha256_if_config_value_is_true (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_uses_sha256_if_md5_unset (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_uses_sha256_if_not_https (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_uses_sha256_if_not_streaming_upload (tests.unit.auth.test_signers.TestS3SigV4Auth) ... ok
test_empty_fields_and_policy (tests.unit.auth.test_signers.TestS3SigV4Post) ... ok
test_presign_post (tests.unit.auth.test_signers.TestS3SigV4Post) ... ok
test_presign_post_with_security_token (tests.unit.auth.test_signers.TestS3SigV4Post) ... ok
test_fields (tests.unit.auth.test_signers.TestSigV2) ... ok
test_get (tests.unit.auth.test_signers.TestSigV2) ... ok
test_put (tests.unit.auth.test_signers.TestSigV2) ... ok
test_resign (tests.unit.auth.test_signers.TestSigV2) ... ok
test_resign_with_token (tests.unit.auth.test_signers.TestSigV3) ... ok
test_signature_with_date_headers (tests.unit.auth.test_signers.TestSigV3) ... ok
test_canonical_query_string (tests.unit.auth.test_signers.TestSigV4) ... ok
test_collapse_multiple_spaces (tests.unit.auth.test_signers.TestSigV4) ... ok
test_content_sha256_set_if_payload_signing_disabled (tests.unit.auth.test_signers.TestSigV4) ... ok
test_payload_is_binary_file (tests.unit.auth.test_signers.TestSigV4) ... ok
test_payload_is_bytes_type (tests.unit.auth.test_signers.TestSigV4) ... ok
test_payload_not_signed_if_disabled_in_context (tests.unit.auth.test_signers.TestSigV4) ... ok
test_strips_default_port_and_http_auth (tests.unit.auth.test_signers.TestSigV4) ... ok
test_strips_http_auth (tests.unit.auth.test_signers.TestSigV4) ... ok
test_strips_http_default_port (tests.unit.auth.test_signers.TestSigV4) ... ok
test_strips_https_default_port (tests.unit.auth.test_signers.TestSigV4) ... ok
test_thread_safe_timestamp (tests.unit.auth.test_signers.TestSigV4) ... ok
test_trims_leading_trailing_spaces (tests.unit.auth.test_signers.TestSigV4) ... ok
test_operation_params_before_auth_params (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_operation_params_before_auth_params_in_body (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_content_type_form_encoded_not_signed (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_no_params (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_where_body_is_json_bytes (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_where_body_is_json_string (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_with_empty_param_value (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_with_security_token (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_presign_with_spaces_in_param (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_s3_sigv4_presign (tests.unit.auth.test_signers.TestSigV4Presign) ... ok
test_resign_request_with_date (tests.unit.auth.test_signers.TestSigV4Resign) ... ok
test_sigv4_without_date (tests.unit.auth.test_signers.TestSigV4Resign) ... ok
tests.unit.auth.test_sigv4.test_generator('get-vanilla-query-order-key',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-vanilla-ut8-query',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-vanilla-query-unreserved',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-header-value-case',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-header-key-case',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-vanilla',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-header-value-trim',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-slash-dot-slash',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-header-value-order',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-unreserved',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-utf8',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-relative',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-slashes',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-header-key-sort',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-vanilla-empty-query-key',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-x-www-form-urlencoded',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-vanilla-empty-query-value',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-space',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-slash',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-header-key-duplicate',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-vanilla-query',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-relative-relative',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-slash-pointless-dot',) ... ok
tests.unit.auth.test_sigv4.test_generator('post-x-www-form-urlencoded-parameters',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-vanilla-query',) ... ok
tests.unit.auth.test_sigv4.test_generator('get-vanilla',) ... ok
test_lstrip (tests.unit.docs.bcdoc.test_docstringparser.TestDataNode) ... ok
test_non_string_data_raises_error (tests.unit.docs.bcdoc.test_docstringparser.TestDataNode) ... ok
test_string_data (tests.unit.docs.bcdoc.test_docstringparser.TestDataNode) ... ok
test_write (tests.unit.docs.bcdoc.test_docstringparser.TestDataNode) ... ok
test_write_empty_string (tests.unit.docs.bcdoc.test_docstringparser.TestDataNode) ... ok
test_write_space (tests.unit.docs.bcdoc.test_docstringparser.TestDataNode) ... ok
test_nested_lists (tests.unit.docs.bcdoc.test_docstringparser.TestDocStringParser) ... ok
test_nested_lists_with_extra_white_space (tests.unit.docs.bcdoc.test_docstringparser.TestDocStringParser) ... ok
test_add_data (tests.unit.docs.bcdoc.test_docstringparser.TestHTMLTree) ... ok
test_add_tag (tests.unit.docs.bcdoc.test_docstringparser.TestHTMLTree) ... ok
test_add_unsupported_tag (tests.unit.docs.bcdoc.test_docstringparser.TestHTMLTree) ... ok
test_write_only_strips_until_text_is_found (tests.unit.docs.bcdoc.test_docstringparser.TestLineItemNode) ... ok
test_write_strips_nested_white_space (tests.unit.docs.bcdoc.test_docstringparser.TestLineItemNode) ... ok
test_write_strips_white_space (tests.unit.docs.bcdoc.test_docstringparser.TestLineItemNode) ... ok
test_add_child (tests.unit.docs.bcdoc.test_docstringparser.TestStemNode) ... ok
test_write (tests.unit.docs.bcdoc.test_docstringparser.TestStemNode) ... ok
test_write_calls_style (tests.unit.docs.bcdoc.test_docstringparser.TestTagNode) ... ok
test_write_unsupported_tag (tests.unit.docs.bcdoc.test_docstringparser.TestTagNode) ... ok
test_add_new_section (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_available_sections (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_clear_text (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_context (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_create_sections_at_instantiation (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_delete_section (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_flush_structure (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_flush_structure_hrefs (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_name (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_path (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_remove_all_sections (tests.unit.docs.bcdoc.test_document.TestDocumentStructure) ... ok
test_add_links (tests.unit.docs.bcdoc.test_document.TestReSTDocument) ... ok
test_include_doc_string (tests.unit.docs.bcdoc.test_document.TestReSTDocument) ... ok
test_remove_doc_string (tests.unit.docs.bcdoc.test_document.TestReSTDocument) ... ok
test_write (tests.unit.docs.bcdoc.test_document.TestReSTDocument) ... ok
test_writeln (tests.unit.docs.bcdoc.test_document.TestReSTDocument) ... ok
test_bold (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_code (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_codeblock (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_danger (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_empty_bold (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_empty_code (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_empty_italics (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_escape_href_link (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_examples (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_external_link (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_external_link_in_man_page (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_h1 (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_h2 (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_h3 (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_handle_no_text_hrefs (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_hidden_toctree_html (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_hidden_toctree_non_html (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_href_link (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_important (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_internal_link (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_internal_link_in_man_page (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_italics (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_list (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_new_line (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_non_top_level_lists_are_indented (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_note (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_p (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_ref (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_spaces (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_py_attr (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_py_class (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_py_method (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_py_method_with_params (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_reference_label_html (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_reference_label_html_no_text (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_reference_label_non_html (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_sphinx_reference_label_non_html_no_text (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_table_of_contents (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_table_of_contents_with_title (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_table_of_contents_with_title_and_depth (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_toctree_html (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_toctree_man (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_write_py_doc_string (tests.unit.docs.bcdoc.test_style.TestStyle) ... ok
test_document_client (tests.unit.docs.test_client.TestClientDocumenter) ... ok
test_generate_docs (tests.unit.docs.test_docs.TestGenerateDocs) ... ok
test_use_correct_docstring_writer (tests.unit.docs.test_docstring.TestClientMethodDocstring) ... ok
test_args_kwargs_passed (tests.unit.docs.test_docstring.TestLazyLoadedDocstring) ... ok
test_expandtabs (tests.unit.docs.test_docstring.TestLazyLoadedDocstring) ... ok
test_is_lazy_loaded (tests.unit.docs.test_docstring.TestLazyLoadedDocstring) ... ok
test_raises_not_implemented (tests.unit.docs.test_docstring.TestLazyLoadedDocstring) ... ok
test_repr (tests.unit.docs.test_docstring.TestLazyLoadedDocstring) ... ok
test_str (tests.unit.docs.test_docstring.TestLazyLoadedDocstring) ... ok
test_use_correct_docstring_writer (tests.unit.docs.test_docstring.TestPaginatorDocstring) ... ok
test_use_correct_docstring_writer (tests.unit.docs.test_docstring.TestWaiterDocstring) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentDefaultValue) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentDefaultValue) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentEnumValue) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentEnumValue) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentExclude) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentExclude) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentInclude) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentInclude) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentList) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentList) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentMap) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentMap) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentMultipleDefaultValues) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentMultipleDefaultValues) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentNoMembers) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentNoMembers) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentRecursiveShape) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentRecursiveShape) ... ok
test_request_example (tests.unit.docs.test_example.TestDocumentStructure) ... ok
test_response_example (tests.unit.docs.test_example.TestDocumentStructure) ... ok
test_events_emitted_request_example (tests.unit.docs.test_example.TestTraverseAndDocumentShape) ... ok
test_events_emitted_response_example (tests.unit.docs.test_example.TestTraverseAndDocumentShape) ... ok
test_document_custom_signature (tests.unit.docs.test_method.TestDocumentCustomMethod) ... ok
test_document_signature (tests.unit.docs.test_method.TestDocumentCustomSignature) ... ok
test_default (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_deprecated (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_exclude_input (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_exclude_output (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_include_input (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_include_output (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_no_input_output_shape (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_streaming_body_in_input (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_streaming_body_in_output (tests.unit.docs.test_method.TestDocumentModelDrivenMethod) ... ok
test_document_signature (tests.unit.docs.test_method.TestDocumentModelDrivenSignature) ... ok
test_document_signature_exclude_all_kwargs (tests.unit.docs.test_method.TestDocumentModelDrivenSignature) ... ok
test_document_signature_exclude_and_include (tests.unit.docs.test_method.TestDocumentModelDrivenSignature) ... ok
test_get_instance_methods (tests.unit.docs.test_method.TestGetInstanceMethods) ... ok
test_document_paginators (tests.unit.docs.test_paginator.TestPaginatorDocumenter) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentDefaultValue) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentDefaultValue) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentExclude) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentExclude) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentInclude) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentInclude) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentList) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentList) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentMap) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentMap) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentMultipleDefaultValues) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentMultipleDefaultValues) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentRecursiveShape) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentRecursiveShape) ... ok
test_request_params (tests.unit.docs.test_params.TestDocumentStructure) ... ok
test_response_params (tests.unit.docs.test_params.TestDocumentStructure) ... ok
test_events_emitted_request_params (tests.unit.docs.test_params.TestTraverseAndDocumentShape) ... ok
test_events_emitted_response_params (tests.unit.docs.test_params.TestTraverseAndDocumentShape) ... ok
test_document_service (tests.unit.docs.test_service.TestServiceDocumenter) ... ok
test_document_service_no_paginator (tests.unit.docs.test_service.TestServiceDocumenter) ... ok
test_document_service_no_waiter (tests.unit.docs.test_service.TestServiceDocumenter) ... ok
test_default (tests.unit.docs.test_sharedexample.TestDocumentSharedExamples) ... ok
test_add_comment (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_can_handle_no_input_key (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_dict_example (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_escape_character_example (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_is_input (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_list_example (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_map_example (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_timestamp_example (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_unicode_exammple (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_unicode_string_example (tests.unit.docs.test_sharedexample.TestSharedExampleDocumenter) ... ok
test_appends_documentation (tests.unit.docs.test_utils.TestAppendParamDocumentation) ... ok
test_non_default_param_description (tests.unit.docs.test_utils.TestAutopopulatedParam) ... ok
test_param_not_in_section_request_example (tests.unit.docs.test_utils.TestAutopopulatedParam) ... ok
test_param_not_in_section_request_param (tests.unit.docs.test_utils.TestAutopopulatedParam) ... ok
test_request_example (tests.unit.docs.test_utils.TestAutopopulatedParam) ... ok
test_request_param_not_required (tests.unit.docs.test_utils.TestAutopopulatedParam) ... ok
test_request_param_required (tests.unit.docs.test_utils.TestAutopopulatedParam) ... ok
test_escapes_controls (tests.unit.docs.test_utils.TestEscapeControls) ... ok
test_amazon_short_name (tests.unit.docs.test_utils.TestGetOfficialServiceName) ... ok
test_aws_short_name (tests.unit.docs.test_utils.TestGetOfficialServiceName) ... ok
test_no_short_name (tests.unit.docs.test_utils.TestGetOfficialServiceName) ... ok
test_short_name_in_official_name (tests.unit.docs.test_utils.TestGetOfficialServiceName) ... ok
test_hides_param_from_example (tests.unit.docs.test_utils.TestHideParamFromOperations) ... ok
test_hides_params_from_doc_string (tests.unit.docs.test_utils.TestHideParamFromOperations) ... ok
test_blob (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_double (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_integer (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_list (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_long (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_map (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_string (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_structure (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_timestamp (tests.unit.docs.test_utils.TestPythonDefault) ... ok
test_blob (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_character (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_double (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_float (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_integer (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_list (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_long (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_map (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_string (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_structure (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_timestamp (tests.unit.docs.test_utils.TestPythonTypeName) ... ok
test_document_waiters (tests.unit.docs.test_waiter.TestWaiterDocumenter) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudformation-describe-stacks.xml', b'<DescribeStacksResponse xmlns="http://cloudformation.amazonaws.com/doc/2010-05-15/">\n  <DescribeStacksResult>\n    <Stacks/>\n  </DescribeStacksResult>\n  <ResponseMetadata>\n    <RequestId>ad4c8bf2-9167-11e2-991c-f387408da2bf</RequestId>\n  </ResponseMetadata>\n</DescribeStacksResponse>\n', OperationModel(name=DescribeStacks), {'Stacks': [], 'ResponseMetadata': {'RequestId': 'ad4c8bf2-9167-11e2-991c-f387408da2bf'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudformation-get-template.xml', b'<GetTemplateResponse xmlns="http://cloudformation.amazonaws.com/doc/2010-05-15/">\n  <GetTemplateResult>\n    <TemplateBody>{\n  &quot;AWSTemplateFormatVersion&quot; : &quot;2010-09-09&quot;,\n\n  &quot;Description&quot; : &quot;AWS CloudFormation Sample Template EC2WithEBSSample: Create an Amazon EC2 instance running the Amazon Linux AMI with a new EBS volume attached. The instance and the volume are pinned to the same availability zone. We recommend that you do untargeted launches rather than pinning instances this way.The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance and an EBS Volume. You will be billed for the AWS resources used if you create a stack from this template.&quot;,\n\n  &quot;Parameters&quot; : {\n    &quot;KeyName&quot; : {\n      &quot;Description&quot; : &quot;Name of an existing EC2 KeyPair to enable SSH access to the instance&quot;,\n      &quot;Type&quot; : &quot;String&quot;\n    },\n    &quot;SSHLocation&quot; : {\n      &quot;Description&quot; : &quot;The IP address range that can be used to SSH to the EC2 instances&quot;,\n      &quot;Type&quot;: &quot;String&quot;,\n      &quot;MinLength&quot;: &quot;9&quot;,\n      &quot;MaxLength&quot;: &quot;18&quot;,\n      &quot;Default&quot;: &quot;0.0.0.0/0&quot;,\n      &quot;AllowedPattern&quot;: &quot;(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})&quot;,\n      &quot;ConstraintDescription&quot;: &quot;must be a valid IP CIDR range of the form x.x.x.x/x.&quot;\n   }\n  },\n\n  &quot;Mappings&quot; : {\n    &quot;RegionMap&quot; : {\n      &quot;us-east-1&quot;      : { &quot;AMI&quot; : &quot;ami-7f418316&quot;, &quot;TestAz&quot; : &quot;us-east-1a&quot; },\n      &quot;us-west-1&quot;      : { &quot;AMI&quot; : &quot;ami-951945d0&quot;, &quot;TestAz&quot; : &quot;us-west-1a&quot; },\n      &quot;us-west-2&quot;      : { &quot;AMI&quot; : &quot;ami-16fd7026&quot;, &quot;TestAz&quot; : &quot;us-west-2a&quot; },\n      &quot;eu-west-1&quot;      : { &quot;AMI&quot; : &quot;ami-24506250&quot;, &quot;TestAz&quot; : &quot;eu-west-1a&quot; },\n      &quot;sa-east-1&quot;      : { &quot;AMI&quot; : &quot;ami-3e3be423&quot;, &quot;TestAz&quot; : &quot;sa-east-1a&quot; },\n      &quot;ap-southeast-1&quot; : { &quot;AMI&quot; : &quot;ami-74dda626&quot;, &quot;TestAz&quot; : &quot;ap-southeast-1a&quot; },\n      &quot;ap-southeast-2&quot; : { &quot;AMI&quot; : &quot;ami-b3990e89&quot;, &quot;TestAz&quot; : &quot;ap-southeast-2a&quot; },\n      &quot;ap-northeast-1&quot; : { &quot;AMI&quot; : &quot;ami-dcfa4edd&quot;, &quot;TestAz&quot; : &quot;ap-northeast-1a&quot; }\n    }\n  },\n\n  &quot;Resources&quot; : {\n    &quot;Ec2Instance&quot; : {\n      &quot;Type&quot; : &quot;AWS::EC2::Instance&quot;,\n      &quot;Properties&quot; : {\n        &quot;AvailabilityZone&quot; : { &quot;Fn::FindInMap&quot; : [ &quot;RegionMap&quot;, { &quot;Ref&quot; : &quot;AWS::Region&quot; }, &quot;TestAz&quot; ]},\n        &quot;SecurityGroups&quot; : [ { &quot;Ref&quot; : &quot;InstanceSecurityGroup&quot; } ],\n        &quot;KeyName&quot; : { &quot;Ref&quot; : &quot;KeyName&quot; },\n        &quot;ImageId&quot; : { &quot;Fn::FindInMap&quot; : [ &quot;RegionMap&quot;, { &quot;Ref&quot; : &quot;AWS::Region&quot; }, &quot;AMI&quot; ]},\n        &quot;Volumes&quot; : [\n          { &quot;VolumeId&quot; : { &quot;Ref&quot; : &quot;NewVolume&quot; },\n            &quot;Device&quot; : &quot;/dev/sdk&quot;\n          }\n        ]\n      }\n    },\n\n    &quot;InstanceSecurityGroup&quot; : {\n      &quot;Type&quot; : &quot;AWS::EC2::SecurityGroup&quot;,\n      &quot;Properties&quot; : {\n        &quot;GroupDescription&quot; : &quot;Enable SSH access via port 22&quot;,\n        &quot;SecurityGroupIngress&quot; : [ {\n          &quot;IpProtocol&quot; : &quot;tcp&quot;,\n          &quot;FromPort&quot; : &quot;22&quot;,\n          &quot;ToPort&quot; : &quot;22&quot;,\n          &quot;CidrIp&quot; : { &quot;Ref&quot; : &quot;SSHLocation&quot;}\n        } ]\n      }\n    },\n\n    &quot;NewVolume&quot; : {\n      &quot;Type&quot; : &quot;AWS::EC2::Volume&quot;,\n      &quot;Properties&quot; : {\n        &quot;Size&quot; : &quot;100&quot;,\n        &quot;AvailabilityZone&quot; : { &quot;Fn::FindInMap&quot; : [ &quot;RegionMap&quot;, { &quot;Ref&quot; : &quot;AWS::Region&quot; }, &quot;TestAz&quot; ]}\n      }\n    }\n  },\n\n  &quot;Outputs&quot; : {\n    &quot;InstanceId&quot; : {\n      &quot;Description&quot; : &quot;InstanceId of the newly created EC2 instance&quot;,\n      &quot;Value&quot; : { &quot;Ref&quot; : &quot;Ec2Instance&quot; }\n    },\n    &quot;PublicIP&quot; : {\n      &quot;Description&quot; : &quot;Public IP address of the newly created EC2 instance&quot;,\n      &quot;Value&quot; : { &quot;Fn::GetAtt&quot; : [ &quot;Ec2Instance&quot;, &quot;PublicIp&quot; ] }\n    },\n    &quot;PublicDNS&quot; : {\n      &quot;Description&quot; : &quot;Public DNSName of the newly created EC2 instance&quot;,\n      &quot;Value&quot; : { &quot;Fn::GetAtt&quot; : [ &quot;Ec2Instance&quot;, &quot;PublicDnsName&quot; ] }\n    }\n  }\n}\n</TemplateBody>\n  </GetTemplateResult>\n  <ResponseMetadata>\n    <RequestId>4ca8b6a8-bc40-11e2-95ee-bd3eac9f6692</RequestId>\n  </ResponseMetadata>\n</GetTemplateResponse>\n', OperationModel(name=GetTemplate), {'ResponseMetadata': {'RequestId': '4ca8b6a8-bc40-11e2-95ee-bd3eac9f6692'}, 'TemplateBody': {'Description': 'AWS CloudFormation Sample Template EC2WithEBSSample: Create an Amazon EC2 instance running the Amazon Linux AMI with a new EBS volume attached. The instance and the volume are pinned to the same availability zone. We recommend that you do untargeted launches rather than pinning instances this way.The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance and an EBS Volume. You will be billed for the AWS resources used if you create a stack from this template.', 'Parameters': {'SSHLocation': {'ConstraintDescription': 'must be a valid IP CIDR range of the form x.x.x.x/x.', 'Description': 'The IP address range that can be used to SSH to the EC2 instances', 'Default': '0.0.0.0/0', 'MinLength': '9', 'AllowedPattern': '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})', 'MaxLength': '18', 'Type': 'String'}, 'KeyName': {'Type': 'String', 'Description': 'Name of an existing EC2 KeyPair to enable SSH access to the instance'}}, 'AWSTemplateFormatVersion': '2010-09-09', 'Outputs': {'InstanceId': {'Description': 'InstanceId of the newly created EC2 instance', 'Value': {'Ref': 'Ec2Instance'}}, 'PublicIP': {'Description': 'Public IP address of the newly created EC2 instance', 'Value': {'Fn::GetAtt': ['Ec2Instance', 'PublicIp']}}, 'PublicDNS': {'Description': 'Public DNSName of the newly created EC2 instance', 'Value': {'Fn::GetAtt': ['Ec2Instance', 'PublicDnsName']}}}, 'Resources': {'InstanceSecurityGroup': {'Type': 'AWS::EC2::SecurityGroup', 'Properties': {'SecurityGroupIngress': [{'ToPort': '22', 'IpProtocol': 'tcp', 'CidrIp': {'Ref': 'SSHLocation'}, 'FromPort': '22'}], 'GroupDescription': 'Enable SSH access via port 22'}}, 'Ec2Instance': {'Type': 'AWS::EC2::Instance', 'Properties': {'KeyName': {'Ref': 'KeyName'}, 'AvailabilityZone': {'Fn::FindInMap': ['RegionMap', {'Ref': 'AWS::Region'}, 'TestAz']}, 'SecurityGroups': [{'Ref': 'InstanceSecurityGroup'}], 'Volumes': [{'Device': '/dev/sdk', 'VolumeId': {'Ref': 'NewVolume'}}], 'ImageId': {'Fn::FindInMap': ['RegionMap', {'Ref': 'AWS::Region'}, 'AMI']}}}, 'NewVolume': {'Type': 'AWS::EC2::Volume', 'Properties': {'AvailabilityZone': {'Fn::FindInMap': ['RegionMap', {'Ref': 'AWS::Region'}, 'TestAz']}, 'Size': '100'}}}, 'Mappings': {'RegionMap': {'us-east-1': {'AMI': 'ami-7f418316', 'TestAz': 'us-east-1a'}, 'ap-northeast-1': {'AMI': 'ami-dcfa4edd', 'TestAz': 'ap-northeast-1a'}, 'sa-east-1': {'AMI': 'ami-3e3be423', 'TestAz': 'sa-east-1a'}, 'ap-southeast-1': {'AMI': 'ami-74dda626', 'TestAz': 'ap-southeast-1a'}, 'ap-southeast-2': {'AMI': 'ami-b3990e89', 'TestAz': 'ap-southeast-2a'}, 'us-west-2': {'AMI': 'ami-16fd7026', 'TestAz': 'us-west-2a'}, 'us-west-1': {'AMI': 'ami-951945d0', 'TestAz': 'us-west-1a'}, 'eu-west-1': {'AMI': 'ami-24506250', 'TestAz': 'eu-west-1a'}}}}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudformation-list-stacks.xml', b'<ListStacksResponse xmlns="http://cloudformation.amazonaws.com/doc/2010-05-15/">\n  <ListStacksResult>\n    <StackSummaries/>\n  </ListStacksResult>\n  <ResponseMetadata>\n    <RequestId>ad1ddb34-9167-11e2-a04d-8b5bb98870c1</RequestId>\n  </ResponseMetadata>\n</ListStacksResponse>\n', OperationModel(name=ListStacks), {'StackSummaries': [], 'ResponseMetadata': {'RequestId': 'ad1ddb34-9167-11e2-a04d-8b5bb98870c1'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-authorize-cluster-security-group-ingress.xml', b'<AuthorizeClusterSecurityGroupIngressResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <AuthorizeClusterSecurityGroupIngressResult>\n    <ClusterSecurityGroup>\n      <EC2SecurityGroups/>\n      <IPRanges>\n        <IPRange>\n          <CIDRIP>192.168.40.3/32</CIDRIP>\n          <Status>authorized</Status>\n        </IPRange>\n      </IPRanges>\n      <Description>my security group</Description>\n      <ClusterSecurityGroupName>securitygroup1</ClusterSecurityGroupName>\n    </ClusterSecurityGroup>\n  </AuthorizeClusterSecurityGroupIngressResult>\n  <ResponseMetadata>\n    <RequestId>8c7cd4c8-6501-11e2-a8da-655adc216806</RequestId>\n  </ResponseMetadata>\n</AuthorizeClusterSecurityGroupIngressResponse>\n', OperationModel(name=AuthorizeClusterSecurityGroupIngress), {'ClusterSecurityGroup': {'Description': 'my security group', 'ClusterSecurityGroupName': 'securitygroup1', 'EC2SecurityGroups': [], 'IPRanges': [{'Status': 'authorized', 'CIDRIP': '192.168.40.3/32'}]}, 'ResponseMetadata': {'RequestId': '8c7cd4c8-6501-11e2-a8da-655adc216806'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-copy-cluster-snapshot.xml', b'<CopyClusterSnapshotResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <CopyClusterSnapshotResult>\n    <Snapshot>\n      <Port>5439</Port>\n      <SnapshotIdentifier>my-snapshot-456</SnapshotIdentifier>\n      <Status>available</Status>\n      <SnapshotType>manual</SnapshotType>\n      <ClusterVersion>1.0</ClusterVersion>\n      <SnapshotCreateTime>2013-01-22T19:27:58.931Z</SnapshotCreateTime>\n      <NumberOfNodes>2</NumberOfNodes>\n      <DBName>dev</DBName>\n      <ClusterCreateTime>2013-01-22T19:23:59.368Z</ClusterCreateTime>\n      <AvailabilityZone>us-east-1c</AvailabilityZone>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <ClusterIdentifier>examplecluster</ClusterIdentifier>\n      <MasterUsername>adminuser</MasterUsername>\n    </Snapshot>\n  </CopyClusterSnapshotResult>\n  <ResponseMetadata>\n    <RequestId>aebb56f5-64fe-11e2-88c5-53eb05787dfb</RequestId>\n  </ResponseMetadata>\n</CopyClusterSnapshotResponse>\n', OperationModel(name=CopyClusterSnapshot), {'Snapshot': {'Status': 'available', 'SnapshotCreateTime': '2013-01-22T19:27:58.931Z', 'AvailabilityZone': 'us-east-1c', 'ClusterVersion': '1.0', 'MasterUsername': 'adminuser', 'DBName': 'dev', 'ClusterCreateTime': '2013-01-22T19:23:59.368Z', 'SnapshotType': 'manual', 'NodeType': 'dw.hs1.xlarge', 'ClusterIdentifier': 'examplecluster', 'Port': 5439, 'NumberOfNodes': 2, 'SnapshotIdentifier': 'my-snapshot-456'}, 'ResponseMetadata': {'RequestId': 'aebb56f5-64fe-11e2-88c5-53eb05787dfb'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-create-cluster-parameter-group.xml', b'<CreateClusterParameterGroupResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <CreateClusterParameterGroupResult>\n    <ClusterParameterGroup>\n      <ParameterGroupFamily>redshift-1.0</ParameterGroupFamily>\n      <Description>description my parameter group</Description>\n      <ParameterGroupName>parametergroup1</ParameterGroupName>\n    </ClusterParameterGroup>\n  </CreateClusterParameterGroupResult>\n  <ResponseMetadata>\n    <RequestId>6d6df847-64f3-11e2-bea9-49e0ce183f07</RequestId>\n  </ResponseMetadata>\n</CreateClusterParameterGroupResponse>\n', OperationModel(name=CreateClusterParameterGroup), {'ClusterParameterGroup': {'ParameterGroupFamily': 'redshift-1.0', 'Description': 'description my parameter group', 'ParameterGroupName': 'parametergroup1'}, 'ResponseMetadata': {'RequestId': '6d6df847-64f3-11e2-bea9-49e0ce183f07'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-create-cluster-security-group.xml', b'<CreateClusterSecurityGroupResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <CreateClusterSecurityGroupResult>\n    <ClusterSecurityGroup>\n      <EC2SecurityGroups/>\n      <IPRanges/>\n      <Description>my security group</Description>\n      <ClusterSecurityGroupName>securitygroup1</ClusterSecurityGroupName>\n    </ClusterSecurityGroup>\n  </CreateClusterSecurityGroupResult>\n  <ResponseMetadata>\n    <RequestId>f9ee270f-64f7-11e2-a8da-655adc216806</RequestId>\n  </ResponseMetadata>\n</CreateClusterSecurityGroupResponse>\n', OperationModel(name=CreateClusterSecurityGroup), {'ClusterSecurityGroup': {'Description': 'my security group', 'ClusterSecurityGroupName': 'securitygroup1', 'EC2SecurityGroups': [], 'IPRanges': []}, 'ResponseMetadata': {'RequestId': 'f9ee270f-64f7-11e2-a8da-655adc216806'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-create-cluster-snapshot.xml', b'<CreateClusterSnapshotResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <CreateClusterSnapshotResult>\n    <Snapshot>\n      <Port>5439</Port>\n      <SnapshotIdentifier>my-snapshot-123</SnapshotIdentifier>\n      <Status>creating</Status>\n      <SnapshotType>manual</SnapshotType>\n      <ClusterVersion>1.0</ClusterVersion>\n      <SnapshotCreateTime>2013-01-23T01:08:29.142Z</SnapshotCreateTime>\n      <NumberOfNodes>2</NumberOfNodes>\n      <DBName>dev</DBName>\n      <ClusterCreateTime>2013-01-22T19:23:59.368Z</ClusterCreateTime>\n      <AvailabilityZone>us-east-1c</AvailabilityZone>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <ClusterIdentifier>examplecluster</ClusterIdentifier>\n      <MasterUsername>adminuser</MasterUsername>\n    </Snapshot>\n  </CreateClusterSnapshotResult>\n  <ResponseMetadata>\n    <RequestId>65baef14-64f9-11e2-bea9-49e0ce183f07</RequestId>\n  </ResponseMetadata>\n</CreateClusterSnapshotResponse>\n', OperationModel(name=CreateClusterSnapshot), {'Snapshot': {'Status': 'creating', 'SnapshotCreateTime': '2013-01-23T01:08:29.142Z', 'AvailabilityZone': 'us-east-1c', 'ClusterVersion': '1.0', 'MasterUsername': 'adminuser', 'DBName': 'dev', 'ClusterCreateTime': '2013-01-22T19:23:59.368Z', 'SnapshotType': 'manual', 'NodeType': 'dw.hs1.xlarge', 'ClusterIdentifier': 'examplecluster', 'Port': 5439, 'NumberOfNodes': 2, 'SnapshotIdentifier': 'my-snapshot-123'}, 'ResponseMetadata': {'RequestId': '65baef14-64f9-11e2-bea9-49e0ce183f07'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-create-cluster-subnet-group.xml', b'<CreateClusterSubnetGroupResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <CreateClusterSubnetGroupResult>\n    <ClusterSubnetGroup>\n      <VpcId>vpc-796a5913</VpcId>\n      <Description>My subnet group 1</Description>\n      <ClusterSubnetGroupName>mysubnetgroup1</ClusterSubnetGroupName>\n      <SubnetGroupStatus>Complete</SubnetGroupStatus>\n      <Subnets>\n        <Subnet>\n          <SubnetStatus>Active</SubnetStatus>\n          <SubnetIdentifier>subnet-756a591f</SubnetIdentifier>\n          <SubnetAvailabilityZone>\n            <Name>us-east-1c</Name>\n          </SubnetAvailabilityZone>\n        </Subnet>\n      </Subnets>\n    </ClusterSubnetGroup>\n  </CreateClusterSubnetGroupResult>\n  <ResponseMetadata>\n    <RequestId>0a60660f-6a4a-11e2-aad2-71d00c36728e</RequestId>\n  </ResponseMetadata>\n</CreateClusterSubnetGroupResponse>\n', OperationModel(name=CreateClusterSubnetGroup), {'ClusterSubnetGroup': {'Subnets': [{'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-756a591f', 'SubnetAvailabilityZone': {'Name': 'us-east-1c'}}], 'VpcId': 'vpc-796a5913', 'SubnetGroupStatus': 'Complete', 'Description': 'My subnet group 1', 'ClusterSubnetGroupName': 'mysubnetgroup1'}, 'ResponseMetadata': {'RequestId': '0a60660f-6a4a-11e2-aad2-71d00c36728e'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-create-cluster.xml', b'<CreateClusterResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <CreateClusterResult>\n    <Cluster>\n      <PendingModifiedValues>\n        <MasterUserPassword>****</MasterUserPassword>\n      </PendingModifiedValues>\n      <ClusterVersion>1.0</ClusterVersion>\n      <VpcSecurityGroups/>\n      <ClusterStatus>creating</ClusterStatus>\n      <NumberOfNodes>2</NumberOfNodes>\n      <AutomatedSnapshotRetentionPeriod>1</AutomatedSnapshotRetentionPeriod>\n      <PubliclyAccessible>true</PubliclyAccessible>\n      <Encrypted>false</Encrypted>\n      <DBName>dev</DBName>\n      <PreferredMaintenanceWindow>sun:10:30-sun:11:00</PreferredMaintenanceWindow>\n      <ClusterParameterGroups>\n        <ClusterParameterGroup>\n          <ParameterApplyStatus>in-sync</ParameterApplyStatus>\n          <ParameterGroupName>default.redshift-1.0</ParameterGroupName>\n        </ClusterParameterGroup>\n      </ClusterParameterGroups>\n      <ClusterSecurityGroups>\n        <ClusterSecurityGroup>\n          <Status>active</Status>\n          <ClusterSecurityGroupName>default</ClusterSecurityGroupName>\n        </ClusterSecurityGroup>\n      </ClusterSecurityGroups>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <ClusterIdentifier>examplecluster</ClusterIdentifier>\n      <AllowVersionUpgrade>true</AllowVersionUpgrade>\n      <MasterUsername>masteruser</MasterUsername>\n    </Cluster>\n  </CreateClusterResult>\n  <ResponseMetadata>\n    <RequestId>e69b1294-64ef-11e2-b07c-f7fbdd006c67</RequestId>\n  </ResponseMetadata>\n</CreateClusterResponse>\n', OperationModel(name=CreateCluster), {'Cluster': {'NodeType': 'dw.hs1.xlarge', 'ClusterVersion': '1.0', 'PubliclyAccessible': True, 'MasterUsername': 'masteruser', 'Encrypted': False, 'ClusterParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'ParameterGroupName': 'default.redshift-1.0'}], 'ClusterSecurityGroups': [{'Status': 'active', 'ClusterSecurityGroupName': 'default'}], 'AllowVersionUpgrade': True, 'VpcSecurityGroups': [], 'PreferredMaintenanceWindow': 'sun:10:30-sun:11:00', 'AutomatedSnapshotRetentionPeriod': 1, 'ClusterStatus': 'creating', 'ClusterIdentifier': 'examplecluster', 'DBName': 'dev', 'NumberOfNodes': 2, 'PendingModifiedValues': {'MasterUserPassword': '****'}}, 'ResponseMetadata': {'RequestId': 'e69b1294-64ef-11e2-b07c-f7fbdd006c67'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-delete-cluster-parameter-group.xml', b'<DeleteClusterParameterGroupResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <ResponseMetadata>\n    <RequestId>29674ca0-40da-11e2-b679-dba6cf515770</RequestId>\n  </ResponseMetadata>\n</DeleteClusterParameterGroupResponse>\n', OperationModel(name=DeleteClusterParameterGroup), {'ResponseMetadata': {'RequestId': '29674ca0-40da-11e2-b679-dba6cf515770'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-delete-cluster-snapshot.xml', b'<DeleteClusterSnapshotResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DeleteClusterSnapshotResult>\n    <Snapshot>\n      <SnapshotCreateTime>2012-12-07T23:31:02.372Z</SnapshotCreateTime>\n      <Port>5439</Port>\n      <SnapshotIdentifier>snapshot-1234</SnapshotIdentifier>\n      <Status>deleted</Status>\n      <ClusterCreateTime>2012-12-06T23:09:01.475Z</ClusterCreateTime>\n      <SnapshotType>manual</SnapshotType>\n      <ClusterVersion>1.0</ClusterVersion>\n      <AvailabilityZone>us-east-1a</AvailabilityZone>\n      <ClusterIdentifier>examplecluster</ClusterIdentifier>\n      <MasterUsername>masteruser</MasterUsername>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <DBName>mydb</DBName>\n      <NumberOfNodes>3</NumberOfNodes>\n    </Snapshot>\n  </DeleteClusterSnapshotResult>\n  <ResponseMetadata>\n    <RequestId>88a31de4-40d1-11e2-8a25-eb010998df4e</RequestId>\n  </ResponseMetadata>\n</DeleteClusterSnapshotResponse>\n', OperationModel(name=DeleteClusterSnapshot), {'Snapshot': {'Status': 'deleted', 'SnapshotCreateTime': '2012-12-07T23:31:02.372Z', 'AvailabilityZone': 'us-east-1a', 'ClusterVersion': '1.0', 'MasterUsername': 'masteruser', 'DBName': 'mydb', 'ClusterCreateTime': '2012-12-06T23:09:01.475Z', 'SnapshotType': 'manual', 'NodeType': 'dw.hs1.xlarge', 'ClusterIdentifier': 'examplecluster', 'Port': 5439, 'NumberOfNodes': 3, 'SnapshotIdentifier': 'snapshot-1234'}, 'ResponseMetadata': {'RequestId': '88a31de4-40d1-11e2-8a25-eb010998df4e'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-delete-cluster.xml', b'<DeleteClusterResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DeleteClusterResult>\n    <Cluster>\n      <PendingModifiedValues/>\n      <ClusterVersion>1.0</ClusterVersion>\n      <VpcSecurityGroups/>\n      <Endpoint>\n        <Port>5439</Port>\n        <Address>examplecluster2.cobbanlpscsn.us-east-1.redshift.amazonaws.com</Address>\n      </Endpoint>\n      <ClusterStatus>deleting</ClusterStatus>\n      <NumberOfNodes>2</NumberOfNodes>\n      <AutomatedSnapshotRetentionPeriod>1</AutomatedSnapshotRetentionPeriod>\n      <PubliclyAccessible>true</PubliclyAccessible>\n      <Encrypted>true</Encrypted>\n      <DBName>dev</DBName>\n      <PreferredMaintenanceWindow>sun:10:30-sun:11:00</PreferredMaintenanceWindow>\n      <ClusterParameterGroups>\n        <ClusterParameterGroup>\n          <ParameterApplyStatus>in-sync</ParameterApplyStatus>\n          <ParameterGroupName>default.redshift-1.0</ParameterGroupName>\n        </ClusterParameterGroup>\n      </ClusterParameterGroups>\n      <ClusterCreateTime>2013-01-23T00:11:32.804Z</ClusterCreateTime>\n      <ClusterSecurityGroups>\n        <ClusterSecurityGroup>\n          <Status>active</Status>\n          <ClusterSecurityGroupName>default</ClusterSecurityGroupName>\n        </ClusterSecurityGroup>\n      </ClusterSecurityGroups>\n      <AvailabilityZone>us-east-1a</AvailabilityZone>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <ClusterIdentifier>examplecluster2</ClusterIdentifier>\n      <AllowVersionUpgrade>true</AllowVersionUpgrade>\n      <MasterUsername>masteruser</MasterUsername>\n    </Cluster>\n  </DeleteClusterResult>\n  <ResponseMetadata>\n    <RequestId>f2e6b87e-6503-11e2-b343-393adc3f0a21</RequestId>\n  </ResponseMetadata>\n</DeleteClusterResponse>\n', OperationModel(name=DeleteCluster), {'Cluster': {'NodeType': 'dw.hs1.xlarge', 'Endpoint': {'Port': 5439, 'Address': 'examplecluster2.cobbanlpscsn.us-east-1.redshift.amazonaws.com'}, 'ClusterVersion': '1.0', 'PubliclyAccessible': True, 'MasterUsername': 'masteruser', 'Encrypted': True, 'ClusterParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'ParameterGroupName': 'default.redshift-1.0'}], 'ClusterSecurityGroups': [{'Status': 'active', 'ClusterSecurityGroupName': 'default'}], 'AllowVersionUpgrade': True, 'VpcSecurityGroups': [], 'AvailabilityZone': 'us-east-1a', 'ClusterCreateTime': '2013-01-23T00:11:32.804Z', 'PreferredMaintenanceWindow': 'sun:10:30-sun:11:00', 'AutomatedSnapshotRetentionPeriod': 1, 'ClusterStatus': 'deleting', 'ClusterIdentifier': 'examplecluster2', 'DBName': 'dev', 'NumberOfNodes': 2, 'PendingModifiedValues': {}}, 'ResponseMetadata': {'RequestId': 'f2e6b87e-6503-11e2-b343-393adc3f0a21'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-cluster-parameter-groups.xml', b'<DescribeClusterParameterGroupsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClusterParameterGroupsResult>\n    <ParameterGroups>\n      <ClusterParameterGroup>\n        <ParameterGroupFamily>redshift-1.0</ParameterGroupFamily>\n        <Description>Default parameter group for redshift-1.0</Description>\n        <ParameterGroupName>default.redshift-1.0</ParameterGroupName>\n      </ClusterParameterGroup>\n      <ClusterParameterGroup>\n        <ParameterGroupFamily>redshift-1.0</ParameterGroupFamily>\n        <Description>description my parameter group</Description>\n        <ParameterGroupName>parametergroup1</ParameterGroupName>\n      </ClusterParameterGroup>\n    </ParameterGroups>\n  </DescribeClusterParameterGroupsResult>\n  <ResponseMetadata>\n    <RequestId>6d28788b-64f5-11e2-b343-393adc3f0a21</RequestId>\n  </ResponseMetadata>\n</DescribeClusterParameterGroupsResponse>\n', OperationModel(name=DescribeClusterParameterGroups), {'ParameterGroups': [{'Description': 'Default parameter group for redshift-1.0', 'ParameterGroupFamily': 'redshift-1.0', 'ParameterGroupName': 'default.redshift-1.0'}, {'Description': 'description my parameter group', 'ParameterGroupFamily': 'redshift-1.0', 'ParameterGroupName': 'parametergroup1'}], 'ResponseMetadata': {'RequestId': '6d28788b-64f5-11e2-b343-393adc3f0a21'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-cluster-parameters.xml', b'<DescribeClusterParametersResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClusterParametersResult>\n    <Parameters>\n      <Parameter>\n        <ParameterValue>ISO, MDY</ParameterValue>\n        <DataType>string</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>Sets the display format for date and time values.</Description>\n        <ParameterName>datestyle</ParameterName>\n      </Parameter>\n      <Parameter>\n        <ParameterValue>0</ParameterValue>\n        <DataType>integer</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>Sets the number of digits displayed for floating-point values</Description>\n        <AllowedValues>-15-2</AllowedValues>\n        <ParameterName>extra_float_digits</ParameterName>\n      </Parameter>\n      <Parameter>\n        <ParameterValue>default</ParameterValue>\n        <DataType>string</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>This parameter applies a user-defined label to a group of queries that are run during the same session..</Description>\n        <ParameterName>query_group</ParameterName>\n      </Parameter>\n      <Parameter>\n        <ParameterValue>false</ParameterValue>\n        <DataType>boolean</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>require ssl for all databaseconnections</Description>\n        <AllowedValues>true,false</AllowedValues>\n        <ParameterName>require_ssl</ParameterName>\n      </Parameter>\n      <Parameter>\n        <ParameterValue>$user, public</ParameterValue>\n        <DataType>string</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>Sets the schema search order for names that are not schema-qualified.</Description>\n        <ParameterName>search_path</ParameterName>\n      </Parameter>\n      <Parameter>\n        <ParameterValue>0</ParameterValue>\n        <DataType>integer</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>Aborts any statement that takes over the specified number of milliseconds.</Description>\n        <ParameterName>statement_timeout</ParameterName>\n      </Parameter>\n      <Parameter>\n        <ParameterValue>[{"query_concurrency":5}]</ParameterValue>\n        <DataType>string</DataType>\n        <Source>engine-default</Source>\n        <IsModifiable>true</IsModifiable>\n        <Description>wlm json configuration</Description>\n        <ParameterName>wlm_json_configuration</ParameterName>\n      </Parameter>\n    </Parameters>\n  </DescribeClusterParametersResult>\n  <ResponseMetadata>\n    <RequestId>2ba35df4-40d3-11e2-82cf-0b45b05c0221</RequestId>\n  </ResponseMetadata>\n</DescribeClusterParametersResponse>\n', OperationModel(name=DescribeClusterParameters), {'ResponseMetadata': {'RequestId': '2ba35df4-40d3-11e2-82cf-0b45b05c0221'}, 'Parameters': [{'Description': 'Sets the display format for date and time values.', 'DataType': 'string', 'IsModifiable': True, 'Source': 'engine-default', 'ParameterValue': 'ISO, MDY', 'ParameterName': 'datestyle'}, {'Description': 'Sets the number of digits displayed for floating-point values', 'DataType': 'integer', 'IsModifiable': True, 'AllowedValues': '-15-2', 'Source': 'engine-default', 'ParameterValue': '0', 'ParameterName': 'extra_float_digits'}, {'Description': 'This parameter applies a user-defined label to a group of queries that are run during the same session..', 'DataType': 'string', 'IsModifiable': True, 'Source': 'engine-default', 'ParameterValue': 'default', 'ParameterName': 'query_group'}, {'Description': 'require ssl for all databaseconnections', 'DataType': 'boolean', 'IsModifiable': True, 'AllowedValues': 'true,false', 'Source': 'engine-default', 'ParameterValue': 'false', 'ParameterName': 'require_ssl'}, {'Description': 'Sets the schema search order for names that are not schema-qualified.', 'DataType': 'string', 'IsModifiable': True, 'Source': 'engine-default', 'ParameterValue': '$user, public', 'ParameterName': 'search_path'}, {'Description': 'Aborts any statement that takes over the specified number of milliseconds.', 'DataType': 'integer', 'IsModifiable': True, 'Source': 'engine-default', 'ParameterValue': '0', 'ParameterName': 'statement_timeout'}, {'Description': 'wlm json configuration', 'DataType': 'string', 'IsModifiable': True, 'Source': 'engine-default', 'ParameterValue': '[{"query_concurrency":5}]', 'ParameterName': 'wlm_json_configuration'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-cluster-security-groups.xml', b'<DescribeClusterSecurityGroupsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClusterSecurityGroupsResult>\n    <ClusterSecurityGroups>\n      <ClusterSecurityGroup>\n        <EC2SecurityGroups/>\n        <IPRanges>\n          <IPRange>\n            <CIDRIP>0.0.0.0/0</CIDRIP>\n            <Status>authorized</Status>\n          </IPRange>\n        </IPRanges>\n        <Description>default</Description>\n        <ClusterSecurityGroupName>default</ClusterSecurityGroupName>\n      </ClusterSecurityGroup>\n      <ClusterSecurityGroup>\n        <EC2SecurityGroups/>\n        <IPRanges/>\n        <Description>my security group</Description>\n        <ClusterSecurityGroupName>securitygroup1</ClusterSecurityGroupName>\n      </ClusterSecurityGroup>\n    </ClusterSecurityGroups>\n  </DescribeClusterSecurityGroupsResult>\n  <ResponseMetadata>\n    <RequestId>947a8305-64f8-11e2-bec0-17624ad140dd</RequestId>\n  </ResponseMetadata>\n</DescribeClusterSecurityGroupsResponse>\n', OperationModel(name=DescribeClusterSecurityGroups), {'ClusterSecurityGroups': [{'Description': 'default', 'ClusterSecurityGroupName': 'default', 'EC2SecurityGroups': [], 'IPRanges': [{'Status': 'authorized', 'CIDRIP': '0.0.0.0/0'}]}, {'Description': 'my security group', 'ClusterSecurityGroupName': 'securitygroup1', 'EC2SecurityGroups': [], 'IPRanges': []}], 'ResponseMetadata': {'RequestId': '947a8305-64f8-11e2-bec0-17624ad140dd'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-cluster-snapshots.xml', b'<DescribeClusterSnapshotsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClusterSnapshotsResult>\n    <Snapshots>\n      <Snapshot>\n        <Port>5439</Port>\n        <SnapshotIdentifier>cm:examplecluster-2013-01-22-19-27-58</SnapshotIdentifier>\n        <Status>available</Status>\n        <SnapshotType>automated</SnapshotType>\n        <ClusterVersion>1.0</ClusterVersion>\n        <SnapshotCreateTime>2013-01-22T19:27:58.931Z</SnapshotCreateTime>\n        <NumberOfNodes>2</NumberOfNodes>\n        <DBName>dev</DBName>\n        <ClusterCreateTime>2013-01-22T19:23:59.368Z</ClusterCreateTime>\n        <AvailabilityZone>us-east-1c</AvailabilityZone>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <ClusterIdentifier>examplecluster</ClusterIdentifier>\n        <MasterUsername>adminuser</MasterUsername>\n      </Snapshot>\n      <Snapshot>\n        <Port>5439</Port>\n        <SnapshotIdentifier>my-snapshot-123</SnapshotIdentifier>\n        <Status>available</Status>\n        <SnapshotType>manual</SnapshotType>\n        <ClusterVersion>1.0</ClusterVersion>\n        <SnapshotCreateTime>2013-01-23T01:09:03.149Z</SnapshotCreateTime>\n        <NumberOfNodes>2</NumberOfNodes>\n        <DBName>dev</DBName>\n        <ClusterCreateTime>2013-01-22T19:23:59.368Z</ClusterCreateTime>\n        <AvailabilityZone>us-east-1c</AvailabilityZone>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <ClusterIdentifier>examplecluster</ClusterIdentifier>\n        <MasterUsername>adminuser</MasterUsername>\n      </Snapshot>\n    </Snapshots>\n  </DescribeClusterSnapshotsResult>\n  <ResponseMetadata>\n    <RequestId>56a9daf4-64fa-11e2-a8da-655adc216806</RequestId>\n  </ResponseMetadata>\n</DescribeClusterSnapshotsResponse>\n', OperationModel(name=DescribeClusterSnapshots), {'ResponseMetadata': {'RequestId': '56a9daf4-64fa-11e2-a8da-655adc216806'}, 'Snapshots': [{'AvailabilityZone': 'us-east-1c', 'ClusterCreateTime': '2013-01-22T19:23:59.368Z', 'ClusterIdentifier': 'examplecluster', 'ClusterVersion': '1.0', 'DBName': 'dev', 'MasterUsername': 'adminuser', 'NodeType': 'dw.hs1.xlarge', 'NumberOfNodes': 2, 'Port': 5439, 'SnapshotCreateTime': '2013-01-22T19:27:58.931Z', 'SnapshotIdentifier': 'cm:examplecluster-2013-01-22-19-27-58', 'SnapshotType': 'automated', 'Status': 'available'}, {'AvailabilityZone': 'us-east-1c', 'ClusterCreateTime': '2013-01-22T19:23:59.368Z', 'ClusterIdentifier': 'examplecluster', 'ClusterVersion': '1.0', 'DBName': 'dev', 'MasterUsername': 'adminuser', 'NodeType': 'dw.hs1.xlarge', 'NumberOfNodes': 2, 'Port': 5439, 'SnapshotCreateTime': '2013-01-23T01:09:03.149Z', 'SnapshotIdentifier': 'my-snapshot-123', 'SnapshotType': 'manual', 'Status': 'available'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-cluster-subnet-groups.xml', b'<DescribeClusterSubnetGroupsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClusterSubnetGroupsResult>\n    <ClusterSubnetGroups>\n      <ClusterSubnetGroup>\n        <VpcId>vpc-5d917a30</VpcId>\n        <Description>my subnet group</Description>\n        <ClusterSubnetGroupName>my-subnet-group</ClusterSubnetGroupName>\n        <SubnetGroupStatus>Complete</SubnetGroupStatus>\n        <Subnets>\n          <Subnet>\n            <SubnetStatus>Active</SubnetStatus>\n            <SubnetIdentifier>subnet-71c5091c</SubnetIdentifier>\n            <SubnetAvailabilityZone>\n              <Name>us-east-1a</Name>\n            </SubnetAvailabilityZone>\n          </Subnet>\n          <Subnet>\n            <SubnetStatus>Active</SubnetStatus>\n            <SubnetIdentifier>subnet-78de1215</SubnetIdentifier>\n            <SubnetAvailabilityZone>\n              <Name>us-east-1a</Name>\n            </SubnetAvailabilityZone>\n          </Subnet>\n        </Subnets>\n      </ClusterSubnetGroup>\n    </ClusterSubnetGroups>\n  </DescribeClusterSubnetGroupsResult>\n  <ResponseMetadata>\n    <RequestId>42024b68-6af3-11e2-a726-6368a468fa67</RequestId>\n  </ResponseMetadata>\n</DescribeClusterSubnetGroupsResponse>\n', OperationModel(name=DescribeClusterSubnetGroups), {'ClusterSubnetGroups': [{'ClusterSubnetGroupName': 'my-subnet-group', 'Description': 'my subnet group', 'SubnetGroupStatus': 'Complete', 'Subnets': [{'SubnetAvailabilityZone': {'Name': 'us-east-1a'}, 'SubnetIdentifier': 'subnet-71c5091c', 'SubnetStatus': 'Active'}, {'SubnetAvailabilityZone': {'Name': 'us-east-1a'}, 'SubnetIdentifier': 'subnet-78de1215', 'SubnetStatus': 'Active'}], 'VpcId': 'vpc-5d917a30'}], 'ResponseMetadata': {'RequestId': '42024b68-6af3-11e2-a726-6368a468fa67'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-cluster-versions.xml', b'<DescribeClusterVersionsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClusterVersionsResult>\n    <ClusterVersions>\n      <ClusterVersion>\n        <ClusterParameterGroupFamily>redshift-1.0</ClusterParameterGroupFamily>\n        <Description>release db engine 1.0.54</Description>\n        <ClusterVersion>1.0</ClusterVersion>\n      </ClusterVersion>\n    </ClusterVersions>\n  </DescribeClusterVersionsResult>\n  <ResponseMetadata>\n    <RequestId>6641e675-9167-11e2-a970-49138ad38474</RequestId>\n  </ResponseMetadata>\n</DescribeClusterVersionsResponse>\n', OperationModel(name=DescribeClusterVersions), {'ClusterVersions': [{'ClusterVersion': '1.0', 'Description': 'release db engine 1.0.54', 'ClusterParameterGroupFamily': 'redshift-1.0'}], 'ResponseMetadata': {'RequestId': '6641e675-9167-11e2-a970-49138ad38474'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-clusters.xml', b'<DescribeClustersResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeClustersResult>\n    <Clusters>\n      <Cluster>\n        <PendingModifiedValues>\n          <MasterUserPassword>****</MasterUserPassword>\n        </PendingModifiedValues>\n        <ClusterVersion>1.0</ClusterVersion>\n        <VpcSecurityGroups/>\n        <ClusterStatus>creating</ClusterStatus>\n        <NumberOfNodes>2</NumberOfNodes>\n        <AutomatedSnapshotRetentionPeriod>1</AutomatedSnapshotRetentionPeriod>\n        <PubliclyAccessible>true</PubliclyAccessible>\n        <Encrypted>false</Encrypted>\n        <DBName>dev</DBName>\n        <PreferredMaintenanceWindow>sun:10:30-sun:11:00</PreferredMaintenanceWindow>\n        <ClusterParameterGroups>\n          <ClusterParameterGroup>\n            <ParameterApplyStatus>in-sync</ParameterApplyStatus>\n            <ParameterGroupName>default.redshift-1.0</ParameterGroupName>\n          </ClusterParameterGroup>\n        </ClusterParameterGroups>\n        <ClusterSecurityGroups>\n          <ClusterSecurityGroup>\n            <Status>active</Status>\n            <ClusterSecurityGroupName>default</ClusterSecurityGroupName>\n          </ClusterSecurityGroup>\n        </ClusterSecurityGroups>\n        <AvailabilityZone>us-east-1a</AvailabilityZone>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <ClusterIdentifier>examplecluster</ClusterIdentifier>\n        <AllowVersionUpgrade>true</AllowVersionUpgrade>\n        <MasterUsername>masteruser</MasterUsername>\n      </Cluster>\n    </Clusters>\n  </DescribeClustersResult>\n  <ResponseMetadata>\n    <RequestId>837d45d6-64f0-11e2-b07c-f7fbdd006c67</RequestId>\n  </ResponseMetadata>\n</DescribeClustersResponse>\n', OperationModel(name=DescribeClusters), {'Clusters': [{'AllowVersionUpgrade': True, 'AutomatedSnapshotRetentionPeriod': 1, 'AvailabilityZone': 'us-east-1a', 'ClusterIdentifier': 'examplecluster', 'ClusterParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'ParameterGroupName': 'default.redshift-1.0'}], 'ClusterSecurityGroups': [{'ClusterSecurityGroupName': 'default', 'Status': 'active'}], 'ClusterStatus': 'creating', 'ClusterVersion': '1.0', 'DBName': 'dev', 'Encrypted': False, 'MasterUsername': 'masteruser', 'NodeType': 'dw.hs1.xlarge', 'NumberOfNodes': 2, 'PendingModifiedValues': {'MasterUserPassword': '****'}, 'PreferredMaintenanceWindow': 'sun:10:30-sun:11:00', 'PubliclyAccessible': True, 'VpcSecurityGroups': []}], 'ResponseMetadata': {'RequestId': '837d45d6-64f0-11e2-b07c-f7fbdd006c67'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-events.xml', b'<DescribeEventsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeEventsResult>\n    <Events>\n      <Event>\n        <Message>Cluster security group securitygroup1 has been updated. Changes need to be applied to all clusters using this cluster security group.</Message>\n        <SourceType>cluster-security-group</SourceType>\n        <Date>2012-12-07T23:05:02.660Z</Date>\n        <SourceIdentifier>securitygroup1</SourceIdentifier>\n      </Event>\n    </Events>\n  </DescribeEventsResult>\n  <ResponseMetadata>\n    <RequestId>3eeb9efe-40c5-11e2-816a-1bba29fad1f5</RequestId>\n  </ResponseMetadata>\n</DescribeEventsResponse>\n', OperationModel(name=DescribeEvents), {'Events': [{'Date': '2012-12-07T23:05:02.660Z', 'Message': 'Cluster security group securitygroup1 has been updated. Changes need to be applied to all clusters using this cluster security group.', 'SourceIdentifier': 'securitygroup1', 'SourceType': 'cluster-security-group'}], 'ResponseMetadata': {'RequestId': '3eeb9efe-40c5-11e2-816a-1bba29fad1f5'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-orderable-cluster-options.xml', b'<DescribeOrderableClusterOptionsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeOrderableClusterOptionsResult>\n    <OrderableClusterOptions>\n      <OrderableClusterOption>\n        <ClusterType>multi-node</ClusterType>\n        <ClusterVersion>1.0</ClusterVersion>\n        <NodeType>dw.hs1.8xlarge</NodeType>\n        <AvailabilityZones>\n          <AvailabilityZone>\n            <Name>us-east-1a</Name>\n          </AvailabilityZone>\n          <AvailabilityZone>\n            <Name>us-east-1c</Name>\n          </AvailabilityZone>\n          <AvailabilityZone>\n            <Name>us-east-1d</Name>\n          </AvailabilityZone>\n        </AvailabilityZones>\n      </OrderableClusterOption>\n      <OrderableClusterOption>\n        <ClusterType>multi-node</ClusterType>\n        <ClusterVersion>1.0</ClusterVersion>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <AvailabilityZones>\n          <AvailabilityZone>\n            <Name>us-east-1a</Name>\n          </AvailabilityZone>\n          <AvailabilityZone>\n            <Name>us-east-1c</Name>\n          </AvailabilityZone>\n          <AvailabilityZone>\n            <Name>us-east-1d</Name>\n          </AvailabilityZone>\n        </AvailabilityZones>\n      </OrderableClusterOption>\n      <OrderableClusterOption>\n        <ClusterType>single-node</ClusterType>\n        <ClusterVersion>1.0</ClusterVersion>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <AvailabilityZones>\n          <AvailabilityZone>\n            <Name>us-east-1a</Name>\n          </AvailabilityZone>\n          <AvailabilityZone>\n            <Name>us-east-1c</Name>\n          </AvailabilityZone>\n          <AvailabilityZone>\n            <Name>us-east-1d</Name>\n          </AvailabilityZone>\n        </AvailabilityZones>\n      </OrderableClusterOption>\n    </OrderableClusterOptions>\n  </DescribeOrderableClusterOptionsResult>\n  <ResponseMetadata>\n    <RequestId>667a0dd4-9167-11e2-800a-8379c2537432</RequestId>\n  </ResponseMetadata>\n</DescribeOrderableClusterOptionsResponse>\n', OperationModel(name=DescribeOrderableClusterOptions), {'OrderableClusterOptions': [{'NodeType': 'dw.hs1.8xlarge', 'AvailabilityZones': [{'Name': 'us-east-1a'}, {'Name': 'us-east-1c'}, {'Name': 'us-east-1d'}], 'ClusterVersion': '1.0', 'ClusterType': 'multi-node'}, {'NodeType': 'dw.hs1.xlarge', 'AvailabilityZones': [{'Name': 'us-east-1a'}, {'Name': 'us-east-1c'}, {'Name': 'us-east-1d'}], 'ClusterVersion': '1.0', 'ClusterType': 'multi-node'}, {'NodeType': 'dw.hs1.xlarge', 'AvailabilityZones': [{'Name': 'us-east-1a'}, {'Name': 'us-east-1c'}, {'Name': 'us-east-1d'}], 'ClusterVersion': '1.0', 'ClusterType': 'single-node'}], 'ResponseMetadata': {'RequestId': '667a0dd4-9167-11e2-800a-8379c2537432'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-reserved-node-offerings.xml', b'<DescribeReservedNodeOfferingsResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeReservedNodeOfferingsResult>\n    <ReservedNodeOfferings>\n      <ReservedNodeOffering>\n        <OfferingType>Heavy Utilization</OfferingType>\n        <Duration>94608000</Duration>\n        <RecurringCharges>\n          <RecurringCharge>\n            <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n            <RecurringChargeAmount>0.912</RecurringChargeAmount>\n          </RecurringCharge>\n        </RecurringCharges>\n        <FixedPrice>24000.0</FixedPrice>\n        <ReservedNodeOfferingId>c48ab04c-bc77-4ce4-8ada-b10c15c7b8b3</ReservedNodeOfferingId>\n        <UsagePrice>0.0</UsagePrice>\n        <NodeType>dw.hs1.8xlarge</NodeType>\n      </ReservedNodeOffering>\n      <ReservedNodeOffering>\n        <OfferingType>Heavy Utilization</OfferingType>\n        <Duration>31536000</Duration>\n        <RecurringCharges>\n          <RecurringCharge>\n            <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n            <RecurringChargeAmount>1.72</RecurringChargeAmount>\n          </RecurringCharge>\n        </RecurringCharges>\n        <FixedPrice>20000.0</FixedPrice>\n        <ReservedNodeOfferingId>248e7b75-5f85-40dc-9d11-6f1e6c7cf9c2</ReservedNodeOfferingId>\n        <UsagePrice>0.0</UsagePrice>\n        <NodeType>dw.hs1.8xlarge</NodeType>\n      </ReservedNodeOffering>\n      <ReservedNodeOffering>\n        <OfferingType>Heavy Utilization</OfferingType>\n        <Duration>31536000</Duration>\n        <RecurringCharges>\n          <RecurringCharge>\n            <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n            <RecurringChargeAmount>0.215</RecurringChargeAmount>\n          </RecurringCharge>\n        </RecurringCharges>\n        <FixedPrice>2500.0</FixedPrice>\n        <ReservedNodeOfferingId>d586503b-7006-4cf5-888a-cf8f694e07bb</ReservedNodeOfferingId>\n        <UsagePrice>0.0</UsagePrice>\n        <NodeType>dw.hs1.xlarge</NodeType>\n      </ReservedNodeOffering>\n      <ReservedNodeOffering>\n        <OfferingType>Heavy Utilization</OfferingType>\n        <Duration>94608000</Duration>\n        <RecurringCharges>\n          <RecurringCharge>\n            <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n            <RecurringChargeAmount>0.114</RecurringChargeAmount>\n          </RecurringCharge>\n        </RecurringCharges>\n        <FixedPrice>3000.0</FixedPrice>\n        <ReservedNodeOfferingId>4b2293b4-64a6-4e4a-9042-cf617efa3b76</ReservedNodeOfferingId>\n        <UsagePrice>0.0</UsagePrice>\n        <NodeType>dw.hs1.xlarge</NodeType>\n      </ReservedNodeOffering>\n    </ReservedNodeOfferings>\n  </DescribeReservedNodeOfferingsResult>\n  <ResponseMetadata>\n    <RequestId>665aecb7-9167-11e2-a970-49138ad38474</RequestId>\n  </ResponseMetadata>\n</DescribeReservedNodeOfferingsResponse>\n', OperationModel(name=DescribeReservedNodeOfferings), {'ReservedNodeOfferings': [{'OfferingType': 'Heavy Utilization', 'FixedPrice': 24000.0, 'NodeType': 'dw.hs1.8xlarge', 'UsagePrice': 0.0, 'RecurringCharges': [{'RecurringChargeAmount': 0.912, 'RecurringChargeFrequency': 'Hourly'}], 'Duration': 94608000, 'ReservedNodeOfferingId': 'c48ab04c-bc77-4ce4-8ada-b10c15c7b8b3'}, {'OfferingType': 'Heavy Utilization', 'FixedPrice': 20000.0, 'NodeType': 'dw.hs1.8xlarge', 'UsagePrice': 0.0, 'RecurringCharges': [{'RecurringChargeAmount': 1.72, 'RecurringChargeFrequency': 'Hourly'}], 'Duration': 31536000, 'ReservedNodeOfferingId': '248e7b75-5f85-40dc-9d11-6f1e6c7cf9c2'}, {'OfferingType': 'Heavy Utilization', 'FixedPrice': 2500.0, 'NodeType': 'dw.hs1.xlarge', 'UsagePrice': 0.0, 'RecurringCharges': [{'RecurringChargeAmount': 0.215, 'RecurringChargeFrequency': 'Hourly'}], 'Duration': 31536000, 'ReservedNodeOfferingId': 'd586503b-7006-4cf5-888a-cf8f694e07bb'}, {'OfferingType': 'Heavy Utilization', 'FixedPrice': 3000.0, 'NodeType': 'dw.hs1.xlarge', 'UsagePrice': 0.0, 'RecurringCharges': [{'RecurringChargeAmount': 0.114, 'RecurringChargeFrequency': 'Hourly'}], 'Duration': 94608000, 'ReservedNodeOfferingId': '4b2293b4-64a6-4e4a-9042-cf617efa3b76'}], 'ResponseMetadata': {'RequestId': '665aecb7-9167-11e2-a970-49138ad38474'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-reserved-nodes.xml', b'<DescribeReservedNodesResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeReservedNodesResult>\n    <ReservedNodes>\n      <ReservedNode>\n        <StartTime>2013-01-22T18:46:48.600Z</StartTime>\n        <OfferingType>Medium Utilization</OfferingType>\n        <Duration>31536000</Duration>\n        <RecurringCharges/>\n        <FixedPrice>800.0</FixedPrice>\n        <UsagePrice>0.158</UsagePrice>\n        <State>payment-pending</State>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <NodeCount>1</NodeCount>\n        <ReservedNodeId>4357912c-9266-469d-beb0-0f1b775e1bc9</ReservedNodeId>\n      </ReservedNode>\n      <ReservedNode>\n        <StartTime>2013-01-22T20:09:16.630Z</StartTime>\n        <OfferingType>Heavy Utilization</OfferingType>\n        <Duration>94608000</Duration>\n        <RecurringCharges>\n          <RecurringCharge>\n            <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n            <RecurringChargeAmount>0.21</RecurringChargeAmount>\n          </RecurringCharge>\n        </RecurringCharges>\n        <FixedPrice>12452.0</FixedPrice>\n        <UsagePrice>0.0</UsagePrice>\n        <State>payment-pending</State>\n        <NodeType>dw.hs1.8xlarge</NodeType>\n        <NodeCount>2</NodeCount>\n        <ReservedNodeId>93bbbca2-e88c-4b8b-a600-b64eaabf18a3</ReservedNodeId>\n      </ReservedNode>\n      <ReservedNode>\n        <StartTime>2013-01-23T21:49:32.517Z</StartTime>\n        <OfferingType>Medium Utilization</OfferingType>\n        <Duration>31536000</Duration>\n        <RecurringCharges/>\n        <FixedPrice>800.0</FixedPrice>\n        <UsagePrice>0.158</UsagePrice>\n        <State>payment-pending</State>\n        <NodeType>dw.hs1.xlarge</NodeType>\n        <NodeCount>1</NodeCount>\n        <ReservedNodeId>bbcd9749-f2ea-4d01-9b1b-b576f618eb4e</ReservedNodeId>\n      </ReservedNode>\n    </ReservedNodes>\n  </DescribeReservedNodesResult>\n  <ResponseMetadata>\n    <RequestId>24dc90c8-672d-11e2-b2e1-8f41f0379151</RequestId>\n  </ResponseMetadata>\n</DescribeReservedNodesResponse>\n', OperationModel(name=DescribeReservedNodes), {'ReservedNodes': [{'Duration': 31536000, 'FixedPrice': 800.0, 'NodeCount': 1, 'NodeType': 'dw.hs1.xlarge', 'OfferingType': 'Medium Utilization', 'RecurringCharges': [], 'ReservedNodeId': '4357912c-9266-469d-beb0-0f1b775e1bc9', 'StartTime': '2013-01-22T18:46:48.600Z', 'State': 'payment-pending', 'UsagePrice': 0.158}, {'Duration': 94608000, 'FixedPrice': 12452.0, 'NodeCount': 2, 'NodeType': 'dw.hs1.8xlarge', 'OfferingType': 'Heavy Utilization', 'RecurringCharges': [{'RecurringChargeAmount': 0.21, 'RecurringChargeFrequency': 'Hourly'}], 'ReservedNodeId': '93bbbca2-e88c-4b8b-a600-b64eaabf18a3', 'StartTime': '2013-01-22T20:09:16.630Z', 'State': 'payment-pending', 'UsagePrice': 0.0}, {'Duration': 31536000, 'FixedPrice': 800.0, 'NodeCount': 1, 'NodeType': 'dw.hs1.xlarge', 'OfferingType': 'Medium Utilization', 'RecurringCharges': [], 'ReservedNodeId': 'bbcd9749-f2ea-4d01-9b1b-b576f618eb4e', 'StartTime': '2013-01-23T21:49:32.517Z', 'State': 'payment-pending', 'UsagePrice': 0.158}], 'ResponseMetadata': {'RequestId': '24dc90c8-672d-11e2-b2e1-8f41f0379151'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-describe-resize.xml', b'<DescribeResizeResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <DescribeResizeResult>\n    <TargetClusterType>multi-node</TargetClusterType>\n    <Status>SUCCEEDED</Status>\n    <TargetNodeType>db.m2.4xlarge</TargetNodeType>\n    <TargetNumberOfNodes>2</TargetNumberOfNodes>\n  </DescribeResizeResult>\n  <ResponseMetadata>\n    <RequestId>ff826bc5-a157-11e2-98d4-3b276285f8df</RequestId>\n  </ResponseMetadata>\n</DescribeResizeResponse>\n', OperationModel(name=DescribeResize), {'Status': 'SUCCEEDED', 'ResponseMetadata': {'RequestId': 'ff826bc5-a157-11e2-98d4-3b276285f8df'}, 'TargetClusterType': 'multi-node', 'TargetNodeType': 'db.m2.4xlarge', 'TargetNumberOfNodes': 2}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-modify-cluster-parameter-group.xml', b'<ModifyClusterParameterGroupResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <ModifyClusterParameterGroupResult>\n    <ParameterGroupStatus>Your parameter group has been updated but changes won\'t get applied until you reboot the associated Clusters.</ParameterGroupStatus>\n    <ParameterGroupName>parametergroup1</ParameterGroupName>\n  </ModifyClusterParameterGroupResult>\n  <ResponseMetadata>\n    <RequestId>86e64043-40de-11e2-8a25-eb010998df4e</RequestId>\n  </ResponseMetadata>\n</ModifyClusterParameterGroupResponse>\n', OperationModel(name=ModifyClusterParameterGroup), {'ParameterGroupStatus': "Your parameter group has been updated but changes won't get applied until you reboot the associated Clusters.", 'ParameterGroupName': 'parametergroup1', 'ResponseMetadata': {'RequestId': '86e64043-40de-11e2-8a25-eb010998df4e'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-purchase-reserved-node-offering.xml', b'<PurchaseReservedNodeOfferingResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <PurchaseReservedNodeOfferingResult>\n    <ReservedNode>\n      <StartTime>2013-01-18T21:42:44.402Z</StartTime>\n      <OfferingType>Heavy Utilization</OfferingType>\n      <Duration>94608000</Duration>\n      <RecurringCharges>\n        <RecurringCharge>\n          <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n          <RecurringChargeAmount>0.21</RecurringChargeAmount>\n        </RecurringCharge>\n      </RecurringCharges>\n      <FixedPrice>12452.0</FixedPrice>\n      <UsagePrice>0.0</UsagePrice>\n      <State>payment-pending</State>\n      <NodeType>dw.hs1.8xlarge</NodeType>\n      <NodeCount>2</NodeCount>\n      <ReservedNodeId>1ba8e2e3-dacf-48d9-841f-cc675182a8a6</ReservedNodeId>\n    </ReservedNode>\n  </PurchaseReservedNodeOfferingResult>\n  <ResponseMetadata>\n    <RequestId>fcb117cc-61b7-11e2-b6e9-87e586e4ca38</RequestId>\n  </ResponseMetadata>\n</PurchaseReservedNodeOfferingResponse>\n', OperationModel(name=PurchaseReservedNodeOffering), {'ReservedNode': {'OfferingType': 'Heavy Utilization', 'FixedPrice': 12452.0, 'NodeType': 'dw.hs1.8xlarge', 'ReservedNodeId': '1ba8e2e3-dacf-48d9-841f-cc675182a8a6', 'UsagePrice': 0.0, 'RecurringCharges': [{'RecurringChargeAmount': 0.21, 'RecurringChargeFrequency': 'Hourly'}], 'NodeCount': 2, 'State': 'payment-pending', 'StartTime': '2013-01-18T21:42:44.402Z', 'Duration': 94608000}, 'ResponseMetadata': {'RequestId': 'fcb117cc-61b7-11e2-b6e9-87e586e4ca38'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-reboot-cluster.xml', b'<RebootClusterResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <RebootClusterResult>\n    <Cluster>\n      <PendingModifiedValues/>\n      <ClusterVersion>1.0</ClusterVersion>\n      <VpcSecurityGroups/>\n      <Endpoint>\n        <Port>5439</Port>\n        <Address>examplecluster.cobaosmlqshn.us-east-1.redshift.amazonaws.com</Address>\n      </Endpoint>\n      <ClusterStatus>rebooting</ClusterStatus>\n      <NumberOfNodes>2</NumberOfNodes>\n      <AutomatedSnapshotRetentionPeriod>1</AutomatedSnapshotRetentionPeriod>\n      <PubliclyAccessible>true</PubliclyAccessible>\n      <Encrypted>false</Encrypted>\n      <DBName>dev</DBName>\n      <PreferredMaintenanceWindow>sun:06:30-sun:07:00</PreferredMaintenanceWindow>\n      <ClusterParameterGroups>\n        <ClusterParameterGroup>\n          <ParameterApplyStatus>in-sync</ParameterApplyStatus>\n          <ParameterGroupName>default.redshift-1.0</ParameterGroupName>\n        </ClusterParameterGroup>\n      </ClusterParameterGroups>\n      <ClusterCreateTime>2013-01-22T19:23:59.368Z</ClusterCreateTime>\n      <ClusterSecurityGroups>\n        <ClusterSecurityGroup>\n          <Status>active</Status>\n          <ClusterSecurityGroupName>default</ClusterSecurityGroupName>\n        </ClusterSecurityGroup>\n      </ClusterSecurityGroups>\n      <AvailabilityZone>us-east-1c</AvailabilityZone>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <ClusterIdentifier>examplecluster</ClusterIdentifier>\n      <AllowVersionUpgrade>true</AllowVersionUpgrade>\n      <MasterUsername>adminuser</MasterUsername>\n    </Cluster>\n  </RebootClusterResult>\n  <ResponseMetadata>\n    <RequestId>5edee79e-6503-11e2-9e70-918437dd236d</RequestId>\n  </ResponseMetadata>\n</RebootClusterResponse>\n', OperationModel(name=RebootCluster), {'Cluster': {'NodeType': 'dw.hs1.xlarge', 'Endpoint': {'Port': 5439, 'Address': 'examplecluster.cobaosmlqshn.us-east-1.redshift.amazonaws.com'}, 'ClusterVersion': '1.0', 'PubliclyAccessible': True, 'MasterUsername': 'adminuser', 'Encrypted': False, 'ClusterParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'ParameterGroupName': 'default.redshift-1.0'}], 'ClusterSecurityGroups': [{'Status': 'active', 'ClusterSecurityGroupName': 'default'}], 'AllowVersionUpgrade': True, 'VpcSecurityGroups': [], 'AvailabilityZone': 'us-east-1c', 'ClusterCreateTime': '2013-01-22T19:23:59.368Z', 'PreferredMaintenanceWindow': 'sun:06:30-sun:07:00', 'AutomatedSnapshotRetentionPeriod': 1, 'ClusterStatus': 'rebooting', 'ClusterIdentifier': 'examplecluster', 'DBName': 'dev', 'NumberOfNodes': 2, 'PendingModifiedValues': {}}, 'ResponseMetadata': {'RequestId': '5edee79e-6503-11e2-9e70-918437dd236d'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-reset-cluster-parameter-group.xml', b'<ResetClusterParameterGroupResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <ResetClusterParameterGroupResult>\n    <ParameterGroupStatus>Your parameter group has been updated but changes won\'t get applied until you reboot the associated Clusters.</ParameterGroupStatus>\n    <ParameterGroupName>parametergroup1</ParameterGroupName>\n  </ResetClusterParameterGroupResult>\n  <ResponseMetadata>\n    <RequestId>625d23c1-40dc-11e2-8a25-eb010998df4e</RequestId>\n  </ResponseMetadata>\n</ResetClusterParameterGroupResponse>\n', OperationModel(name=ResetClusterParameterGroup), {'ParameterGroupStatus': "Your parameter group has been updated but changes won't get applied until you reboot the associated Clusters.", 'ParameterGroupName': 'parametergroup1', 'ResponseMetadata': {'RequestId': '625d23c1-40dc-11e2-8a25-eb010998df4e'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-restore-from-cluster-snapshot.xml', b'<RestoreFromClusterSnapshotResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <RestoreFromClusterSnapshotResult>\n    <Cluster>\n      <PendingModifiedValues/>\n      <ClusterVersion>1.0</ClusterVersion>\n      <VpcSecurityGroups/>\n      <ClusterStatus>creating</ClusterStatus>\n      <NumberOfNodes>2</NumberOfNodes>\n      <AutomatedSnapshotRetentionPeriod>1</AutomatedSnapshotRetentionPeriod>\n      <PubliclyAccessible>true</PubliclyAccessible>\n      <Encrypted>false</Encrypted>\n      <DBName>dev</DBName>\n      <PreferredMaintenanceWindow>sun:06:30-sun:07:00</PreferredMaintenanceWindow>\n      <ClusterParameterGroups>\n        <ClusterParameterGroup>\n          <ParameterApplyStatus>in-sync</ParameterApplyStatus>\n          <ParameterGroupName>default.redshift-1.0</ParameterGroupName>\n        </ClusterParameterGroup>\n      </ClusterParameterGroups>\n      <ClusterSecurityGroups>\n        <ClusterSecurityGroup>\n          <Status>active</Status>\n          <ClusterSecurityGroupName>default</ClusterSecurityGroupName>\n        </ClusterSecurityGroup>\n      </ClusterSecurityGroups>\n      <NodeType>dw.hs1.xlarge</NodeType>\n      <ClusterIdentifier>examplecluster-restored</ClusterIdentifier>\n      <AllowVersionUpgrade>true</AllowVersionUpgrade>\n      <MasterUsername>adminuser</MasterUsername>\n    </Cluster>\n  </RestoreFromClusterSnapshotResult>\n  <ResponseMetadata>\n    <RequestId>52a9aee8-6505-11e2-bec0-17624ad140dd</RequestId>\n  </ResponseMetadata>\n</RestoreFromClusterSnapshotResponse>\n', OperationModel(name=RestoreFromClusterSnapshot), {'Cluster': {'NodeType': 'dw.hs1.xlarge', 'ClusterVersion': '1.0', 'PubliclyAccessible': True, 'MasterUsername': 'adminuser', 'Encrypted': False, 'ClusterParameterGroups': [{'ParameterApplyStatus': 'in-sync', 'ParameterGroupName': 'default.redshift-1.0'}], 'ClusterSecurityGroups': [{'Status': 'active', 'ClusterSecurityGroupName': 'default'}], 'AllowVersionUpgrade': True, 'VpcSecurityGroups': [], 'PreferredMaintenanceWindow': 'sun:06:30-sun:07:00', 'AutomatedSnapshotRetentionPeriod': 1, 'ClusterStatus': 'creating', 'ClusterIdentifier': 'examplecluster-restored', 'DBName': 'dev', 'NumberOfNodes': 2, 'PendingModifiedValues': {}}, 'ResponseMetadata': {'RequestId': '52a9aee8-6505-11e2-bec0-17624ad140dd'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/redshift-revoke-cluster-security-group-ingress.xml', b'<RevokeClusterSecurityGroupIngressResponse xmlns="http://redshift.amazonaws.com/doc/2012-12-01/">\n  <RevokeClusterSecurityGroupIngressResult>\n    <ClusterSecurityGroup>\n      <EC2SecurityGroups/>\n      <IPRanges/>\n      <Description>my security group</Description>\n      <ClusterSecurityGroupName>securitygroup1</ClusterSecurityGroupName>\n    </ClusterSecurityGroup>\n  </RevokeClusterSecurityGroupIngressResult>\n  <ResponseMetadata>\n    <RequestId>d8eff363-6502-11e2-a8da-655adc216806</RequestId>\n  </ResponseMetadata>\n</RevokeClusterSecurityGroupIngressResponse>\n', OperationModel(name=RevokeClusterSecurityGroupIngress), {'ClusterSecurityGroup': {'Description': 'my security group', 'ClusterSecurityGroupName': 'securitygroup1', 'EC2SecurityGroups': [], 'IPRanges': []}, 'ResponseMetadata': {'RequestId': 'd8eff363-6502-11e2-a8da-655adc216806'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-db-engine-versions.xml', b'<DescribeDBEngineVersionsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeDBEngineVersionsResult>\n    <DBEngineVersions>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.1</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.1.57</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.1.57</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.1</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.1.61</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.1.61</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.1</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.1.62</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.1.62</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.1</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.1.63</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.1.63</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.5.12</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.5.12</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.5.20</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.5.20</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.5.23</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.5.23</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.5.25a</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.5.25a</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.5.27</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.5.27</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Engine>mysql</Engine>\n        <DBEngineDescription>MySQL Community Edition</DBEngineDescription>\n        <EngineVersion>5.5.8</EngineVersion>\n        <DBEngineVersionDescription>MySQL 5.5.8</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>oracle-ee-11.2</DBParameterGroupFamily>\n        <Engine>oracle-ee</Engine>\n        <DBEngineDescription>Oracle Database Enterprise Edition</DBEngineDescription>\n        <DefaultCharacterSet>\n          <CharacterSetName>AL32UTF8</CharacterSetName>\n          <CharacterSetDescription>Unicode 5.0 UTF-8 Universal character set</CharacterSetDescription>\n        </DefaultCharacterSet>\n        <EngineVersion>11.2.0.2.v3</EngineVersion>\n        <DBEngineVersionDescription>Oracle 11.2.0.2.v3</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>oracle-ee-11.2</DBParameterGroupFamily>\n        <Engine>oracle-ee</Engine>\n        <DBEngineDescription>Oracle Database Enterprise Edition</DBEngineDescription>\n        <DefaultCharacterSet>\n          <CharacterSetName>AL32UTF8</CharacterSetName>\n          <CharacterSetDescription>Unicode 5.0 UTF-8 Universal character set</CharacterSetDescription>\n        </DefaultCharacterSet>\n        <EngineVersion>11.2.0.2.v4</EngineVersion>\n        <DBEngineVersionDescription>Oracle 11.2.0.2.v4</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>oracle-ee-11.2</DBParameterGroupFamily>\n        <Engine>oracle-ee</Engine>\n        <DBEngineDescription>Oracle Database Enterprise Edition</DBEngineDescription>\n        <DefaultCharacterSet>\n          <CharacterSetName>AL32UTF8</CharacterSetName>\n          <CharacterSetDescription>Unicode 5.0 UTF-8 Universal character set</CharacterSetDescription>\n        </DefaultCharacterSet>\n        <EngineVersion>11.2.0.2.v5</EngineVersion>\n        <DBEngineVersionDescription>Oracle 11.2.0.2.v5</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>oracle-ee-11.2</DBParameterGroupFamily>\n        <Engine>oracle-ee</Engine>\n        <DBEngineDescription>Oracle Database Enterprise Edition</DBEngineDescription>\n        <DefaultCharacterSet>\n          <CharacterSetName>AL32UTF8</CharacterSetName>\n          <CharacterSetDescription>Unicode 5.0 UTF-8 Universal character set</CharacterSetDescription>\n        </DefaultCharacterSet>\n        <EngineVersion>11.2.0.2.v6</EngineVersion>\n        <DBEngineVersionDescription>Oracle 11.2.0.2.v6</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>sqlserver-ex-10.5</DBParameterGroupFamily>\n        <Engine>sqlserver-ex</Engine>\n        <DBEngineDescription>Microsoft SQL Server Express Edition</DBEngineDescription>\n        <EngineVersion>10.50.2789.0.v1</EngineVersion>\n        <DBEngineVersionDescription>SQL Server 2008 R2 10.50.2789.0.v1</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>sqlserver-ex-11.0</DBParameterGroupFamily>\n        <Engine>sqlserver-ex</Engine>\n        <DBEngineDescription>Microsoft SQL Server Express Edition</DBEngineDescription>\n        <EngineVersion>11.00.2100.60.v1</EngineVersion>\n        <DBEngineVersionDescription>SQL Server 2012 11.00.2100.60.v1</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>sqlserver-se-10.5</DBParameterGroupFamily>\n        <Engine>sqlserver-se</Engine>\n        <DBEngineDescription>Microsoft SQL Server Standard Edition</DBEngineDescription>\n        <EngineVersion>10.50.2789.0.v1</EngineVersion>\n        <DBEngineVersionDescription>SQL Server 2008 R2 10.50.2789.0.v1</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>sqlserver-se-11.0</DBParameterGroupFamily>\n        <Engine>sqlserver-se</Engine>\n        <DBEngineDescription>Microsoft SQL Server Standard Edition</DBEngineDescription>\n        <EngineVersion>11.00.2100.60.v1</EngineVersion>\n        <DBEngineVersionDescription>SQL Server 2012 11.00.2100.60.v1</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>sqlserver-web-10.5</DBParameterGroupFamily>\n        <Engine>sqlserver-web</Engine>\n        <DBEngineDescription>Microsoft SQL Server Web Edition</DBEngineDescription>\n        <EngineVersion>10.50.2789.0.v1</EngineVersion>\n        <DBEngineVersionDescription>SQL Server 2008 R2 10.50.2789.0.v1</DBEngineVersionDescription>\n      </DBEngineVersion>\n      <DBEngineVersion>\n        <DBParameterGroupFamily>sqlserver-web-11.0</DBParameterGroupFamily>\n        <Engine>sqlserver-web</Engine>\n        <DBEngineDescription>Microsoft SQL Server Web Edition</DBEngineDescription>\n        <EngineVersion>11.00.2100.60.v1</EngineVersion>\n        <DBEngineVersionDescription>SQL Server 2012 11.00.2100.60.v1</DBEngineVersionDescription>\n      </DBEngineVersion>\n    </DBEngineVersions>\n  </DescribeDBEngineVersionsResult>\n  <ResponseMetadata>\n    <RequestId>aa3623ef-9167-11e2-b6fb-e599bc501f26</RequestId>\n  </ResponseMetadata>\n</DescribeDBEngineVersionsResponse>\n', OperationModel(name=DescribeDBEngineVersions), {'ResponseMetadata': {'RequestId': 'aa3623ef-9167-11e2-b6fb-e599bc501f26'}, 'DBEngineVersions': [{'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.1.57', 'DBParameterGroupFamily': 'mysql5.1', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.1.57'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.1.61', 'DBParameterGroupFamily': 'mysql5.1', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.1.61'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.1.62', 'DBParameterGroupFamily': 'mysql5.1', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.1.62'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.1.63', 'DBParameterGroupFamily': 'mysql5.1', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.1.63'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.5.12', 'DBParameterGroupFamily': 'mysql5.5', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.5.12'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.5.20', 'DBParameterGroupFamily': 'mysql5.5', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.5.20'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.5.23', 'DBParameterGroupFamily': 'mysql5.5', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.5.23'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.5.25a', 'DBParameterGroupFamily': 'mysql5.5', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.5.25a'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.5.27', 'DBParameterGroupFamily': 'mysql5.5', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.5.27'}, {'Engine': 'mysql', 'DBEngineVersionDescription': 'MySQL 5.5.8', 'DBParameterGroupFamily': 'mysql5.5', 'DBEngineDescription': 'MySQL Community Edition', 'EngineVersion': '5.5.8'}, {'Engine': 'oracle-ee', 'DBParameterGroupFamily': 'oracle-ee-11.2', 'DefaultCharacterSet': {'CharacterSetName': 'AL32UTF8', 'CharacterSetDescription': 'Unicode 5.0 UTF-8 Universal character set'}, 'DBEngineDescription': 'Oracle Database Enterprise Edition', 'EngineVersion': '11.2.0.2.v3', 'DBEngineVersionDescription': 'Oracle 11.2.0.2.v3'}, {'Engine': 'oracle-ee', 'DBParameterGroupFamily': 'oracle-ee-11.2', 'DefaultCharacterSet': {'CharacterSetName': 'AL32UTF8', 'CharacterSetDescription': 'Unicode 5.0 UTF-8 Universal character set'}, 'DBEngineDescription': 'Oracle Database Enterprise Edition', 'EngineVersion': '11.2.0.2.v4', 'DBEngineVersionDescription': 'Oracle 11.2.0.2.v4'}, {'Engine': 'oracle-ee', 'DBParameterGroupFamily': 'oracle-ee-11.2', 'DefaultCharacterSet': {'CharacterSetName': 'AL32UTF8', 'CharacterSetDescription': 'Unicode 5.0 UTF-8 Universal character set'}, 'DBEngineDescription': 'Oracle Database Enterprise Edition', 'EngineVersion': '11.2.0.2.v5', 'DBEngineVersionDescription': 'Oracle 11.2.0.2.v5'}, {'Engine': 'oracle-ee', 'DBParameterGroupFamily': 'oracle-ee-11.2', 'DefaultCharacterSet': {'CharacterSetName': 'AL32UTF8', 'CharacterSetDescription': 'Unicode 5.0 UTF-8 Universal character set'}, 'DBEngineDescription': 'Oracle Database Enterprise Edition', 'EngineVersion': '11.2.0.2.v6', 'DBEngineVersionDescription': 'Oracle 11.2.0.2.v6'}, {'Engine': 'sqlserver-ex', 'DBEngineVersionDescription': 'SQL Server 2008 R2 10.50.2789.0.v1', 'DBParameterGroupFamily': 'sqlserver-ex-10.5', 'DBEngineDescription': 'Microsoft SQL Server Express Edition', 'EngineVersion': '10.50.2789.0.v1'}, {'Engine': 'sqlserver-ex', 'DBEngineVersionDescription': 'SQL Server 2012 11.00.2100.60.v1', 'DBParameterGroupFamily': 'sqlserver-ex-11.0', 'DBEngineDescription': 'Microsoft SQL Server Express Edition', 'EngineVersion': '11.00.2100.60.v1'}, {'Engine': 'sqlserver-se', 'DBEngineVersionDescription': 'SQL Server 2008 R2 10.50.2789.0.v1', 'DBParameterGroupFamily': 'sqlserver-se-10.5', 'DBEngineDescription': 'Microsoft SQL Server Standard Edition', 'EngineVersion': '10.50.2789.0.v1'}, {'Engine': 'sqlserver-se', 'DBEngineVersionDescription': 'SQL Server 2012 11.00.2100.60.v1', 'DBParameterGroupFamily': 'sqlserver-se-11.0', 'DBEngineDescription': 'Microsoft SQL Server Standard Edition', 'EngineVersion': '11.00.2100.60.v1'}, {'Engine': 'sqlserver-web', 'DBEngineVersionDescription': 'SQL Server 2008 R2 10.50.2789.0.v1', 'DBParameterGroupFamily': 'sqlserver-web-10.5', 'DBEngineDescription': 'Microsoft SQL Server Web Edition', 'EngineVersion': '10.50.2789.0.v1'}, {'Engine': 'sqlserver-web', 'DBEngineVersionDescription': 'SQL Server 2012 11.00.2100.60.v1', 'DBParameterGroupFamily': 'sqlserver-web-11.0', 'DBEngineDescription': 'Microsoft SQL Server Web Edition', 'EngineVersion': '11.00.2100.60.v1'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-db-instances.xml', b'<DescribeDBInstancesResponse xmlns="http://rds.amazonaws.com/doc/2013-05-15/">\n  <DescribeDBInstancesResult>\n    <DBInstances>\n      <DBInstance>\n        <ReadReplicaDBInstanceIdentifiers/>\n        <LatestRestorableTime>2011-05-23T06:50:00Z</LatestRestorableTime>\n        <Engine>mysql</Engine>\n        <PendingModifiedValues/>\n        <BackupRetentionPeriod>1</BackupRetentionPeriod>\n        <MultiAZ>false</MultiAZ>\n        <LicenseModel>general-public-license</LicenseModel>\n        <DBInstanceStatus>available</DBInstanceStatus>\n        <EngineVersion>5.1.50</EngineVersion>\n        <Endpoint>\n          <Port>3306</Port>\n          <Address>simcoprod01.cu7u2t4uz396.us-east-1.rds.amazonaws.com</Address>\n        </Endpoint>\n        <DBInstanceIdentifier>simcoprod01</DBInstanceIdentifier>\n        <DBParameterGroups>\n          <DBParameterGroup>\n            <ParameterApplyStatus>in-sync</ParameterApplyStatus>\n            <DBParameterGroupName>default.mysql5.1</DBParameterGroupName>\n          </DBParameterGroup>\n        </DBParameterGroups>\n        <DBSecurityGroups>\n          <DBSecurityGroup>\n            <Status>active</Status>\n            <DBSecurityGroupName>default</DBSecurityGroupName>\n          </DBSecurityGroup>\n        </DBSecurityGroups>\n        <PreferredBackupWindow>00:00-00:30</PreferredBackupWindow>\n        <AutoMinorVersionUpgrade>true</AutoMinorVersionUpgrade>\n        <PreferredMaintenanceWindow>sat:07:30-sat:08:00</PreferredMaintenanceWindow>\n        <AvailabilityZone>us-east-1a</AvailabilityZone>\n        <InstanceCreateTime>2011-05-23T06:06:43.110Z</InstanceCreateTime>\n        <AllocatedStorage>10</AllocatedStorage>\n        <OptionGroupMemberships>\n          <OptionGroupMembership>\n            <OptionGroupName>default.mysql5.1</OptionGroupName>\n            <Status>in-sync</Status>\n          </OptionGroupMembership>\n        </OptionGroupMemberships>\n        <DBInstanceClass>db.m1.large</DBInstanceClass>\n        <MasterUsername>master</MasterUsername>\n      </DBInstance>\n    </DBInstances>\n  </DescribeDBInstancesResult>\n  <ResponseMetadata>\n    <RequestId>9135fff3-8509-11e0-bd9b-a7b1ece36d51</RequestId>\n  </ResponseMetadata>\n</DescribeDBInstancesResponse>\n', OperationModel(name=DescribeDBInstances), {'DBInstances': [{'Endpoint': {'Port': 3306, 'Address': 'simcoprod01.cu7u2t4uz396.us-east-1.rds.amazonaws.com'}, 'OptionGroupMemberships': [{'Status': 'in-sync', 'OptionGroupName': 'default.mysql5.1'}], 'DBInstanceStatus': 'available', 'MasterUsername': 'master', 'LicenseModel': 'general-public-license', 'LatestRestorableTime': '2011-05-23T06:50:00Z', 'InstanceCreateTime': '2011-05-23T06:06:43.110Z', 'EngineVersion': '5.1.50', 'BackupRetentionPeriod': 1, 'PendingModifiedValues': {}, 'Engine': 'mysql', 'MultiAZ': False, 'AvailabilityZone': 'us-east-1a', 'DBSecurityGroups': [{'Status': 'active', 'DBSecurityGroupName': 'default'}], 'DBParameterGroups': [{'DBParameterGroupName': 'default.mysql5.1', 'ParameterApplyStatus': 'in-sync'}], 'AutoMinorVersionUpgrade': True, 'PreferredBackupWindow': '00:00-00:30', 'DBInstanceIdentifier': 'simcoprod01', 'AllocatedStorage': 10, 'DBInstanceClass': 'db.m1.large', 'PreferredMaintenanceWindow': 'sat:07:30-sat:08:00', 'ReadReplicaDBInstanceIdentifiers': []}], 'ResponseMetadata': {'RequestId': '9135fff3-8509-11e0-bd9b-a7b1ece36d51'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-db-parameter-groups.xml', b'<DescribeDBParameterGroupsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeDBParameterGroupsResult>\n    <DBParameterGroups>\n      <DBParameterGroup>\n        <DBParameterGroupFamily>mysql5.5</DBParameterGroupFamily>\n        <Description>Default parameter group for mysql5.5</Description>\n        <DBParameterGroupName>default.mysql5.5</DBParameterGroupName>\n      </DBParameterGroup>\n    </DBParameterGroups>\n  </DescribeDBParameterGroupsResult>\n  <ResponseMetadata>\n    <RequestId>aa23ad55-9167-11e2-b691-fdba749921d2</RequestId>\n  </ResponseMetadata>\n</DescribeDBParameterGroupsResponse>\n', OperationModel(name=DescribeDBParameterGroups), {'ResponseMetadata': {'RequestId': 'aa23ad55-9167-11e2-b691-fdba749921d2'}, 'DBParameterGroups': [{'DBParameterGroupName': 'default.mysql5.5', 'DBParameterGroupFamily': 'mysql5.5', 'Description': 'Default parameter group for mysql5.5'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-db-security-groups.xml', b'<DescribeDBSecurityGroupsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeDBSecurityGroupsResult>\n    <DBSecurityGroups>\n      <DBSecurityGroup>\n        <EC2SecurityGroups/>\n        <DBSecurityGroupDescription>default</DBSecurityGroupDescription>\n        <IPRanges/>\n        <OwnerId>123456789012</OwnerId>\n        <DBSecurityGroupName>default</DBSecurityGroupName>\n      </DBSecurityGroup>\n      <DBSecurityGroup>\n        <EC2SecurityGroups/>\n        <DBSecurityGroupDescription>My first security group</DBSecurityGroupDescription>\n        <IPRanges/>\n        <OwnerId>123456789012</OwnerId>\n        <DBSecurityGroupName>testgroup1</DBSecurityGroupName>\n      </DBSecurityGroup>\n      <DBSecurityGroup>\n        <EC2SecurityGroups/>\n        <DBSecurityGroupDescription>My second security group</DBSecurityGroupDescription>\n        <IPRanges/>\n        <OwnerId>123456789012</OwnerId>\n        <DBSecurityGroupName>testgroup2</DBSecurityGroupName>\n      </DBSecurityGroup>\n    </DBSecurityGroups>\n  </DescribeDBSecurityGroupsResult>\n  <ResponseMetadata>\n    <RequestId>aaf3813f-9167-11e2-a2d0-e302f09d52ea</RequestId>\n  </ResponseMetadata>\n</DescribeDBSecurityGroupsResponse>\n', OperationModel(name=DescribeDBSecurityGroups), {'DBSecurityGroups': [{'IPRanges': [], 'OwnerId': '123456789012', 'DBSecurityGroupDescription': 'default', 'EC2SecurityGroups': [], 'DBSecurityGroupName': 'default'}, {'IPRanges': [], 'OwnerId': '123456789012', 'DBSecurityGroupDescription': 'My first security group', 'EC2SecurityGroups': [], 'DBSecurityGroupName': 'testgroup1'}, {'IPRanges': [], 'OwnerId': '123456789012', 'DBSecurityGroupDescription': 'My second security group', 'EC2SecurityGroups': [], 'DBSecurityGroupName': 'testgroup2'}], 'ResponseMetadata': {'RequestId': 'aaf3813f-9167-11e2-a2d0-e302f09d52ea'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-db-snapshots.xml', b'<DescribeDBSnapshotsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeDBSnapshotsResult>\n    <DBSnapshots>\n      <DBSnapshot>\n        <Port>3306</Port>\n        <SnapshotCreateTime>2011-05-23T06:29:03.483Z</SnapshotCreateTime>\n        <Engine>mysql</Engine>\n        <Status>available</Status>\n        <AvailabilityZone>us-east-1a</AvailabilityZone>\n        <LicenseModel>general-public-license</LicenseModel>\n        <InstanceCreateTime>2011-05-23T06:06:43.110Z</InstanceCreateTime>\n        <AllocatedStorage>10</AllocatedStorage>\n        <DBInstanceIdentifier>simcoprod01</DBInstanceIdentifier>\n        <EngineVersion>5.1.50</EngineVersion>\n        <DBSnapshotIdentifier>mydbsnapshot</DBSnapshotIdentifier>\n        <SnapshotType>manual</SnapshotType>\n        <MasterUsername>master</MasterUsername>\n        <OptionGroupName>myoptiongroupname</OptionGroupName>\n      </DBSnapshot>\n      <DBSnapshot>\n        <Port>3306</Port>\n        <SnapshotCreateTime>2011-03-11T07:20:24.082Z</SnapshotCreateTime>\n        <Engine>mysql</Engine>\n        <Status>available</Status>\n        <AvailabilityZone>us-east-1a</AvailabilityZone>\n        <LicenseModel>general-public-license</LicenseModel>\n        <InstanceCreateTime>2010-08-04T23:27:36.420Z</InstanceCreateTime>\n        <AllocatedStorage>50</AllocatedStorage>\n        <DBInstanceIdentifier>mydbinstance</DBInstanceIdentifier>\n        <EngineVersion>5.1.49</EngineVersion>\n        <DBSnapshotIdentifier>mysnapshot1</DBSnapshotIdentifier>\n        <SnapshotType>manual</SnapshotType>\n        <MasterUsername>sa</MasterUsername>\n        <OptionGroupName>myoptiongroupname</OptionGroupName>\n      </DBSnapshot>\n      <DBSnapshot>\n        <Port>3306</Port>\n        <SnapshotCreateTime>2012-04-02T00:01:24.082Z</SnapshotCreateTime>\n        <Engine>mysql</Engine>\n        <Status>available</Status>\n        <AvailabilityZone>us-east-1d</AvailabilityZone>\n        <LicenseModel>general-public-license</LicenseModel>\n        <InstanceCreateTime>2010-07-16T00:06:59.107Z</InstanceCreateTime>\n        <AllocatedStorage>60</AllocatedStorage>\n        <DBInstanceIdentifier>simcoprod01</DBInstanceIdentifier>\n        <EngineVersion>5.1.47</EngineVersion>\n        <DBSnapshotIdentifier>rds:simcoprod01-2012-04-02-00-01</DBSnapshotIdentifier>\n        <SnapshotType>automated</SnapshotType>\n        <MasterUsername>master</MasterUsername>\n        <OptionGroupName>myoptiongroupname</OptionGroupName>\n      </DBSnapshot>\n    </DBSnapshots>\n  </DescribeDBSnapshotsResult>\n  <ResponseMetadata>\n    <RequestId>c4191173-8506-11e0-90aa-eb648410240d</RequestId>\n  </ResponseMetadata>\n</DescribeDBSnapshotsResponse>\n', OperationModel(name=DescribeDBSnapshots), {'ResponseMetadata': {'RequestId': 'c4191173-8506-11e0-90aa-eb648410240d'}, 'DBSnapshots': [{'Engine': 'mysql', 'SnapshotCreateTime': '2011-05-23T06:29:03.483Z', 'AvailabilityZone': 'us-east-1a', 'MasterUsername': 'master', 'LicenseModel': 'general-public-license', 'Status': 'available', 'DBSnapshotIdentifier': 'mydbsnapshot', 'InstanceCreateTime': '2011-05-23T06:06:43.110Z', 'OptionGroupName': 'myoptiongroupname', 'AllocatedStorage': 10, 'EngineVersion': '5.1.50', 'SnapshotType': 'manual', 'Port': 3306, 'DBInstanceIdentifier': 'simcoprod01'}, {'Engine': 'mysql', 'SnapshotCreateTime': '2011-03-11T07:20:24.082Z', 'AvailabilityZone': 'us-east-1a', 'MasterUsername': 'sa', 'LicenseModel': 'general-public-license', 'Status': 'available', 'DBSnapshotIdentifier': 'mysnapshot1', 'InstanceCreateTime': '2010-08-04T23:27:36.420Z', 'OptionGroupName': 'myoptiongroupname', 'AllocatedStorage': 50, 'EngineVersion': '5.1.49', 'SnapshotType': 'manual', 'Port': 3306, 'DBInstanceIdentifier': 'mydbinstance'}, {'Engine': 'mysql', 'SnapshotCreateTime': '2012-04-02T00:01:24.082Z', 'AvailabilityZone': 'us-east-1d', 'MasterUsername': 'master', 'LicenseModel': 'general-public-license', 'Status': 'available', 'DBSnapshotIdentifier': 'rds:simcoprod01-2012-04-02-00-01', 'InstanceCreateTime': '2010-07-16T00:06:59.107Z', 'OptionGroupName': 'myoptiongroupname', 'AllocatedStorage': 60, 'EngineVersion': '5.1.47', 'SnapshotType': 'automated', 'Port': 3306, 'DBInstanceIdentifier': 'simcoprod01'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-db-subnet-groups.xml', b'<DescribeDBSubnetGroupsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n        <DescribeDBSubnetGroupsResult>\n            <DBSubnetGroups>\n                <DBSubnetGroup>\n                    <VpcId>990524496922</VpcId>\n                    <SubnetGroupStatus>Complete</SubnetGroupStatus>\n                    <DBSubnetGroupDescription>description</DBSubnetGroupDescription>\n                    <DBSubnetGroupName>subnet_grp1</DBSubnetGroupName>\n                    <Subnets>\n                        <Subnet>\n                            <SubnetStatus>Active</SubnetStatus>\n                            <SubnetIdentifier>subnet-7c5b4115</SubnetIdentifier>\n                            <SubnetAvailabilityZone>\n                                <Name>us-east-1c</Name>\n                            </SubnetAvailabilityZone>\n                        </Subnet>\n                        <Subnet>\n                            <SubnetStatus>Active</SubnetStatus>\n                            <SubnetIdentifier>subnet-7b5b4112</SubnetIdentifier>\n                            <SubnetAvailabilityZone>\n                                <Name>us-east-1b</Name>\n                            </SubnetAvailabilityZone>\n                        </Subnet>\n                        <Subnet>\n                            <SubnetStatus>Active</SubnetStatus>\n                            <SubnetIdentifier>subnet-3ea6bd57</SubnetIdentifier>\n                            <SubnetAvailabilityZone>\n                                <Name>us-east-1d</Name>\n                            </SubnetAvailabilityZone>\n                        </Subnet>\n                    </Subnets>\n                </DBSubnetGroup>\n                <DBSubnetGroup>\n                    <VpcId>990524496922</VpcId>\n                    <SubnetGroupStatus>Complete</SubnetGroupStatus>\n                    <DBSubnetGroupDescription>description</DBSubnetGroupDescription>\n                    <DBSubnetGroupName>subnet_grp2</DBSubnetGroupName>\n                    <Subnets>\n                        <Subnet>\n                            <SubnetStatus>Active</SubnetStatus>\n                            <SubnetIdentifier>subnet-7c5b4115</SubnetIdentifier>\n                            <SubnetAvailabilityZone>\n                                <Name>us-east-1c</Name>\n                            </SubnetAvailabilityZone>\n                        </Subnet>\n                        <Subnet>\n                            <SubnetStatus>Active</SubnetStatus>\n                            <SubnetIdentifier>subnet-7b5b4112</SubnetIdentifier>\n                            <SubnetAvailabilityZone>\n                                <Name>us-east-1b</Name>\n                            </SubnetAvailabilityZone>\n                        </Subnet>\n                        <Subnet>\n                            <SubnetStatus>Active</SubnetStatus>\n                            <SubnetIdentifier>subnet-3ea6bd57</SubnetIdentifier>\n                            <SubnetAvailabilityZone>\n                                <Name>us-east-1d</Name>\n                            </SubnetAvailabilityZone>\n                        </Subnet>\n                    </Subnets>\n                </DBSubnetGroup>\n            </DBSubnetGroups>\n        </DescribeDBSubnetGroupsResult>\n        <ResponseMetadata>\n            <RequestId>31d0faee-229b-11e1-81f1-df3a2a803dad</RequestId>\n        </ResponseMetadata>\n    </DescribeDBSubnetGroupsResponse>\n', OperationModel(name=DescribeDBSubnetGroups), {'ResponseMetadata': {'RequestId': '31d0faee-229b-11e1-81f1-df3a2a803dad'}, 'DBSubnetGroups': [{'Subnets': [{'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-7c5b4115', 'SubnetAvailabilityZone': {'Name': 'us-east-1c'}}, {'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-7b5b4112', 'SubnetAvailabilityZone': {'Name': 'us-east-1b'}}, {'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-3ea6bd57', 'SubnetAvailabilityZone': {'Name': 'us-east-1d'}}], 'DBSubnetGroupName': 'subnet_grp1', 'VpcId': '990524496922', 'DBSubnetGroupDescription': 'description', 'SubnetGroupStatus': 'Complete'}, {'Subnets': [{'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-7c5b4115', 'SubnetAvailabilityZone': {'Name': 'us-east-1c'}}, {'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-7b5b4112', 'SubnetAvailabilityZone': {'Name': 'us-east-1b'}}, {'SubnetStatus': 'Active', 'SubnetIdentifier': 'subnet-3ea6bd57', 'SubnetAvailabilityZone': {'Name': 'us-east-1d'}}], 'DBSubnetGroupName': 'subnet_grp2', 'VpcId': '990524496922', 'DBSubnetGroupDescription': 'description', 'SubnetGroupStatus': 'Complete'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-event-categories.xml', b'<DescribeEventCategoriesResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeEventCategoriesResult>\n    <EventCategoriesMapList>\n      <EventCategoriesMap>\n        <SourceType>db-instance</SourceType>\n        <EventCategories>\n          <EventCategory>maintenance</EventCategory>\n          <EventCategory>creation</EventCategory>\n          <EventCategory>backup</EventCategory>\n          <EventCategory>low storage</EventCategory>\n          <EventCategory>configuration change</EventCategory>\n          <EventCategory>failover</EventCategory>\n          <EventCategory>restoration</EventCategory>\n          <EventCategory>availability</EventCategory>\n          <EventCategory>deletion</EventCategory>\n          <EventCategory>notification</EventCategory>\n          <EventCategory>recovery</EventCategory>\n          <EventCategory>failure</EventCategory>\n        </EventCategories>\n      </EventCategoriesMap>\n      <EventCategoriesMap>\n        <SourceType>db-security-group</SourceType>\n        <EventCategories>\n          <EventCategory>configuration change</EventCategory>\n          <EventCategory>failure</EventCategory>\n        </EventCategories>\n      </EventCategoriesMap>\n      <EventCategoriesMap>\n        <SourceType>db-parameter-group</SourceType>\n        <EventCategories>\n          <EventCategory>configuration change</EventCategory>\n        </EventCategories>\n      </EventCategoriesMap>\n      <EventCategoriesMap>\n        <SourceType>db-snapshot</SourceType>\n        <EventCategories>\n          <EventCategory>creation</EventCategory>\n          <EventCategory>restoration</EventCategory>\n          <EventCategory>deletion</EventCategory>\n        </EventCategories>\n      </EventCategoriesMap>\n    </EventCategoriesMapList>\n  </DescribeEventCategoriesResult>\n  <ResponseMetadata>\n    <RequestId>aa1184e4-9167-11e2-b6fb-e599bc501f26</RequestId>\n  </ResponseMetadata>\n</DescribeEventCategoriesResponse>\n', OperationModel(name=DescribeEventCategories), {'EventCategoriesMapList': [{'EventCategories': ['maintenance', 'creation', 'backup', 'low storage', 'configuration change', 'failover', 'restoration', 'availability', 'deletion', 'notification', 'recovery', 'failure'], 'SourceType': 'db-instance'}, {'EventCategories': ['configuration change', 'failure'], 'SourceType': 'db-security-group'}, {'EventCategories': ['configuration change'], 'SourceType': 'db-parameter-group'}, {'EventCategories': ['creation', 'restoration', 'deletion'], 'SourceType': 'db-snapshot'}], 'ResponseMetadata': {'RequestId': 'aa1184e4-9167-11e2-b6fb-e599bc501f26'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-event-subscriptions.xml', b'<DescribeEventSubscriptionsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeEventSubscriptionsResult>\n    <EventSubscriptionsList/>\n  </DescribeEventSubscriptionsResult>\n  <ResponseMetadata>\n    <RequestId>a9fd87af-9167-11e2-b691-fdba749921d2</RequestId>\n  </ResponseMetadata>\n</DescribeEventSubscriptionsResponse>\n', OperationModel(name=DescribeEventSubscriptions), {'EventSubscriptionsList': [], 'ResponseMetadata': {'RequestId': 'a9fd87af-9167-11e2-b691-fdba749921d2'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-events.xml', b'<DescribeEventsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeEventsResult>\n    <Events>\n      <Event>\n        <Message>Applied change to security group</Message>\n        <SourceType>db-security-group</SourceType>\n        <Date>2010-08-11T17:12:52.860Z</Date>\n        <SourceIdentifier>mydbsecuritygroup</SourceIdentifier>\n      </Event>\n      <Event>\n        <Message>Database instance created</Message>\n        <SourceType>db-instance</SourceType>\n        <Date>2010-08-11T18:10:15.269Z</Date>\n        <SourceIdentifier>mydbinstance3</SourceIdentifier>\n      </Event>\n      <Event>\n        <Message>Backing up database instance</Message>\n        <SourceType>db-instance</SourceType>\n        <Date>2010-08-11T18:10:34.690Z</Date>\n        <SourceIdentifier>mydbinstance3</SourceIdentifier>\n      </Event>\n      <Event>\n        <Message>Backing up DB Instance</Message>\n        <SourceType>db-instance</SourceType>\n        <Date>2010-08-11T18:25:52.263Z</Date>\n        <SourceIdentifier>mynewdbinstance</SourceIdentifier>\n      </Event>\n      <Event>\n        <Message>Creating user snapshot</Message>\n        <SourceType>db-snapshot</SourceType>\n        <Date>2010-08-11T18:25:52.263Z</Date>\n        <SourceIdentifier>mynewdbsnapshot3</SourceIdentifier>\n      </Event>\n    </Events>\n  </DescribeEventsResult>\n  <ResponseMetadata>\n    <RequestId>95b948cd-bf45-11de-86a4-97241dfaadff</RequestId>\n  </ResponseMetadata>\n</DescribeEventsResponse>\n', OperationModel(name=DescribeEvents), {'Events': [{'Date': '2010-08-11T17:12:52.860Z', 'Message': 'Applied change to security group', 'SourceIdentifier': 'mydbsecuritygroup', 'SourceType': 'db-security-group'}, {'Date': '2010-08-11T18:10:15.269Z', 'Message': 'Database instance created', 'SourceIdentifier': 'mydbinstance3', 'SourceType': 'db-instance'}, {'Date': '2010-08-11T18:10:34.690Z', 'Message': 'Backing up database instance', 'SourceIdentifier': 'mydbinstance3', 'SourceType': 'db-instance'}, {'Date': '2010-08-11T18:25:52.263Z', 'Message': 'Backing up DB Instance', 'SourceIdentifier': 'mynewdbinstance', 'SourceType': 'db-instance'}, {'Date': '2010-08-11T18:25:52.263Z', 'Message': 'Creating user snapshot', 'SourceIdentifier': 'mynewdbsnapshot3', 'SourceType': 'db-snapshot'}], 'ResponseMetadata': {'RequestId': '95b948cd-bf45-11de-86a4-97241dfaadff'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-option-groups.xml', b'<DescribeOptionGroupsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeOptionGroupsResult>\n    <OptionGroupsList>\n      <OptionGroup>\n        <AllowsVpcAndNonVpcInstanceMemberships>true</AllowsVpcAndNonVpcInstanceMemberships>\n        <MajorEngineVersion>5.5</MajorEngineVersion>\n        <OptionGroupName>default:mysql-5-5</OptionGroupName>\n        <EngineName>mysql</EngineName>\n        <OptionGroupDescription>Default option group for mysql 5.5</OptionGroupDescription>\n        <Options/>\n      </OptionGroup>\n    </OptionGroupsList>\n  </DescribeOptionGroupsResult>\n  <ResponseMetadata>\n    <RequestId>ab072fb0-9167-11e2-b6fb-e599bc501f26</RequestId>\n  </ResponseMetadata>\n</DescribeOptionGroupsResponse>\n', OperationModel(name=DescribeOptionGroups), {'ResponseMetadata': {'RequestId': 'ab072fb0-9167-11e2-b6fb-e599bc501f26'}, 'OptionGroupsList': [{'MajorEngineVersion': '5.5', 'OptionGroupDescription': 'Default option group for mysql 5.5', 'Options': [], 'EngineName': 'mysql', 'AllowsVpcAndNonVpcInstanceMemberships': True, 'OptionGroupName': 'default:mysql-5-5'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-reserved-db-instances-offerings.xml', b'<DescribeReservedDBInstancesOfferingsResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeReservedDBInstancesOfferingsResult>\n    <Marker>M2E5OGJmN2QtYjRjNi00NzNmLWI4MGMtYmFkNzFmNzA2YzUw</Marker>\n    <ReservedDBInstancesOfferings>\n      <ReservedDBInstancesOffering>\n        <OfferingType>Heavy Utilization</OfferingType>\n        <Duration>94608000</Duration>\n        <CurrencyCode>USD</CurrencyCode>\n        <RecurringCharges>\n          <RecurringCharge>\n            <RecurringChargeFrequency>Hourly</RecurringChargeFrequency>\n            <RecurringChargeAmount>0.139</RecurringChargeAmount>\n          </RecurringCharge>\n        </RecurringCharges>\n        <FixedPrice>2058.0</FixedPrice>\n        <ProductDescription>oracle-se1(li)</ProductDescription>\n        <UsagePrice>0.0</UsagePrice>\n        <ReservedDBInstancesOfferingId>248e7b75-0815-427d-a429-b0fed4633e8c</ReservedDBInstancesOfferingId>\n        <MultiAZ>false</MultiAZ>\n        <DBInstanceClass>db.m1.large</DBInstanceClass>\n      </ReservedDBInstancesOffering>\n      <ReservedDBInstancesOffering>\n        <OfferingType>Light Utilization</OfferingType>\n        <Duration>94608000</Duration>\n        <CurrencyCode>USD</CurrencyCode>\n        <RecurringCharges/>\n        <FixedPrice>548.0</FixedPrice>\n        <ProductDescription>oracle-ee(byol)</ProductDescription>\n        <UsagePrice>0.234</UsagePrice>\n        <ReservedDBInstancesOfferingId>248e7b75-09fe-4f1d-afbc-296929db4f47</ReservedDBInstancesOfferingId>\n        <MultiAZ>false</MultiAZ>\n        <DBInstanceClass>db.m2.xlarge</DBInstanceClass>\n      </ReservedDBInstancesOffering>\n      <ReservedDBInstancesOffering>\n        <OfferingType>Light Utilization</OfferingType>\n        <Duration>94608000</Duration>\n        <CurrencyCode>USD</CurrencyCode>\n        <RecurringCharges/>\n        <FixedPrice>2512.0</FixedPrice>\n        <ProductDescription>oracle-se1(li)</ProductDescription>\n        <UsagePrice>1.026</UsagePrice>\n        <ReservedDBInstancesOfferingId>248e7b75-0a34-4615-b83c-e4b445862054</ReservedDBInstancesOfferingId>\n        <MultiAZ>true</MultiAZ>\n        <DBInstanceClass>db.m1.xlarge</DBInstanceClass>\n      </ReservedDBInstancesOffering>\n    </ReservedDBInstancesOfferings>\n  </DescribeReservedDBInstancesOfferingsResult>\n  <ResponseMetadata>\n    <RequestId>aa4fed7d-9167-11e2-b691-fdba749921d2</RequestId>\n  </ResponseMetadata>\n</DescribeReservedDBInstancesOfferingsResponse>\n', OperationModel(name=DescribeReservedDBInstancesOfferings), {'Marker': 'M2E5OGJmN2QtYjRjNi00NzNmLWI4MGMtYmFkNzFmNzA2YzUw', 'ResponseMetadata': {'RequestId': 'aa4fed7d-9167-11e2-b691-fdba749921d2'}, 'ReservedDBInstancesOfferings': [{'MultiAZ': False, 'OfferingType': 'Heavy Utilization', 'FixedPrice': 2058.0, 'UsagePrice': 0.0, 'ReservedDBInstancesOfferingId': '248e7b75-0815-427d-a429-b0fed4633e8c', 'RecurringCharges': [{'RecurringChargeAmount': 0.139, 'RecurringChargeFrequency': 'Hourly'}], 'ProductDescription': 'oracle-se1(li)', 'Duration': 94608000, 'DBInstanceClass': 'db.m1.large', 'CurrencyCode': 'USD'}, {'MultiAZ': False, 'OfferingType': 'Light Utilization', 'FixedPrice': 548.0, 'UsagePrice': 0.234, 'ReservedDBInstancesOfferingId': '248e7b75-09fe-4f1d-afbc-296929db4f47', 'RecurringCharges': [], 'ProductDescription': 'oracle-ee(byol)', 'Duration': 94608000, 'DBInstanceClass': 'db.m2.xlarge', 'CurrencyCode': 'USD'}, {'MultiAZ': True, 'OfferingType': 'Light Utilization', 'FixedPrice': 2512.0, 'UsagePrice': 1.026, 'ReservedDBInstancesOfferingId': '248e7b75-0a34-4615-b83c-e4b445862054', 'RecurringCharges': [], 'ProductDescription': 'oracle-se1(li)', 'Duration': 94608000, 'DBInstanceClass': 'db.m1.xlarge', 'CurrencyCode': 'USD'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/rds-describe-reserved-db-instances.xml', b'<DescribeReservedDBInstancesResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <DescribeReservedDBInstancesResult>\n    <ReservedDBInstances>\n      <ReservedDBInstance>\n        <OfferingType>Medium Utilization</OfferingType>\n        <CurrencyCode>USD</CurrencyCode>\n        <RecurringCharges/>\n        <ProductDescription>mysql</ProductDescription>\n        <ReservedDBInstancesOfferingId>649fd0c8-cf6d-47a0-bfa6-060f8e75e95f</ReservedDBInstancesOfferingId>\n        <MultiAZ>false</MultiAZ>\n        <State>active</State>\n        <ReservedDBInstanceId>myreservationid</ReservedDBInstanceId>\n        <DBInstanceCount>1</DBInstanceCount>\n        <StartTime>2010-12-15T00:25:14.131Z</StartTime>\n        <Duration>31536000</Duration>\n        <FixedPrice>227.5</FixedPrice>\n        <UsagePrice>0.046</UsagePrice>\n        <DBInstanceClass>db.m1.small</DBInstanceClass>\n      </ReservedDBInstance>\n    </ReservedDBInstances>\n  </DescribeReservedDBInstancesResult>\n  <ResponseMetadata>\n    <RequestId>c695119b-2961-11e1-bd06-6fe008f046c3</RequestId>\n  </ResponseMetadata>\n</DescribeReservedDBInstancesResponse>\n', OperationModel(name=DescribeReservedDBInstances), {'ReservedDBInstances': [{'MultiAZ': False, 'OfferingType': 'Medium Utilization', 'FixedPrice': 227.5, 'CurrencyCode': 'USD', 'ProductDescription': 'mysql', 'ReservedDBInstancesOfferingId': '649fd0c8-cf6d-47a0-bfa6-060f8e75e95f', 'RecurringCharges': [], 'Duration': 31536000, 'State': 'active', 'DBInstanceCount': 1, 'StartTime': '2010-12-15T00:25:14.131Z', 'ReservedDBInstanceId': 'myreservationid', 'DBInstanceClass': 'db.m1.small', 'UsagePrice': 0.046}], 'ResponseMetadata': {'RequestId': 'c695119b-2961-11e1-bd06-6fe008f046c3'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elb-describe-load-balancer-policies.xml', b'<DescribeLoadBalancerPoliciesResponse xmlns="http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/">\n  <DescribeLoadBalancerPoliciesResult>\n    <PolicyDescriptions>\n      <member>\n        <PolicyName>ELBSample-OpenSSLDefaultCipherPolicy</PolicyName>\n        <PolicyTypeName>SSLNegotiationPolicyType</PolicyTypeName>\n        <PolicyAttributeDescriptions>\n          <member>\n            <AttributeName>Protocol-SSLv2</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-AES256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-AES256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-AES256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>AES256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC3-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-RSA-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-DSS-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC3-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC3-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-AES128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-AES128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-AES128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>AES128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-RC4-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-RC4-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>RC4-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>RC4-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>RC2-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-RSA-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-DSS-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC4-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC2-CBC-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-DES-CBC-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC4-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC2-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-ADH-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-ADH-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-EDH-RSA-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-EDH-DSS-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-DES-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-RC2-CBC-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-RC4-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-AES256-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-3DES-EDE-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-SEED-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-SEED-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-SEED-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>SEED-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-AES128-CBC-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-RC4-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>Protocol-TLSv1</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>IDEA-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>Protocol-SSLv3</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n        </PolicyAttributeDescriptions>\n      </member>\n      <member>\n        <PolicyName>ELBSample-ELBDefaultCipherPolicy</PolicyName>\n        <PolicyTypeName>SSLNegotiationPolicyType</PolicyTypeName>\n        <PolicyAttributeDescriptions>\n          <member>\n            <AttributeName>Protocol-SSLv2</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-DSS-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-RC4-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-RC4-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-AES128-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-EDH-RSA-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-AES128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-RSA-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-SEED-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC3-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC2-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-DSS-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-AES256-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-AES256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>AES128-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-SEED-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC4-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EDH-RSA-DES-CBC3-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-DES-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>Protocol-TLSv1</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>PSK-3DES-EDE-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>SEED-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>IDEA-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>RC2-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-AES128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>RC4-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>AES256-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>Protocol-SSLv3</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC3-SHA</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-AES128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-EDH-DSS-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC2-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-AES256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC3-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>RC4-MD5</AttributeName>\n            <AttributeValue>true</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-RC2-CBC-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-ADH-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-RC4-MD5</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>CAMELLIA256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-CAMELLIA128-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>EXP-ADH-DES-CBC-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-AES256-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n          <member>\n            <AttributeName>ADH-SEED-SHA</AttributeName>\n            <AttributeValue>false</AttributeValue>\n          </member>\n        </PolicyAttributeDescriptions>\n      </member>\n    </PolicyDescriptions>\n  </DescribeLoadBalancerPoliciesResult>\n  <ResponseMetadata>\n    <RequestId>ab663f4e-9167-11e2-ab97-3b4060f1aeb3</RequestId>\n  </ResponseMetadata>\n</DescribeLoadBalancerPoliciesResponse>\n', OperationModel(name=DescribeLoadBalancerPolicies), {'PolicyDescriptions': [{'PolicyAttributeDescriptions': [{'AttributeName': 'Protocol-SSLv2', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-AES256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-RSA-AES256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-DSS-AES256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'AES256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'KRB5-DES-CBC3-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'KRB5-DES-CBC3-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'ADH-DES-CBC3-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EDH-RSA-DES-CBC3-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EDH-DSS-DES-CBC3-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DES-CBC3-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DES-CBC3-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-AES128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-RSA-AES128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-DSS-AES128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'AES128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'KRB5-RC4-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'KRB5-RC4-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'ADH-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'RC4-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'RC4-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'RC2-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-DES-CBC-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'KRB5-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'ADH-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EDH-RSA-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EDH-DSS-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DES-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-RC4-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-KRB5-RC2-CBC-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-KRB5-DES-CBC-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-KRB5-RC4-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-KRB5-RC2-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-KRB5-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-ADH-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-ADH-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-EDH-RSA-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-EDH-DSS-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-DES-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-RC2-CBC-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-RC4-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-RSA-CAMELLIA256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-DSS-CAMELLIA256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'ADH-CAMELLIA256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'CAMELLIA256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'PSK-AES256-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'PSK-3DES-EDE-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-RSA-SEED-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-DSS-SEED-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-RSA-CAMELLIA128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-DSS-CAMELLIA128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'ADH-SEED-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-CAMELLIA128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'SEED-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'CAMELLIA128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'PSK-AES128-CBC-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'PSK-RC4-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'Protocol-TLSv1', 'AttributeValue': 'true'}, {'AttributeName': 'IDEA-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'Protocol-SSLv3', 'AttributeValue': 'true'}], 'PolicyName': 'ELBSample-OpenSSLDefaultCipherPolicy', 'PolicyTypeName': 'SSLNegotiationPolicyType'}, {'PolicyAttributeDescriptions': [{'AttributeName': 'Protocol-SSLv2', 'AttributeValue': 'false'}, {'AttributeName': 'EDH-DSS-DES-CBC3-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-RSA-CAMELLIA128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DES-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-RC4-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-CAMELLIA128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'PSK-RC4-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'PSK-AES128-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-EDH-RSA-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'CAMELLIA128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-DSS-AES128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EDH-RSA-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-RSA-SEED-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-DES-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-RSA-CAMELLIA256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-DES-CBC3-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DES-CBC3-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-RC2-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'EDH-DSS-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'PSK-AES256-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-AES256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-DES-CBC3-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'AES128-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-DSS-SEED-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-CAMELLIA256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-RC4-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EDH-RSA-DES-CBC3-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-DES-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'Protocol-TLSv1', 'AttributeValue': 'true'}, {'AttributeName': 'PSK-3DES-EDE-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'SEED-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-DSS-CAMELLIA256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'IDEA-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'RC2-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-AES128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'RC4-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'AES256-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'Protocol-SSLv3', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DES-CBC3-SHA', 'AttributeValue': 'true'}, {'AttributeName': 'DHE-RSA-AES128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-EDH-DSS-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-RC2-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-RSA-AES256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'KRB5-DES-CBC3-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'RC4-MD5', 'AttributeValue': 'true'}, {'AttributeName': 'EXP-RC2-CBC-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-ADH-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-RC4-MD5', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'CAMELLIA256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-DSS-CAMELLIA128-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-KRB5-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'EXP-ADH-DES-CBC-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'DHE-DSS-AES256-SHA', 'AttributeValue': 'false'}, {'AttributeName': 'ADH-SEED-SHA', 'AttributeValue': 'false'}], 'PolicyName': 'ELBSample-ELBDefaultCipherPolicy', 'PolicyTypeName': 'SSLNegotiationPolicyType'}], 'ResponseMetadata': {'RequestId': 'ab663f4e-9167-11e2-ab97-3b4060f1aeb3'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elb-describe-load-balancer-policy-types.xml', b'<DescribeLoadBalancerPolicyTypesResponse xmlns="http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/">\n  <DescribeLoadBalancerPolicyTypesResult>\n    <PolicyTypeDescriptions>\n      <member>\n        <PolicyAttributeTypeDescriptions>\n          <member>\n            <AttributeName>CookieExpirationPeriod</AttributeName>\n            <AttributeType>Long</AttributeType>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n        </PolicyAttributeTypeDescriptions>\n        <PolicyTypeName>LBCookieStickinessPolicyType</PolicyTypeName>\n        <Description>Stickiness policy with session lifetimes controlled by the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</Description>\n      </member>\n      <member>\n        <PolicyAttributeTypeDescriptions>\n          <member>\n            <AttributeName>PublicKeyPolicyName</AttributeName>\n            <AttributeType>PolicyName</AttributeType>\n            <Cardinality>ONE_OR_MORE</Cardinality>\n          </member>\n        </PolicyAttributeTypeDescriptions>\n        <PolicyTypeName>BackendServerAuthenticationPolicyType</PolicyTypeName>\n        <Description>Policy that controls authentication to back-end server(s) and contains one or more policies, such as an instance of a PublicKeyPolicyType. This policy can be associated only with back-end servers that are using HTTPS/SSL.</Description>\n      </member>\n      <member>\n        <PolicyAttributeTypeDescriptions>\n          <member>\n            <AttributeName>Protocol-SSLv2</AttributeName>\n            <Description>A description for Protocol-SSLv2</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>Protocol-TLSv1</AttributeName>\n            <Description>A description for Protocol-TLSv1</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>Protocol-SSLv3</AttributeName>\n            <Description>A description for Protocol-SSLv3</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-AES256-SHA</AttributeName>\n            <Description>A description for DHE-RSA-AES256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-AES256-SHA</AttributeName>\n            <Description>A description for DHE-DSS-AES256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-CAMELLIA256-SHA</AttributeName>\n            <Description>A description for DHE-RSA-CAMELLIA256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-CAMELLIA256-SHA</AttributeName>\n            <Description>A description for DHE-DSS-CAMELLIA256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-AES256-SHA</AttributeName>\n            <Description>A description for ADH-AES256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-CAMELLIA256-SHA</AttributeName>\n            <Description>A description for ADH-CAMELLIA256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>AES256-SHA</AttributeName>\n            <Description>A description for AES256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>CAMELLIA256-SHA</AttributeName>\n            <Description>A description for CAMELLIA256-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>PSK-AES256-CBC-SHA</AttributeName>\n            <Description>A description for PSK-AES256-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EDH-RSA-DES-CBC3-SHA</AttributeName>\n            <Description>A description for EDH-RSA-DES-CBC3-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EDH-DSS-DES-CBC3-SHA</AttributeName>\n            <Description>A description for EDH-DSS-DES-CBC3-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-DES-CBC3-SHA</AttributeName>\n            <Description>A description for ADH-DES-CBC3-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DES-CBC3-SHA</AttributeName>\n            <Description>A description for DES-CBC3-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DES-CBC3-MD5</AttributeName>\n            <Description>A description for DES-CBC3-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>PSK-3DES-EDE-CBC-SHA</AttributeName>\n            <Description>A description for PSK-3DES-EDE-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC3-SHA</AttributeName>\n            <Description>A description for KRB5-DES-CBC3-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC3-MD5</AttributeName>\n            <Description>A description for KRB5-DES-CBC3-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-AES128-SHA</AttributeName>\n            <Description>A description for DHE-RSA-AES128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-AES128-SHA</AttributeName>\n            <Description>A description for DHE-DSS-AES128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-SEED-SHA</AttributeName>\n            <Description>A description for DHE-RSA-SEED-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-SEED-SHA</AttributeName>\n            <Description>A description for DHE-DSS-SEED-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-RSA-CAMELLIA128-SHA</AttributeName>\n            <Description>A description for DHE-RSA-CAMELLIA128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DHE-DSS-CAMELLIA128-SHA</AttributeName>\n            <Description>A description for DHE-DSS-CAMELLIA128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-AES128-SHA</AttributeName>\n            <Description>A description for ADH-AES128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-SEED-SHA</AttributeName>\n            <Description>A description for ADH-SEED-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-CAMELLIA128-SHA</AttributeName>\n            <Description>A description for ADH-CAMELLIA128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>AES128-SHA</AttributeName>\n            <Description>A description for AES128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>SEED-SHA</AttributeName>\n            <Description>A description for SEED-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>CAMELLIA128-SHA</AttributeName>\n            <Description>A description for CAMELLIA128-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>RC2-CBC-MD5</AttributeName>\n            <Description>A description for RC2-CBC-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>PSK-AES128-CBC-SHA</AttributeName>\n            <Description>A description for PSK-AES128-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-RC4-MD5</AttributeName>\n            <Description>A description for ADH-RC4-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>IDEA-CBC-SHA</AttributeName>\n            <Description>A description for IDEA-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>RC4-SHA</AttributeName>\n            <Description>A description for RC4-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>RC4-MD5</AttributeName>\n            <Description>A description for RC4-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>true</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>PSK-RC4-SHA</AttributeName>\n            <Description>A description for PSK-RC4-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>KRB5-RC4-SHA</AttributeName>\n            <Description>A description for KRB5-RC4-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>KRB5-RC4-MD5</AttributeName>\n            <Description>A description for KRB5-RC4-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EDH-RSA-DES-CBC-SHA</AttributeName>\n            <Description>A description for EDH-RSA-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EDH-DSS-DES-CBC-SHA</AttributeName>\n            <Description>A description for EDH-DSS-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>ADH-DES-CBC-SHA</AttributeName>\n            <Description>A description for ADH-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DES-CBC-SHA</AttributeName>\n            <Description>A description for DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>DES-CBC-MD5</AttributeName>\n            <Description>A description for DES-CBC-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC-SHA</AttributeName>\n            <Description>A description for KRB5-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>KRB5-DES-CBC-MD5</AttributeName>\n            <Description>A description for KRB5-DES-CBC-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-EDH-RSA-DES-CBC-SHA</AttributeName>\n            <Description>A description for EXP-EDH-RSA-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-EDH-DSS-DES-CBC-SHA</AttributeName>\n            <Description>A description for EXP-EDH-DSS-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-ADH-DES-CBC-SHA</AttributeName>\n            <Description>A description for EXP-ADH-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-DES-CBC-SHA</AttributeName>\n            <Description>A description for EXP-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-RC2-CBC-MD5</AttributeName>\n            <Description>A description for EXP-RC2-CBC-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC2-CBC-SHA</AttributeName>\n            <Description>A description for EXP-KRB5-RC2-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-DES-CBC-SHA</AttributeName>\n            <Description>A description for EXP-KRB5-DES-CBC-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC2-CBC-MD5</AttributeName>\n            <Description>A description for EXP-KRB5-RC2-CBC-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-DES-CBC-MD5</AttributeName>\n            <Description>A description for EXP-KRB5-DES-CBC-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-ADH-RC4-MD5</AttributeName>\n            <Description>A description for EXP-ADH-RC4-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-RC4-MD5</AttributeName>\n            <Description>A description for EXP-RC4-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC4-SHA</AttributeName>\n            <Description>A description for EXP-KRB5-RC4-SHA</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n          <member>\n            <AttributeName>EXP-KRB5-RC4-MD5</AttributeName>\n            <Description>A description for EXP-KRB5-RC4-MD5</Description>\n            <AttributeType>Boolean</AttributeType>\n            <DefaultValue>false</DefaultValue>\n            <Cardinality>ZERO_OR_ONE</Cardinality>\n          </member>\n        </PolicyAttributeTypeDescriptions>\n        <PolicyTypeName>SSLNegotiationPolicyType</PolicyTypeName>\n        <Description>Listener policy that defines the ciphers and protocols that will be accepted by the load balancer. This policy can be associated only with HTTPS/SSL listeners.</Description>\n      </member>\n      <member>\n        <PolicyAttributeTypeDescriptions>\n          <member>\n            <AttributeName>PublicKey</AttributeName>\n            <AttributeType>String</AttributeType>\n            <Cardinality>ONE</Cardinality>\n          </member>\n        </PolicyAttributeTypeDescriptions>\n        <PolicyTypeName>PublicKeyPolicyType</PolicyTypeName>\n        <Description>Policy containing a list of public keys to accept when authenticating the back-end server(s). This policy cannot be applied directly to back-end servers or listeners but must be part of a BackendServerAuthenticationPolicyType.</Description>\n      </member>\n      <member>\n        <PolicyAttributeTypeDescriptions>\n          <member>\n            <AttributeName>CookieName</AttributeName>\n            <AttributeType>String</AttributeType>\n            <Cardinality>ONE</Cardinality>\n          </member>\n        </PolicyAttributeTypeDescriptions>\n        <PolicyTypeName>AppCookieStickinessPolicyType</PolicyTypeName>\n        <Description>Stickiness policy with session lifetimes controlled by the lifetime of the application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</Description>\n      </member>\n    </PolicyTypeDescriptions>\n  </DescribeLoadBalancerPolicyTypesResult>\n  <ResponseMetadata>\n    <RequestId>ab7c8724-9167-11e2-b472-75a63fc08e7f</RequestId>\n  </ResponseMetadata>\n</DescribeLoadBalancerPolicyTypesResponse>\n', OperationModel(name=DescribeLoadBalancerPolicyTypes), {'PolicyTypeDescriptions': [{'PolicyAttributeTypeDescriptions': [{'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'CookieExpirationPeriod', 'AttributeType': 'Long'}], 'PolicyTypeName': 'LBCookieStickinessPolicyType', 'Description': 'Stickiness policy with session lifetimes controlled by the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.'}, {'PolicyAttributeTypeDescriptions': [{'Cardinality': 'ONE_OR_MORE', 'AttributeName': 'PublicKeyPolicyName', 'AttributeType': 'PolicyName'}], 'PolicyTypeName': 'BackendServerAuthenticationPolicyType', 'Description': 'Policy that controls authentication to back-end server(s) and contains one or more policies, such as an instance of a PublicKeyPolicyType. This policy can be associated only with back-end servers that are using HTTPS/SSL.'}, {'PolicyAttributeTypeDescriptions': [{'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'Protocol-SSLv2', 'Description': 'A description for Protocol-SSLv2', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'Protocol-TLSv1', 'Description': 'A description for Protocol-TLSv1', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'Protocol-SSLv3', 'Description': 'A description for Protocol-SSLv3', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-RSA-AES256-SHA', 'Description': 'A description for DHE-RSA-AES256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-DSS-AES256-SHA', 'Description': 'A description for DHE-DSS-AES256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-RSA-CAMELLIA256-SHA', 'Description': 'A description for DHE-RSA-CAMELLIA256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-DSS-CAMELLIA256-SHA', 'Description': 'A description for DHE-DSS-CAMELLIA256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-AES256-SHA', 'Description': 'A description for ADH-AES256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-CAMELLIA256-SHA', 'Description': 'A description for ADH-CAMELLIA256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'AES256-SHA', 'Description': 'A description for AES256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'CAMELLIA256-SHA', 'Description': 'A description for CAMELLIA256-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'PSK-AES256-CBC-SHA', 'Description': 'A description for PSK-AES256-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EDH-RSA-DES-CBC3-SHA', 'Description': 'A description for EDH-RSA-DES-CBC3-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EDH-DSS-DES-CBC3-SHA', 'Description': 'A description for EDH-DSS-DES-CBC3-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-DES-CBC3-SHA', 'Description': 'A description for ADH-DES-CBC3-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DES-CBC3-SHA', 'Description': 'A description for DES-CBC3-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DES-CBC3-MD5', 'Description': 'A description for DES-CBC3-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'PSK-3DES-EDE-CBC-SHA', 'Description': 'A description for PSK-3DES-EDE-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'KRB5-DES-CBC3-SHA', 'Description': 'A description for KRB5-DES-CBC3-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'KRB5-DES-CBC3-MD5', 'Description': 'A description for KRB5-DES-CBC3-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-RSA-AES128-SHA', 'Description': 'A description for DHE-RSA-AES128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-DSS-AES128-SHA', 'Description': 'A description for DHE-DSS-AES128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-RSA-SEED-SHA', 'Description': 'A description for DHE-RSA-SEED-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-DSS-SEED-SHA', 'Description': 'A description for DHE-DSS-SEED-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-RSA-CAMELLIA128-SHA', 'Description': 'A description for DHE-RSA-CAMELLIA128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DHE-DSS-CAMELLIA128-SHA', 'Description': 'A description for DHE-DSS-CAMELLIA128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-AES128-SHA', 'Description': 'A description for ADH-AES128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-SEED-SHA', 'Description': 'A description for ADH-SEED-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-CAMELLIA128-SHA', 'Description': 'A description for ADH-CAMELLIA128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'AES128-SHA', 'Description': 'A description for AES128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'SEED-SHA', 'Description': 'A description for SEED-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'CAMELLIA128-SHA', 'Description': 'A description for CAMELLIA128-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'RC2-CBC-MD5', 'Description': 'A description for RC2-CBC-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'PSK-AES128-CBC-SHA', 'Description': 'A description for PSK-AES128-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-RC4-MD5', 'Description': 'A description for ADH-RC4-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'IDEA-CBC-SHA', 'Description': 'A description for IDEA-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'RC4-SHA', 'Description': 'A description for RC4-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'true', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'RC4-MD5', 'Description': 'A description for RC4-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'PSK-RC4-SHA', 'Description': 'A description for PSK-RC4-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'KRB5-RC4-SHA', 'Description': 'A description for KRB5-RC4-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'KRB5-RC4-MD5', 'Description': 'A description for KRB5-RC4-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EDH-RSA-DES-CBC-SHA', 'Description': 'A description for EDH-RSA-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EDH-DSS-DES-CBC-SHA', 'Description': 'A description for EDH-DSS-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'ADH-DES-CBC-SHA', 'Description': 'A description for ADH-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DES-CBC-SHA', 'Description': 'A description for DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'DES-CBC-MD5', 'Description': 'A description for DES-CBC-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'KRB5-DES-CBC-SHA', 'Description': 'A description for KRB5-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'KRB5-DES-CBC-MD5', 'Description': 'A description for KRB5-DES-CBC-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-EDH-RSA-DES-CBC-SHA', 'Description': 'A description for EXP-EDH-RSA-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-EDH-DSS-DES-CBC-SHA', 'Description': 'A description for EXP-EDH-DSS-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-ADH-DES-CBC-SHA', 'Description': 'A description for EXP-ADH-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-DES-CBC-SHA', 'Description': 'A description for EXP-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-RC2-CBC-MD5', 'Description': 'A description for EXP-RC2-CBC-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-KRB5-RC2-CBC-SHA', 'Description': 'A description for EXP-KRB5-RC2-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-KRB5-DES-CBC-SHA', 'Description': 'A description for EXP-KRB5-DES-CBC-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-KRB5-RC2-CBC-MD5', 'Description': 'A description for EXP-KRB5-RC2-CBC-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-KRB5-DES-CBC-MD5', 'Description': 'A description for EXP-KRB5-DES-CBC-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-ADH-RC4-MD5', 'Description': 'A description for EXP-ADH-RC4-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-RC4-MD5', 'Description': 'A description for EXP-RC4-MD5', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-KRB5-RC4-SHA', 'Description': 'A description for EXP-KRB5-RC4-SHA', 'AttributeType': 'Boolean'}, {'DefaultValue': 'false', 'Cardinality': 'ZERO_OR_ONE', 'AttributeName': 'EXP-KRB5-RC4-MD5', 'Description': 'A description for EXP-KRB5-RC4-MD5', 'AttributeType': 'Boolean'}], 'PolicyTypeName': 'SSLNegotiationPolicyType', 'Description': 'Listener policy that defines the ciphers and protocols that will be accepted by the load balancer. This policy can be associated only with HTTPS/SSL listeners.'}, {'PolicyAttributeTypeDescriptions': [{'Cardinality': 'ONE', 'AttributeName': 'PublicKey', 'AttributeType': 'String'}], 'PolicyTypeName': 'PublicKeyPolicyType', 'Description': 'Policy containing a list of public keys to accept when authenticating the back-end server(s). This policy cannot be applied directly to back-end servers or listeners but must be part of a BackendServerAuthenticationPolicyType.'}, {'PolicyAttributeTypeDescriptions': [{'Cardinality': 'ONE', 'AttributeName': 'CookieName', 'AttributeType': 'String'}], 'PolicyTypeName': 'AppCookieStickinessPolicyType', 'Description': 'Stickiness policy with session lifetimes controlled by the lifetime of the application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.'}], 'ResponseMetadata': {'RequestId': 'ab7c8724-9167-11e2-b472-75a63fc08e7f'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elb-describe-load-balancers.xml', b'<DescribeLoadBalancersResponse xmlns="http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/">\n  <DescribeLoadBalancersResult>\n    <LoadBalancerDescriptions/>\n  </DescribeLoadBalancersResult>\n  <ResponseMetadata>\n    <RequestId>ab548cc1-9167-11e2-b472-75a63fc08e7f</RequestId>\n  </ResponseMetadata>\n</DescribeLoadBalancersResponse>\n', OperationModel(name=DescribeLoadBalancers), {'LoadBalancerDescriptions': [], 'ResponseMetadata': {'RequestId': 'ab548cc1-9167-11e2-b472-75a63fc08e7f'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-delete-identity.xml', b'<DeleteIdentityResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <DeleteIdentityResult/>\n  <ResponseMetadata>\n    <RequestId>d96bd874-9bf2-11e1-8ee7-c98a0037a2b6</RequestId>\n  </ResponseMetadata>\n</DeleteIdentityResponse>\n', OperationModel(name=DeleteIdentity), {'ResponseMetadata': {'RequestId': 'd96bd874-9bf2-11e1-8ee7-c98a0037a2b6'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-get-identity-dkim-attributes.xml', b'<GetIdentityDkimAttributesResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <GetIdentityDkimAttributesResult>\n    <DkimAttributes>\n      <entry>\n        <key>amazon.com</key>\n\t<value>\n          <DkimEnabled>true</DkimEnabled>\n          <DkimVerificationStatus>Success</DkimVerificationStatus>\n          <DkimTokens>\n            <member>vvjuipp74whm76gqoni7qmwwn4w4qusjiainivf6f</member>\n            <member>3frqe7jn4obpuxjpwpolz6ipb3k5nvt2nhjpik2oy</member>\n            <member>wrqplteh7oodxnad7hsl4mixg2uavzneazxv5sxi2</member>\n          </DkimTokens>\n\t</value>\n      </entry>\n    </DkimAttributes>\n  </GetIdentityDkimAttributesResult>\n  <ResponseMetadata>\n    <RequestId>bb5a105d-c468-11e1-82eb-dff885ccc06a</RequestId>\n  </ResponseMetadata>\n</GetIdentityDkimAttributesResponse>\n', OperationModel(name=GetIdentityDkimAttributes), {'DkimAttributes': {'amazon.com': {'DkimTokens': ['vvjuipp74whm76gqoni7qmwwn4w4qusjiainivf6f', '3frqe7jn4obpuxjpwpolz6ipb3k5nvt2nhjpik2oy', 'wrqplteh7oodxnad7hsl4mixg2uavzneazxv5sxi2'], 'DkimEnabled': True, 'DkimVerificationStatus': 'Success'}}, 'ResponseMetadata': {'RequestId': 'bb5a105d-c468-11e1-82eb-dff885ccc06a'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-get-identity-notification-attributes.xml', b'<GetIdentityNotificationAttributesResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <GetIdentityNotificationAttributesResult>\n    <NotificationAttributes>\n      <entry>\n        <key>user@example.com</key>\n        <value>\n          <ForwardingEnabled>true</ForwardingEnabled>\n          <BounceTopic>arn:aws:sns:us-east-1:123456789012:example</BounceTopic>\n          <ComplaintTopic>arn:aws:sns:us-east-1:123456789012:example</ComplaintTopic>\n        </value>\n      </entry>\n    </NotificationAttributes>\n  </GetIdentityNotificationAttributesResult>\n  <ResponseMetadata>\n    <RequestId>e038e509-b72a-11e1-901f-1fbd90e8104f</RequestId>\n  </ResponseMetadata>\n</GetIdentityNotificationAttributesResponse>\n', OperationModel(name=GetIdentityNotificationAttributes), {'NotificationAttributes': {'user@example.com': {'ForwardingEnabled': True, 'ComplaintTopic': 'arn:aws:sns:us-east-1:123456789012:example', 'BounceTopic': 'arn:aws:sns:us-east-1:123456789012:example'}}, 'ResponseMetadata': {'RequestId': 'e038e509-b72a-11e1-901f-1fbd90e8104f'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-get-identity-verification-attributes.xml', b'<GetIdentityVerificationAttributesResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <GetIdentityVerificationAttributesResult>\n    <VerificationAttributes>\n      <entry>\n        <key>domain.com</key>\n        <value>\n          <VerificationStatus>Pending</VerificationStatus>\n          <VerificationToken>QTKknzFg2J4ygwa+XvHAxUl1hyHoY0gVfZdfjIedHZ0=</VerificationToken>\n        </value>\n      </entry>\n      <entry>\n        <key>user@domain.com</key>\n        <value>\n          <VerificationStatus>Pending</VerificationStatus>\n        </value>\n      </entry>\n    </VerificationAttributes>\n  </GetIdentityVerificationAttributesResult>\n  <ResponseMetadata>\n    <RequestId>1d0c29f1-9bf3-11e1-8ee7-c98a0037a2b6</RequestId>\n  </ResponseMetadata>\n</GetIdentityVerificationAttributesResponse>\n', OperationModel(name=GetIdentityVerificationAttributes), {'VerificationAttributes': {'user@domain.com': {'VerificationStatus': 'Pending'}, 'domain.com': {'VerificationToken': 'QTKknzFg2J4ygwa+XvHAxUl1hyHoY0gVfZdfjIedHZ0=', 'VerificationStatus': 'Pending'}}, 'ResponseMetadata': {'RequestId': '1d0c29f1-9bf3-11e1-8ee7-c98a0037a2b6'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-get-send-quota.xml', b'<GetSendQuotaResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <GetSendQuotaResult>\n    <SentLast24Hours>0.0</SentLast24Hours>\n    <Max24HourSend>200.0</Max24HourSend>\n    <MaxSendRate>1.0</MaxSendRate>\n  </GetSendQuotaResult>\n  <ResponseMetadata>\n    <RequestId>65a6913a-9167-11e2-9374-7d889fec53f7</RequestId>\n  </ResponseMetadata>\n</GetSendQuotaResponse>\n', OperationModel(name=GetSendQuota), {'Max24HourSend': 200.0, 'ResponseMetadata': {'RequestId': '65a6913a-9167-11e2-9374-7d889fec53f7'}, 'SentLast24Hours': 0.0, 'MaxSendRate': 1.0}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-get-send-statistics.xml', b'<GetSendStatisticsResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <GetSendStatisticsResult>\n    <SendDataPoints>\n      <member>\n        <DeliveryAttempts>8</DeliveryAttempts>\n        <Timestamp>2011-08-03T19:23:00Z</Timestamp>\n        <Rejects>0</Rejects>\n        <Bounces>0</Bounces>\n        <Complaints>0</Complaints>\n      </member>\n      <member>\n        <DeliveryAttempts>7</DeliveryAttempts>\n        <Timestamp>2011-08-03T06:53:00Z</Timestamp>\n        <Rejects>0</Rejects>\n        <Bounces>0</Bounces>\n        <Complaints>0</Complaints>\n      </member>\n    </SendDataPoints>\n  </GetSendStatisticsResult>\n  <ResponseMetadata>\n    <RequestId>c2b66ee5-c866-11e0-b17f-cddb0ab334db</RequestId>\n  </ResponseMetadata>\n</GetSendStatisticsResponse>\n', OperationModel(name=GetSendStatistics), {'ResponseMetadata': {'RequestId': 'c2b66ee5-c866-11e0-b17f-cddb0ab334db'}, 'SendDataPoints': [{'Bounces': 0, 'Complaints': 0, 'DeliveryAttempts': 8, 'Rejects': 0, 'Timestamp': '2011-08-03T19:23:00Z'}, {'Bounces': 0, 'Complaints': 0, 'DeliveryAttempts': 7, 'Rejects': 0, 'Timestamp': '2011-08-03T06:53:00Z'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-list-identities.xml', b'<ListIdentitiesResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <ListIdentitiesResult>\n    <Identities>\n      <member>foobar.com</member>\n      <member>foo@bar.com</member>\n    </Identities>\n  </ListIdentitiesResult>\n  <ResponseMetadata>\n    <RequestId>659700d6-9167-11e2-8db7-37375a39d514</RequestId>\n  </ResponseMetadata>\n</ListIdentitiesResponse>\n', OperationModel(name=ListIdentities), {'Identities': ['foobar.com', 'foo@bar.com'], 'ResponseMetadata': {'RequestId': '659700d6-9167-11e2-8db7-37375a39d514'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-send-email.xml', b'<SendEmailResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <SendEmailResult>\n    <MessageId>00000131d51d2292-159ad6eb-077c-46e6-ad09-ae7c05925ed4-000000</MessageId>\n  </SendEmailResult>\n  <ResponseMetadata>\n    <RequestId>d5964849-c866-11e0-9beb-01a62d68c57f</RequestId>\n  </ResponseMetadata>\n</SendEmailResponse>\n', OperationModel(name=SendEmail), {'ResponseMetadata': {'RequestId': 'd5964849-c866-11e0-9beb-01a62d68c57f'}, 'MessageId': '00000131d51d2292-159ad6eb-077c-46e6-ad09-ae7c05925ed4-000000'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-send-raw-email.xml', b'<SendRawEmailResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <SendRawEmailResult>\n    <MessageId>00000131d51d6b36-1d4f9293-0aee-4503-b573-9ae4e70e9e38-000000</MessageId>\n  </SendRawEmailResult>\n  <ResponseMetadata>\n    <RequestId>e0abcdfa-c866-11e0-b6d0-273d09173b49</RequestId>\n  </ResponseMetadata>\n</SendRawEmailResponse>\n', OperationModel(name=SendRawEmail), {'ResponseMetadata': {'RequestId': 'e0abcdfa-c866-11e0-b6d0-273d09173b49'}, 'MessageId': '00000131d51d6b36-1d4f9293-0aee-4503-b573-9ae4e70e9e38-000000'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-set-identity-dkim-enabled.xml', b'<SetIdentityDkimEnabledResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <SetIdentityDkimEnabledResult/>\n  <ResponseMetadata>\n    <RequestId>7aa61362-c469-11e1-aee5-6bbb4608fbcc</RequestId>\n  </ResponseMetadata>\n</SetIdentityDkimEnabledResponse>\n', OperationModel(name=SetIdentityDkimEnabled), {'ResponseMetadata': {'RequestId': '7aa61362-c469-11e1-aee5-6bbb4608fbcc'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-verify-domain-dkim.xml', b'<VerifyDomainDkimResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <VerifyDomainDkimResult>\n    <DkimTokens>\n      <member>vvjuipp74whm76gqoni7qmwwn4w4qusjiainivf6sf</member>\n      <member>3frqe7jn4obpuxjpwpolz6ipb3k5nvt2nhjpik2oy</member>\n      <member>wrqplteh7oodxnad7hsl4mixg2uavzneazxv5sxi2</member>\n    </DkimTokens>\n    </VerifyDomainDkimResult>\n    <ResponseMetadata>\n      <RequestId>9662c15b-c469-11e1-99d1-797d6ecd6414</RequestId>\n    </ResponseMetadata>\n</VerifyDomainDkimResponse>\n', OperationModel(name=VerifyDomainDkim), {'DkimTokens': ['vvjuipp74whm76gqoni7qmwwn4w4qusjiainivf6sf', '3frqe7jn4obpuxjpwpolz6ipb3k5nvt2nhjpik2oy', 'wrqplteh7oodxnad7hsl4mixg2uavzneazxv5sxi2'], 'ResponseMetadata': {'RequestId': '9662c15b-c469-11e1-99d1-797d6ecd6414'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ses-verify-domain-identity.xml', b'<VerifyDomainIdentityResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <VerifyDomainIdentityResult>\n    <VerificationToken>QTKknzFg2J4ygwa+XvHAxUl1hyHoY0gVfZdfjIedHZ0=</VerificationToken>\n  </VerifyDomainIdentityResult>\n  <ResponseMetadata>\n    <RequestId>94f6368e-9bf2-11e1-8ee7-c98a0037a2b6</RequestId>\n  </ResponseMetadata>\n</VerifyDomainIdentityResponse>\n', OperationModel(name=VerifyDomainIdentity), {'VerificationToken': 'QTKknzFg2J4ygwa+XvHAxUl1hyHoY0gVfZdfjIedHZ0=', 'ResponseMetadata': {'RequestId': '94f6368e-9bf2-11e1-8ee7-c98a0037a2b6'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-adjustment-types.xml', b'<DescribeAdjustmentTypesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeAdjustmentTypesResult>\n    <AdjustmentTypes>\n      <member>\n        <AdjustmentType>ChangeInCapacity</AdjustmentType>\n      </member>\n      <member>\n        <AdjustmentType>ExactCapacity</AdjustmentType>\n      </member>\n      <member>\n        <AdjustmentType>PercentChangeInCapacity</AdjustmentType>\n      </member>\n    </AdjustmentTypes>\n  </DescribeAdjustmentTypesResult>\n  <ResponseMetadata>\n    <RequestId>6782caf9-9167-11e2-9223-abe83dfc0567</RequestId>\n  </ResponseMetadata>\n</DescribeAdjustmentTypesResponse>\n', OperationModel(name=DescribeAdjustmentTypes), {'ResponseMetadata': {'RequestId': '6782caf9-9167-11e2-9223-abe83dfc0567'}, 'AdjustmentTypes': [{'AdjustmentType': 'ChangeInCapacity'}, {'AdjustmentType': 'ExactCapacity'}, {'AdjustmentType': 'PercentChangeInCapacity'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-auto-scaling-groups.xml', b'<DescribeAutoScalingGroupsResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeAutoScalingGroupsResult>\n    <AutoScalingGroups/>\n  </DescribeAutoScalingGroupsResult>\n  <ResponseMetadata>\n    <RequestId>681e6e72-9167-11e2-ba50-d18200895d59</RequestId>\n  </ResponseMetadata>\n</DescribeAutoScalingGroupsResponse>\n', OperationModel(name=DescribeAutoScalingGroups), {'AutoScalingGroups': [], 'ResponseMetadata': {'RequestId': '681e6e72-9167-11e2-ba50-d18200895d59'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-auto-scaling-instances.xml', b'<DescribeAutoScalingInstancesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeAutoScalingInstancesResult>\n    <AutoScalingInstances/>\n  </DescribeAutoScalingInstancesResult>\n  <ResponseMetadata>\n    <RequestId>67af58ee-9167-11e2-ba50-d18200895d59</RequestId>\n  </ResponseMetadata>\n</DescribeAutoScalingInstancesResponse>\n', OperationModel(name=DescribeAutoScalingInstances), {'AutoScalingInstances': [], 'ResponseMetadata': {'RequestId': '67af58ee-9167-11e2-ba50-d18200895d59'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-auto-scaling-notification-types.xml', b'<DescribeAutoScalingNotificationTypesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeAutoScalingNotificationTypesResult>\n    <AutoScalingNotificationTypes>\n      <member>autoscaling:EC2_INSTANCE_LAUNCH</member>\n      <member>autoscaling:EC2_INSTANCE_LAUNCH_ERROR</member>\n      <member>autoscaling:EC2_INSTANCE_TERMINATE</member>\n      <member>autoscaling:EC2_INSTANCE_TERMINATE_ERROR</member>\n      <member>autoscaling:TEST_NOTIFICATION</member>\n    </AutoScalingNotificationTypes>\n  </DescribeAutoScalingNotificationTypesResult>\n  <ResponseMetadata>\n    <RequestId>68cc13f5-9167-11e2-9863-c1fc2ead119c</RequestId>\n  </ResponseMetadata>\n</DescribeAutoScalingNotificationTypesResponse>\n', OperationModel(name=DescribeAutoScalingNotificationTypes), {'AutoScalingNotificationTypes': ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR', 'autoscaling:TEST_NOTIFICATION'], 'ResponseMetadata': {'RequestId': '68cc13f5-9167-11e2-9863-c1fc2ead119c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-launch-configurations.xml', b'<DescribeLaunchConfigurationsResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeLaunchConfigurationsResult>\n    <LaunchConfigurations/>\n  </DescribeLaunchConfigurationsResult>\n  <ResponseMetadata>\n    <RequestId>67f31907-9167-11e2-9223-abe83dfc0567</RequestId>\n  </ResponseMetadata>\n</DescribeLaunchConfigurationsResponse>\n', OperationModel(name=DescribeLaunchConfigurations), {'LaunchConfigurations': [], 'ResponseMetadata': {'RequestId': '67f31907-9167-11e2-9223-abe83dfc0567'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-metric-collection-types.xml', b'<DescribeMetricCollectionTypesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeMetricCollectionTypesResult>\n    <Metrics>\n      <member>\n        <Metric>GroupMinSize</Metric>\n      </member>\n      <member>\n        <Metric>GroupMaxSize</Metric>\n      </member>\n      <member>\n        <Metric>GroupDesiredCapacity</Metric>\n      </member>\n      <member>\n        <Metric>GroupInServiceInstances</Metric>\n      </member>\n      <member>\n        <Metric>GroupPendingInstances</Metric>\n      </member>\n      <member>\n        <Metric>GroupTerminatingInstances</Metric>\n      </member>\n      <member>\n        <Metric>GroupTotalInstances</Metric>\n      </member>\n    </Metrics>\n    <Granularities>\n      <member>\n        <Granularity>1Minute</Granularity>\n      </member>\n    </Granularities>\n  </DescribeMetricCollectionTypesResult>\n  <ResponseMetadata>\n    <RequestId>6794a54b-9167-11e2-9223-abe83dfc0567</RequestId>\n  </ResponseMetadata>\n</DescribeMetricCollectionTypesResponse>\n', OperationModel(name=DescribeMetricCollectionTypes), {'Metrics': [{'Metric': 'GroupMinSize'}, {'Metric': 'GroupMaxSize'}, {'Metric': 'GroupDesiredCapacity'}, {'Metric': 'GroupInServiceInstances'}, {'Metric': 'GroupPendingInstances'}, {'Metric': 'GroupTerminatingInstances'}, {'Metric': 'GroupTotalInstances'}], 'Granularities': [{'Granularity': '1Minute'}], 'ResponseMetadata': {'RequestId': '6794a54b-9167-11e2-9223-abe83dfc0567'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-notification-configurations.xml', b'<DescribeNotificationConfigurationsResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeNotificationConfigurationsResult>\n    <NotificationConfigurations/>\n  </DescribeNotificationConfigurationsResult>\n  <ResponseMetadata>\n    <RequestId>680a7204-9167-11e2-b1be-9d56e7e138d4</RequestId>\n  </ResponseMetadata>\n</DescribeNotificationConfigurationsResponse>\n', OperationModel(name=DescribeNotificationConfigurations), {'ResponseMetadata': {'RequestId': '680a7204-9167-11e2-b1be-9d56e7e138d4'}, 'NotificationConfigurations': []}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-policies.xml', b'<DescribePoliciesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribePoliciesResult>\n    <ScalingPolicies/>\n  </DescribePoliciesResult>\n  <ResponseMetadata>\n    <RequestId>675a0dbe-9167-11e2-b1be-9d56e7e138d4</RequestId>\n  </ResponseMetadata>\n</DescribePoliciesResponse>\n', OperationModel(name=DescribePolicies), {'ScalingPolicies': [], 'ResponseMetadata': {'RequestId': '675a0dbe-9167-11e2-b1be-9d56e7e138d4'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-scaling-activities.xml', b'<DescribeScalingActivitiesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeScalingActivitiesResult>\n    <Activities/>\n  </DescribeScalingActivitiesResult>\n  <ResponseMetadata>\n    <RequestId>67459b5a-9167-11e2-b1be-9d56e7e138d4</RequestId>\n  </ResponseMetadata>\n</DescribeScalingActivitiesResponse>\n', OperationModel(name=DescribeScalingActivities), {'Activities': [], 'ResponseMetadata': {'RequestId': '67459b5a-9167-11e2-b1be-9d56e7e138d4'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-scaling-process-types.xml', b'<DescribeScalingProcessTypesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeScalingProcessTypesResult>\n    <Processes>\n      <member>\n        <ProcessName>AZRebalance</ProcessName>\n      </member>\n      <member>\n        <ProcessName>AddToLoadBalancer</ProcessName>\n      </member>\n      <member>\n        <ProcessName>AlarmNotification</ProcessName>\n      </member>\n      <member>\n        <ProcessName>HealthCheck</ProcessName>\n      </member>\n      <member>\n        <ProcessName>Launch</ProcessName>\n      </member>\n      <member>\n        <ProcessName>ReplaceUnhealthy</ProcessName>\n      </member>\n      <member>\n        <ProcessName>ScheduledActions</ProcessName>\n      </member>\n      <member>\n        <ProcessName>Terminate</ProcessName>\n      </member>\n    </Processes>\n  </DescribeScalingProcessTypesResult>\n  <ResponseMetadata>\n    <RequestId>67705466-9167-11e2-9223-abe83dfc0567</RequestId>\n  </ResponseMetadata>\n</DescribeScalingProcessTypesResponse>\n', OperationModel(name=DescribeScalingProcessTypes), {'Processes': [{'ProcessName': 'AZRebalance'}, {'ProcessName': 'AddToLoadBalancer'}, {'ProcessName': 'AlarmNotification'}, {'ProcessName': 'HealthCheck'}, {'ProcessName': 'Launch'}, {'ProcessName': 'ReplaceUnhealthy'}, {'ProcessName': 'ScheduledActions'}, {'ProcessName': 'Terminate'}], 'ResponseMetadata': {'RequestId': '67705466-9167-11e2-9223-abe83dfc0567'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-scheduled-actions.xml', b'<DescribeScheduledActionsResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeScheduledActionsResult>\n    <ScheduledUpdateGroupActions/>\n  </DescribeScheduledActionsResult>\n  <ResponseMetadata>\n    <RequestId>68de155d-9167-11e2-9223-abe83dfc0567</RequestId>\n  </ResponseMetadata>\n</DescribeScheduledActionsResponse>\n', OperationModel(name=DescribeScheduledActions), {'ResponseMetadata': {'RequestId': '68de155d-9167-11e2-9223-abe83dfc0567'}, 'ScheduledUpdateGroupActions': []}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-tags.xml', b'<DescribeTagsResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeTagsResult>\n    <Tags/>\n  </DescribeTagsResult>\n  <ResponseMetadata>\n    <RequestId>67c5c76d-9167-11e2-9863-c1fc2ead119c</RequestId>\n  </ResponseMetadata>\n</DescribeTagsResponse>\n', OperationModel(name=DescribeTags), {'ResponseMetadata': {'RequestId': '67c5c76d-9167-11e2-9863-c1fc2ead119c'}, 'Tags': []}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/autoscaling-describe-termination-policy-types.xml', b'<DescribeTerminationPolicyTypesResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <DescribeTerminationPolicyTypesResult>\n    <TerminationPolicyTypes>\n      <member>ClosestToNextInstanceHour</member>\n      <member>Default</member>\n      <member>NewestInstance</member>\n      <member>OldestInstance</member>\n      <member>OldestLaunchConfiguration</member>\n    </TerminationPolicyTypes>\n  </DescribeTerminationPolicyTypesResult>\n  <ResponseMetadata>\n    <RequestId>67e117a5-9167-11e2-9223-abe83dfc0567</RequestId>\n  </ResponseMetadata>\n</DescribeTerminationPolicyTypesResponse>\n', OperationModel(name=DescribeTerminationPolicyTypes), {'TerminationPolicyTypes': ['ClosestToNextInstanceHour', 'Default', 'NewestInstance', 'OldestInstance', 'OldestLaunchConfiguration'], 'ResponseMetadata': {'RequestId': '67e117a5-9167-11e2-9223-abe83dfc0567'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-create-virtual-mfa-device.xml', b'<CreateVirtualMFADeviceResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <CreateVirtualMFADeviceResult>\n    <VirtualMFADevice>\n      <QRCodePNG>Zm9v</QRCodePNG>\n      <Base32StringSeed>VTNJV09MNTZFSjNRNUlMWUJMVTZOTFROWlIzVjVTQU9XS1E1QU9FUEVRVVVHUUpGVkRRS09BMk43T0FOVEhCUg==</Base32StringSeed>\n      <SerialNumber>arn:aws:iam::419278470775:mfa/ExampleMFADevice</SerialNumber>\n    </VirtualMFADevice>\n  </CreateVirtualMFADeviceResult>\n  <ResponseMetadata>\n    <RequestId>c7bf48a5-d35c-11e2-b096-29dca78bf3ce</RequestId>\n  </ResponseMetadata>\n</CreateVirtualMFADeviceResponse>\n', OperationModel(name=CreateVirtualMFADevice), {'ResponseMetadata': {'RequestId': 'c7bf48a5-d35c-11e2-b096-29dca78bf3ce'}, 'VirtualMFADevice': {'Base32StringSeed': 'U3IWOL56EJ3Q5ILYBLU6NLTNZR3V5SAOWKQ5AOEPEQUUGQJFVDQKOA2N7OANTHBR', 'SerialNumber': 'arn:aws:iam::419278470775:mfa/ExampleMFADevice', 'QRCodePNG': 'foo'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-get-account-summary.xml', b'<GetAccountSummaryResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <GetAccountSummaryResult>\n    <SummaryMap>\n      <entry>\n        <key>Users</key>\n        <value>1</value>\n      </entry>\n      <entry>\n        <key>GroupsQuota</key>\n        <value>100</value>\n      </entry>\n      <entry>\n        <key>RolesQuota</key>\n        <value>250</value>\n      </entry>\n      <entry>\n        <key>GroupPolicySizeQuota</key>\n        <value>5120</value>\n      </entry>\n      <entry>\n        <key>ServerCertificates</key>\n        <value>0</value>\n      </entry>\n      <entry>\n        <key>ServerCertificatesQuota</key>\n        <value>10</value>\n      </entry>\n      <entry>\n        <key>Groups</key>\n        <value>0</value>\n      </entry>\n      <entry>\n        <key>MFADevicesInUse</key>\n        <value>0</value>\n      </entry>\n      <entry>\n        <key>UsersQuota</key>\n        <value>5000</value>\n      </entry>\n      <entry>\n        <key>AccountMFAEnabled</key>\n        <value>0</value>\n      </entry>\n      <entry>\n        <key>InstanceProfilesQuota</key>\n        <value>100</value>\n      </entry>\n      <entry>\n        <key>MFADevices</key>\n        <value>0</value>\n      </entry>\n      <entry>\n        <key>AccessKeysPerUserQuota</key>\n        <value>2</value>\n      </entry>\n      <entry>\n        <key>RolePolicySizeQuota</key>\n        <value>10240</value>\n      </entry>\n      <entry>\n        <key>UserPolicySizeQuota</key>\n        <value>2048</value>\n      </entry>\n      <entry>\n        <key>GroupsPerUserQuota</key>\n        <value>10</value>\n      </entry>\n      <entry>\n        <key>SigningCertificatesPerUserQuota</key>\n        <value>2</value>\n      </entry>\n      <entry>\n        <key>AssumeRolePolicySizeQuota</key>\n        <value>2048</value>\n      </entry>\n      <entry>\n        <key>InstanceProfiles</key>\n        <value>0</value>\n      </entry>\n      <entry>\n        <key>Roles</key>\n        <value>0</value>\n      </entry>\n    </SummaryMap>\n  </GetAccountSummaryResult>\n  <ResponseMetadata>\n    <RequestId>a8e3b3ed-9167-11e2-8a19-1174a5b297de</RequestId>\n  </ResponseMetadata>\n</GetAccountSummaryResponse>\n', OperationModel(name=GetAccountSummary), {'SummaryMap': {'AccessKeysPerUserQuota': 2, 'AssumeRolePolicySizeQuota': 2048, 'UsersQuota': 5000, 'GroupsPerUserQuota': 10, 'Users': 1, 'Roles': 0, 'MFADevices': 0, 'InstanceProfilesQuota': 100, 'AccountMFAEnabled': 0, 'ServerCertificates': 0, 'UserPolicySizeQuota': 2048, 'RolePolicySizeQuota': 10240, 'MFADevicesInUse': 0, 'GroupsQuota': 100, 'Groups': 0, 'InstanceProfiles': 0, 'GroupPolicySizeQuota': 5120, 'SigningCertificatesPerUserQuota': 2, 'ServerCertificatesQuota': 10, 'RolesQuota': 250}, 'ResponseMetadata': {'RequestId': 'a8e3b3ed-9167-11e2-8a19-1174a5b297de'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-get-group.xml', b'<GetGroupResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <GetGroupResult>\n    <Users>\n      <member>\n        <UserId>AIDAIWOYUHHXRAGTJC6H2</UserId>\n        <Path>/</Path>\n        <UserName>harry</UserName>\n        <Arn>arn:aws:iam::419278470775:user/harry</Arn>\n        <CreateDate>2013-06-04T13:20:49Z</CreateDate>\n      </member>\n    </Users>\n    <IsTruncated>false</IsTruncated>\n    <Group>\n      <GroupId>AGPAIX2UU43C4MKIJO6OE</GroupId>\n      <GroupName>test_admin</GroupName>\n      <Path>/</Path>\n      <Arn>arn:aws:iam::419278470775:group/test_admin</Arn>\n      <CreateDate>2013-06-04T13:19:26Z</CreateDate>\n    </Group>\n  </GetGroupResult>\n  <ResponseMetadata>\n    <RequestId>b23a1f90-d364-11e2-9e37-0baaf58cf1ee</RequestId>\n  </ResponseMetadata>\n</GetGroupResponse>\n', OperationModel(name=GetGroup), {'Group': {'Path': '/', 'CreateDate': '2013-06-04T13:19:26Z', 'GroupId': 'AGPAIX2UU43C4MKIJO6OE', 'Arn': 'arn:aws:iam::419278470775:group/test_admin', 'GroupName': 'test_admin'}, 'Users': [{'UserName': 'harry', 'Path': '/', 'CreateDate': '2013-06-04T13:20:49Z', 'UserId': 'AIDAIWOYUHHXRAGTJC6H2', 'Arn': 'arn:aws:iam::419278470775:user/harry'}], 'ResponseMetadata': {'RequestId': 'b23a1f90-d364-11e2-9e37-0baaf58cf1ee'}, 'IsTruncated': False}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-get-user-policy.xml', b'<GetUserPolicyResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <GetUserPolicyResult>\n    <PolicyName>test</PolicyName>\n    <UserName>test</UserName>\n    <PolicyDocument>%7B%0A%20%20%22Statement%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22Sid%22%3A%20%22Stmt1331504410389%22%2C%0A%20%20%20%20%20%20%22Action%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%22ec2%3ACreateSnapshot%22%2C%0A%20%20%20%20%20%20%20%20%22ec2%3ADescribeInstances%22%2C%0A%20%20%20%20%20%20%20%20%22ec2%3ADescribeVolumes%22%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%22Effect%22%3A%20%22Allow%22%2C%0A%20%20%20%20%20%20%22Resource%22%3A%20%22%2A%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D</PolicyDocument>\n  </GetUserPolicyResult>\n  <ResponseMetadata>\n    <RequestId>5a2702d5-bcfd-11e2-b2db-2f18d5db5f10</RequestId>\n  </ResponseMetadata>\n</GetUserPolicyResponse>\n', OperationModel(name=GetUserPolicy), {'UserName': 'test', 'PolicyName': 'test', 'PolicyDocument': {'Statement': [{'Action': ['ec2:CreateSnapshot', 'ec2:DescribeInstances', 'ec2:DescribeVolumes'], 'Resource': '*', 'Effect': 'Allow', 'Sid': 'Stmt1331504410389'}]}, 'ResponseMetadata': {'RequestId': '5a2702d5-bcfd-11e2-b2db-2f18d5db5f10'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-get-user.xml', b'<GetUserResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <GetUserResult>\n    <User>\n      <UserId>123456789012</UserId>\n      <Arn>arn:aws:iam::123456789012:root</Arn>\n      <CreateDate>2011-12-19T23:16:46Z</CreateDate>\n    </User>\n  </GetUserResult>\n  <ResponseMetadata>\n    <RequestId>a8ca5eb9-9167-11e2-8395-2fafede00095</RequestId>\n  </ResponseMetadata>\n</GetUserResponse>\n', OperationModel(name=GetUser), {'User': {'CreateDate': '2011-12-19T23:16:46Z', 'UserId': '123456789012', 'Arn': 'arn:aws:iam::123456789012:root'}, 'ResponseMetadata': {'RequestId': 'a8ca5eb9-9167-11e2-8395-2fafede00095'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-access-keys.xml', b'<ListAccessKeysResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <ListAccessKeysResult>\n    <UserName>Bob</UserName>\n    <AccessKeyMetadata>\n      <member>\n        <UserName>Bob</UserName>\n        <AccessKeyId>AKIAIOSFODNN7EXAMPLE</AccessKeyId>\n        <Status>Active</Status>\n      </member>\n      <member>\n        <UserName>Bob</UserName>\n        <AccessKeyId>AKIAI44QH8DHBEXAMPLE</AccessKeyId>\n        <Status>Inactive</Status>\n      </member>\n    </AccessKeyMetadata>\n    <IsTruncated>false</IsTruncated>\n  </ListAccessKeysResult>\n  <ResponseMetadata>\n    <RequestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestId>\n  </ResponseMetadata>\n</ListAccessKeysResponse>\n', OperationModel(name=ListAccessKeys), {'AccessKeyMetadata': [{'AccessKeyId': 'AKIAIOSFODNN7EXAMPLE', 'Status': 'Active', 'UserName': 'Bob'}, {'AccessKeyId': 'AKIAI44QH8DHBEXAMPLE', 'Status': 'Inactive', 'UserName': 'Bob'}], 'IsTruncated': False, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-account-aliases.xml', b'<ListAccountAliasesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <ListAccountAliasesResult>\n    <IsTruncated>false</IsTruncated>\n    <AccountAliases>\n      <member>foocorporation</member>\n    </AccountAliases>\n  </ListAccountAliasesResult>\n  <ResponseMetadata>\n    <RequestId>c5a076e9-f1b0-11df-8fbe-45274EXAMPLE</RequestId>\n  </ResponseMetadata>\n</ListAccountAliasesResponse>\n', OperationModel(name=ListAccountAliases), {'AccountAliases': ['foocorporation'], 'IsTruncated': False, 'ResponseMetadata': {'RequestId': 'c5a076e9-f1b0-11df-8fbe-45274EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-groups.xml', b'<ListGroupsResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n   <ListGroupsResult>\n      <Groups>\n         <member>\n            <Path>/division_abc/subdivision_xyz/</Path>\n            <GroupName>Admins</GroupName>\n            <GroupId>AGPACKCEVSQ6C2EXAMPLE</GroupId>\n            <Arn>arn:aws:iam::123456789012:group/Admins</Arn>\n         </member>\n         <member>\n            <Path>/division_abc/subdivision_xyz/product_1234/engineering/</Path>\n            <GroupName>Test</GroupName>\n            <GroupId>AGP2MAB8DPLSRHEXAMPLE</GroupId>\n            <Arn>arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/engineering/Test</Arn>\n         </member>\n         <member>\n            <Path>/division_abc/subdivision_xyz/product_1234/</Path>\n            <GroupName>Managers</GroupName>\n            <GroupId>AGPIODR4TAW7CSEXAMPLE</GroupId>\n            <Arn>arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/Managers</Arn>\n         </member>\n      </Groups>\n      <IsTruncated>false</IsTruncated>\n   </ListGroupsResult>\n   <ResponseMetadata>\n      <RequestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestId>\n   </ResponseMetadata>\n</ListGroupsResponse>\n', OperationModel(name=ListGroups), {'Groups': [{'Arn': 'arn:aws:iam::123456789012:group/Admins', 'GroupId': 'AGPACKCEVSQ6C2EXAMPLE', 'GroupName': 'Admins', 'Path': '/division_abc/subdivision_xyz/'}, {'Arn': 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/engineering/Test', 'GroupId': 'AGP2MAB8DPLSRHEXAMPLE', 'GroupName': 'Test', 'Path': '/division_abc/subdivision_xyz/product_1234/engineering/'}, {'Arn': 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/Managers', 'GroupId': 'AGPIODR4TAW7CSEXAMPLE', 'GroupName': 'Managers', 'Path': '/division_abc/subdivision_xyz/product_1234/'}], 'IsTruncated': False, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-instance-profiles.xml', b'<ListInstanceProfilesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <ListInstanceProfilesResult>\n    <IsTruncated>false</IsTruncated>\n    <InstanceProfiles>\n      <member>\n        <Id>AIPACIFN4OZXG7EXAMPLE</Id>\n        <Roles/>\n        <InstanceProfileName>Database</InstanceProfileName>\n        <Path>/application_abc/component_xyz/</Path>\n        <Arn>arn:aws:iam::123456789012:instance-profile/application_abc/component_xyz/Database</Arn>\n        <CreateDate>2012-05-09T16:27:03Z</CreateDate>\n      </member>\n      <member>\n        <Id>AIPACZLSXM2EYYEXAMPLE</Id>\n        <Roles/>\n        <InstanceProfileName>Webserver</InstanceProfileName>\n        <Path>/application_abc/component_xyz/</Path>\n        <Arn>arn:aws:iam::123456789012:instance-profile/application_abc/component_xyz/Webserver</Arn>\n        <CreateDate>2012-05-09T16:27:11Z</CreateDate>\n      </member>\n    </InstanceProfiles>\n  </ListInstanceProfilesResult>\n  <ResponseMetadata>\n    <RequestId>fd74fa8d-99f3-11e1-a4c3-27EXAMPLE804</RequestId>\n  </ResponseMetadata>\n</ListInstanceProfilesResponse>\n', OperationModel(name=ListInstanceProfiles), {'InstanceProfiles': [{'Arn': 'arn:aws:iam::123456789012:instance-profile/application_abc/component_xyz/Database', 'CreateDate': '2012-05-09T16:27:03Z', 'InstanceProfileName': 'Database', 'Path': '/application_abc/component_xyz/', 'Roles': []}, {'Arn': 'arn:aws:iam::123456789012:instance-profile/application_abc/component_xyz/Webserver', 'CreateDate': '2012-05-09T16:27:11Z', 'InstanceProfileName': 'Webserver', 'Path': '/application_abc/component_xyz/', 'Roles': []}], 'IsTruncated': False, 'ResponseMetadata': {'RequestId': 'fd74fa8d-99f3-11e1-a4c3-27EXAMPLE804'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-mfa-devices.xml', b'<ListMFADevicesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n   <ListMFADevicesResult>\n      <MFADevices>\n         <member>\n            <UserName>Bob</UserName>\n            <SerialNumber>R1234</SerialNumber>\n         </member>\n      </MFADevices>\n      <IsTruncated>false</IsTruncated>\n   </ListMFADevicesResult>\n   <ResponseMetadata>\n      <RequestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestId>\n   </ResponseMetadata>\n</ListMFADevicesResponse>\n', OperationModel(name=ListMFADevices), {'IsTruncated': False, 'MFADevices': [{'SerialNumber': 'R1234', 'UserName': 'Bob'}], 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-roles.xml', b'<ListRolesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <ListRolesResult>\n    <IsTruncated>false</IsTruncated>\n    <Roles>\n      <member>\n        <Path>/application_abc/component_xyz/</Path>\n        <Arn>arn:aws:iam::123456789012:role/application_abc/component_xyz/S3Access</Arn>\n        <RoleName>S3Access</RoleName>\n        <AssumeRolePolicyDocument>%7B%22Version%22%3A%222008-10-17%22%2C%22Statement%22%3A%5B%7B%22Effect%22%3A%22Allow%22%2C%22Principal%22%3A%7B%22Service%22%3A%5B%22ec2.amazonaws.com%22%5D%7D%2C%22Action%22%3A%5B%22sts%3AAssumeRole%22%5D%7D%5D%7D</AssumeRolePolicyDocument>\n        <CreateDate>2012-05-09T15:45:35Z</CreateDate>\n        <RoleId>AROACVSVTSZYEXAMPLEYK</RoleId>\n      </member>\n      <member>\n        <Path>/application_abc/component_xyz/</Path>\n        <Arn>arn:aws:iam::123456789012:role/application_abc/component_xyz/SDBAccess</Arn>\n        <RoleName>SDBAccess</RoleName>\n        <AssumeRolePolicyDocument>%7B%22Version%22%3A%222008-10-17%22%2C%22Statement%22%3A%5B%7B%22Effect%22%3A%22Allow%22%2C%22Principal%22%3A%7B%22Service%22%3A%5B%22ec2.amazonaws.com%22%5D%7D%2C%22Action%22%3A%5B%22sts%3AAssumeRole%22%5D%7D%5D%7D</AssumeRolePolicyDocument>\n        <CreateDate>2012-05-09T15:45:45Z</CreateDate>\n        <RoleId>AROAC2ICXG32EXAMPLEWK</RoleId>\n      </member>\n    </Roles>\n  </ListRolesResult>\n  <ResponseMetadata>\n    <RequestId>20f7279f-99ee-11e1-a4c3-27EXAMPLE804</RequestId>\n  </ResponseMetadata>\n</ListRolesResponse>\n', OperationModel(name=ListRoles), {'ResponseMetadata': {'RequestId': '20f7279f-99ee-11e1-a4c3-27EXAMPLE804'}, 'IsTruncated': False, 'Roles': [{'AssumeRolePolicyDocument': {'Version': '2008-10-17', 'Statement': [{'Action': ['sts:AssumeRole'], 'Effect': 'Allow', 'Principal': {'Service': ['ec2.amazonaws.com']}}]}, 'RoleId': 'AROACVSVTSZYEXAMPLEYK', 'CreateDate': '2012-05-09T15:45:35Z', 'RoleName': 'S3Access', 'Path': '/application_abc/component_xyz/', 'Arn': 'arn:aws:iam::123456789012:role/application_abc/component_xyz/S3Access'}, {'AssumeRolePolicyDocument': {'Version': '2008-10-17', 'Statement': [{'Action': ['sts:AssumeRole'], 'Effect': 'Allow', 'Principal': {'Service': ['ec2.amazonaws.com']}}]}, 'RoleId': 'AROAC2ICXG32EXAMPLEWK', 'CreateDate': '2012-05-09T15:45:45Z', 'RoleName': 'SDBAccess', 'Path': '/application_abc/component_xyz/', 'Arn': 'arn:aws:iam::123456789012:role/application_abc/component_xyz/SDBAccess'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-server-certificates.xml', b'<ListServerCertificatesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <ListServerCertificatesResult>\n    <IsTruncated>false</IsTruncated>\n    <ServerCertificateMetadataList>\n      <member>\n        <ServerCertificateName>ProdServerCert</ServerCertificateName>\n        <Path>/company/servercerts/</Path>\n        <Arn>arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert</Arn>\n        <UploadDate>2010-05-08T01:02:03.004Z</UploadDate>\n        <ServerCertificateId>ASCACKCEVSQ6CEXAMPLE1</ServerCertificateId>\n      </member>\n      <member>\n        <ServerCertificateName>BetaServerCert</ServerCertificateName>\n        <Path>/company/servercerts/</Path>\n        <Arn>arn:aws:iam::123456789012:server-certificate/company/servercerts/BetaServerCert</Arn>\n        <UploadDate>2010-05-08T02:03:01.004Z</UploadDate>\n        <ServerCertificateId>ASCACKCEVSQ6CEXAMPLE2</ServerCertificateId>\n      </member>\n      <member>\n        <ServerCertificateName>TestServerCert</ServerCertificateName>\n        <Path>/company/servercerts/</Path>\n        <Arn>arn:aws:iam::123456789012:server-certificate/company/servercerts/TestServerCert</Arn>\n        <UploadDate>2010-05-08T03:01:02.004Z</UploadDate>\n        <ServerCertificateId>ASCACKCEVSQ6CEXAMPLE3</ServerCertificateId>\n      </member>\n    </ServerCertificateMetadataList>\n  </ListServerCertificatesResult>\n  <ResponseMetadata>\n    <RequestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestId>\n  </ResponseMetadata>\n</ListServerCertificatesResponse>\n', OperationModel(name=ListServerCertificates), {'IsTruncated': False, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}, 'ServerCertificateMetadataList': [{'Arn': 'arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert', 'Path': '/company/servercerts/', 'ServerCertificateId': 'ASCACKCEVSQ6CEXAMPLE1', 'ServerCertificateName': 'ProdServerCert', 'UploadDate': '2010-05-08T01:02:03.004Z'}, {'Arn': 'arn:aws:iam::123456789012:server-certificate/company/servercerts/BetaServerCert', 'Path': '/company/servercerts/', 'ServerCertificateId': 'ASCACKCEVSQ6CEXAMPLE2', 'ServerCertificateName': 'BetaServerCert', 'UploadDate': '2010-05-08T02:03:01.004Z'}, {'Arn': 'arn:aws:iam::123456789012:server-certificate/company/servercerts/TestServerCert', 'Path': '/company/servercerts/', 'ServerCertificateId': 'ASCACKCEVSQ6CEXAMPLE3', 'ServerCertificateName': 'TestServerCert', 'UploadDate': '2010-05-08T03:01:02.004Z'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-signing-certificates.xml', b'<ListSigningCertificatesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n   <ListSigningCertificatesResult>\n      <UserName>Bob</UserName>\n      <Certificates>\n         <member>\n            <UserName>Bob</UserName>\n            <CertificateId>TA7SMP42TDN5Z26OBPJE7EXAMPLE</CertificateId>\n            <CertificateBody>-----BEGIN CERTIFICATE-----\nMIICdzCCAeCgAwIBAgIGANc+Ha2wMA0GCSqGSIb3DQEBBQUAMFMxCzAJBgNVBAYT\nAlVTMRMwEQYDVQQKEwpBbWF6b24uY29tMQwwCgYDVQQLEwNBV1MxITAfBgNVBAMT\nGEFXUyBMaW1pdGVkLUFzc3VyYW5jZSBDQTAeFw0wOTAyMDQxNzE5MjdaFw0xMDAy\nMDQxNzE5MjdaMFIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBbWF6b24uY29tMRcw\nFQYDVQQLEw5BV1MtRGV2ZWxvcGVyczEVMBMGA1UEAxMMNTdxNDl0c3ZwYjRtMIGf\nMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCpB/vsOwmT/O0td1RqzKjttSBaPjbr\ndqwNe9BrOyB08fw2+Ch5oonZYXfGUrT6mkYXH5fQot9HvASrzAKHO596FdJA6DmL\nywdWe1Oggk7zFSXO1Xv+3vPrJtaYxYo3eRIp7w80PMkiOv6M0XK8ubcTouODeJbf\nsuDqcLnLDxwsvwIDAQABo1cwVTAOBgNVHQ8BAf8EBAMCBaAwFgYDVR0lAQH/BAww\nCgYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQULGNaBphBumaKbDRK\nCAi0mH8B3mowDQYJKoZIhvcNAQEFBQADgYEAuKxhkXaCLGcqDuweKtO/AEw9ZePH\nwr0XqsaIK2HZboqruebXEGsojK4Ks0WzwgrEynuHJwTn760xe39rSqXWIOGrOBaX\nwFpWHVjTFMKk+tSDG1lssLHyYWWdFFU4AnejRGORJYNaRHgVTKjHphc5jEhHm0BX\nAEaHzTpmEXAMPLE=\n-----END CERTIFICATE-----</CertificateBody>\n            <Status>Active</Status>\n         </member>\n      </Certificates>\n      <IsTruncated>false</IsTruncated>\n   </ListSigningCertificatesResult>\n   <ResponseMetadata>\n      <RequestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestId>\n   </ResponseMetadata>\n</ListSigningCertificatesResponse>\n', OperationModel(name=ListSigningCertificates), {'Certificates': [{'CertificateBody': '-----BEGIN CERTIFICATE-----\nMIICdzCCAeCgAwIBAgIGANc+Ha2wMA0GCSqGSIb3DQEBBQUAMFMxCzAJBgNVBAYT\nAlVTMRMwEQYDVQQKEwpBbWF6b24uY29tMQwwCgYDVQQLEwNBV1MxITAfBgNVBAMT\nGEFXUyBMaW1pdGVkLUFzc3VyYW5jZSBDQTAeFw0wOTAyMDQxNzE5MjdaFw0xMDAy\nMDQxNzE5MjdaMFIxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpBbWF6b24uY29tMRcw\nFQYDVQQLEw5BV1MtRGV2ZWxvcGVyczEVMBMGA1UEAxMMNTdxNDl0c3ZwYjRtMIGf\nMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCpB/vsOwmT/O0td1RqzKjttSBaPjbr\ndqwNe9BrOyB08fw2+Ch5oonZYXfGUrT6mkYXH5fQot9HvASrzAKHO596FdJA6DmL\nywdWe1Oggk7zFSXO1Xv+3vPrJtaYxYo3eRIp7w80PMkiOv6M0XK8ubcTouODeJbf\nsuDqcLnLDxwsvwIDAQABo1cwVTAOBgNVHQ8BAf8EBAMCBaAwFgYDVR0lAQH/BAww\nCgYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQULGNaBphBumaKbDRK\nCAi0mH8B3mowDQYJKoZIhvcNAQEFBQADgYEAuKxhkXaCLGcqDuweKtO/AEw9ZePH\nwr0XqsaIK2HZboqruebXEGsojK4Ks0WzwgrEynuHJwTn760xe39rSqXWIOGrOBaX\nwFpWHVjTFMKk+tSDG1lssLHyYWWdFFU4AnejRGORJYNaRHgVTKjHphc5jEhHm0BX\nAEaHzTpmEXAMPLE=\n-----END CERTIFICATE-----', 'CertificateId': 'TA7SMP42TDN5Z26OBPJE7EXAMPLE', 'Status': 'Active', 'UserName': 'Bob'}], 'IsTruncated': False, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-users.xml', b'<ListUsersResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n   <ListUsersResult>\n      <Users>\n         <member>\n            <Path>/division_abc/subdivision_xyz/engineering/</Path>\n            <UserName>Andrew</UserName>\n            <UserId>AID2MAB8DPLSRHEXAMPLE</UserId>\n            <Arn>arn:aws:iam::123456789012:user\n            /division_abc/subdivision_xyz/engineering/Andrew</Arn>\n         </member>\n         <member>\n            <Path>/division_abc/subdivision_xyz/engineering/</Path>\n            <UserName>Jackie</UserName>\n            <UserId>AIDIODR4TAW7CSEXAMPLE</UserId>\n            <Arn>arn:aws:iam::123456789012:user\n            /division_abc/subdivision_xyz/engineering/Jackie</Arn>\n         </member>\n      </Users>\n      <IsTruncated>false</IsTruncated>\n   </ListUsersResult>\n   <ResponseMetadata>\n      <RequestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestId>\n   </ResponseMetadata>\n</ListUsersResponse>\n', OperationModel(name=ListUsers), {'IsTruncated': False, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}, 'Users': [{'Arn': 'arn:aws:iam::123456789012:user\n            /division_abc/subdivision_xyz/engineering/Andrew', 'Path': '/division_abc/subdivision_xyz/engineering/', 'UserId': 'AID2MAB8DPLSRHEXAMPLE', 'UserName': 'Andrew'}, {'Arn': 'arn:aws:iam::123456789012:user\n            /division_abc/subdivision_xyz/engineering/Jackie', 'Path': '/division_abc/subdivision_xyz/engineering/', 'UserId': 'AIDIODR4TAW7CSEXAMPLE', 'UserName': 'Jackie'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/iam-list-virtual-mfa-devices.xml', b'<ListVirtualMFADevicesResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <ListVirtualMFADevicesResult>\n    <IsTruncated>false</IsTruncated>\n    <VirtualMFADevices>\n      <member>\n        <SerialNumber>arn:aws:iam::123456789012:mfa/MFAdeviceName</SerialNumber>\n      </member>\n      <member>\n        <SerialNumber>arn:aws:iam::123456789012:mfa/RootMFAdeviceName</SerialNumber>\n        <EnableDate>2011-10-20T20:49:03Z</EnableDate>\n        <User>\n          <UserId>123456789012</UserId>\n          <Arn>arn:aws:iam::123456789012:root</Arn>\n          <CreateDate>2009-10-13T22:00:36Z</CreateDate>\n        </User>\n      </member>\n      <member>\n        <SerialNumber>arn:aws:iam:::mfa/ExampleUserMFAdeviceName</SerialNumber>\n        <EnableDate>2011-10-31T20:45:02Z</EnableDate>\n        <User>\n          <UserId>AIDEXAMPLE4EXAMPLEXYZ</UserId>\n          <Path>/</Path>\n          <UserName>ExampleUser</UserName>\n          <Arn>arn:aws:iam::111122223333:user/ExampleUser</Arn>\n          <CreateDate>2011-07-01T17:23:07Z</CreateDate>\n        </User>\n      </member>\n    </VirtualMFADevices>\n  </ListVirtualMFADevicesResult>\n  <ResponseMetadata>\n    <RequestId>b61ce1b1-0401-11e1-b2f8-2dEXAMPLEbfc</RequestId>\n  </ResponseMetadata>\n</ListVirtualMFADevicesResponse>\n', OperationModel(name=ListVirtualMFADevices), {'IsTruncated': False, 'ResponseMetadata': {'RequestId': 'b61ce1b1-0401-11e1-b2f8-2dEXAMPLEbfc'}, 'VirtualMFADevices': [{'SerialNumber': 'arn:aws:iam::123456789012:mfa/MFAdeviceName'}, {'EnableDate': '2011-10-20T20:49:03Z', 'SerialNumber': 'arn:aws:iam::123456789012:mfa/RootMFAdeviceName', 'User': {'Arn': 'arn:aws:iam::123456789012:root', 'CreateDate': '2009-10-13T22:00:36Z', 'UserId': '123456789012'}}, {'EnableDate': '2011-10-31T20:45:02Z', 'SerialNumber': 'arn:aws:iam:::mfa/ExampleUserMFAdeviceName', 'User': {'Arn': 'arn:aws:iam::111122223333:user/ExampleUser', 'CreateDate': '2011-07-01T17:23:07Z', 'Path': '/', 'UserId': 'AIDEXAMPLE4EXAMPLEXYZ', 'UserName': 'ExampleUser'}}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/importexport-list-jobs.xml', b'<ListJobsResponse xmlns="http://importexport.amazonaws.com/doc/2010-06-01/">\n  <ListJobsResult>\n    <Jobs>\n      <member>\n        <JobType>Import</JobType>\n        <CreationDate>2010-04-21T22:21:51Z</CreationDate>\n        <IsCanceled>false</IsCanceled>\n        <JobId>ADP7B</JobId>\n      </member>\n      <member>\n        <JobType>Import</JobType>\n        <CreationDate>2010-04-21T22:19:05Z</CreationDate>\n        <IsCanceled>false</IsCanceled>\n        <JobId>AVEYF</JobId>\n      </member>\n    </Jobs>\n    <IsTruncated>true</IsTruncated>\n  </ListJobsResult>\n  <ResponseMetadata>\n    <RequestId>cc6ea8c0-4da9-11df-81c3-e94d3ca214a8</RequestId>\n  </ResponseMetadata>\n</ListJobsResponse>\n', OperationModel(name=ListJobs), {'IsTruncated': True, 'Jobs': [{'CreationDate': '2010-04-21T22:21:51Z', 'IsCanceled': False, 'JobId': 'ADP7B', 'JobType': 'Import'}, {'CreationDate': '2010-04-21T22:19:05Z', 'IsCanceled': False, 'JobId': 'AVEYF', 'JobType': 'Import'}], 'ResponseMetadata': {'RequestId': 'cc6ea8c0-4da9-11df-81c3-e94d3ca214a8'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-add-permission.xml', b'<AddPermissionResponse  xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n    <ResponseMetadata>\n        <RequestId>9a285199-c8d6-47c2-bdb2-314cb47d599d</RequestId>\n    </ResponseMetadata>\n</AddPermissionResponse>\n', OperationModel(name=AddPermission), {'ResponseMetadata': {'RequestId': '9a285199-c8d6-47c2-bdb2-314cb47d599d'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-change-message-visibility-batch.xml', b'<ChangeMessageVisibilityBatchResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n    <ChangeMessageVisibilityBatchResult>\n        <ChangeMessageVisibilityBatchResultEntry>\n            <Id>change_visibility_msg_2</Id>\n        </ChangeMessageVisibilityBatchResultEntry>\n        <ChangeMessageVisibilityBatchResultEntry>\n            <Id>change_visibility_msg_3</Id>\n        </ChangeMessageVisibilityBatchResultEntry>\n    </ChangeMessageVisibilityBatchResult>\n    <ResponseMetadata>\n        <RequestId>ca9668f7-ab1b-4f7a-8859-f15747ab17a7</RequestId>\n    </ResponseMetadata>\n</ChangeMessageVisibilityBatchResponse>\n', OperationModel(name=ChangeMessageVisibilityBatch), {'Successful': [{'Id': 'change_visibility_msg_2'}, {'Id': 'change_visibility_msg_3'}], 'ResponseMetadata': {'RequestId': 'ca9668f7-ab1b-4f7a-8859-f15747ab17a7'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-create-queue.xml', b'<CreateQueueResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n    <CreateQueueResult>\n        <QueueUrl>http://sqs.us-east-1.amazonaws.com/123456789012/testQueue</QueueUrl>\n    </CreateQueueResult>\n    <ResponseMetadata>\n        <RequestId>7a62c49f-347e-4fc4-9331-6e8e7a96aa73</RequestId>\n    </ResponseMetadata>\n</CreateQueueResponse>\n', OperationModel(name=CreateQueue), {'QueueUrl': 'http://sqs.us-east-1.amazonaws.com/123456789012/testQueue', 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8e7a96aa73'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-delete-message-batch.xml', b'<DeleteMessageBatchResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n    <DeleteMessageBatchResult>\n        <DeleteMessageBatchResultEntry>\n            <Id>msg1</Id>\n        </DeleteMessageBatchResultEntry>\n        <DeleteMessageBatchResultEntry>\n            <Id>msg2</Id>\n        </DeleteMessageBatchResultEntry>\n    </DeleteMessageBatchResult>\n    <ResponseMetadata>\n        <RequestId>d6f86b7a-74d1-4439-b43f-196a1e29cd85</RequestId>\n    </ResponseMetadata>\n</DeleteMessageBatchResponse>\n', OperationModel(name=DeleteMessageBatch), {'Successful': [{'Id': 'msg1'}, {'Id': 'msg2'}], 'ResponseMetadata': {'RequestId': 'd6f86b7a-74d1-4439-b43f-196a1e29cd85'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-get-queue-attributes.xml', b'<?xml version="1.0"?>\n<GetQueueAttributesResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n  <GetQueueAttributesResult>\n    <Attribute>\n      <Name>QueueArn</Name>\n      <Value>arn:aws:sqs:us-east-1:123456789012:test1351044153</Value>\n    </Attribute>\n    <Attribute>\n      <Name>ApproximateNumberOfMessages</Name>\n      <Value>0</Value>\n    </Attribute>\n    <Attribute>\n      <Name>ApproximateNumberOfMessagesNotVisible</Name>\n      <Value>0</Value>\n    </Attribute>\n    <Attribute>\n      <Name>ApproximateNumberOfMessagesDelayed</Name>\n      <Value>0</Value>\n    </Attribute>\n    <Attribute>\n      <Name>CreatedTimestamp</Name>\n      <Value>1351044153</Value>\n    </Attribute>\n    <Attribute>\n      <Name>LastModifiedTimestamp</Name>\n      <Value>1351044214</Value>\n    </Attribute>\n    <Attribute>\n      <Name>VisibilityTimeout</Name>\n      <Value>45</Value>\n    </Attribute>\n    <Attribute>\n      <Name>MaximumMessageSize</Name>\n      <Value>65536</Value>\n    </Attribute>\n    <Attribute>\n      <Name>MessageRetentionPeriod</Name>\n      <Value>345600</Value>\n    </Attribute>\n    <Attribute>\n      <Name>DelaySeconds</Name>\n      <Value>0</Value>\n  </Attribute>\n  </GetQueueAttributesResult>\n  <ResponseMetadata>\n    <RequestId>0c8d2786-b7b4-56e2-a823-6e80a404d6fd</RequestId>\n  </ResponseMetadata>\n</GetQueueAttributesResponse>\n', OperationModel(name=GetQueueAttributes), {'Attributes': {'ApproximateNumberOfMessagesNotVisible': '0', 'CreatedTimestamp': '1351044153', 'QueueArn': 'arn:aws:sqs:us-east-1:123456789012:test1351044153', 'ApproximateNumberOfMessages': '0', 'DelaySeconds': '0', 'VisibilityTimeout': '45', 'ApproximateNumberOfMessagesDelayed': '0', 'MessageRetentionPeriod': '345600', 'LastModifiedTimestamp': '1351044214', 'MaximumMessageSize': '65536'}, 'ResponseMetadata': {'RequestId': '0c8d2786-b7b4-56e2-a823-6e80a404d6fd'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-get-queue-url.xml', b'<GetQueueUrlResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n    <GetQueueUrlResult>\n        <QueueUrl>http://sqs.us-east-1.amazonaws.com/123456789012/testQueue</QueueUrl>\n    </GetQueueUrlResult>\n    <ResponseMetadata>\n        <RequestId>470a6f13-2ed9-4181-ad8a-2fdea142988e</RequestId>\n    </ResponseMetadata>\n</GetQueueUrlResponse>\n', OperationModel(name=GetQueueUrl), {'QueueUrl': 'http://sqs.us-east-1.amazonaws.com/123456789012/testQueue', 'ResponseMetadata': {'RequestId': '470a6f13-2ed9-4181-ad8a-2fdea142988e'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-list-queues.xml', b'<?xml version="1.0"?>\n<ListQueuesResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n  <ListQueuesResult>\n    <QueueUrl>https://us-west-2.queue.amazonaws.com/123456789012/foobar</QueueUrl>\n    <QueueUrl>https://us-west-2.queue.amazonaws.com/123456789012/fiebaz</QueueUrl>\n  </ListQueuesResult>\n  <ResponseMetadata>\n    <RequestId>517c6371-751f-5711-9ebc-2ab2b1a92268</RequestId>\n  </ResponseMetadata>\n</ListQueuesResponse>\n', OperationModel(name=ListQueues), {'QueueUrls': ['https://us-west-2.queue.amazonaws.com/123456789012/foobar', 'https://us-west-2.queue.amazonaws.com/123456789012/fiebaz'], 'ResponseMetadata': {'RequestId': '517c6371-751f-5711-9ebc-2ab2b1a92268'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-receive-message.xml', b'<ReceiveMessageResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n  <ReceiveMessageResult>\n    <Message>\n      <MessageId>5fea7756-0ea4-451a-a703-a558b933e274</MessageId>\n      <ReceiptHandle>MbZj6wDWli+JvwwJaBV+3dcjk2YW2vA3+STFFljTM8tJJg6HRG6PYSasuWXPJB+Cw\n        Lj1FjgXUv1uSj1gUPAWV66FU/WeR4mq2OKpEGYWbnLmpRCJVAyeMjeU5ZBdtcQ+QE\n        auMZc8ZRv37sIW2iJKq3M9MFx1YvV11A2x/KSbkJ0=</ReceiptHandle>\n      <MD5OfBody>fafb00f5732ab283681e124bf8747ed1</MD5OfBody>\n      <Body>This is a test message</Body>\n      <Attribute>\n        <Name>SenderId</Name>\n        <Value>195004372649</Value>\n      </Attribute>\n      <Attribute>\n        <Name>SentTimestamp</Name>\n        <Value>1238099229000</Value>\n      </Attribute>\n      <Attribute>\n        <Name>ApproximateReceiveCount</Name>\n        <Value>5</Value>\n      </Attribute>\n      <Attribute>\n        <Name>ApproximateFirstReceiveTimestamp</Name>\n        <Value>1250700979248</Value>\n      </Attribute>\n    </Message>\n  </ReceiveMessageResult>\n  <ResponseMetadata>\n    <RequestId>b6633655-283d-45b4-aee4-4e84e0ae6afa</RequestId>\n  </ResponseMetadata>\n</ReceiveMessageResponse>\n', OperationModel(name=ReceiveMessage), {'Messages': [{'Body': 'This is a test message', 'Attributes': {'ApproximateFirstReceiveTimestamp': '1250700979248', 'SenderId': '195004372649', 'ApproximateReceiveCount': '5', 'SentTimestamp': '1238099229000'}, 'ReceiptHandle': 'MbZj6wDWli+JvwwJaBV+3dcjk2YW2vA3+STFFljTM8tJJg6HRG6PYSasuWXPJB+Cw\n        Lj1FjgXUv1uSj1gUPAWV66FU/WeR4mq2OKpEGYWbnLmpRCJVAyeMjeU5ZBdtcQ+QE\n        auMZc8ZRv37sIW2iJKq3M9MFx1YvV11A2x/KSbkJ0=', 'MD5OfBody': 'fafb00f5732ab283681e124bf8747ed1', 'MessageId': '5fea7756-0ea4-451a-a703-a558b933e274'}], 'ResponseMetadata': {'RequestId': 'b6633655-283d-45b4-aee4-4e84e0ae6afa'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-send-message-batch.xml', b'<SendMessageBatchResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n<SendMessageBatchResult>\n    <SendMessageBatchResultEntry>\n        <Id>test_msg_001</Id>\n        <MessageId>0a5231c7-8bff-4955-be2e-8dc7c50a25fa</MessageId>\n        <MD5OfMessageBody>0e024d309850c78cba5eabbeff7cae71</MD5OfMessageBody>\n    </SendMessageBatchResultEntry>\n    <SendMessageBatchResultEntry>\n        <Id>test_msg_002</Id>\n        <MessageId>15ee1ed3-87e7-40c1-bdaa-2e49968ea7e9</MessageId>\n        <MD5OfMessageBody>7fb8146a82f95e0af155278f406862c2</MD5OfMessageBody>\n    </SendMessageBatchResultEntry>\n</SendMessageBatchResult>\n<ResponseMetadata>\n    <RequestId>ca1ad5d0-8271-408b-8d0f-1351bf547e74</RequestId>\n</ResponseMetadata>\n</SendMessageBatchResponse>\n', OperationModel(name=SendMessageBatch), {'Successful': [{'MD5OfMessageBody': '0e024d309850c78cba5eabbeff7cae71', 'Id': 'test_msg_001', 'MessageId': '0a5231c7-8bff-4955-be2e-8dc7c50a25fa'}, {'MD5OfMessageBody': '7fb8146a82f95e0af155278f406862c2', 'Id': 'test_msg_002', 'MessageId': '15ee1ed3-87e7-40c1-bdaa-2e49968ea7e9'}], 'ResponseMetadata': {'RequestId': 'ca1ad5d0-8271-408b-8d0f-1351bf547e74'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sqs-send-message.xml', b'<SendMessageResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n    <SendMessageResult>\n        <MD5OfMessageBody>fafb00f5732ab283681e124bf8747ed1</MD5OfMessageBody>\n        <MessageId>5fea7756-0ea4-451a-a703-a558b933e274</MessageId>\n    </SendMessageResult>\n    <ResponseMetadata>\n        <RequestId>27daac76-34dd-47df-bd01-1f6e873584a0</RequestId>\n    </ResponseMetadata>\n</SendMessageResponse>\n', OperationModel(name=SendMessage), {'MD5OfMessageBody': 'fafb00f5732ab283681e124bf8747ed1', 'ResponseMetadata': {'RequestId': '27daac76-34dd-47df-bd01-1f6e873584a0'}, 'MessageId': '5fea7756-0ea4-451a-a703-a558b933e274'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-get-cloud-front-origin-access-identity.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<CloudFrontOriginAccessIdentity xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Id>E74FTE3AEXAMPLE</Id>\n   <S3CanonicalUserId>cd13868f797c227fbea2830611a26fe0a21ba1b826ab4bed9b7771c9aEXAMPLE</S3CanonicalUserId>\n   <CloudFrontOriginAccessIdentityConfig> \n      <CallerReference>20120229090000</CallerReference>\n      <Comment>My comments</Comment>\n   </CloudFrontOriginAccessIdentityConfig>\n</CloudFrontOriginAccessIdentity>\n\n', OperationModel(name=GetCloudFrontOriginAccessIdentity), {'CloudFrontOriginAccessIdentity': {'CloudFrontOriginAccessIdentityConfig': {'Comment': 'My comments', 'CallerReference': '20120229090000'}, 'S3CanonicalUserId': 'cd13868f797c227fbea2830611a26fe0a21ba1b826ab4bed9b7771c9aEXAMPLE', 'Id': 'E74FTE3AEXAMPLE'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-get-distribution.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<Distribution xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Id>EDFDVBD6EXAMPLE</Id>\n   <Status>Deployed</Status>\n   <LastModifiedTime>2012-05-19T19:37:58Z</LastModifiedTime>\n   <InProgressInvalidationBatches>1</InProgressInvalidationBatches>\n   <DomainName>d111111abcdef8.cloudfront.net</DomainName>\n   <ActiveTrustedSigners>\n      <Quantity>3</Quantity>\n      <Items>\n         <Signer>\n            <AwsAccountNumber>self</AwsAccountNumber>\n            <KeyPairIds>\n               <Quantity>1</Quantity>\n               <Items>\n                  <KeyPairId>APKA9ONS7QCOWEXAMPLE</KeyPairId>\n               </Items>\n            </KeyPairIds>\n         </Signer>\n         <Signer>\n            <AwsAccountNumber>111122223333</AwsAccountNumber>\n            <KeyPairIds>\n               <Quantity>2</Quantity>\n               <KeyPairId>APKAI72T5DYBXEXAMPLE</KeyPairId>\n               <KeyPairId>APKAU72D8DYNXEXAMPLE</KeyPairId>\n            </KeyPairIds>\n         </Signer>\n         <Signer>\n            <AwsAccountNumber>444455556666</AwsAccountNumber>\n            <KeyPairIds>\n               <Quantity>0</Quantity>\n            </KeyPairIds>\n         </Signer>\n      </Items>\n   </ActiveTrustedSigners>\n   <DistributionConfig>\n      <CallerReference>example.com2012-04-11-5:09pm</CallerReference>\n      <Aliases>\n         <Quantity>1</Quantity>\n         <Items>\n            <CNAME>www.example.com</CNAME>\n         </Items>\n      </Aliases>\n      <DefaultRootObject>index.html</DefaultRootObject>\n      <Origins>\n         <Quantity>2</Quantity>\n         <Items>\n            <Origin>\n               <Id>example-Amazon S3-origin</Id>\n               <DomainName>myawsbucket.s3.amazonaws.com</DomainName>\n               <S3OriginConfig>\n                  <OriginAccessIdentity>origin-access-identity/cloudfront/E74FTE3AEXAMPLE</OriginAccessIdentity>\n               </S3OriginConfig>\n            </Origin>\n            <Origin>\n               <Id>example-custom-origin</Id>\n               <DomainName>example.com</DomainName>\n               <CustomOriginConfig>\n                  <HTTPPort>80</HTTPPort>\n                  <HTTPSPort>443</HTTPSPort>\n                  <OriginProtocolPolicy>match-viewer</OriginProtocolPolicy>\n               </CustomOriginConfig>\n            </Origin>\n         </Items>\n      </Origins>\n      <DefaultCacheBehavior>\n         <TargetOriginId>example-Amazon S3-origin</TargetOriginId>\n         <ForwardedValues>\n            <QueryString>true</QueryString>\n            <Cookies>\n               <Forward>whitelist</Forward>\n               <WhitelistedNames>\n                  <Quantity>1</Quantity>\n                  <Items>\n                     <Name>example-cookie</Name>\n                  </Items>\n               </WhitelistedNames>\n            </Cookies>\n         </ForwardedValues>\n         <TrustedSigners>\n            <Enabled>true</Enabled>\n            <Quantity>3</Quantity>\n            <Items>\n               <AwsAccountNumber>self</AwsAccountNumber>\n               <AwsAccountNumber>111122223333</AwsAccountNumber>\n               <AwsAccountNumber>444455556666</AwsAccountNumber>\n            </Items>\n         </TrustedSigners>\n         <ViewerProtocolPolicy>https-only</ViewerProtocolPolicy>\n         <MinTTL>0</MinTTL>\n      </DefaultCacheBehavior>\n      <CacheBehaviors>\n         <Quantity>1</Quantity>\n         <Items>\n            <CacheBehavior>\n               <PathPattern>*.jpg</PathPattern>\n               <TargetOriginId>example-custom-origin</TargetOriginId>\n               <ForwardedValues>\n                  <QueryString>false</QueryString>\n                  <Cookies>\n                     <Forward>all</Forward>\n                  </Cookies>\n               </ForwardedValues>\n               <TrustedSigners>\n                  <Enabled>true</Enabled>\n                  <Quantity>2</Quantity>\n                  <Items>\n                     <AwsAccountNumber>self</AwsAccountNumber>\n                     <AwsAccountNumber>111122223333</AwsAccountNumber>\n                  </Items>\n               </TrustedSigners>\n               <ViewerProtocolPolicy>allow-all</ViewerProtocolPolicy>\n               <MinTTL>86400</MinTTL>\n            </CacheBehavior>\n         </Items>\n      </CacheBehaviors>\n      <Comment>example comment</Comment>\n      <Logging>\n         <Enabled>true</Enabled>\n         <IncludeCookies>true</IncludeCookies>\n         <Bucket>myawslogbucket.s3.amazonaws.com</Bucket>\n         <Prefix>example.com.</Prefix>\n      </Logging>\n      <ViewerCertificate>\n         <IAMCertificateId>AS1A2M3P4L5E67SIIXR3J</IAMCertificateId>\n      </ViewerCertificate>\n      <PriceClass>PriceClass_All</PriceClass>\n      <Enabled>true</Enabled>\n   </DistributionConfig>\n</Distribution>\n\n', OperationModel(name=GetDistribution), {'Distribution': {'Status': 'Deployed', 'DomainName': 'd111111abcdef8.cloudfront.net', 'InProgressInvalidationBatches': 1, 'DistributionConfig': {'Comment': 'example comment', 'CacheBehaviors': {'Items': [{'TrustedSigners': {'Items': ['self', '111122223333'], 'Enabled': True, 'Quantity': 2}, 'TargetOriginId': 'example-custom-origin', 'ViewerProtocolPolicy': 'allow-all', 'ForwardedValues': {'Cookies': {'Forward': 'all'}, 'QueryString': False}, 'PathPattern': '*.jpg', 'MinTTL': 86400}], 'Quantity': 1}, 'Logging': {'Bucket': 'myawslogbucket.s3.amazonaws.com', 'Prefix': 'example.com.', 'Enabled': True, 'IncludeCookies': True}, 'Origins': {'Items': [{'S3OriginConfig': {'OriginAccessIdentity': 'origin-access-identity/cloudfront/E74FTE3AEXAMPLE'}, 'Id': 'example-Amazon S3-origin', 'DomainName': 'myawsbucket.s3.amazonaws.com'}, {'CustomOriginConfig': {'OriginProtocolPolicy': 'match-viewer', 'HTTPPort': 80, 'HTTPSPort': 443}, 'Id': 'example-custom-origin', 'DomainName': 'example.com'}], 'Quantity': 2}, 'DefaultRootObject': 'index.html', 'PriceClass': 'PriceClass_All', 'Enabled': True, 'DefaultCacheBehavior': {'ViewerProtocolPolicy': 'https-only', 'ForwardedValues': {'Cookies': {'Forward': 'whitelist', 'WhitelistedNames': {'Items': ['example-cookie'], 'Quantity': 1}}, 'QueryString': True}, 'TargetOriginId': 'example-Amazon S3-origin', 'TrustedSigners': {'Items': ['self', '111122223333', '444455556666'], 'Enabled': True, 'Quantity': 3}, 'MinTTL': 0}, 'CallerReference': 'example.com2012-04-11-5:09pm', 'ViewerCertificate': {'IAMCertificateId': 'AS1A2M3P4L5E67SIIXR3J'}, 'Aliases': {'Items': ['www.example.com'], 'Quantity': 1}}, 'ActiveTrustedSigners': {'Items': [{'KeyPairIds': {'Items': ['APKA9ONS7QCOWEXAMPLE'], 'Quantity': 1}, 'AwsAccountNumber': 'self'}, {'KeyPairIds': {'Quantity': 2}, 'AwsAccountNumber': '111122223333'}, {'KeyPairIds': {'Quantity': 0}, 'AwsAccountNumber': '444455556666'}], 'Quantity': 3}, 'LastModifiedTime': '2012-05-19T19:37:58Z', 'Id': 'EDFDVBD6EXAMPLE'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-get-invalidation.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<Invalidation xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Id>IDFDVBD632BHDS5</Id>\n   <Status>InProgress</Status>\n   <CreateTime>2009-11-19T19:37:58Z</CreateTime>   \n   <InvalidationBatch>\n      <Paths>\n         <Quantity>3</Quantity>\n         <Items>\n            <Path>/image1.jpg</Path>\n            <Path>/image2.jpg</Path>\n            <Path>/videos/movie.flv</Path>\n         </Items>\n      </Paths>\n      <CallerReference>20120301090001</CallerReference>\n   </InvalidationBatch>\n</Invalidation>\n\n', OperationModel(name=GetInvalidation), {'Invalidation': {'Status': 'InProgress', 'InvalidationBatch': {'Paths': {'Items': ['/image1.jpg', '/image2.jpg', '/videos/movie.flv'], 'Quantity': 3}, 'CallerReference': '20120301090001'}, 'Id': 'IDFDVBD632BHDS5', 'CreateTime': '2009-11-19T19:37:58Z'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-get-streaming-distribution.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<StreamingDistribution xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Id>EGTXBD79EXAMPLE</Id>\n   <Status>Deployed</Status>\n   <LastModifiedTime>2012-05-19T19:37:58Z</LastModifiedTime>\n   <DomainName>s5c39gqb8ow64r.cloudfront.net</DomainName>\n   <ActiveTrustedSigners>\n      <Quantity>3</Quantity>\n      <Items>\n         <Signer>\n            <AwsAccountNumber>self</AwsAccountNumber>\n            <KeyPairIds>\n               <Quantity>1</Quantity>\n               <Items>\n                  <KeyPairId>APKA9ONS7QCOWEXAMPLE</KeyPairId>\n               </Items>\n            </KeyPairIds>\n         </Signer>\n         <Signer>\n            <AwsAccountNumber>111122223333</AwsAccountNumber>\n            <KeyPairIds>\n               <Quantity>2</Quantity>\n               <KeyPairId>APKAI72T5DYBXEXAMPLE</KeyPairId>\n               <KeyPairId>APKAU72D8DYNXEXAMPLE</KeyPairId>\n            </KeyPairIds>\n         </Signer>\n         <Signer>\n            <AwsAccountNumber>444455556666</AwsAccountNumber>\n            <KeyPairIds>\n               <Quantity>0</Quantity>\n            </KeyPairIds>\n         </Signer>\n      </Items>\n   </ActiveTrustedSigners>\n   <StreamingDistributionConfig>   \n      <CallerReference>20120229090000</CallerReference>\n      <S3Origin>\n         <DNSName>mystreamingbucket.s3.amazonaws.com</DNSName>\n         <OriginAccessIdentity>origin-access-identity/cloudfront/E74FTE3AEXAMPLE</OriginAccessIdentity>\n      </S3Origin>\n      <Aliases>\n         <Quantity>1</Quantity>\n         <Items>\n            <CNAME>www.example.com</CNAME>\n         </Items>\n      </Aliases>\n      <Comment>example comment</Comment>\n      <Logging>\n         <Enabled>true</Enabled>\n         <Bucket>myawslogbucket.s3.amazonaws.com</Bucket>\n         <Prefix>myprefix/</Prefix>\n      </Logging>\n      <TrustedSigners>\n         <Quantity>3</Quantity>\n         <Items>\n            <AwsAccountNumber>self</AwsAccountNumber>\n            <AwsAccountNumber>111122223333</AwsAccountNumber>\n            <AwsAccountNumber>444455556666</AwsAccountNumber>\n         </Items>\n      </TrustedSigners>\n      <PriceClass>PriceClass_All</PriceClass>\n      <Enabled>true</Enabled>\n   </StreamingDistributionConfig>\n</StreamingDistribution>\n\n', OperationModel(name=GetStreamingDistribution), {'StreamingDistribution': {'Status': 'Deployed', 'StreamingDistributionConfig': {'S3Origin': {'OriginAccessIdentity': 'origin-access-identity/cloudfront/E74FTE3AEXAMPLE'}, 'Comment': 'example comment', 'Logging': {'Bucket': 'myawslogbucket.s3.amazonaws.com', 'Prefix': 'myprefix/', 'Enabled': True}, 'PriceClass': 'PriceClass_All', 'Enabled': True, 'TrustedSigners': {'Items': ['self', '111122223333', '444455556666'], 'Quantity': 3}, 'CallerReference': '20120229090000', 'Aliases': {'Items': ['www.example.com'], 'Quantity': 1}}, 'DomainName': 's5c39gqb8ow64r.cloudfront.net', 'ActiveTrustedSigners': {'Items': [{'KeyPairIds': {'Items': ['APKA9ONS7QCOWEXAMPLE'], 'Quantity': 1}, 'AwsAccountNumber': 'self'}, {'KeyPairIds': {'Quantity': 2}, 'AwsAccountNumber': '111122223333'}, {'KeyPairIds': {'Quantity': 0}, 'AwsAccountNumber': '444455556666'}], 'Quantity': 3}, 'LastModifiedTime': '2012-05-19T19:37:58Z', 'Id': 'EGTXBD79EXAMPLE'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-list-cloud-front-origin-access-identities.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<CloudFrontOriginAccessIdentityList xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Marker>EDFDVBD6EXAMPLE</Marker>\n   <NextMarker>EMLARXS9EXAMPLE</NextMarker>\n   <MaxItems>2</MaxItems>\n   <IsTruncated>true</IsTruncated>\n   <Quantity>4</Quantity>\n   <Items>\n      <CloudFrontOriginAccessIdentitySummary>\n         <Id>E74FTE3AEXAMPLE</Id>\n         <S3CanonicalUserId>cd13868f797c227fbea2830611a26fe0a21ba1b826ab4bed9b7771c9aEXAMPLE</S3CanonicalUserId>\n         <Comment>First origin access identity</Comment>\n      </CloudFrontOriginAccessIdentitySummary>\n      <CloudFrontOriginAccessIdentitySummary>\n         <Id>E58SRM2XEXAMPLE</Id>\n         <S3CanonicalUserId>7d843ae7f1792436e72691ab96a9c1414b7c3fbe2ab739a1cf21b0fe2EXAMPLE</S3CanonicalUserId>\n         <Comment>Another origin access identity</Comment>\n      </CloudFrontOriginAccessIdentitySummary>\n   </Items>\n</CloudFrontOriginAccessIdentityList>\n\n', OperationModel(name=ListCloudFrontOriginAccessIdentities), {'CloudFrontOriginAccessIdentityList': {'Items': [{'Comment': 'First origin access identity', 'S3CanonicalUserId': 'cd13868f797c227fbea2830611a26fe0a21ba1b826ab4bed9b7771c9aEXAMPLE', 'Id': 'E74FTE3AEXAMPLE'}, {'Comment': 'Another origin access identity', 'S3CanonicalUserId': '7d843ae7f1792436e72691ab96a9c1414b7c3fbe2ab739a1cf21b0fe2EXAMPLE', 'Id': 'E58SRM2XEXAMPLE'}], 'NextMarker': 'EMLARXS9EXAMPLE', 'MaxItems': 2, 'Marker': 'EDFDVBD6EXAMPLE', 'IsTruncated': True, 'Quantity': 4}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-list-distributions.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DistributionList xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Marker>RMPARXS293KSTG7</Marker>\n   <NextMarker>EMLARXS9EXAMPLE</NextMarker>\n   <MaxItems>2</MaxItems>\n   <IsTruncated>true</IsTruncated>\n   <Quantity>1</Quantity>\n   <Items>\n      <DistributionSummary>\n         <Id>EDFDVBD6EXAMPLE</Id>\n         <Status>Deployed</Status>\n         <LastModifiedTime>2012-05-19T19:37:58Z</LastModifiedTime>\n         <DomainName>d111111abcdef8.cloudfront.net</DomainName>\n         <Aliases>\n            <Quantity>1</Quantity>\n            <Items>\n               <CNAME>www.example.com</CNAME>\n            </Items>\n         </Aliases>\n         <Origins>\n            <Quantity>2</Quantity>\n            <Items>\n               <Origin>\n                  <Id>example-Amazon S3-origin</Id>\n                  <DomainName>myawsbucket.s3.amazonaws.com</DomainName>\n                  <S3OriginConfig>\n                     <OriginAccessIdentity>origin-access-identity/cloudfront/E74FTE3AEXAMPLE</OriginAccessIdentity>\n                  </S3OriginConfig>\n               </Origin>\n               <Origin>\n                  <Id>example-custom-origin</Id>\n                  <DomainName>example.com</DomainName>\n                  <CustomOriginConfig>\n                     <HTTPPort>80</HTTPPort>\n                     <HTTPSPort>443</HTTPSPort>\n                     <OriginProtocolPolicy>match-viewer</OriginProtocolPolicy>\n                  </CustomOriginConfig>\n               </Origin>\n            </Items>\n         </Origins>\n         <DefaultCacheBehavior>\n            <TargetOriginId>example-Amazon S3-origin</TargetOriginId>\n            <ForwardedValues>\n               <QueryString>true</QueryString>\n               <Cookies>\n                  <Forward>whitelist</Forward>\n                  <WhitelistedNames>\n                     <Quantity>1</Quantity>\n                     <Items>\n                        <Name>example-cookie</Name>\n                     </Items>\n                  </WhitelistedNames>\n               </Cookies>\n            </ForwardedValues>\n            <TrustedSigners>\n               <Enabled>true</Enabled>\n               <Quantity>3</Quantity>\n               <Items>\n                  <AwsAccountNumber>self</AwsAccountNumber>\n                  <AwsAccountNumber>111122223333</AwsAccountNumber>\n                  <AwsAccountNumber>444455556666</AwsAccountNumber>\n               </Items>\n            </TrustedSigners>\n            <ViewerProtocolPolicy>https-only</ViewerProtocolPolicy>\n            <MinTTL>0</MinTTL>\n         </DefaultCacheBehavior>\n         <CacheBehaviors>\n            <Quantity>1</Quantity>\n            <Items>\n               <CacheBehavior>\n                  <PathPattern>*.jpg</PathPattern>\n                  <TargetOriginId>example-custom-origin</TargetOriginId>\n                  <ForwardedValues>\n                     <QueryString>false</QueryString>\n                     <Cookies>\n                        <Forward>all</Forward>\n                     </Cookies>\n                  </ForwardedValues>\n                  <TrustedSigners>\n                     <Enabled>true</Enabled>\n                     <Quantity>2</Quantity>\n                     <Items>\n                        <AwsAccountNumber>self</AwsAccountNumber>\n                        <AwsAccountNumber>111122223333</AwsAccountNumber>\n                     </Items>\n                  </TrustedSigners>\n                  <ViewerProtocolPolicy>allow-all</ViewerProtocolPolicy>\n                  <MinTTL>86400</MinTTL>\n               </CacheBehavior>\n            </Items>\n         </CacheBehaviors>\n         <Comment>example comment</Comment>\n         <Logging>\n            <Enabled>true</Enabled>\n            <IncludeCookies>true</IncludeCookies>\n            <Bucket>myawslogbucket.s3.amazonaws.com</Bucket>\n            <Prefix>example.com.</Prefix>\n         </Logging>\n         <ViewerCertificate>\n            <IAMCertificateId>AS1A2M3P4L5E67SIIXR3J</IAMCertificateId>\n         </ViewerCertificate>\n         <PriceClass>PriceClass_All</PriceClass>\n         <Enabled>true</Enabled>\n      </DistributionSummary>\n   </Items>\n</DistributionList>\n\n', OperationModel(name=ListDistributions), {'DistributionList': {'Items': [{'Status': 'Deployed', 'CacheBehaviors': {'Items': [{'TrustedSigners': {'Items': ['self', '111122223333'], 'Enabled': True, 'Quantity': 2}, 'TargetOriginId': 'example-custom-origin', 'ViewerProtocolPolicy': 'allow-all', 'ForwardedValues': {'Cookies': {'Forward': 'all'}, 'QueryString': False}, 'PathPattern': '*.jpg', 'MinTTL': 86400}], 'Quantity': 1}, 'Origins': {'Items': [{'S3OriginConfig': {'OriginAccessIdentity': 'origin-access-identity/cloudfront/E74FTE3AEXAMPLE'}, 'Id': 'example-Amazon S3-origin', 'DomainName': 'myawsbucket.s3.amazonaws.com'}, {'CustomOriginConfig': {'OriginProtocolPolicy': 'match-viewer', 'HTTPPort': 80, 'HTTPSPort': 443}, 'Id': 'example-custom-origin', 'DomainName': 'example.com'}], 'Quantity': 2}, 'DomainName': 'd111111abcdef8.cloudfront.net', 'PriceClass': 'PriceClass_All', 'Enabled': True, 'DefaultCacheBehavior': {'ViewerProtocolPolicy': 'https-only', 'ForwardedValues': {'Cookies': {'Forward': 'whitelist', 'WhitelistedNames': {'Items': ['example-cookie'], 'Quantity': 1}}, 'QueryString': True}, 'TargetOriginId': 'example-Amazon S3-origin', 'TrustedSigners': {'Items': ['self', '111122223333', '444455556666'], 'Enabled': True, 'Quantity': 3}, 'MinTTL': 0}, 'Comment': 'example comment', 'ViewerCertificate': {'IAMCertificateId': 'AS1A2M3P4L5E67SIIXR3J'}, 'LastModifiedTime': '2012-05-19T19:37:58Z', 'Id': 'EDFDVBD6EXAMPLE', 'Aliases': {'Items': ['www.example.com'], 'Quantity': 1}}], 'NextMarker': 'EMLARXS9EXAMPLE', 'MaxItems': 2, 'Marker': 'RMPARXS293KSTG7', 'IsTruncated': True, 'Quantity': 1}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-list-invalidations.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<InvalidationList xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Marker>EGTXBD79EXAMPLE</Marker>\n   <NextMarker>Invalidation ID</NextMarker>\n   <MaxItems>2</MaxItems>\n   <IsTruncated>true</IsTruncated>\n   <Quantity>10</Quantity>\n   <Items>\n      <InvalidationSummary>\n         <Id>Second Invalidation ID</Id>\n         <Status>Completed</Status>\n      </InvalidationSummary>\n      <InvalidationSummary>\n         <Id>First Invalidation ID</Id>\n         <Status>Completed</Status>\n      </InvalidationSummary>\n   </Items>\n</InvalidationList>\n\n', OperationModel(name=ListInvalidations), {'InvalidationList': {'Items': [{'Status': 'Completed', 'Id': 'Second Invalidation ID'}, {'Status': 'Completed', 'Id': 'First Invalidation ID'}], 'NextMarker': 'Invalidation ID', 'MaxItems': 2, 'Marker': 'EGTXBD79EXAMPLE', 'IsTruncated': True, 'Quantity': 10}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudfront-list-streaming-distributions.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<StreamingDistributionList xmlns="http://cloudfront.amazonaws.com/doc/2014-05-31/">\n   <Marker>EGTXBD79EXAMPLE</Marker>\n   <NextMarker>ED4L98SBEXAMPLE</NextMarker>\n   <MaxItems>1</MaxItems>\n   <IsTruncated>true</IsTruncated>\n   <Quantity>4</Quantity>\n   <Items>\n      <StreamingDistributionSummary>\n         <Id>EGTXBD79EXAMPLE</Id>\n         <Status>Deployed</Status>\n         <LastModifiedTime>2012-05-19T19:37:58Z</LastModifiedTime>\n         <DomainName>s5c39gqb8ow64r.cloudfront.net</DomainName>\n         <S3Origin>\n            <DNSName>mystreamingbucket.s3.amazonaws.com</DNSName>\n         </S3Origin>\n         <CNAME>www.example.com</CNAME>\n         <CNAME>product.example.com</CNAME>\n         <Comment>First distribution</Comment>\n         <PriceClass>PriceClass_All</PriceClass>\n         <Enabled>true</Enabled>\n      </StreamingDistributionSummary>\n   </Items>\n</StreamingDistributionList>\n\n', OperationModel(name=ListStreamingDistributions), {'StreamingDistributionList': {'Items': [{'Status': 'Deployed', 'S3Origin': {}, 'DomainName': 's5c39gqb8ow64r.cloudfront.net', 'PriceClass': 'PriceClass_All', 'Enabled': True, 'Id': 'EGTXBD79EXAMPLE', 'LastModifiedTime': '2012-05-19T19:37:58Z', 'Comment': 'First distribution'}], 'NextMarker': 'ED4L98SBEXAMPLE', 'MaxItems': 1, 'Marker': 'EGTXBD79EXAMPLE', 'IsTruncated': True, 'Quantity': 4}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sts-get-session-token.xml', b'<GetSessionTokenResponse xmlns="https://sts.amazonaws.com/doc/2011-06-15/">\n  <GetSessionTokenResult>\n    <Credentials>\n      <SessionToken>AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/L\n       To6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3z\n       rkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtp\n       Z3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE</SessionToken>\n      <SecretAccessKey>wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY</SecretAccessKey>\n      <Expiration>2011-07-11T19:55:29.611Z</Expiration>\n      <AccessKeyId>AKIAIOSFODNN7EXAMPLE</AccessKeyId>\n    </Credentials>\n  </GetSessionTokenResult>\n  <ResponseMetadata>\n    <RequestId>58c5dbae-abef-11e0-8cfe-09039844ac7d</RequestId>\n  </ResponseMetadata>\n</GetSessionTokenResponse>\n', OperationModel(name=GetSessionToken), {'Credentials': {'AccessKeyId': 'AKIAIOSFODNN7EXAMPLE', 'Expiration': '2011-07-11T19:55:29.611Z', 'SecretAccessKey': 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY', 'SessionToken': 'AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/L\n       To6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3z\n       rkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtp\n       Z3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE'}, 'ResponseMetadata': {'RequestId': '58c5dbae-abef-11e0-8cfe-09039844ac7d'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-get-bucket-acl.xml', b'<AccessControlPolicy xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n  <Owner>\n    <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n    <DisplayName>CustomersName@amazon.com</DisplayName>\n  </Owner>\n  <AccessControlList>\n    <Grant>\n      <Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n   xsi:type="CanonicalUser">\n<ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n        <DisplayName>CustomersName@amazon.com</DisplayName>\n      </Grantee>\n      <Permission>FULL_CONTROL</Permission>\n\xef\xbf\xbc\xef\xbf\xbc\xef\xbf\xbc    </Grant>\n  </AccessControlList>\n</AccessControlPolicy>\n', OperationModel(name=GetBucketAcl), {'Owner': {'DisplayName': 'CustomersName@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}, 'Grants': [{'Grantee': {'DisplayName': 'CustomersName@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}], 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-get-bucket-location.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<LocationConstraint xmlns="http://s3.amazonaws.com/doc/2006-03-01/">EU</LocationConstraint>\n', OperationModel(name=GetBucketLocation), {'ResponseMetadata': {}, 'LocationConstraint': 'EU'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-get-bucket-logging.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<BucketLoggingStatus xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n  <LoggingEnabled>\n    <TargetBucket>mybucketlogs</TargetBucket>\n    <TargetPrefix>mybucket-access_log-/</TargetPrefix>\n    <TargetGrants>\n      <Grant>\n        <Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n          xsi:type="AmazonCustomerByEmail">\n          <EmailAddress>user@company.com</EmailAddress>\n        </Grantee>\n        <Permission>READ</Permission>\n      </Grant>\n    </TargetGrants>\n  </LoggingEnabled>\n</BucketLoggingStatus>\n', OperationModel(name=GetBucketLogging), {'LoggingEnabled': {'TargetPrefix': 'mybucket-access_log-/', 'TargetBucket': 'mybucketlogs', 'TargetGrants': [{'Grantee': {'EmailAddress': 'user@company.com', 'Type': 'AmazonCustomerByEmail'}, 'Permission': 'READ'}]}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-get-bucket-policy.xml', b'{"Version":"2012-10-17","Statement":[{"Sid":"AddPerm","Effect":"Allow","Principal":"*","Action":"s3:GetObject","Resource":"arn:aws:s3:::bucket-name/*"}]}', OperationModel(name=GetBucketPolicy), {'ResponseMetadata': {}, 'Policy': '{"Version":"2012-10-17","Statement":[{"Sid":"AddPerm","Effect":"Allow","Principal":"*","Action":"s3:GetObject","Resource":"arn:aws:s3:::bucket-name/*"}]}'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-list-buckets.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/"><Owner><ID>1936a5d8a2b189cda450d1d1d514f3861b3adc2df5152d2a294487b9445d1e7f</ID><DisplayName>mitchaws</DisplayName></Owner><Buckets><Bucket><Name>botostats</Name><CreationDate>2012-02-20T17:45:32.000Z</CreationDate></Bucket><Bucket><Name>bucket-1355863083</Name><CreationDate>2012-12-18T20:38:12.000Z</CreationDate></Bucket><Bucket><Name>elasticbeanstalk-us-east-1-419278470775</Name><CreationDate>2013-01-31T22:24:01.000Z</CreationDate></Bucket><Bucket><Name>elasticbeanstalk-us-west-2-419278470775</Name><CreationDate>2013-03-20T13:29:16.000Z</CreationDate></Bucket><Bucket><Name>encryption-1332788550</Name><CreationDate>2012-03-26T19:02:12.000Z</CreationDate></Bucket><Bucket><Name>encryption-1346779637</Name><CreationDate>2012-09-04T17:27:28.000Z</CreationDate></Bucket><Bucket><Name>garnaat-amazon</Name><CreationDate>2012-01-09T05:53:44.000Z</CreationDate></Bucket><Bucket><Name>garnaat_test_lifecycle</Name><CreationDate>2012-01-23T02:54:39.000Z</CreationDate></Bucket><Bucket><Name>keytest-1355862601</Name><CreationDate>2012-12-18T20:30:10.000Z</CreationDate></Bucket><Bucket><Name>keytest-1355863376</Name><CreationDate>2012-12-19T01:28:24.000Z</CreationDate></Bucket><Bucket><Name>mgtest2cloudformation</Name><CreationDate>2012-05-14T20:17:26.000Z</CreationDate></Bucket><Bucket><Name>mgtestcloudformation</Name><CreationDate>2012-05-14T14:36:38.000Z</CreationDate></Bucket><Bucket><Name>mitchtestcloudformation</Name><CreationDate>2012-05-14T14:34:13.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355862684</Name><CreationDate>2012-12-18T20:31:31.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355862730</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355863407</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355863439</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355863446</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355863455</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355863464</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multidelete-1355863470</Name><CreationDate>2012-12-18T20:44:38.000Z</CreationDate></Bucket><Bucket><Name>multipart-1355862845</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multipart-1355862901</Name><CreationDate>2012-12-18T20:35:08.000Z</CreationDate></Bucket><Bucket><Name>multipart-1355863550</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>multipart-1355863593</Name><CreationDate>2012-12-19T01:28:25.000Z</CreationDate></Bucket><Bucket><Name>pyconprod</Name><CreationDate>2013-03-13T05:42:01.000Z</CreationDate></Bucket><Bucket><Name>src-bucket-1332098908</Name><CreationDate>2012-03-18T19:28:26.000Z</CreationDate></Bucket><Bucket><Name>src-bucket-1332788526</Name><CreationDate>2012-03-26T19:01:49.000Z</CreationDate></Bucket><Bucket><Name>src-bucket-1332789019</Name><CreationDate>2012-03-26T19:10:02.000Z</CreationDate></Bucket><Bucket><Name>src-bucket-1332868116</Name><CreationDate>2012-03-27T17:08:36.000Z</CreationDate></Bucket><Bucket><Name>src-bucket-1339608971</Name><CreationDate>2012-06-13T17:36:12.000Z</CreationDate></Bucket><Bucket><Name>src-bucket-1357699848</Name><CreationDate>2013-01-09T02:50:52.000Z</CreationDate></Bucket><Bucket><Name>stats.pythonboto.org</Name><CreationDate>2012-04-28T20:42:19.000Z</CreationDate></Bucket><Bucket><Name>test-1357854245</Name><CreationDate>2013-01-10T21:44:06.000Z</CreationDate></Bucket><Bucket><Name>test-1357854246</Name><CreationDate>2013-01-10T21:44:07.000Z</CreationDate></Bucket><Bucket><Name>version-1328224364</Name><CreationDate>2012-09-01T10:25:07.000Z</CreationDate></Bucket></Buckets></ListAllMyBucketsResult>', OperationModel(name=ListBuckets), {'Owner': {'DisplayName': 'mitchaws', 'ID': '1936a5d8a2b189cda450d1d1d514f3861b3adc2df5152d2a294487b9445d1e7f'}, 'Buckets': [{'CreationDate': '2012-02-20T17:45:32.000Z', 'Name': 'botostats'}, {'CreationDate': '2012-12-18T20:38:12.000Z', 'Name': 'bucket-1355863083'}, {'CreationDate': '2013-01-31T22:24:01.000Z', 'Name': 'elasticbeanstalk-us-east-1-419278470775'}, {'CreationDate': '2013-03-20T13:29:16.000Z', 'Name': 'elasticbeanstalk-us-west-2-419278470775'}, {'CreationDate': '2012-03-26T19:02:12.000Z', 'Name': 'encryption-1332788550'}, {'CreationDate': '2012-09-04T17:27:28.000Z', 'Name': 'encryption-1346779637'}, {'CreationDate': '2012-01-09T05:53:44.000Z', 'Name': 'garnaat-amazon'}, {'CreationDate': '2012-01-23T02:54:39.000Z', 'Name': 'garnaat_test_lifecycle'}, {'CreationDate': '2012-12-18T20:30:10.000Z', 'Name': 'keytest-1355862601'}, {'CreationDate': '2012-12-19T01:28:24.000Z', 'Name': 'keytest-1355863376'}, {'CreationDate': '2012-05-14T20:17:26.000Z', 'Name': 'mgtest2cloudformation'}, {'CreationDate': '2012-05-14T14:36:38.000Z', 'Name': 'mgtestcloudformation'}, {'CreationDate': '2012-05-14T14:34:13.000Z', 'Name': 'mitchtestcloudformation'}, {'CreationDate': '2012-12-18T20:31:31.000Z', 'Name': 'multidelete-1355862684'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multidelete-1355862730'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multidelete-1355863407'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multidelete-1355863439'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multidelete-1355863446'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multidelete-1355863455'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multidelete-1355863464'}, {'CreationDate': '2012-12-18T20:44:38.000Z', 'Name': 'multidelete-1355863470'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multipart-1355862845'}, {'CreationDate': '2012-12-18T20:35:08.000Z', 'Name': 'multipart-1355862901'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multipart-1355863550'}, {'CreationDate': '2012-12-19T01:28:25.000Z', 'Name': 'multipart-1355863593'}, {'CreationDate': '2013-03-13T05:42:01.000Z', 'Name': 'pyconprod'}, {'CreationDate': '2012-03-18T19:28:26.000Z', 'Name': 'src-bucket-1332098908'}, {'CreationDate': '2012-03-26T19:01:49.000Z', 'Name': 'src-bucket-1332788526'}, {'CreationDate': '2012-03-26T19:10:02.000Z', 'Name': 'src-bucket-1332789019'}, {'CreationDate': '2012-03-27T17:08:36.000Z', 'Name': 'src-bucket-1332868116'}, {'CreationDate': '2012-06-13T17:36:12.000Z', 'Name': 'src-bucket-1339608971'}, {'CreationDate': '2013-01-09T02:50:52.000Z', 'Name': 'src-bucket-1357699848'}, {'CreationDate': '2012-04-28T20:42:19.000Z', 'Name': 'stats.pythonboto.org'}, {'CreationDate': '2013-01-10T21:44:06.000Z', 'Name': 'test-1357854245'}, {'CreationDate': '2013-01-10T21:44:07.000Z', 'Name': 'test-1357854246'}, {'CreationDate': '2012-09-01T10:25:07.000Z', 'Name': 'version-1328224364'}], 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-list-multipart-uploads#2.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<ListMultipartUploadsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n  <Bucket>bucket</Bucket>\n  <KeyMarker></KeyMarker>\n  <UploadIdMarker></UploadIdMarker>\n  <NextKeyMarker>my-movie.m2ts</NextKeyMarker>\n  <NextUploadIdMarker>YW55IGlkZWEgd2h5IGVsdmluZydzIHVwbG9hZCBmYWlsZWQ</NextUploadIdMarker>\n  <MaxUploads>3</MaxUploads>\n  <IsTruncated>true</IsTruncated>\n  <Upload>\n    <Key>my-divisor</Key>\n    <UploadId>XMgbGlrZSBlbHZpbmcncyBub3QgaGF2aW5nIG11Y2ggbHVjaw</UploadId>\n    <Initiator>\n      <ID>arn:aws:iam::111122223333:user/user1-11111a31-17b5-4fb7-9df5-b111111f13de</ID>\n      <DisplayName>user1-11111a31-17b5-4fb7-9df5-b111111f13de</DisplayName>\n    </Initiator>\n    <Owner>\n      <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n      <DisplayName>OwnerDisplayName</DisplayName>\n    </Owner>\n    <StorageClass>STANDARD</StorageClass>\n    <Initiated>2010-11-10T20:48:33.000Z</Initiated>  \n  </Upload>\n  <Upload>\n    <Key>my-movie.m2ts</Key>\n    <UploadId>VXBsb2FkIElEIGZvciBlbHZpbmcncyBteS1tb3ZpZS5tMnRzIHVwbG9hZA</UploadId>\n    <Initiator>\n      <ID>b1d16700c70b0b05597d7acd6a3f92be</ID>\n      <DisplayName>InitiatorDisplayName</DisplayName>\n    </Initiator>\n    <Owner>\n      <ID>b1d16700c70b0b05597d7acd6a3f92be</ID>\n      <DisplayName>OwnerDisplayName</DisplayName>\n    </Owner>\n    <StorageClass>STANDARD</StorageClass>\n    <Initiated>2010-11-10T20:48:33.000Z</Initiated>\n  </Upload>\n  <Upload>\n    <Key>my-movie.m2ts</Key>\n    <UploadId>YW55IGlkZWEgd2h5IGVsdmluZydzIHVwbG9hZCBmYWlsZWQ</UploadId>\n    <Initiator>\n      <ID>arn:aws:iam::444455556666:user/user1-22222a31-17b5-4fb7-9df5-b222222f13de</ID>\n      <DisplayName>user1-22222a31-17b5-4fb7-9df5-b222222f13de</DisplayName>\n    </Initiator>\n    <Owner>\n      <ID>b1d16700c70b0b05597d7acd6a3f92be</ID>\n      <DisplayName>OwnerDisplayName</DisplayName>\n    </Owner>\n    <StorageClass>STANDARD</StorageClass>\n    <Initiated>2010-11-10T20:49:33.000Z</Initiated>\n  </Upload>\n</ListMultipartUploadsResult>\n', OperationModel(name=ListMultipartUploads), {'UploadIdMarker': '', 'ResponseMetadata': {}, 'NextKeyMarker': 'my-movie.m2ts', 'Bucket': 'bucket', 'NextUploadIdMarker': 'YW55IGlkZWEgd2h5IGVsdmluZydzIHVwbG9hZCBmYWlsZWQ', 'Uploads': [{'Initiator': {'DisplayName': 'user1-11111a31-17b5-4fb7-9df5-b111111f13de', 'ID': 'arn:aws:iam::111122223333:user/user1-11111a31-17b5-4fb7-9df5-b111111f13de'}, 'Initiated': '2010-11-10T20:48:33.000Z', 'UploadId': 'XMgbGlrZSBlbHZpbmcncyBub3QgaGF2aW5nIG11Y2ggbHVjaw', 'StorageClass': 'STANDARD', 'Key': 'my-divisor', 'Owner': {'DisplayName': 'OwnerDisplayName', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}}, {'Initiator': {'DisplayName': 'InitiatorDisplayName', 'ID': 'b1d16700c70b0b05597d7acd6a3f92be'}, 'Initiated': '2010-11-10T20:48:33.000Z', 'UploadId': 'VXBsb2FkIElEIGZvciBlbHZpbmcncyBteS1tb3ZpZS5tMnRzIHVwbG9hZA', 'StorageClass': 'STANDARD', 'Key': 'my-movie.m2ts', 'Owner': {'DisplayName': 'OwnerDisplayName', 'ID': 'b1d16700c70b0b05597d7acd6a3f92be'}}, {'Initiator': {'DisplayName': 'user1-22222a31-17b5-4fb7-9df5-b222222f13de', 'ID': 'arn:aws:iam::444455556666:user/user1-22222a31-17b5-4fb7-9df5-b222222f13de'}, 'Initiated': '2010-11-10T20:49:33.000Z', 'UploadId': 'YW55IGlkZWEgd2h5IGVsdmluZydzIHVwbG9hZCBmYWlsZWQ', 'StorageClass': 'STANDARD', 'Key': 'my-movie.m2ts', 'Owner': {'DisplayName': 'OwnerDisplayName', 'ID': 'b1d16700c70b0b05597d7acd6a3f92be'}}], 'KeyMarker': '', 'MaxUploads': 3, 'IsTruncated': True}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-list-multipart-uploads.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<ListMultipartUploadsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n  <Bucket>botocoretest1374528673-218</Bucket>\n  <KeyMarker></KeyMarker>\n  <UploadIdMarker></UploadIdMarker>\n  <NextKeyMarker></NextKeyMarker>\n  <NextUploadIdMarker></NextUploadIdMarker>\n  <Delimiter>/</Delimiter>\n  <Prefix>foo</Prefix>\n  <MaxUploads>1000</MaxUploads>\n  <IsTruncated>false</IsTruncated>\n  <CommonPrefixes><Prefix>foo/</Prefix></CommonPrefixes>\n  <CommonPrefixes><Prefix>foobar/</Prefix></CommonPrefixes>\n</ListMultipartUploadsResult>\n', OperationModel(name=ListMultipartUploads), {'UploadIdMarker': '', 'CommonPrefixes': [{'Prefix': 'foo/'}, {'Prefix': 'foobar/'}], 'ResponseMetadata': {}, 'NextKeyMarker': '', 'Bucket': 'botocoretest1374528673-218', 'Prefix': 'foo', 'Delimiter': '/', 'NextUploadIdMarker': '', 'KeyMarker': '', 'MaxUploads': 1000, 'IsTruncated': False}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-list-object-versions.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<ListVersionsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n    <Name>bucket</Name>\n    <Prefix>my</Prefix>\n    <KeyMarker/>\n    <VersionIdMarker/>\n    <MaxKeys>5</MaxKeys>\n    <IsTruncated>false</IsTruncated>\n    <Version>\n        <Key>my-image.jpg</Key>\n        <VersionId>3/L4kqtJl40Nr8X8gdRQBpUMLUo</VersionId>\n        <IsLatest>true</IsLatest>\n         <LastModified>2009-10-12T17:50:30.000Z</LastModified>\n        <ETag>&quot;fba9dede5f27731c9771645a39863328&quot;</ETag>\n        <Size>434234</Size>\n        <StorageClass>STANDARD</StorageClass>\n        <Owner>\n            <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n            <DisplayName>mtd@amazon.com</DisplayName>\n        </Owner>\n    </Version>\n    <DeleteMarker>\n        <Key>my-second-image.jpg</Key>\n        <VersionId>03jpff543dhffds434rfdsFDN943fdsFkdmqnh892</VersionId>\n        <IsLatest>true</IsLatest>\n        <LastModified>2009-11-12T17:50:30.000Z</LastModified>\n        <Owner>\n            <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n            <DisplayName>mtd@amazon.com</DisplayName>\n        </Owner>    \n    </DeleteMarker>\n    <Version>\n        <Key>my-second-image.jpg</Key>\n        <VersionId>QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</VersionId>\n        <IsLatest>false</IsLatest>\n        <LastModified>2009-10-10T17:50:30.000Z</LastModified>\n        <ETag>&quot;9b2cf535f27731c974343645a3985328&quot;</ETag>\n        <Size>166434</Size>\n        <StorageClass>STANDARD</StorageClass>\n        <Owner>\n            <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n            <DisplayName>mtd@amazon.com</DisplayName>\n        </Owner>\n    </Version>\n    <DeleteMarker>\n        <Key>my-third-image.jpg</Key>\n        <VersionId>03jpff543dhffds434rfdsFDN943fdsFkdmqnh892</VersionId>\n        <IsLatest>true</IsLatest>\n        <LastModified>2009-10-15T17:50:30.000Z</LastModified>\n        <Owner>\n            <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n            <DisplayName>mtd@amazon.com</DisplayName>\n        </Owner>    \n    </DeleteMarker>   \n    <Version>\n        <Key>my-third-image.jpg</Key>\n        <VersionId>UIORUnfndfhnw89493jJFJ</VersionId>\n        <IsLatest>false</IsLatest>\n        <LastModified>2009-10-11T12:50:30.000Z</LastModified>\n        <ETag>&quot;772cf535f27731c974343645a3985328&quot;</ETag>\n        <Size>64</Size>\n        <StorageClass>STANDARD</StorageClass>\n        <Owner>\n            <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n            <DisplayName>mtd@amazon.com</DisplayName>\n        </Owner>\n     </Version>\n</ListVersionsResult>\n', OperationModel(name=ListObjectVersions), {'Name': 'bucket', 'ResponseMetadata': {}, 'Versions': [{'LastModified': '2009-10-12T17:50:30.000Z', 'VersionId': '3/L4kqtJl40Nr8X8gdRQBpUMLUo', 'ETag': '"fba9dede5f27731c9771645a39863328"', 'StorageClass': 'STANDARD', 'Key': 'my-image.jpg', 'Owner': {'DisplayName': 'mtd@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}, 'IsLatest': True, 'Size': 434234}, {'LastModified': '2009-10-10T17:50:30.000Z', 'VersionId': 'QUpfdndhfd8438MNFDN93jdnJFkdmqnh893', 'ETag': '"9b2cf535f27731c974343645a3985328"', 'StorageClass': 'STANDARD', 'Key': 'my-second-image.jpg', 'Owner': {'DisplayName': 'mtd@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}, 'IsLatest': False, 'Size': 166434}, {'LastModified': '2009-10-11T12:50:30.000Z', 'VersionId': 'UIORUnfndfhnw89493jJFJ', 'ETag': '"772cf535f27731c974343645a3985328"', 'StorageClass': 'STANDARD', 'Key': 'my-third-image.jpg', 'Owner': {'DisplayName': 'mtd@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}, 'IsLatest': False, 'Size': 64}], 'MaxKeys': 5, 'Prefix': 'my', 'KeyMarker': '', 'DeleteMarkers': [{'Owner': {'DisplayName': 'mtd@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}, 'IsLatest': True, 'VersionId': '03jpff543dhffds434rfdsFDN943fdsFkdmqnh892', 'Key': 'my-second-image.jpg', 'LastModified': '2009-11-12T17:50:30.000Z'}, {'Owner': {'DisplayName': 'mtd@amazon.com', 'ID': '75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a'}, 'IsLatest': True, 'VersionId': '03jpff543dhffds434rfdsFDN943fdsFkdmqnh892', 'Key': 'my-third-image.jpg', 'LastModified': '2009-10-15T17:50:30.000Z'}], 'IsTruncated': False, 'VersionIdMarker': ''}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/s3-list-objects.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<ListBucketResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n  <Name>test-1357854246</Name>\n  <Prefix></Prefix>\n  <Marker></Marker>\n  <MaxKeys>1000</MaxKeys>\n  <IsTruncated>false</IsTruncated>\n  <Contents>\n    <Key>key1</Key>\n    <LastModified>2013-01-10T21:45:09.000Z</LastModified>\n    <ETag>&quot;1d921b22129502cbbe5cbaf2c8bac682&quot;</ETag>\n    <Size>10000</Size>\n    <Owner>\n      <ID>1936a5d8a2b189cda450d1d1d514f3861b3adc2df515</ID>\n      <DisplayName>aws</DisplayName>\n    </Owner>\n    <StorageClass>STANDARD</StorageClass>\n  </Contents>\n  <Contents>\n    <Key>key2</Key>\n    <LastModified>2013-01-10T22:45:09.000Z</LastModified>\n    <ETag>&quot;1d921b22129502cbbe5cbaf2c8bac682&quot;</ETag>\n    <Size>1234</Size>\n    <Owner>\n      <ID>1936a5d8a2b189cda450d1d1d514f3861b3adc2df515</ID>\n      <DisplayName>aws</DisplayName>\n    </Owner>\n    <StorageClass>STANDARD</StorageClass>\n  </Contents>\n</ListBucketResult>\n', OperationModel(name=ListObjects), {'Name': 'test-1357854246', 'ResponseMetadata': {}, 'MaxKeys': 1000, 'Prefix': '', 'Marker': '', 'IsTruncated': False, 'Contents': [{'LastModified': '2013-01-10T21:45:09.000Z', 'ETag': '"1d921b22129502cbbe5cbaf2c8bac682"', 'StorageClass': 'STANDARD', 'Key': 'key1', 'Owner': {'DisplayName': 'aws', 'ID': '1936a5d8a2b189cda450d1d1d514f3861b3adc2df515'}, 'Size': 10000}, {'LastModified': '2013-01-10T22:45:09.000Z', 'ETag': '"1d921b22129502cbbe5cbaf2c8bac682"', 'StorageClass': 'STANDARD', 'Key': 'key2', 'Owner': {'DisplayName': 'aws', 'ID': '1936a5d8a2b189cda450d1d1d514f3861b3adc2df515'}, 'Size': 1234}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-check-dns-availability.xml', b'<CheckDNSAvailabilityResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <CheckDNSAvailabilityResult>\n    <FullyQualifiedCNAME>sampleapplication.elasticbeanstalk.amazonaws.com</FullyQualifiedCNAME>\n    <Available>true</Available>\n  </CheckDNSAvailabilityResult>\n  <ResponseMetadata>\n    <RequestId>12f6701f-f1d6-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</CheckDNSAvailabilityResponse>\n', OperationModel(name=CheckDNSAvailability), {'Available': True, 'FullyQualifiedCNAME': 'sampleapplication.elasticbeanstalk.amazonaws.com', 'ResponseMetadata': {'RequestId': '12f6701f-f1d6-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-create-application-version.xml', b'<CreateApplicationVersionResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <CreateApplicationVersionResult>\n    <ApplicationVersion>\n      <SourceBundle>\n        <S3Bucket>amazonaws.com</S3Bucket>\n        <S3Key>sample.war</S3Key>\n      </SourceBundle>\n      <VersionLabel>Version1</VersionLabel>\n      <Description>description</Description>\n      <ApplicationName>SampleApp</ApplicationName>\n      <DateCreated>2010-11-17T03:21:59.161Z</DateCreated>\n      <DateUpdated>2010-11-17T03:21:59.161Z</DateUpdated>\n    </ApplicationVersion>\n  </CreateApplicationVersionResult>\n  <ResponseMetadata>\n    <RequestId>d653efef-f1f9-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</CreateApplicationVersionResponse>\n', OperationModel(name=CreateApplicationVersion), {'ApplicationVersion': {'ApplicationName': 'SampleApp', 'VersionLabel': 'Version1', 'Description': 'description', 'DateCreated': '2010-11-17T03:21:59.161Z', 'DateUpdated': '2010-11-17T03:21:59.161Z', 'SourceBundle': {'S3Bucket': 'amazonaws.com', 'S3Key': 'sample.war'}}, 'ResponseMetadata': {'RequestId': 'd653efef-f1f9-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-create-application.xml', b'<CreateApplicationResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <CreateApplicationResult>\n    <Application>\n      <Versions/>\n      <Description>Sample Description</Description>\n      <ApplicationName>SampleApp</ApplicationName>\n      <DateCreated>2010-11-16T23:09:20.256Z</DateCreated>\n      <DateUpdated>2010-11-16T23:09:20.256Z</DateUpdated>\n      <ConfigurationTemplates>\n        <member>Default</member>\n      </ConfigurationTemplates>\n    </Application>\n  </CreateApplicationResult>\n  <ResponseMetadata>\n    <RequestId>8b00e053-f1d6-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</CreateApplicationResponse>\n', OperationModel(name=CreateApplication), {'Application': {'ApplicationName': 'SampleApp', 'Description': 'Sample Description', 'Versions': [], 'DateCreated': '2010-11-16T23:09:20.256Z', 'ConfigurationTemplates': ['Default'], 'DateUpdated': '2010-11-16T23:09:20.256Z'}, 'ResponseMetadata': {'RequestId': '8b00e053-f1d6-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-create-configuration-template.xml', b'<CreateConfigurationTemplateResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n<CreateConfigurationTemplateResult>\n<SolutionStackName>32bit Amazon Linux running Tomcat 7</SolutionStackName>\n    <OptionSettings>\n      <member>\n        <OptionName>ImageId</OptionName>\n        <Value>ami-f2f0069b</Value>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <OptionName>Notification Endpoint</OptionName>\n        <Value/>\n        <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n      </member>\n      <member>\n        <OptionName>PARAM4</OptionName>\n        <Value/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <OptionName>JDBC_CONNECTION_STRING</OptionName>\n        <Value/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <OptionName>SecurityGroups</OptionName>\n        <Value>elasticbeanstalk-default</Value>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <OptionName>UnhealthyThreshold</OptionName>\n        <Value>5</Value>\n        <Namespace>aws:elb:healthcheck</Namespace>\n      </member>\n      <member>\n        <OptionName>InstanceType</OptionName>\n        <Value>t1.micro</Value>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n\xef\xbf\xbc\xef\xbf\xbc\xef\xbf\xbc</member>\n<member>\n<OptionName>Statistic</OptionName>\n  <Value>Average</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>LoadBalancerHTTPSPort</OptionName>\n  <Value>OFF</Value>\n  <Namespace>aws:elb:loadbalancer</Namespace>\n</member>\n<member>\n  <OptionName>Stickiness Cookie Expiration</OptionName>\n  <Value>0</Value>\n  <Namespace>aws:elb:policies</Namespace>\n</member>\n<member>\n  <OptionName>PARAM5</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n</member>\n<member>\n  <OptionName>MeasureName</OptionName>\n  <Value>NetworkOut</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>Interval</OptionName>\n  <Value>30</Value>\n  <Namespace>aws:elb:healthcheck</Namespace>\n</member>\n<member>\n  <OptionName>Application Healthcheck URL</OptionName>\n  <Value>/</Value>\n  <Namespace>aws:elasticbeanstalk:application</Namespace>\n</member>\n<member>\n  <OptionName>Notification Topic ARN</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n</member>\n<member>\n  <OptionName>LowerBreachScaleIncrement</OptionName>\n  <Value>-1</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>XX:MaxPermSize</OptionName>\n  <Value>64m</Value>\n <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n</member>\n<member>\n  <OptionName>UpperBreachScaleIncrement</OptionName>\n  <Value>1</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>MinSize</OptionName>\n  <Value>1</Value>\n  <Namespace>aws:autoscaling:asg</Namespace>\n</member>\n<member>\n  <OptionName>Custom Availability Zones</OptionName>\n  <Value>us-east-1a</Value>\n  <Namespace>aws:autoscaling:asg</Namespace>\n</member>\n<member>\n  <OptionName>Availability Zones</OptionName>\n  <Value>Any 1</Value>\n  <Namespace>aws:autoscaling:asg</Namespace>\n</member>\n<member>\n  <OptionName>LogPublicationControl</OptionName>\n  <Value>false</Value>\n  <Namespace>aws:elasticbeanstalk:hostmanager</Namespace>\n</member>\n<member>\n  <OptionName>JVM Options</OptionName>\n  <Value/>\n <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n</member>\n<member>\n  <OptionName>Notification Topic Name</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n</member>\n<member>\n  <OptionName>PARAM2</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n</member>\n<member>\n  <OptionName>LoadBalancerHTTPPort</OptionName>\n  <Value>80</Value>\n  <Namespace>aws:elb:loadbalancer</Namespace>\n</member>\n<member>\n  <OptionName>Timeout</OptionName>\n  <Value>5</Value>\n  <Namespace>aws:elb:healthcheck</Namespace>\n</member>\n<member>\n  <OptionName>BreachDuration</OptionName>\n  <Value>2</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>MonitoringInterval</OptionName>\n  <Value>5 minute</Value>\n  <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n</member>\n<member>\n  <OptionName>PARAM1</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n\xef\xbf\xbc\xef\xbf\xbc\xef\xbf\xbc</member>\n<member>\n  <OptionName>MaxSize</OptionName>\n  <Value>4</Value>\n  <Namespace>aws:autoscaling:asg</Namespace>\n</member>\n<member>\n  <OptionName>LowerThreshold</OptionName>\n  <Value>2000000</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>AWS_SECRET_KEY</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n</member>\n<member>\n  <OptionName>AWS_ACCESS_KEY_ID</OptionName>\n  <Value/>\n  <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n</member>\n<member>\n  <OptionName>UpperThreshold</OptionName>\n  <Value>6000000</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>Notification Protocol</OptionName>\n  <Value>email</Value>\n  <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n</member>\n<member>\n  <OptionName>Unit</OptionName>\n  <Value>Bytes</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>Xmx</OptionName>\n  <Value>256m</Value>\n <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n</member>\n<member>\n  <OptionName>Cooldown</OptionName>\n  <Value>360</Value>\n  <Namespace>aws:autoscaling:asg</Namespace>\n</member>\n<member>\n  <OptionName>Period</OptionName>\n  <Value>1</Value>\n  <Namespace>aws:autoscaling:trigger</Namespace>\n</member>\n<member>\n  <OptionName>Xms</OptionName>\n  <Value>256m</Value>\n <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n\xef\xbf\xbc\xef\xbf\xbc\xef\xbf\xbc</member>\n<member>\n<OptionName>EC2KeyName</OptionName>\n        <Value/>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <OptionName>Stickiness Policy</OptionName>\n        <Value>false</Value>\n        <Namespace>aws:elb:policies</Namespace>\n      </member>\n      <member>\n        <OptionName>PARAM3</OptionName>\n        <Value/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <OptionName>HealthyThreshold</OptionName>\n        <Value>3</Value>\n        <Namespace>aws:elb:healthcheck</Namespace>\n      </member>\n      <member>\n        <OptionName>SSLCertificateId</OptionName>\n        <Value/>\n        <Namespace>aws:elb:loadbalancer</Namespace>\n      </member>\n    </OptionSettings>\n    <Description>ConfigTemplateDescription</Description>\n    <ApplicationName>SampleApp</ApplicationName>\n    <DateCreated>2010-11-17T03:48:19.640Z</DateCreated>\n    <TemplateName>AppTemplate</TemplateName>\n    <DateUpdated>2010-11-17T03:48:19.640Z</DateUpdated>\n  </CreateConfigurationTemplateResult>\n  <ResponseMetadata>\n    <RequestId>846cd905-f1fd-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</CreateConfigurationTemplateResponse>\n', OperationModel(name=CreateConfigurationTemplate), {'ApplicationName': 'SampleApp', 'Description': 'ConfigTemplateDescription', 'ResponseMetadata': {'RequestId': '846cd905-f1fd-11df-8a78-9f77047e0d0c'}, 'TemplateName': 'AppTemplate', 'DateCreated': '2010-11-17T03:48:19.640Z', 'OptionSettings': [{'Namespace': 'aws:autoscaling:launchconfiguration', 'OptionName': 'ImageId', 'Value': 'ami-f2f0069b'}, {'Namespace': 'aws:elasticbeanstalk:sns:topics', 'OptionName': 'Notification Endpoint', 'Value': ''}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'PARAM4', 'Value': ''}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'JDBC_CONNECTION_STRING', 'Value': ''}, {'Namespace': 'aws:autoscaling:launchconfiguration', 'OptionName': 'SecurityGroups', 'Value': 'elasticbeanstalk-default'}, {'Namespace': 'aws:elb:healthcheck', 'OptionName': 'UnhealthyThreshold', 'Value': '5'}, {'Namespace': 'aws:autoscaling:launchconfiguration', 'OptionName': 'InstanceType', 'Value': 't1.micro'}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'Statistic', 'Value': 'Average'}, {'Namespace': 'aws:elb:loadbalancer', 'OptionName': 'LoadBalancerHTTPSPort', 'Value': 'OFF'}, {'Namespace': 'aws:elb:policies', 'OptionName': 'Stickiness Cookie Expiration', 'Value': '0'}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'PARAM5', 'Value': ''}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'MeasureName', 'Value': 'NetworkOut'}, {'Namespace': 'aws:elb:healthcheck', 'OptionName': 'Interval', 'Value': '30'}, {'Namespace': 'aws:elasticbeanstalk:application', 'OptionName': 'Application Healthcheck URL', 'Value': '/'}, {'Namespace': 'aws:elasticbeanstalk:sns:topics', 'OptionName': 'Notification Topic ARN', 'Value': ''}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'LowerBreachScaleIncrement', 'Value': '-1'}, {'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'OptionName': 'XX:MaxPermSize', 'Value': '64m'}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'UpperBreachScaleIncrement', 'Value': '1'}, {'Namespace': 'aws:autoscaling:asg', 'OptionName': 'MinSize', 'Value': '1'}, {'Namespace': 'aws:autoscaling:asg', 'OptionName': 'Custom Availability Zones', 'Value': 'us-east-1a'}, {'Namespace': 'aws:autoscaling:asg', 'OptionName': 'Availability Zones', 'Value': 'Any 1'}, {'Namespace': 'aws:elasticbeanstalk:hostmanager', 'OptionName': 'LogPublicationControl', 'Value': 'false'}, {'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'OptionName': 'JVM Options', 'Value': ''}, {'Namespace': 'aws:elasticbeanstalk:sns:topics', 'OptionName': 'Notification Topic Name', 'Value': ''}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'PARAM2', 'Value': ''}, {'Namespace': 'aws:elb:loadbalancer', 'OptionName': 'LoadBalancerHTTPPort', 'Value': '80'}, {'Namespace': 'aws:elb:healthcheck', 'OptionName': 'Timeout', 'Value': '5'}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'BreachDuration', 'Value': '2'}, {'Namespace': 'aws:autoscaling:launchconfiguration', 'OptionName': 'MonitoringInterval', 'Value': '5 minute'}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'PARAM1', 'Value': ''}, {'Namespace': 'aws:autoscaling:asg', 'OptionName': 'MaxSize', 'Value': '4'}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'LowerThreshold', 'Value': '2000000'}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'AWS_SECRET_KEY', 'Value': ''}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'AWS_ACCESS_KEY_ID', 'Value': ''}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'UpperThreshold', 'Value': '6000000'}, {'Namespace': 'aws:elasticbeanstalk:sns:topics', 'OptionName': 'Notification Protocol', 'Value': 'email'}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'Unit', 'Value': 'Bytes'}, {'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'OptionName': 'Xmx', 'Value': '256m'}, {'Namespace': 'aws:autoscaling:asg', 'OptionName': 'Cooldown', 'Value': '360'}, {'Namespace': 'aws:autoscaling:trigger', 'OptionName': 'Period', 'Value': '1'}, {'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'OptionName': 'Xms', 'Value': '256m'}, {'Namespace': 'aws:autoscaling:launchconfiguration', 'OptionName': 'EC2KeyName', 'Value': ''}, {'Namespace': 'aws:elb:policies', 'OptionName': 'Stickiness Policy', 'Value': 'false'}, {'Namespace': 'aws:elasticbeanstalk:application:environment', 'OptionName': 'PARAM3', 'Value': ''}, {'Namespace': 'aws:elb:healthcheck', 'OptionName': 'HealthyThreshold', 'Value': '3'}, {'Namespace': 'aws:elb:loadbalancer', 'OptionName': 'SSLCertificateId', 'Value': ''}], 'DateUpdated': '2010-11-17T03:48:19.640Z', 'SolutionStackName': '32bit Amazon Linux running Tomcat 7'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-create-environment.xml', b'<CreateEnvironmentResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n<CreateEnvironmentResult>\n<VersionLabel>Version1</VersionLabel>\n<Status>Deploying</Status>\n<ApplicationName>SampleApp</ApplicationName>\n<Health>Grey</Health>\n<EnvironmentId>e-icsgecu3wf</EnvironmentId> <DateUpdated>2010-11-17T03:59:33.520Z</DateUpdated> <SolutionStackName>32bit Amazon Linux running Tomcat 7</SolutionStackName>\n    <Description>EnvDescrip</Description>\n    <EnvironmentName>SampleApp</EnvironmentName>\n    <DateCreated>2010-11-17T03:59:33.520Z</DateCreated>\n  </CreateEnvironmentResult>\n  <ResponseMetadata>\n    <RequestId>15db925e-f1ff-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</CreateEnvironmentResponse>\n', OperationModel(name=CreateEnvironment), {'ApplicationName': 'SampleApp', 'EnvironmentName': 'SampleApp', 'VersionLabel': 'Version1', 'Status': 'Deploying', 'Description': 'EnvDescrip', 'ResponseMetadata': {'RequestId': '15db925e-f1ff-11df-8a78-9f77047e0d0c'}, 'EnvironmentId': 'e-icsgecu3wf', 'SolutionStackName': '32bit Amazon Linux running Tomcat 7', 'Health': 'Grey', 'DateUpdated': '2010-11-17T03:59:33.520Z', 'DateCreated': '2010-11-17T03:59:33.520Z'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-create-storage-location.xml', b'<CreateStorageLocationResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <CreateStorageLocationResult>\n    <S3Bucket>elasticbeanstalk-us-east-1-780612358023</S3Bucket>\n  </CreateStorageLocationResult>\n  <ResponseMetadata>\n    <RequestId>ef51b94a-f1d6-11df-8a78-9f77047e0d0c</RequestId>\n</ResponseMetadata>\n</CreateStorageLocationResponse>\n', OperationModel(name=CreateStorageLocation), {'S3Bucket': 'elasticbeanstalk-us-east-1-780612358023', 'ResponseMetadata': {'RequestId': 'ef51b94a-f1d6-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-delete-application.xml', b'<DeleteApplicationResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <ResponseMetadata>\n    <RequestId>1f155abd-f1d7-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</DeleteApplicationResponse>\n', OperationModel(name=DeleteApplication), {'ResponseMetadata': {'RequestId': '1f155abd-f1d7-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-describe-application-versions.xml', b'<DescribeApplicationVersionsResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <DescribeApplicationVersionsResult>\n    <ApplicationVersions>\n      <member>\n        <SourceBundle>\n          <S3Bucket>amazonaws.com</S3Bucket>\n          <S3Key>sample.war</S3Key>\n        </SourceBundle>\n        <VersionLabel>Version1</VersionLabel>\n        <Description>description</Description>\n        <ApplicationName>SampleApp</ApplicationName>\n        <DateCreated>2010-11-17T03:21:59.161Z</DateCreated>\n        <DateUpdated>2010-11-17T03:21:59.161Z</DateUpdated>\n      </member>\n    </ApplicationVersions>\n  </DescribeApplicationVersionsResult>\n  <ResponseMetadata>\n    <RequestId>773cd80a-f26c-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</DescribeApplicationVersionsResponse>\n', OperationModel(name=DescribeApplicationVersions), {'ApplicationVersions': [{'ApplicationName': 'SampleApp', 'DateCreated': '2010-11-17T03:21:59.161Z', 'DateUpdated': '2010-11-17T03:21:59.161Z', 'Description': 'description', 'SourceBundle': {'S3Bucket': 'amazonaws.com', 'S3Key': 'sample.war'}, 'VersionLabel': 'Version1'}], 'ResponseMetadata': {'RequestId': '773cd80a-f26c-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-describe-applications.xml', b'<DescribeApplicationsResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <DescribeApplicationsResult>\n    <Applications>\n      <member>\n        <Versions/>\n        <Description>Sample Description</Description>\n        <ApplicationName>SampleApplication</ApplicationName>\n        <DateCreated>2010-11-16T20:20:51.974Z</DateCreated>\n        <DateUpdated>2010-11-16T20:20:51.974Z</DateUpdated>\n        <ConfigurationTemplates>\n          <member>Default</member>\n        </ConfigurationTemplates>\n      </member>\n    </Applications>\n  </DescribeApplicationsResult>\n  <ResponseMetadata>\n    <RequestId>577c70ff-f1d7-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</DescribeApplicationsResponse>\n', OperationModel(name=DescribeApplications), {'Applications': [{'ApplicationName': 'SampleApplication', 'ConfigurationTemplates': ['Default'], 'DateCreated': '2010-11-16T20:20:51.974Z', 'DateUpdated': '2010-11-16T20:20:51.974Z', 'Description': 'Sample Description', 'Versions': []}], 'ResponseMetadata': {'RequestId': '577c70ff-f1d7-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-describe-configuration-options.xml', b'<DescribeConfigurationOptionsResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <DescribeConfigurationOptionsResult>\n    <SolutionStackName>32bit Amazon Linux running Tomcat 6</SolutionStackName>\n    <Options>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>AWS_SECRET_KEY</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>PARAM1</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>JDBC_CONNECTION_STRING</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>PARAM2</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>AWS_ACCESS_KEY_ID</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>PARAM3</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>PARAM4</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>PARAM5</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:application:environment</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>XX:MaxPermSize</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>64m</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>Xms</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>256m</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>Xmx</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>256m</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartApplicationServer</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>JVM Options</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:container:tomcat:jvmoptions</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>Notification Endpoint</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>Notification Topic ARN</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Notification Protocol</Name>\n        <ValueOptions>\n          <member>http</member>\n          <member>https</member>\n          <member>email</member>\n          <member>email-json</member>\n          <member>sqs</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>email</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>Notification Topic Name</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elasticbeanstalk:sns:topics</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>0</MinValue>\n        <Name>Stickiness Cookie Expiration</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>0</DefaultValue>\n        <MaxValue>1000000</MaxValue>\n        <Namespace>aws:elb:policies</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Stickiness Policy</Name>\n        <ValueType>Boolean</ValueType>\n        <DefaultValue>false</DefaultValue>\n        <Namespace>aws:elb:policies</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>5</MinValue>\n        <Name>Interval</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>30</DefaultValue>\n        <MaxValue>300</MaxValue>\n        <Namespace>aws:elb:healthcheck</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>2</MinValue>\n        <Name>UnhealthyThreshold</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>5</DefaultValue>\n        <MaxValue>10</MaxValue>\n        <Namespace>aws:elb:healthcheck</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>2</MinValue>\n        <Name>HealthyThreshold</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>3</DefaultValue>\n        <MaxValue>10</MaxValue>\n        <Namespace>aws:elb:healthcheck</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>2</MinValue>\n        <Name>Timeout</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>5</DefaultValue>\n        <MaxValue>60</MaxValue>\n        <Namespace>aws:elb:healthcheck</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>LoadBalancerHTTPPort</Name>\n        <ValueOptions>\n          <member>OFF</member>\n          <member>80</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>80</DefaultValue>\n        <Namespace>aws:elb:loadbalancer</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>LoadBalancerHTTPSPort</Name>\n        <ValueOptions>\n          <member>OFF</member>\n          <member>443</member>\n          <member>8443</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>OFF</DefaultValue>\n        <Namespace>aws:elb:loadbalancer</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>SSLCertificateId</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:elb:loadbalancer</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Statistic</Name>\n        <ValueOptions>\n          <member>Minimum</member>\n          <member>Maximum</member>\n          <member>Sum</member>\n          <member>Average</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>Average</DefaultValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>MeasureName</Name>\n        <ValueOptions>\n          <member>CPUUtilization</member>\n          <member>NetworkIn</member>\n          <member>NetworkOut</member>\n          <member>DiskWriteOps</member>\n          <member>DiskReadBytes</member>\n          <member>DiskReadOps</member>\n          <member>DiskWriteBytes</member>\n          <member>Latency</member>\n          <member>RequestCount</member>\n          <member>HealthyHostCount</member>\n          <member>UnhealthyHostCount</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>NetworkOut</DefaultValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Unit</Name>\n        <ValueOptions>\n          <member>Seconds</member>\n          <member>Percent</member>\n          <member>Bytes</member>\n          <member>Bits</member>\n          <member>Count</member>\n          <member>Bytes/Second</member>\n          <member>Bits/Second</member>\n          <member>Count/Second</member>\n          <member>None</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>Bytes</DefaultValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>0</MinValue>\n        <Name>LowerThreshold</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>2000000</DefaultValue>\n        <MaxValue>20000000</MaxValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>UpperBreachScaleIncrement</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>1</DefaultValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>LowerBreachScaleIncrement</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>-1</DefaultValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>1</MinValue>\n        <Name>BreachDuration</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>5</DefaultValue>\n        <MaxValue>600</MaxValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>1</MinValue>\n        <Name>Period</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>5</DefaultValue>\n        <MaxValue>600</MaxValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>0</MinValue>\n        <Name>UpperThreshold</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>6000000</DefaultValue>\n        <MaxValue>20000000</MaxValue>\n        <Namespace>aws:autoscaling:trigger</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>1</MinValue>\n        <Name>MaxSize</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>4</DefaultValue>\n        <MaxValue>10000</MaxValue>\n        <Namespace>aws:autoscaling:asg</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>1</MinValue>\n        <Name>MinSize</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>1</DefaultValue>\n        <MaxValue>10000</MaxValue>\n        <Namespace>aws:autoscaling:asg</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Availability Zones</Name>\n        <ValueOptions>\n          <member>Any 1</member>\n          <member>Any 2</member>\n          <member>Any</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>Any 1</DefaultValue>\n        <Namespace>aws:autoscaling:asg</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MinValue>0</MinValue>\n        <Name>Cooldown</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>360</DefaultValue>\n        <MaxValue>10000</MaxValue>\n        <Namespace>aws:autoscaling:asg</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Custom Availability Zones</Name>\n        <ValueOptions>\n          <member>us-west-2a</member>\n          <member>us-west-2b</member>\n          <member>us-west-2c</member>\n        </ValueOptions>\n        <ValueType>List</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:autoscaling:asg</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartEnvironment</ChangeSeverity>\n        <Name>MonitoringInterval</Name>\n        <ValueOptions>\n          <member>1 minute</member>\n          <member>5 minute</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>5 minute</DefaultValue>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartEnvironment</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>EC2KeyName</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue/>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartEnvironment</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>SecurityGroups</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>elasticbeanstalk-default</DefaultValue>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartEnvironment</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Name>ImageId</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>ami-f62fa3c6</DefaultValue>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>RestartEnvironment</ChangeSeverity>\n        <Name>InstanceType</Name>\n        <ValueOptions>\n          <member>t1.micro</member>\n          <member>m1.small</member>\n          <member>c1.medium</member>\n          <member>m1.medium</member>\n        </ValueOptions>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>t1.micro</DefaultValue>\n        <Namespace>aws:autoscaling:launchconfiguration</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <MaxLength>200</MaxLength>\n        <Regex>\n          <Pattern>^\\S*$</Pattern>\n          <Label>nospaces</Label>\n        </Regex>\n        <Name>Application Healthcheck URL</Name>\n        <ValueType>Scalar</ValueType>\n        <DefaultValue>/</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:application</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>Automatically Terminate Unhealthy Instances</Name>\n        <ValueType>Boolean</ValueType>\n        <DefaultValue>true</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:monitoring</Namespace>\n      </member>\n      <member>\n        <UserDefined>false</UserDefined>\n        <ChangeSeverity>NoInterruption</ChangeSeverity>\n        <Name>LogPublicationControl</Name>\n        <ValueType>Boolean</ValueType>\n        <DefaultValue>false</DefaultValue>\n        <Namespace>aws:elasticbeanstalk:hostmanager</Namespace>\n      </member>\n    </Options>\n  </DescribeConfigurationOptionsResult>\n  <ResponseMetadata>\n    <RequestId>af3d86f9-9167-11e2-a92a-116deff19e14</RequestId>\n  </ResponseMetadata>\n</DescribeConfigurationOptionsResponse>\n', OperationModel(name=DescribeConfigurationOptions), {'Options': [{'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'AWS_SECRET_KEY', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'DefaultValue': ''}, {'Name': 'PARAM1', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'JDBC_CONNECTION_STRING', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'DefaultValue': ''}, {'Name': 'PARAM2', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'AWS_ACCESS_KEY_ID', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'DefaultValue': ''}, {'Name': 'PARAM3', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'PARAM4', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'PARAM5', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:application:environment', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'XX:MaxPermSize', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'MaxLength': 200, 'DefaultValue': '64m'}, {'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'Xms', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'MaxLength': 200, 'DefaultValue': '256m'}, {'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'Xmx', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'MaxLength': 200, 'DefaultValue': '256m'}, {'Name': 'JVM Options', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartApplicationServer', 'Namespace': 'aws:elasticbeanstalk:container:tomcat:jvmoptions', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'Notification Endpoint', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:sns:topics', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'Notification Topic ARN', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:sns:topics', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'Notification Protocol', 'UserDefined': False, 'DefaultValue': 'email', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:sns:topics', 'ValueType': 'Scalar', 'ValueOptions': ['http', 'https', 'email', 'email-json', 'sqs']}, {'Name': 'Notification Topic Name', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:sns:topics', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'Stickiness Cookie Expiration', 'UserDefined': False, 'DefaultValue': '0', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:policies', 'MaxValue': 1000000, 'MinValue': 0, 'ValueType': 'Scalar'}, {'Name': 'Stickiness Policy', 'UserDefined': False, 'DefaultValue': 'false', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:policies', 'ValueType': 'Boolean'}, {'Name': 'Interval', 'UserDefined': False, 'DefaultValue': '30', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:healthcheck', 'MaxValue': 300, 'MinValue': 5, 'ValueType': 'Scalar'}, {'Name': 'UnhealthyThreshold', 'UserDefined': False, 'DefaultValue': '5', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:healthcheck', 'MaxValue': 10, 'MinValue': 2, 'ValueType': 'Scalar'}, {'Name': 'HealthyThreshold', 'UserDefined': False, 'DefaultValue': '3', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:healthcheck', 'MaxValue': 10, 'MinValue': 2, 'ValueType': 'Scalar'}, {'Name': 'Timeout', 'UserDefined': False, 'DefaultValue': '5', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:healthcheck', 'MaxValue': 60, 'MinValue': 2, 'ValueType': 'Scalar'}, {'Name': 'LoadBalancerHTTPPort', 'UserDefined': False, 'DefaultValue': '80', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:loadbalancer', 'ValueType': 'Scalar', 'ValueOptions': ['OFF', '80']}, {'Name': 'LoadBalancerHTTPSPort', 'UserDefined': False, 'DefaultValue': 'OFF', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:loadbalancer', 'ValueType': 'Scalar', 'ValueOptions': ['OFF', '443', '8443']}, {'Name': 'SSLCertificateId', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elb:loadbalancer', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'Statistic', 'UserDefined': False, 'DefaultValue': 'Average', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'ValueType': 'Scalar', 'ValueOptions': ['Minimum', 'Maximum', 'Sum', 'Average']}, {'Name': 'MeasureName', 'UserDefined': False, 'DefaultValue': 'NetworkOut', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'ValueType': 'Scalar', 'ValueOptions': ['CPUUtilization', 'NetworkIn', 'NetworkOut', 'DiskWriteOps', 'DiskReadBytes', 'DiskReadOps', 'DiskWriteBytes', 'Latency', 'RequestCount', 'HealthyHostCount', 'UnhealthyHostCount']}, {'Name': 'Unit', 'UserDefined': False, 'DefaultValue': 'Bytes', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'ValueType': 'Scalar', 'ValueOptions': ['Seconds', 'Percent', 'Bytes', 'Bits', 'Count', 'Bytes/Second', 'Bits/Second', 'Count/Second', 'None']}, {'Name': 'LowerThreshold', 'UserDefined': False, 'DefaultValue': '2000000', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'MaxValue': 20000000, 'MinValue': 0, 'ValueType': 'Scalar'}, {'Name': 'UpperBreachScaleIncrement', 'UserDefined': False, 'DefaultValue': '1', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'LowerBreachScaleIncrement', 'UserDefined': False, 'DefaultValue': '-1', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'BreachDuration', 'UserDefined': False, 'DefaultValue': '5', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'MaxValue': 600, 'MinValue': 1, 'ValueType': 'Scalar'}, {'Name': 'Period', 'UserDefined': False, 'DefaultValue': '5', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'MaxValue': 600, 'MinValue': 1, 'ValueType': 'Scalar'}, {'Name': 'UpperThreshold', 'UserDefined': False, 'DefaultValue': '6000000', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:trigger', 'MaxValue': 20000000, 'MinValue': 0, 'ValueType': 'Scalar'}, {'Name': 'MaxSize', 'UserDefined': False, 'DefaultValue': '4', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:asg', 'MaxValue': 10000, 'MinValue': 1, 'ValueType': 'Scalar'}, {'Name': 'MinSize', 'UserDefined': False, 'DefaultValue': '1', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:asg', 'MaxValue': 10000, 'MinValue': 1, 'ValueType': 'Scalar'}, {'Name': 'Availability Zones', 'UserDefined': False, 'DefaultValue': 'Any 1', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:asg', 'ValueType': 'Scalar', 'ValueOptions': ['Any 1', 'Any 2', 'Any']}, {'Name': 'Cooldown', 'UserDefined': False, 'DefaultValue': '360', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:asg', 'MaxValue': 10000, 'MinValue': 0, 'ValueType': 'Scalar'}, {'Name': 'Custom Availability Zones', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:autoscaling:asg', 'ValueType': 'List', 'ValueOptions': ['us-west-2a', 'us-west-2b', 'us-west-2c']}, {'Name': 'MonitoringInterval', 'UserDefined': False, 'DefaultValue': '5 minute', 'ChangeSeverity': 'RestartEnvironment', 'Namespace': 'aws:autoscaling:launchconfiguration', 'ValueType': 'Scalar', 'ValueOptions': ['1 minute', '5 minute']}, {'Name': 'EC2KeyName', 'UserDefined': False, 'DefaultValue': '', 'ChangeSeverity': 'RestartEnvironment', 'Namespace': 'aws:autoscaling:launchconfiguration', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'SecurityGroups', 'UserDefined': False, 'DefaultValue': 'elasticbeanstalk-default', 'ChangeSeverity': 'RestartEnvironment', 'Namespace': 'aws:autoscaling:launchconfiguration', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'ImageId', 'UserDefined': False, 'DefaultValue': 'ami-f62fa3c6', 'ChangeSeverity': 'RestartEnvironment', 'Namespace': 'aws:autoscaling:launchconfiguration', 'MaxLength': 200, 'ValueType': 'Scalar'}, {'Name': 'InstanceType', 'UserDefined': False, 'DefaultValue': 't1.micro', 'ChangeSeverity': 'RestartEnvironment', 'Namespace': 'aws:autoscaling:launchconfiguration', 'ValueType': 'Scalar', 'ValueOptions': ['t1.micro', 'm1.small', 'c1.medium', 'm1.medium']}, {'Regex': {'Pattern': '^\\S*$', 'Label': 'nospaces'}, 'Name': 'Application Healthcheck URL', 'UserDefined': False, 'ValueType': 'Scalar', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:application', 'MaxLength': 200, 'DefaultValue': '/'}, {'Name': 'Automatically Terminate Unhealthy Instances', 'UserDefined': False, 'DefaultValue': 'true', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:monitoring', 'ValueType': 'Boolean'}, {'Name': 'LogPublicationControl', 'UserDefined': False, 'DefaultValue': 'false', 'ChangeSeverity': 'NoInterruption', 'Namespace': 'aws:elasticbeanstalk:hostmanager', 'ValueType': 'Boolean'}], 'ResponseMetadata': {'RequestId': 'af3d86f9-9167-11e2-a92a-116deff19e14'}, 'SolutionStackName': '32bit Amazon Linux running Tomcat 6'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-describe-environments.xml', b'<DescribeEnvironmentsResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <DescribeEnvironmentsResult>\n    <Environments>\n      <member>\n        <VersionLabel>Version1</VersionLabel>\n        <Status>Available</Status>\n        <ApplicationName>SampleApp</ApplicationName>\n        <EndpointURL>elasticbeanstalk-SampleApp-1394386994.us-east-1.elb.amazonaws.com</EndpointURL>\n        <CNAME>SampleApp-jxb293wg7n.elasticbeanstalk.amazonaws.com</CNAME>\n        <Health>Green</Health>\n        <EnvironmentId>e-icsgecu3wf</EnvironmentId>\n        <DateUpdated>2010-11-17T04:01:40.668Z</DateUpdated>\n        <SolutionStackName>32bit Amazon Linux running Tomcat 7</SolutionStackName>\n        <Description>EnvDescrip</Description>\n        <EnvironmentName>SampleApp</EnvironmentName>\n        <DateCreated>2010-11-17T03:59:33.520Z</DateCreated>\n      </member>\n    </Environments>\n  </DescribeEnvironmentsResult>\n  <ResponseMetadata>\n    <RequestId>44790c68-f260-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</DescribeEnvironmentsResponse>\n', OperationModel(name=DescribeEnvironments), {'Environments': [{'ApplicationName': 'SampleApp', 'CNAME': 'SampleApp-jxb293wg7n.elasticbeanstalk.amazonaws.com', 'DateCreated': '2010-11-17T03:59:33.520Z', 'DateUpdated': '2010-11-17T04:01:40.668Z', 'Description': 'EnvDescrip', 'EndpointURL': 'elasticbeanstalk-SampleApp-1394386994.us-east-1.elb.amazonaws.com', 'EnvironmentId': 'e-icsgecu3wf', 'EnvironmentName': 'SampleApp', 'Health': 'Green', 'SolutionStackName': '32bit Amazon Linux running Tomcat 7', 'Status': 'Available', 'VersionLabel': 'Version1'}], 'ResponseMetadata': {'RequestId': '44790c68-f260-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-describe-events.xml', b'<DescribeEventsResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <DescribeEventsResult>\n    <Events>\n      <member>\n        <Message>Successfully completed createEnvironment activity.</Message>\n        <EventDate>2010-11-17T20:25:35.191Z</EventDate>\n        <VersionLabel>New Version</VersionLabel>\n        <RequestId>bb01fa74-f287-11df-8a78-9f77047e0d0c</RequestId>\n        <ApplicationName>SampleApp</ApplicationName>\n        <EnvironmentName>SampleAppVersion</EnvironmentName>\n        <Severity>INFO</Severity>\n      </member>\n      <member>\n        <Message>Launching a new EC2 instance: i-04a8c569</Message>\n        <EventDate>2010-11-17T20:21:30Z</EventDate>\n        <VersionLabel>New Version</VersionLabel>\n        <ApplicationName>SampleApp</ApplicationName>\n        <EnvironmentName>SampleAppVersion</EnvironmentName>\n        <Severity>DEBUG</Severity>\n      </member>\n      <member>\n        <Message>At least one EC2 instance has entered the InService lifecycle state.</Message>\n        <EventDate>2010-11-17T20:20:32.008Z</EventDate>\n        <VersionLabel>New Version</VersionLabel>\n        <RequestId>bb01fa74-f287-11df-8a78-9f77047e0d0c</RequestId>\n        <ApplicationName>SampleApp</ApplicationName>\n        <EnvironmentName>SampleAppVersion</EnvironmentName>\n        <Severity>INFO</Severity>\n      </member>\n      <member>\n        <Message>Elastic Load Balancer elasticbeanstalk-SampleAppVersion has failed 0 healthy instances - Environment may not be available.</Message>\n        <EventDate>2010-11-17T20:19:28Z</EventDate>\n        <VersionLabel>New Version</VersionLabel>\n        <ApplicationName>SampleApp</ApplicationName>\n        <EnvironmentName>SampleAppVersion</EnvironmentName>\n        <Severity>WARN</Severity>\n      </member>\n    </Events>\n  </DescribeEventsResult>\n  <ResponseMetadata>\n    <RequestId>f10d02dd-f288-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</DescribeEventsResponse>\n', OperationModel(name=DescribeEvents), {'Events': [{'ApplicationName': 'SampleApp', 'EnvironmentName': 'SampleAppVersion', 'EventDate': '2010-11-17T20:25:35.191Z', 'Message': 'Successfully completed createEnvironment activity.', 'RequestId': 'bb01fa74-f287-11df-8a78-9f77047e0d0c', 'Severity': 'INFO', 'VersionLabel': 'New Version'}, {'ApplicationName': 'SampleApp', 'EnvironmentName': 'SampleAppVersion', 'EventDate': '2010-11-17T20:21:30Z', 'Message': 'Launching a new EC2 instance: i-04a8c569', 'Severity': 'DEBUG', 'VersionLabel': 'New Version'}, {'ApplicationName': 'SampleApp', 'EnvironmentName': 'SampleAppVersion', 'EventDate': '2010-11-17T20:20:32.008Z', 'Message': 'At least one EC2 instance has entered the InService lifecycle state.', 'RequestId': 'bb01fa74-f287-11df-8a78-9f77047e0d0c', 'Severity': 'INFO', 'VersionLabel': 'New Version'}, {'ApplicationName': 'SampleApp', 'EnvironmentName': 'SampleAppVersion', 'EventDate': '2010-11-17T20:19:28Z', 'Message': 'Elastic Load Balancer elasticbeanstalk-SampleAppVersion has failed 0 healthy instances - Environment may not be available.', 'Severity': 'WARN', 'VersionLabel': 'New Version'}], 'ResponseMetadata': {'RequestId': 'f10d02dd-f288-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-list-available-solution-stacks.xml', b'<ListAvailableSolutionStacksResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <ListAvailableSolutionStacksResult>\n    <SolutionStacks>\n      <member>32bit Amazon Linux running PHP 5.4</member>\n      <member>64bit Amazon Linux running PHP 5.4</member>\n      <member>32bit Amazon Linux running PHP 5.3</member>\n      <member>64bit Amazon Linux running PHP 5.3</member>\n      <member>32bit Amazon Linux running Node.js</member>\n      <member>64bit Amazon Linux running Node.js</member>\n      <member>64bit Windows Server 2008 R2 running IIS 7.5</member>\n      <member>64bit Windows Server 2012 running IIS 8</member>\n      <member>32bit Amazon Linux running Tomcat 7</member>\n      <member>64bit Amazon Linux running Tomcat 7</member>\n      <member>32bit Amazon Linux running Tomcat 6</member>\n      <member>64bit Amazon Linux running Tomcat 6</member>\n      <member>32bit Amazon Linux running Python</member>\n      <member>64bit Amazon Linux running Python</member>\n      <member>32bit Amazon Linux running Ruby 1.8.7</member>\n      <member>64bit Amazon Linux running Ruby 1.8.7</member>\n      <member>32bit Amazon Linux running Ruby 1.9.3</member>\n      <member>64bit Amazon Linux running Ruby 1.9.3</member>\n    </SolutionStacks>\n    <SolutionStackDetails>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running PHP 5.4</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running PHP 5.4</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running PHP 5.3</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running PHP 5.3</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running Node.js</SolutionStackName>\n        <PermittedFileTypes>\n          <member>.zip</member>\n          <member>.war</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running Node.js</SolutionStackName>\n        <PermittedFileTypes>\n          <member>.zip</member>\n          <member>.war</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Windows Server 2008 R2 running IIS 7.5</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Windows Server 2012 running IIS 8</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running Tomcat 7</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running Tomcat 7</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running Tomcat 6</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running Tomcat 6</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running Python</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running Python</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running Ruby 1.8.7</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running Ruby 1.8.7</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>32bit Amazon Linux running Ruby 1.9.3</SolutionStackName>\n        <PermittedFileTypes>\n          <member>zip</member>\n          <member>war</member>\n        </PermittedFileTypes>\n      </member>\n      <member>\n        <SolutionStackName>64bit Amazon Linux running Ruby 1.9.3</SolutionStackName>\n        <PermittedFileTypes>\n          <member>war</member>\n          <member>zip</member>\n        </PermittedFileTypes>\n      </member>\n    </SolutionStackDetails>\n  </ListAvailableSolutionStacksResult>\n  <ResponseMetadata>\n    <RequestId>af7e11cd-9167-11e2-9d65-771f0f370017</RequestId>\n  </ResponseMetadata>\n</ListAvailableSolutionStacksResponse>\n', OperationModel(name=ListAvailableSolutionStacks), {'SolutionStacks': ['32bit Amazon Linux running PHP 5.4', '64bit Amazon Linux running PHP 5.4', '32bit Amazon Linux running PHP 5.3', '64bit Amazon Linux running PHP 5.3', '32bit Amazon Linux running Node.js', '64bit Amazon Linux running Node.js', '64bit Windows Server 2008 R2 running IIS 7.5', '64bit Windows Server 2012 running IIS 8', '32bit Amazon Linux running Tomcat 7', '64bit Amazon Linux running Tomcat 7', '32bit Amazon Linux running Tomcat 6', '64bit Amazon Linux running Tomcat 6', '32bit Amazon Linux running Python', '64bit Amazon Linux running Python', '32bit Amazon Linux running Ruby 1.8.7', '64bit Amazon Linux running Ruby 1.8.7', '32bit Amazon Linux running Ruby 1.9.3', '64bit Amazon Linux running Ruby 1.9.3'], 'ResponseMetadata': {'RequestId': 'af7e11cd-9167-11e2-9d65-771f0f370017'}, 'SolutionStackDetails': [{'PermittedFileTypes': ['zip'], 'SolutionStackName': '32bit Amazon Linux running PHP 5.4'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '64bit Amazon Linux running PHP 5.4'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '32bit Amazon Linux running PHP 5.3'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '64bit Amazon Linux running PHP 5.3'}, {'PermittedFileTypes': ['.zip', '.war'], 'SolutionStackName': '32bit Amazon Linux running Node.js'}, {'PermittedFileTypes': ['.zip', '.war'], 'SolutionStackName': '64bit Amazon Linux running Node.js'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '64bit Windows Server 2008 R2 running IIS 7.5'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '64bit Windows Server 2012 running IIS 8'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '32bit Amazon Linux running Tomcat 7'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '64bit Amazon Linux running Tomcat 7'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '32bit Amazon Linux running Tomcat 6'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '64bit Amazon Linux running Tomcat 6'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '32bit Amazon Linux running Python'}, {'PermittedFileTypes': ['zip'], 'SolutionStackName': '64bit Amazon Linux running Python'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '32bit Amazon Linux running Ruby 1.8.7'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '64bit Amazon Linux running Ruby 1.8.7'}, {'PermittedFileTypes': ['zip', 'war'], 'SolutionStackName': '32bit Amazon Linux running Ruby 1.9.3'}, {'PermittedFileTypes': ['war', 'zip'], 'SolutionStackName': '64bit Amazon Linux running Ruby 1.9.3'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-retrieve-environment-info.xml', b'<RetrieveEnvironmentInfoResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <RetrieveEnvironmentInfoResult>\n    <EnvironmentInfo>\n      <member>\n        <Message>https://elasticbeanstalk.us-east-1.s3.amazonaws.com/environments%2Fa514386a-709f-4888-9683-068c38d744b4%2Flogs%2Fi-92a3ceff%2F278756a8-7d83-4bc1-93db-b1763163705a.log?Expires=1291236023%26AuthParams</Message>\n        <SampleTimestamp>2010-11-17T20:40:23.210Z</SampleTimestamp>\n        <InfoType>tail</InfoType>\n        <Ec2InstanceId>i-92a3ceff</Ec2InstanceId>\n      </member>\n    </EnvironmentInfo>\n  </RetrieveEnvironmentInfoResult>\n  <ResponseMetadata>\n    <RequestId>e8e785c9-f28a-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</RetrieveEnvironmentInfoResponse>\n', OperationModel(name=RetrieveEnvironmentInfo), {'EnvironmentInfo': [{'SampleTimestamp': '2010-11-17T20:40:23.210Z', 'Message': 'https://elasticbeanstalk.us-east-1.s3.amazonaws.com/environments%2Fa514386a-709f-4888-9683-068c38d744b4%2Flogs%2Fi-92a3ceff%2F278756a8-7d83-4bc1-93db-b1763163705a.log?Expires=1291236023%26AuthParams', 'InfoType': 'tail', 'Ec2InstanceId': 'i-92a3ceff'}], 'ResponseMetadata': {'RequestId': 'e8e785c9-f28a-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-terminate-environment.xml', b'<TerminateEnvironmentResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <TerminateEnvironmentResult>\n    <VersionLabel>Version1</VersionLabel>\n    <Status>Terminating</Status>\n    <ApplicationName>SampleApp</ApplicationName>\n    <EndpointURL>elasticbeanstalk-SampleApp-1394386994.us-east-1.elb.amazon\naws.com</EndpointURL>\n<CNAME>SampleApp-jxb293wg7n.elasticbeanstalk.amazonaws.com</CNAME> <Health>Grey</Health>\n<EnvironmentId>e-icsgecu3wf</EnvironmentId> <DateUpdated>2010-11-17T17:10:41.976Z</DateUpdated> <SolutionStackName>32bit Amazon Linux running Tomcat 7</SolutionStackName>\n    <Description>EnvDescrip</Description>\n    <EnvironmentName>SampleApp</EnvironmentName>\n    <DateCreated>2010-11-17T03:59:33.520Z</DateCreated>\n  </TerminateEnvironmentResult>\n  <ResponseMetadata>\n    <RequestId>9b71af21-f26d-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</TerminateEnvironmentResponse>\n', OperationModel(name=TerminateEnvironment), {'ApplicationName': 'SampleApp', 'EnvironmentName': 'SampleApp', 'VersionLabel': 'Version1', 'Status': 'Terminating', 'Description': 'EnvDescrip', 'ResponseMetadata': {'RequestId': '9b71af21-f26d-11df-8a78-9f77047e0d0c'}, 'EnvironmentId': 'e-icsgecu3wf', 'EndpointURL': 'elasticbeanstalk-SampleApp-1394386994.us-east-1.elb.amazon\naws.com', 'SolutionStackName': '32bit Amazon Linux running Tomcat 7', 'CNAME': 'SampleApp-jxb293wg7n.elasticbeanstalk.amazonaws.com', 'Health': 'Grey', 'DateUpdated': '2010-11-17T17:10:41.976Z', 'DateCreated': '2010-11-17T03:59:33.520Z'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-update-application-version.xml', b'<UpdateApplicationVersionResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <UpdateApplicationVersionResult>\n    <ApplicationVersion>\n      <SourceBundle>\n        <S3Bucket>awsemr</S3Bucket>\n        <S3Key>sample.war</S3Key>\n      </SourceBundle>\n      <VersionLabel>New Version</VersionLabel>\n      <Description>New Release Description</Description>\n      <ApplicationName>SampleApp</ApplicationName>\n      <DateCreated>2010-11-17T19:26:20.699Z</DateCreated>\n      <DateUpdated>2010-11-17T20:48:16.632Z</DateUpdated>\n    </ApplicationVersion>\n  </UpdateApplicationVersionResult>\n  <ResponseMetadata>\n    <RequestId>00b10aa1-f28c-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</UpdateApplicationVersionResponse>\n', OperationModel(name=UpdateApplicationVersion), {'ApplicationVersion': {'ApplicationName': 'SampleApp', 'VersionLabel': 'New Version', 'Description': 'New Release Description', 'DateCreated': '2010-11-17T19:26:20.699Z', 'DateUpdated': '2010-11-17T20:48:16.632Z', 'SourceBundle': {'S3Bucket': 'awsemr', 'S3Key': 'sample.war'}}, 'ResponseMetadata': {'RequestId': '00b10aa1-f28c-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/elasticbeanstalk-update-application.xml', b'<UpdateApplicationResponse xmlns="http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/">\n  <UpdateApplicationResult>\n    <Application>\n      <Versions>\n        <member>New Version</member>\n      </Versions>\n      <Description>Another Description</Description>\n      <ApplicationName>SampleApp</ApplicationName>\n      <DateCreated>2010-11-17T19:26:20.410Z</DateCreated>\n      <DateUpdated>2010-11-17T20:42:54.611Z</DateUpdated>\n      <ConfigurationTemplates>\n        <member>Default</member>\n      </ConfigurationTemplates>\n    </Application>\n  </UpdateApplicationResult>\n  <ResponseMetadata>\n    <RequestId>40be666b-f28b-11df-8a78-9f77047e0d0c</RequestId>\n  </ResponseMetadata>\n</UpdateApplicationResponse>\n', OperationModel(name=UpdateApplication), {'Application': {'ApplicationName': 'SampleApp', 'Description': 'Another Description', 'Versions': ['New Version'], 'DateCreated': '2010-11-17T19:26:20.410Z', 'ConfigurationTemplates': ['Default'], 'DateUpdated': '2010-11-17T20:42:54.611Z'}, 'ResponseMetadata': {'RequestId': '40be666b-f28b-11df-8a78-9f77047e0d0c'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudwatch-describe-alarm-history.xml', b'<DescribeAlarmHistoryResponse xmlns="http://monitoring.amazonaws.com/doc/2010-08-01/">\n  <DescribeAlarmHistoryResult>\n    <AlarmHistoryItems/>\n  </DescribeAlarmHistoryResult>\n  <ResponseMetadata>\n    <RequestId>ac265b36-9167-11e2-bf7e-91c14e278742</RequestId>\n  </ResponseMetadata>\n</DescribeAlarmHistoryResponse>\n', OperationModel(name=DescribeAlarmHistory), {'AlarmHistoryItems': [], 'ResponseMetadata': {'RequestId': 'ac265b36-9167-11e2-bf7e-91c14e278742'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudwatch-describe-alarms.xml', b'<DescribeAlarmsResponse xmlns="http://monitoring.amazonaws.com/doc/2010-08-01/">\n  <DescribeAlarmsResult>\n    <MetricAlarms/>\n  </DescribeAlarmsResult>\n  <ResponseMetadata>\n    <RequestId>ac11e96c-9167-11e2-bb93-654a565d340b</RequestId>\n  </ResponseMetadata>\n</DescribeAlarmsResponse>\n', OperationModel(name=DescribeAlarms), {'ResponseMetadata': {'RequestId': 'ac11e96c-9167-11e2-bb93-654a565d340b'}, 'MetricAlarms': []}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/cloudwatch-list-metrics.xml', b'<ListMetricsResponse xmlns="http://monitoring.amazonaws.com/doc/2010-08-01/">\n  <ListMetricsResult>\n    <Metrics>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeIdleTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NumberOfEmptyReceives</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkOut</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>ApproximateNumberOfMessagesNotVisible</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalReadTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_Instance</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>ApproximateNumberOfMessagesDelayed</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>CPUUtilization</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalWriteTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>CPUUtilization</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeQueueLength</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalReadTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>CPUUtilization</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_Instance</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>CPUUtilization</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeIdleTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeQueueLength</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeIdleTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>ApproximateNumberOfMessagesVisible</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_Instance</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalWriteTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_System</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkOut</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalWriteTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeQueueLength</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeIdleTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NumberOfMessagesSent</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeQueueLength</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-267b761f</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>TableName</Name>\n            <Value>fromcli</Value>\n          </member>\n        </Dimensions>\n        <MetricName>ProvisionedReadCapacityUnits</MetricName>\n        <Namespace>AWS/DynamoDB</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_System</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NumberOfMessagesDeleted</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkOut</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_System</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkOut</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkIn</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>QueueName</Name>\n            <Value>foobar</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NumberOfMessagesReceived</MetricName>\n        <Namespace>AWS/SQS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeReadOps</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-203b3919</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalReadTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>TableName</Name>\n            <Value>fromcli</Value>\n          </member>\n        </Dimensions>\n        <MetricName>ProvisionedWriteCapacityUnits</MetricName>\n        <Namespace>AWS/DynamoDB</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalWriteTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-a8d2e991</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeTotalReadTime</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>VolumeId</Name>\n            <Value>vol-04c7c53d</Value>\n          </member>\n        </Dimensions>\n        <MetricName>VolumeWriteBytes</MetricName>\n        <Namespace>AWS/EBS</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-20277712</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_Instance</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkIn</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkIn</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-70d08042</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskReadOps</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-d63c6ce4</Value>\n          </member>\n        </Dimensions>\n        <MetricName>NetworkIn</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>StatusCheckFailed_System</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n      <member>\n        <Dimensions>\n          <member>\n            <Name>InstanceId</Name>\n            <Value>i-78f1b94a</Value>\n          </member>\n        </Dimensions>\n        <MetricName>DiskWriteBytes</MetricName>\n        <Namespace>AWS/EC2</Namespace>\n      </member>\n    </Metrics>\n  </ListMetricsResult>\n  <ResponseMetadata>\n    <RequestId>abea8add-9167-11e2-91d1-9b4c7751b290</RequestId>\n  </ResponseMetadata>\n</ListMetricsResponse>\n', OperationModel(name=ListMetrics), {'Metrics': [{'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeIdleTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeReadBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'DiskReadBytes'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'NumberOfEmptyReceives'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'NetworkOut'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'ApproximateNumberOfMessagesNotVisible'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeTotalReadTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeWriteOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeWriteOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeWriteBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'StatusCheckFailed_Instance'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'ApproximateNumberOfMessagesDelayed'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeReadOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'CPUUtilization'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeTotalWriteTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeWriteOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'CPUUtilization'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeQueueLength'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'DiskWriteBytes'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeTotalReadTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeWriteOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'CPUUtilization'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'StatusCheckFailed_Instance'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'CPUUtilization'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'DiskReadBytes'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeIdleTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeQueueLength'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'DiskReadOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeIdleTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeWriteBytes'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'ApproximateNumberOfMessagesVisible'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'DiskReadBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'StatusCheckFailed_Instance'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeReadOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'DiskReadOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeTotalWriteTime'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'StatusCheckFailed_System'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'NetworkOut'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'StatusCheckFailed'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeReadOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeTotalWriteTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeReadBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'DiskWriteOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'DiskWriteOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeQueueLength'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeIdleTime'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'StatusCheckFailed'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'StatusCheckFailed'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'NumberOfMessagesSent'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeQueueLength'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-267b761f'}], 'MetricName': 'VolumeReadBytes'}, {'Namespace': 'AWS/DynamoDB', 'Dimensions': [{'Name': 'TableName', 'Value': 'fromcli'}], 'MetricName': 'ProvisionedReadCapacityUnits'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'StatusCheckFailed_System'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'NumberOfMessagesDeleted'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeReadBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'DiskWriteOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'NetworkOut'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'DiskReadOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'StatusCheckFailed_System'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'NetworkOut'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'NetworkIn'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeWriteBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'DiskWriteBytes'}, {'Namespace': 'AWS/SQS', 'Dimensions': [{'Name': 'QueueName', 'Value': 'foobar'}], 'MetricName': 'NumberOfMessagesReceived'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeReadOps'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-203b3919'}], 'MetricName': 'VolumeTotalReadTime'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'DiskWriteOps'}, {'Namespace': 'AWS/DynamoDB', 'Dimensions': [{'Name': 'TableName', 'Value': 'fromcli'}], 'MetricName': 'ProvisionedWriteCapacityUnits'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeTotalWriteTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-a8d2e991'}], 'MetricName': 'VolumeTotalReadTime'}, {'Namespace': 'AWS/EBS', 'Dimensions': [{'Name': 'VolumeId', 'Value': 'vol-04c7c53d'}], 'MetricName': 'VolumeWriteBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'DiskReadBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'DiskWriteBytes'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-20277712'}], 'MetricName': 'StatusCheckFailed'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'StatusCheckFailed_Instance'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'NetworkIn'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'NetworkIn'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-70d08042'}], 'MetricName': 'DiskReadOps'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-d63c6ce4'}], 'MetricName': 'NetworkIn'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'StatusCheckFailed_System'}, {'Namespace': 'AWS/EC2', 'Dimensions': [{'Name': 'InstanceId', 'Value': 'i-78f1b94a'}], 'MetricName': 'DiskWriteBytes'}], 'ResponseMetadata': {'RequestId': 'abea8add-9167-11e2-91d1-9b4c7751b290'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-add-permission.xml', b'<AddPermissionResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <ResponseMetadata>\n    <RequestId>6a213e4e-33a8-11df-9540-99d0768312d3</RequestId>\n  </ResponseMetadata>\n</AddPermissionResponse>\n', OperationModel(name=AddPermission), {'ResponseMetadata': {'RequestId': '6a213e4e-33a8-11df-9540-99d0768312d3'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-confirm-subscription.xml', b'<ConfirmSubscriptionResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <ConfirmSubscriptionResult>\n    <SubscriptionArn>arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca</SubscriptionArn>\n  </ConfirmSubscriptionResult>\n  <ResponseMetadata>\n    <RequestId>7a50221f-3774-11df-a9b7-05d48da6f042</RequestId>\n  </ResponseMetadata>\n</ConfirmSubscriptionResponse>\n', OperationModel(name=ConfirmSubscription), {'ResponseMetadata': {'RequestId': '7a50221f-3774-11df-a9b7-05d48da6f042'}, 'SubscriptionArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-create-topic.xml', b'<CreateTopicResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n     <CreateTopicResult>\n       <TopicArn>arn:aws:sns:us-east-1:123456789012:My-Topic</TopicArn>\n     </CreateTopicResult>\n     <ResponseMetadata>\n       <RequestId>a8dec8b3-33a4-11df-8963-01868b7c937a</RequestId>\n     </ResponseMetadata>\n   </CreateTopicResponse>\n', OperationModel(name=CreateTopic), {'ResponseMetadata': {'RequestId': 'a8dec8b3-33a4-11df-8963-01868b7c937a'}, 'TopicArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-get-subscription-attributes.xml', b'<GetSubscriptionAttributesResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <GetSubscriptionAttributesResult>\n    <Attributes>\n      <entry>\n        <key>Owner</key>\n        <value>123456789012</value>\n      </entry>\n      <entry>\n        <key>DeliveryPolicy</key>\n        <value>{"healthyRetryPolicy":{"numRetries":10}}</value>\n      </entry>\n      <entry>\n        <key>SubscriptionArn</key>\n        <value>arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca</value>\n      </entry>\n    </Attributes>\n  </GetSubscriptionAttributesResult>\n  <ResponseMetadata>\n    <RequestId>057f074c-33a7-11df-9540-99d0768312d3</RequestId>\n  </ResponseMetadata>\n</GetSubscriptionAttributesResponse>\n', OperationModel(name=GetSubscriptionAttributes), {'Attributes': {'Owner': '123456789012', 'DeliveryPolicy': '{"healthyRetryPolicy":{"numRetries":10}}', 'SubscriptionArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca'}, 'ResponseMetadata': {'RequestId': '057f074c-33a7-11df-9540-99d0768312d3'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-get-topic-attributes.xml', b'<GetTopicAttributesResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <GetTopicAttributesResult>\n    <Attributes>\n      <entry>\n        <key>Owner</key>\n        <value>123456789012</value>\n      </entry>\n      <entry>\n        <key>Policy</key>\n        <value>{\n"Version":"2008-10-17","Id":"us-east-1/698519295917/test__default_policy_ID","Statement" : [{"Effect":"Allow","Sid":"us-east-1/698519295917/test__default_statement_ID","Principal" : {"AWS": "*"},"Action":["SNS:GetTopicAttributes","SNS:SetTopicAttributes","SNS:AddPermission","SNS:RemovePermission","SNS:DeleteTopic","SNS:Subscribe","SNS:ListSubscriptionsByTopic","SNS:Publish","SNS:Receive"],"Resource":"arn:aws:sns:us-east-1:698519295917:test","Condition" : {"StringLike" : {"AWS:SourceArn": "arn:aws:*:*:698519295917:*"}}}]}</value>\n      </entry>\n      <entry>\n        <key>TopicArn</key>\n        <value>arn:aws:sns:us-east-1:123456789012:My-Topic</value>\n      </entry>\n    </Attributes>\n  </GetTopicAttributesResult>\n  <ResponseMetadata>\n    <RequestId>057f074c-33a7-11df-9540-99d0768312d3</RequestId>\n  </ResponseMetadata>\n</GetTopicAttributesResponse>\n', OperationModel(name=GetTopicAttributes), {'Attributes': {'Owner': '123456789012', 'Policy': '{\n"Version":"2008-10-17","Id":"us-east-1/698519295917/test__default_policy_ID","Statement" : [{"Effect":"Allow","Sid":"us-east-1/698519295917/test__default_statement_ID","Principal" : {"AWS": "*"},"Action":["SNS:GetTopicAttributes","SNS:SetTopicAttributes","SNS:AddPermission","SNS:RemovePermission","SNS:DeleteTopic","SNS:Subscribe","SNS:ListSubscriptionsByTopic","SNS:Publish","SNS:Receive"],"Resource":"arn:aws:sns:us-east-1:698519295917:test","Condition" : {"StringLike" : {"AWS:SourceArn": "arn:aws:*:*:698519295917:*"}}}]}', 'TopicArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic'}, 'ResponseMetadata': {'RequestId': '057f074c-33a7-11df-9540-99d0768312d3'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-list-subscriptions-by-topic.xml', b'<ListSubscriptionsByTopicResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <ListSubscriptionsByTopicResult>\n    <Subscriptions>\n      <member>\n        <TopicArn>arn:aws:sns:us-east-1:123456789012:My-Topic</TopicArn>\n        <Protocol>email</Protocol>\n        <SubscriptionArn>arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca</SubscriptionArn>\n        <Owner>123456789012</Owner>\n        <Endpoint>example@amazon.com</Endpoint>\n      </member>\n    </Subscriptions>\n  </ListSubscriptionsByTopicResult>\n  <ResponseMetadata>\n    <RequestId>b9275252-3774-11df-9540-99d0768312d3</RequestId>\n  </ResponseMetadata>\n</ListSubscriptionsByTopicResponse>\n', OperationModel(name=ListSubscriptionsByTopic), {'ResponseMetadata': {'RequestId': 'b9275252-3774-11df-9540-99d0768312d3'}, 'Subscriptions': [{'Owner': '123456789012', 'Endpoint': 'example@amazon.com', 'Protocol': 'email', 'TopicArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic', 'SubscriptionArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-list-subscriptions.xml', b'<ListSubscriptionsResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <ListSubscriptionsResult>\n    <Subscriptions>\n      <member>\n        <TopicArn>arn:aws:sns:us-east-1:698519295917:My-Topic</TopicArn>\n        <Protocol>email</Protocol>\n        <SubscriptionArn>arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca</SubscriptionArn>\n        <Owner>123456789012</Owner>\n        <Endpoint>example@amazon.com</Endpoint>\n      </member>\n    </Subscriptions>\n  </ListSubscriptionsResult>\n  <ResponseMetadata>\n    <RequestId>384ac68d-3775-11df-8963-01868b7c937a</RequestId>\n  </ResponseMetadata>\n</ListSubscriptionsResponse>\n', OperationModel(name=ListSubscriptions), {'ResponseMetadata': {'RequestId': '384ac68d-3775-11df-8963-01868b7c937a'}, 'Subscriptions': [{'Endpoint': 'example@amazon.com', 'Owner': '123456789012', 'Protocol': 'email', 'SubscriptionArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic:80289ba6-0fd4-4079-afb4-ce8c8260f0ca', 'TopicArn': 'arn:aws:sns:us-east-1:698519295917:My-Topic'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-list-topics.xml', b'<ListTopicsResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <ListTopicsResult>\n    <Topics>\n      <member>\n        <TopicArn>arn:aws:sns:us-east-1:123456789012:My-Topic</TopicArn>\n      </member>\n    </Topics>\n  </ListTopicsResult>\n  <ResponseMetadata>\n    <RequestId>3f1478c7-33a9-11df-9540-99d0768312d3</RequestId>\n  </ResponseMetadata>\n</ListTopicsResponse>\n', OperationModel(name=ListTopics), {'ResponseMetadata': {'RequestId': '3f1478c7-33a9-11df-9540-99d0768312d3'}, 'Topics': [{'TopicArn': 'arn:aws:sns:us-east-1:123456789012:My-Topic'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-publish.xml', b'<PublishResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <PublishResult>\n    <MessageId>94f20ce6-13c5-43a0-9a9e-ca52d816e90b</MessageId>\n  </PublishResult>\n  <ResponseMetadata>\n    <RequestId>f187a3c1-376f-11df-8963-01868b7c937a</RequestId>\n  </ResponseMetadata>\n</PublishResponse>\n', OperationModel(name=Publish), {'ResponseMetadata': {'RequestId': 'f187a3c1-376f-11df-8963-01868b7c937a'}, 'MessageId': '94f20ce6-13c5-43a0-9a9e-ca52d816e90b'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/sns-subscribe.xml', b'<SubscribeResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <SubscribeResult>\n    <SubscriptionArn>pending confirmation</SubscriptionArn>\n  </SubscribeResult>\n  <ResponseMetadata>\n    <RequestId>a169c740-3766-11df-8963-01868b7c937a</RequestId>\n  </ResponseMetadata>\n</SubscribeResponse>\n', OperationModel(name=Subscribe), {'ResponseMetadata': {'RequestId': 'a169c740-3766-11df-8963-01868b7c937a'}, 'SubscriptionArn': 'pending confirmation'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-allocate-address.xml', b'<AllocateAddressResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <publicIp>198.51.100.1</publicIp>\n   <domain>vpc</domain>\n   <allocationId>eipalloc-5723d13e</allocationId>\n</AllocateAddressResponse>\n', OperationModel(name=AllocateAddress), {'AllocationId': 'eipalloc-5723d13e', 'Domain': 'vpc', 'PublicIp': '198.51.100.1', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-assign-private-ip-addresses.xml', b'<AssignPrivateIpAddresses xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <return>true</return>\n</AssignPrivateIpAddresses>\n', OperationModel(name=AssignPrivateIpAddresses), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-associate-address.xml', b'<AssociateAddressResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <return>true</return>\n   <associationId>eipassoc-fc5ca095</associationId>\n</AssociateAddressResponse>\n', OperationModel(name=AssociateAddress), {'AssociationId': 'eipassoc-fc5ca095', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-associate-route-table.xml', b'<AssociateRouteTableResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <associationId>rtbassoc-f8ad4891</associationId>\n</AssociateRouteTableResponse>\n', OperationModel(name=AssociateRouteTable), {'AssociationId': 'rtbassoc-f8ad4891', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-attach-volume.xml', b'<AttachVolumeResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <volumeId>vol-1a2b3c4d</volumeId>\n  <instanceId>i-1a2b3c4d</instanceId>\n  <device>/dev/sdh</device>\n  <status>attaching</status>\n  <attachTime>YYYY-MM-DDTHH:MM:SS.000Z</attachTime>\n</AttachVolumeResponse>\n', OperationModel(name=AttachVolume), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'AttachTime': 'YYYY-MM-DDTHH:MM:SS.000Z', 'InstanceId': 'i-1a2b3c4d', 'VolumeId': 'vol-1a2b3c4d', 'State': 'attaching', 'Device': '/dev/sdh'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-attach-vpn-gateway.xml', b'<AttachVpnGatewayResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n   <attachment>\n      <vpcId>vpc-1a2b3c4d</vpcId>\n      <state>attaching</state>\n   </attachment>\n</AttachVpnGatewayResponse>\n', OperationModel(name=AttachVpnGateway), {'VpcAttachment': {'State': 'attaching', 'VpcId': 'vpc-1a2b3c4d'}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-bundle-instance.xml', b'<BundleInstanceResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <bundleInstanceTask>\n      <instanceId>i-12345678</instanceId>\n      <bundleId>bun-c1a540a8</bundleId>\n      <state>bundling</state>\n      <startTime>2008-10-07T11:41:50.000Z</startTime>\n      <updateTime>2008-10-07T11:51:50.000Z</updateTime>\n      <progress>70%</progress>\n      <storage>\n        <S3>\n          <bucket>myawsbucket</bucket>\n          <prefix>winami</prefix>\n        </S3>\n      </storage>\n  </bundleInstanceTask>\n</BundleInstanceResponse>\n', OperationModel(name=BundleInstance), {'BundleTask': {'UpdateTime': '2008-10-07T11:51:50.000Z', 'InstanceId': 'i-12345678', 'Storage': {'S3': {'Prefix': 'winami', 'Bucket': 'myawsbucket'}}, 'State': 'bundling', 'StartTime': '2008-10-07T11:41:50.000Z', 'Progress': '70%', 'BundleId': 'bun-c1a540a8'}, 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-cancel-bundle-task.xml', b'<CancelBundleTaskResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <bundleInstanceTask>\n      <instanceId>i-12345678</instanceId>\n      <bundleId>bun-cla322b9</bundleId>\n      <state>canceling</state>\n      <startTime>2008-10-07T11:41:50.000Z</startTime>\n      <updateTime>2008-10-07T11:51:50.000Z</updateTime>\n      <progress>20%</progress>\n      <storage>\n        <S3>\n          <bucket>myawsbucket</bucket>\n          <prefix>my-new-image</prefix>\n        </S3>\n      </storage>\n  </bundleInstanceTask>\n</CancelBundleTaskResponse>\n', OperationModel(name=CancelBundleTask), {'BundleTask': {'UpdateTime': '2008-10-07T11:51:50.000Z', 'InstanceId': 'i-12345678', 'Storage': {'S3': {'Prefix': 'my-new-image', 'Bucket': 'myawsbucket'}}, 'State': 'canceling', 'StartTime': '2008-10-07T11:41:50.000Z', 'Progress': '20%', 'BundleId': 'bun-cla322b9'}, 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-cancel-reserved-instances-listing.xml', b'<CancelReservedInstancesListingResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>bec2cf62-98ef-434a-8a15-886fcexample</requestId>\n    <reservedInstancesListingsSet>\n        <item>\n            <reservedInstancesListingId>3ebe97b5-f273-43b6-a204-7a18cexample</reservedInstancesListingId>\n            <reservedInstancesId>af9f760e-9b3f-417a-ad5e-93f0cexample</reservedInstancesId>\n            <createDate>2012-07-12T16:55:28.000Z</createDate>\n            <updateDate>2012-07-12T16:55:28.000Z</updateDate>\n            <status>cancelled</status>\n            <statusMessage>CANCELLED</statusMessage>\n            <instanceCounts>\n                <item>\n                    <state>Available</state>\n                    <instanceCount>0</instanceCount>\n                </item>\n                <item>\n                    <state>Sold</state>\n                    <instanceCount>0</instanceCount>\n                </item>\n                <item>\n                    <state>Cancelled</state>\n                    <instanceCount>1</instanceCount>\n                </item>\n                <item>\n                    <state>Pending</state>\n                    <instanceCount>0</instanceCount>\n                </item>\n            </instanceCounts>\n            <priceSchedules>\n                <item>\n                    <term>5</term>\n                    <price>166.64</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>4</term>\n                    <price>133.32</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>3</term>\n                    <price>99.99</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>2</term>\n                    <price>66.66</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>1</term>\n                    <price>33.33</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n            </priceSchedules>\n            <tagSet/>\n            <clientToken>XqJIt1342112125076</clientToken>\n        </item>\n    </reservedInstancesListingsSet>\n</CancelReservedInstancesListingResponse>\n', OperationModel(name=CancelReservedInstancesListing), {'ResponseMetadata': {'RequestId': 'bec2cf62-98ef-434a-8a15-886fcexample'}, 'ReservedInstancesListings': [{'ReservedInstancesId': 'af9f760e-9b3f-417a-ad5e-93f0cexample', 'Status': 'cancelled', 'Tags': [], 'PriceSchedules': [{'Active': False, 'Term': 5, 'CurrencyCode': 'USD', 'Price': 166.64}, {'Active': False, 'Term': 4, 'CurrencyCode': 'USD', 'Price': 133.32}, {'Active': False, 'Term': 3, 'CurrencyCode': 'USD', 'Price': 99.99}, {'Active': False, 'Term': 2, 'CurrencyCode': 'USD', 'Price': 66.66}, {'Active': False, 'Term': 1, 'CurrencyCode': 'USD', 'Price': 33.33}], 'CreateDate': '2012-07-12T16:55:28.000Z', 'ClientToken': 'XqJIt1342112125076', 'ReservedInstancesListingId': '3ebe97b5-f273-43b6-a204-7a18cexample', 'UpdateDate': '2012-07-12T16:55:28.000Z', 'InstanceCounts': [{'State': 'Available', 'InstanceCount': 0}, {'State': 'Sold', 'InstanceCount': 0}, {'State': 'Cancelled', 'InstanceCount': 1}, {'State': 'Pending', 'InstanceCount': 0}], 'StatusMessage': 'CANCELLED'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-cancel-spot-instance-requests.xml', b'<CancelSpotInstanceRequestsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <spotInstanceRequestSet>\n    <item>\n      <spotInstanceRequestId>sir-1a2b3c4d</spotInstanceRequestId>\n      <state>cancelled</state>\n    </item>\n  </spotInstanceRequestSet></CancelSpotInstanceRequestsResponse>\n', OperationModel(name=CancelSpotInstanceRequests), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'CancelledSpotInstanceRequests': [{'State': 'cancelled', 'SpotInstanceRequestId': 'sir-1a2b3c4d'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-confirm-product-instance.xml', b'<ConfirmProductInstanceResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <return>true</return>\n  <ownerId>111122223333</ownerId>\n</ConfirmProductInstanceResponse>\n', OperationModel(name=ConfirmProductInstance), {'OwnerId': '111122223333', 'Return': True, 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-copy-snapshot.xml', b'<CopySnapshotResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>60bc441d-fa2c-494d-b155-5d6a3EXAMPLE</requestId>\n  <snapshotId>snap-2a2b3c4d</snapshotId>\n</CopySnapshotResponse>\n', OperationModel(name=CopySnapshot), {'SnapshotId': 'snap-2a2b3c4d', 'ResponseMetadata': {'RequestId': '60bc441d-fa2c-494d-b155-5d6a3EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-customer-gateway.xml', b'<CreateCustomerGatewayResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n   <customerGateway>\n      <customerGatewayId>cgw-b4dc3961</customerGatewayId>\n      <state>pending</state>\n      <type>ipsec.1</type>\n      <ipAddress>12.1.2.3</ipAddress>\n      <bgpAsn>65534</bgpAsn>\n      <tagSet/>\n   </customerGateway>\n</CreateCustomerGatewayResponse>\n', OperationModel(name=CreateCustomerGateway), {'CustomerGateway': {'Tags': [], 'Type': 'ipsec.1', 'State': 'pending', 'CustomerGatewayId': 'cgw-b4dc3961', 'BgpAsn': '65534', 'IpAddress': '12.1.2.3'}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-dhcp-options.xml', b'<CreateDhcpOptionsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n  <dhcpOptions>\n      <dhcpOptionsId>dopt-7a8b9c2d</dhcpOptionsId>\n      <dhcpConfigurationSet>\n        <item>\n          <key>domain-name</key>\n          <valueSet>\n            <item>\n              <value>example.com</value>\n            </item>\n          </valueSet>\n        </item>\n        <item>\n          <key>domain-name-servers</key>\n          <valueSet>\n            <item>\n              <value>10.2.5.1</value>\n            </item>\n            <item>\n              <value>10.2.5.2</value>\n            </item>\n          </valueSet>\n        </item>\n      </dhcpConfigurationSet>\n      <tagSet/>\n  </dhcpOptions>\n</CreateDhcpOptionsResponse>\n', OperationModel(name=CreateDhcpOptions), {'DhcpOptions': {'DhcpOptionsId': 'dopt-7a8b9c2d', 'DhcpConfigurations': [{'Values': [{'Value': 'example.com'}], 'Key': 'domain-name'}, {'Values': [{'Value': '10.2.5.1'}, {'Value': '10.2.5.2'}], 'Key': 'domain-name-servers'}], 'Tags': []}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-instance-export-task.xml', b'<CreateInstanceExportTaskResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n<requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n<exportTask>\n  <exportTaskId>export-i-1234wxyz</exportTaskId>\n  <description>Example for docs</description>\n  <state>active</state>\n  <statusMessage>Running</statusMessage>\n  <instanceExport>\n    <instanceId>i-12345678</instanceId >\n    <targetEnvironment>VMWare</targetEnvironment >\n  </instanceExport>\n  <exportToS3>\n    <diskImageFormat>VMDK</diskImageFormat >\n    <containerFormat>OVA</containerFormat>\n    <s3Bucket>my-bucket-for-exported-vm</s3Bucket>\n    <s3Key>my-exports/ export-i-1234wxyz .ova</s3Key>\n  </exportToS3>\n</exportTask>\n</CreateInstanceExportTaskResponse>\n', OperationModel(name=CreateInstanceExportTask), {'ExportTask': {'Description': 'Example for docs', 'InstanceExportDetails': {'InstanceId': 'i-12345678', 'TargetEnvironment': 'VMWare'}, 'ExportTaskId': 'export-i-1234wxyz', 'State': 'active', 'StatusMessage': 'Running', 'ExportToS3Task': {'S3Bucket': 'my-bucket-for-exported-vm', 'S3Key': 'my-exports/ export-i-1234wxyz .ova', 'DiskImageFormat': 'VMDK', 'ContainerFormat': 'OVA'}}, 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-key-pair.xml', b'<CreateKeyPairResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <keyName>gsg-keypair</keyName>\n  <keyFingerprint>00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00</keyFingerprint>\n  <keyMaterial>---- BEGIN RSA PRIVATE KEY ----\nMIICiTCCAfICCQD6m7oRw0uXOjANBgkqhkiG9w0BAQUFADCBiDELMAkGA1UEBhMC\nVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdTZWF0dGxlMQ8wDQYDVQQKEwZBbWF6\nb24xFDASBgNVBAsTC0lBTSBDb25zb2xlMRIwEAYDVQQDEwlUZXN0Q2lsYWMxHzAd\nBgkqhkiG9w0BCQEWEG5vb25lQGFtYXpvbi5jb20wHhcNMTEwNDI1MjA0NTIxWhcN\nMTIwNDI0MjA0NTIxWjCBiDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYD\nVQQHEwdTZWF0dGxlMQ8wDQYDVQQKEwZBbWF6b24xFDASBgNVBAsTC0lBTSBDb25z\nb2xlMRIwEAYDVQQDEwlUZXN0Q2lsYWMxHzAdBgkqhkiG9w0BCQEWEG5vb25lQGFt\nYXpvbi5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMaK0dn+a4GmWIWJ\n21uUSfwfEvySWtC2XADZ4nB+BLYgVIk60CpiwsZ3G93vUEIO3IyNoH/f0wYK8m9T\nrDHudUZg3qX4waLG5M43q7Wgc/MbQITxOUSQv7c7ugFFDzQGBzZswY6786m86gpE\nIbb3OhjZnzcvQAaRHhdlQWIMm2nrAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAtCu4\nnUhVVxYUntneD9+h8Mg9q6q+auNKyExzyLwaxlAoo7TJHidbtS4J5iNmZgXL0Fkb\nFFBjvSfpJIlJ00zbhNYS5f6GuoEDmFJl0ZxBHjJnyp378OD8uTs7fLvjx79LjSTb\nNYiytVbZPQUQ5Yaxu2jXnimvw3rrszlaEXAMPLE=\n-----END RSA PRIVATE KEY-----</keyMaterial>\n</CreateKeyPairResponse>\n', OperationModel(name=CreateKeyPair), {'KeyMaterial': '---- BEGIN RSA PRIVATE KEY ----\nMIICiTCCAfICCQD6m7oRw0uXOjANBgkqhkiG9w0BAQUFADCBiDELMAkGA1UEBhMC\nVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdTZWF0dGxlMQ8wDQYDVQQKEwZBbWF6\nb24xFDASBgNVBAsTC0lBTSBDb25zb2xlMRIwEAYDVQQDEwlUZXN0Q2lsYWMxHzAd\nBgkqhkiG9w0BCQEWEG5vb25lQGFtYXpvbi5jb20wHhcNMTEwNDI1MjA0NTIxWhcN\nMTIwNDI0MjA0NTIxWjCBiDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYD\nVQQHEwdTZWF0dGxlMQ8wDQYDVQQKEwZBbWF6b24xFDASBgNVBAsTC0lBTSBDb25z\nb2xlMRIwEAYDVQQDEwlUZXN0Q2lsYWMxHzAdBgkqhkiG9w0BCQEWEG5vb25lQGFt\nYXpvbi5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMaK0dn+a4GmWIWJ\n21uUSfwfEvySWtC2XADZ4nB+BLYgVIk60CpiwsZ3G93vUEIO3IyNoH/f0wYK8m9T\nrDHudUZg3qX4waLG5M43q7Wgc/MbQITxOUSQv7c7ugFFDzQGBzZswY6786m86gpE\nIbb3OhjZnzcvQAaRHhdlQWIMm2nrAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAtCu4\nnUhVVxYUntneD9+h8Mg9q6q+auNKyExzyLwaxlAoo7TJHidbtS4J5iNmZgXL0Fkb\nFFBjvSfpJIlJ00zbhNYS5f6GuoEDmFJl0ZxBHjJnyp378OD8uTs7fLvjx79LjSTb\nNYiytVbZPQUQ5Yaxu2jXnimvw3rrszlaEXAMPLE=\n-----END RSA PRIVATE KEY-----', 'KeyName': 'gsg-keypair', 'KeyFingerprint': '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-network-acl.xml', b'<CreateNetworkAclResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <networkAcl>\n      <networkAclId>acl-5fb85d36</networkAclId>\n      <vpcId>vpc-11ad4878</vpcId>\n      <default>false</default>\n      <entrySet>\n         <item>\n            <ruleNumber>32767</ruleNumber>\n            <protocol>all</protocol>\n            <ruleAction>deny</ruleAction>\n            <egress>true</egress>\n            <cidrBlock>0.0.0.0/0</cidrBlock>\n         </item>\n         <item>\n            <ruleNumber>32767</ruleNumber>\n            <protocol>all</protocol>\n            <ruleAction>deny</ruleAction>\n            <egress>false</egress>\n            <cidrBlock>0.0.0.0/0</cidrBlock>\n         </item>\n      </entrySet>\n      <associationSet/>\n      <tagSet/>\n   </networkAcl>\n</CreateNetworkAclResponse>\n', OperationModel(name=CreateNetworkAcl), {'NetworkAcl': {'Associations': [], 'NetworkAclId': 'acl-5fb85d36', 'VpcId': 'vpc-11ad4878', 'Tags': [], 'Entries': [{'CidrBlock': '0.0.0.0/0', 'RuleNumber': 32767, 'Protocol': 'all', 'Egress': True, 'RuleAction': 'deny'}, {'CidrBlock': '0.0.0.0/0', 'RuleNumber': 32767, 'Protocol': 'all', 'Egress': False, 'RuleAction': 'deny'}], 'IsDefault': False}, 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-network-interface.xml', b"<CreateNetworkInterfaceResponse xmlns='http://ec2.amazonaws.com/doc/2014-06-15/'>\n <requestId>bd78c839-0895-4fac-a17f-98b559b6b630</requestId>\n    <networkInterface>\n        <networkInterfaceId>eni-1bcb7772</networkInterfaceId>\n        <subnetId>subnet-a61dafcf</subnetId>\n        <vpcId>vpc-c31dafaa</vpcId>\n        <availabilityZone>ap-southeast-1b</availabilityZone>\n        <description/>\n        <ownerId>251839141158</ownerId>\n        <requesterManaged>false</requesterManaged>\n        <status>pending</status>\n        <macAddress>02:74:b0:70:7f:1a</macAddress>\n        <privateIpAddress>10.0.2.140</privateIpAddress>\n        <sourceDestCheck>true</sourceDestCheck>\n        <groupSet>\n            <item>\n                <groupId>sg-1a2b3c4d</groupId>\n                <groupName>default</groupName>\n            </item>\n        </groupSet>\n        <tagSet/>\n        <privateIpAddressesSet>\n            <item>\n                <privateIpAddress>10.0.2.140</privateIpAddress>\n                <primary>true</primary>\n            </item>\n            <item>\n                <privateIpAddress>10.0.2.172</privateIpAddress>\n                <primary>false</primary>\n            </item>\n            <item>\n                <privateIpAddress>10.0.2.169</privateIpAddress>\n                <primary>false</primary>\n            </item>\n            <item>\n                <privateIpAddress>10.0.2.170</privateIpAddress>\n                <primary>false</primary>\n            </item>\n            <item>\n                <privateIpAddress>10.0.2.171</privateIpAddress>\n                <primary>false</primary>\n            </item>\n        </privateIpAddressesSet>\n    </networkInterface>\n</CreateNetworkInterfaceResponse>\n", OperationModel(name=CreateNetworkInterface), {'ResponseMetadata': {'RequestId': 'bd78c839-0895-4fac-a17f-98b559b6b630'}, 'NetworkInterface': {'Status': 'pending', 'MacAddress': '02:74:b0:70:7f:1a', 'SourceDestCheck': True, 'VpcId': 'vpc-c31dafaa', 'Description': '', 'NetworkInterfaceId': 'eni-1bcb7772', 'PrivateIpAddresses': [{'Primary': True, 'PrivateIpAddress': '10.0.2.140'}, {'Primary': False, 'PrivateIpAddress': '10.0.2.172'}, {'Primary': False, 'PrivateIpAddress': '10.0.2.169'}, {'Primary': False, 'PrivateIpAddress': '10.0.2.170'}, {'Primary': False, 'PrivateIpAddress': '10.0.2.171'}], 'RequesterManaged': False, 'AvailabilityZone': 'ap-southeast-1b', 'Groups': [{'GroupName': 'default', 'GroupId': 'sg-1a2b3c4d'}], 'SubnetId': 'subnet-a61dafcf', 'OwnerId': '251839141158', 'TagSet': [], 'PrivateIpAddress': '10.0.2.140'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-reserved-instances-listing.xml', b'<CreateReservedInstancesListingResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>a42481af-335a-4e9e-b291-bd18dexample</requestId>\n    <reservedInstancesListingsSet>\n        <item>\n            <reservedInstancesListingId>5ec28771-05ff-4b9b-aa31-9e57dexample</reservedInstancesListingId>\n            <reservedInstancesId>f127bd27-a218-43a4-926d-870e8example</reservedInstancesId>\n            <createDate>2012-07-17T17:11:09.449Z</createDate>\n            <updateDate>2012-07-17T17:11:09.468Z</updateDate>\n            <status>active</status>\n            <statusMessage>ACTIVE</statusMessage>\n            <instanceCounts>\n                <item>\n                    <state>Available</state>\n                    <instanceCount>1</instanceCount>\n                </item>\n                <item>\n                    <state>Sold</state>\n                    <instanceCount>0</instanceCount>\n                </item>\n                <item>\n                    <state>Cancelled</state>\n                    <instanceCount>0</instanceCount>\n                </item>\n                <item>\n                    <state>Pending</state>\n                    <instanceCount>0</instanceCount>\n                </item>\n            </instanceCounts>\n            <priceSchedules>\n                <item>\n                    <term>11</term>\n                    <price>2.5</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>true</active>\n                </item>\n                <item>\n                    <term>10</term>\n                    <price>2.5</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>9</term>\n                    <price>2.5</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>8</term>\n                    <price>2.0</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>7</term>\n                    <price>2.0</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>6</term>\n                    <price>2.0</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>5</term>\n                    <price>1.5</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>4</term>\n                    <price>1.5</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>3</term>\n                    <price>0.7</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>2</term>\n                    <price>0.7</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n                <item>\n                    <term>1</term>\n                    <price>0.1</price>\n                    <currencyCode>USD</currencyCode>\n                    <active>false</active>\n                </item>\n            </priceSchedules>\n            <tagSet/>\n            <clientToken>myIdempToken1</clientToken>\n        </item>\n    </reservedInstancesListingsSet>\n</CreateReservedInstancesListingResponse>\n', OperationModel(name=CreateReservedInstancesListing), {'ResponseMetadata': {'RequestId': 'a42481af-335a-4e9e-b291-bd18dexample'}, 'ReservedInstancesListings': [{'ReservedInstancesId': 'f127bd27-a218-43a4-926d-870e8example', 'Status': 'active', 'Tags': [], 'PriceSchedules': [{'Active': True, 'Term': 11, 'CurrencyCode': 'USD', 'Price': 2.5}, {'Active': False, 'Term': 10, 'CurrencyCode': 'USD', 'Price': 2.5}, {'Active': False, 'Term': 9, 'CurrencyCode': 'USD', 'Price': 2.5}, {'Active': False, 'Term': 8, 'CurrencyCode': 'USD', 'Price': 2.0}, {'Active': False, 'Term': 7, 'CurrencyCode': 'USD', 'Price': 2.0}, {'Active': False, 'Term': 6, 'CurrencyCode': 'USD', 'Price': 2.0}, {'Active': False, 'Term': 5, 'CurrencyCode': 'USD', 'Price': 1.5}, {'Active': False, 'Term': 4, 'CurrencyCode': 'USD', 'Price': 1.5}, {'Active': False, 'Term': 3, 'CurrencyCode': 'USD', 'Price': 0.7}, {'Active': False, 'Term': 2, 'CurrencyCode': 'USD', 'Price': 0.7}, {'Active': False, 'Term': 1, 'CurrencyCode': 'USD', 'Price': 0.1}], 'CreateDate': '2012-07-17T17:11:09.449Z', 'ClientToken': 'myIdempToken1', 'ReservedInstancesListingId': '5ec28771-05ff-4b9b-aa31-9e57dexample', 'UpdateDate': '2012-07-17T17:11:09.468Z', 'InstanceCounts': [{'State': 'Available', 'InstanceCount': 1}, {'State': 'Sold', 'InstanceCount': 0}, {'State': 'Cancelled', 'InstanceCount': 0}, {'State': 'Pending', 'InstanceCount': 0}], 'StatusMessage': 'ACTIVE'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-route-table.xml', b'<CreateRouteTableResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <routeTable>\n      <routeTableId>rtb-f9ad4890</routeTableId>\n      <vpcId>vpc-11ad4878</vpcId>\n      <routeSet>\n         <item>\n            <destinationCidrBlock>10.0.0.0/22</destinationCidrBlock>\n            <gatewayId>local</gatewayId>\n            <state>active</state>\n         </item>\n      </routeSet>\n      <associationSet/>\n      <tagSet/>\n   </routeTable>\n</CreateRouteTableResponse>\n', OperationModel(name=CreateRouteTable), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'RouteTable': {'Associations': [], 'Routes': [{'GatewayId': 'local', 'DestinationCidrBlock': '10.0.0.0/22', 'State': 'active'}], 'RouteTableId': 'rtb-f9ad4890', 'VpcId': 'vpc-11ad4878', 'Tags': []}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-snapshot.xml', b'<CreateSnapshotResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <snapshotId>snap-1a2b3c4d</snapshotId>\n  <volumeId>vol-1a2b3c4d</volumeId>\n  <status>pending</status>\n  <startTime>YYYY-MM-DDTHH:MM:SS.000Z</startTime>\n  <progress>60%</progress>\n  <ownerId>111122223333</ownerId>\n  <volumeSize>30</volumeSize>\n  <description>Daily Backup</description>\n</CreateSnapshotResponse>\n', OperationModel(name=CreateSnapshot), {'Description': 'Daily Backup', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'VolumeId': 'vol-1a2b3c4d', 'State': 'pending', 'VolumeSize': 30, 'StartTime': 'YYYY-MM-DDTHH:MM:SS.000Z', 'SnapshotId': 'snap-1a2b3c4d', 'OwnerId': '111122223333', 'Progress': '60%'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-spot-datafeed-subscription.xml', b'<CreateSpotDatafeedSubscriptionResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n    <spotDatafeedSubscription>\n        <ownerId>111122223333</ownerId>\n        <bucket>myawsbucket</bucket>\n        <prefix>spotdata_</prefix>\n        <state>Active</state>\n    </spotDatafeedSubscription>\n</CreateSpotDatafeedSubscriptionResponse>\n', OperationModel(name=CreateSpotDatafeedSubscription), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'SpotDatafeedSubscription': {'OwnerId': '111122223333', 'Prefix': 'spotdata_', 'Bucket': 'myawsbucket', 'State': 'Active'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-subnet.xml', b'<CreateSubnetResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n  <subnet>\n    <subnetId>subnet-9d4a7b6c</subnetId>\n    <state>pending</state>\n    <vpcId>vpc-1a2b3c4d</vpcId>\n    <cidrBlock>10.0.1.0/24</cidrBlock>\n    <availableIpAddressCount>251</availableIpAddressCount>\n    <availabilityZone>us-east-1a</availabilityZone>\n    <tagSet/>\n  </subnet>\n</CreateSubnetResponse>\n', OperationModel(name=CreateSubnet), {'Subnet': {'VpcId': 'vpc-1a2b3c4d', 'Tags': [], 'CidrBlock': '10.0.1.0/24', 'State': 'pending', 'AvailabilityZone': 'us-east-1a', 'SubnetId': 'subnet-9d4a7b6c', 'AvailableIpAddressCount': 251}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-instances.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>d15d204f-fc31-4600-85d3-5c86e5483b92</requestId>\n    <reservationSet>\n        <item>\n            <reservationId>r-9b4f3ca8</reservationId>\n            <ownerId>123456789012</ownerId>\n            <groupSet>\n                <item>\n                    <groupId>sg-4e970e7e</groupId>\n                    <groupName>notebook</groupName>\n                </item>\n            </groupSet>\n            <instancesSet>\n                <item>\n                    <instanceId>i-fde9cece</instanceId>\n                    <imageId>ami-30fe7300</imageId>\n                    <instanceState>\n                        <code>80</code>\n                        <name>stopped</name>\n                    </instanceState>\n                    <privateDnsName/>\n                    <dnsName/>\n                    <reason>User initiated (2013-03-01 17:24:16 GMT)</reason>\n                    <keyName>aws</keyName>\n                    <amiLaunchIndex>0</amiLaunchIndex>\n                    <productCodes/>\n                    <instanceType>m1.small</instanceType>\n                    <launchTime>2012-10-16T20:00:13.000Z</launchTime>\n                    <placement>\n                        <availabilityZone>us-west-2a</availabilityZone>\n                        <groupName/>\n                        <tenancy>default</tenancy>\n                    </placement>\n                    <kernelId>aki-98e26fa8</kernelId>\n                    <monitoring>\n                        <state>disabled</state>\n                    </monitoring>\n                    <groupSet>\n                        <item>\n                            <groupId>sg-4e970e7e</groupId>\n                            <groupName>notebook</groupName>\n                        </item>\n                    </groupSet>\n                    <stateReason>\n                        <code>Client.UserInitiatedShutdown</code>\n                        <message>Client.UserInitiatedShutdown: User initiated shutdown</message>\n                    </stateReason>\n                    <architecture>x86_64</architecture>\n                    <rootDeviceType>ebs</rootDeviceType>\n                    <rootDeviceName>/dev/sda1</rootDeviceName>\n                    <blockDeviceMapping>\n                        <item>\n                            <deviceName>/dev/sda1</deviceName>\n                            <ebs>\n                                <volumeId>vol-bc71579a</volumeId>\n                                <status>attached</status>\n                                <attachTime>2012-10-16T20:00:21.000Z</attachTime>\n                                <deleteOnTermination>true</deleteOnTermination>\n                            </ebs>\n                        </item>\n                    </blockDeviceMapping>\n                    <virtualizationType>paravirtual</virtualizationType>\n                    <clientToken/>\n                    <tagSet>\n                        <item>\n                            <key>notebook</key>\n                            <value/>\n                        </item>\n                    </tagSet>\n                    <hypervisor>xen</hypervisor>\n                    <networkInterfaceSet/>\n                    <ebsOptimized>false</ebsOptimized>\n                </item>\n            </instancesSet>\n        </item>\n        <item>\n            <reservationId>r-6670ce54</reservationId>\n            <ownerId>123456789012</ownerId>\n            <groupSet>\n                <item>\n                    <groupId>sg-72334242</groupId>\n                    <groupName>quicklaunch-1</groupName>\n                </item>\n            </groupSet>\n            <instancesSet>\n                <item>\n                    <instanceId>i-78f1b94a</instanceId>\n                    <imageId>ami-c4d643f4</imageId>\n                    <instanceState>\n                        <code>16</code>\n                        <name>running</name>\n                    </instanceState>\n                    <privateDnsName>ip-10-253-17-74.us-west-2.compute.internal</privateDnsName>\n                    <dnsName>ec2-54-245-16-142.us-west-2.compute.amazonaws.com</dnsName>\n                    <reason/>\n                    <keyName>aws</keyName>\n                    <amiLaunchIndex>0</amiLaunchIndex>\n                    <productCodes/>\n                    <instanceType>m1.medium</instanceType>\n                    <launchTime>2013-03-12T01:55:59.000Z</launchTime>\n                    <placement>\n                        <availabilityZone>us-west-2b</availabilityZone>\n                        <groupName/>\n                        <tenancy>default</tenancy>\n                    </placement>\n                    <platform>windows</platform>\n                    <monitoring>\n                        <state>disabled</state>\n                    </monitoring>\n                    <privateIpAddress>10.253.17.74</privateIpAddress>\n                    <ipAddress>54.245.16.142</ipAddress>\n                    <groupSet>\n                        <item>\n                            <groupId>sg-72334242</groupId>\n                            <groupName>quicklaunch-1</groupName>\n                        </item>\n                    </groupSet>\n                    <architecture>x86_64</architecture>\n                    <rootDeviceType>ebs</rootDeviceType>\n                    <rootDeviceName>/dev/sda1</rootDeviceName>\n                    <blockDeviceMapping>\n                        <item>\n                            <deviceName>/dev/sda1</deviceName>\n                            <ebs>\n                                <volumeId>vol-a8d2e991</volumeId>\n                                <status>attached</status>\n                                <attachTime>2013-03-09T16:44:07.000Z</attachTime>\n                                <deleteOnTermination>true</deleteOnTermination>\n                            </ebs>\n                        </item>\n                    </blockDeviceMapping>\n                    <virtualizationType>hvm</virtualizationType>\n                    <clientToken>aOJaC1362847444140</clientToken>\n                    <hypervisor>xen</hypervisor>\n                    <networkInterfaceSet/>\n                    <ebsOptimized>false</ebsOptimized>\n                </item>\n            </instancesSet>\n        </item>\n    </reservationSet>\n</DescribeInstancesResponse>\n', OperationModel(name=DescribeInstances), {'Reservations': [{'OwnerId': '123456789012', 'ReservationId': 'r-9b4f3ca8', 'Groups': [{'GroupName': 'notebook', 'GroupId': 'sg-4e970e7e'}], 'Instances': [{'Monitoring': {'State': 'disabled'}, 'PublicDnsName': '', 'KernelId': 'aki-98e26fa8', 'State': {'Code': 80, 'Name': 'stopped'}, 'EbsOptimized': False, 'LaunchTime': '2012-10-16T20:00:13.000Z', 'ProductCodes': [], 'StateTransitionReason': 'User initiated (2013-03-01 17:24:16 GMT)', 'InstanceId': 'i-fde9cece', 'ImageId': 'ami-30fe7300', 'PrivateDnsName': '', 'KeyName': 'aws', 'SecurityGroups': [{'GroupName': 'notebook', 'GroupId': 'sg-4e970e7e'}], 'ClientToken': '', 'InstanceType': 'm1.small', 'NetworkInterfaces': [], 'Placement': {'Tenancy': 'default', 'GroupName': '', 'AvailabilityZone': 'us-west-2a'}, 'Hypervisor': 'xen', 'BlockDeviceMappings': [{'DeviceName': '/dev/sda1', 'Ebs': {'Status': 'attached', 'DeleteOnTermination': True, 'VolumeId': 'vol-bc71579a', 'AttachTime': '2012-10-16T20:00:21.000Z'}}], 'Architecture': 'x86_64', 'StateReason': {'Message': 'Client.UserInitiatedShutdown: User initiated shutdown', 'Code': 'Client.UserInitiatedShutdown'}, 'RootDeviceName': '/dev/sda1', 'VirtualizationType': 'paravirtual', 'RootDeviceType': 'ebs', 'Tags': [{'Value': '', 'Key': 'notebook'}], 'AmiLaunchIndex': 0}]}, {'OwnerId': '123456789012', 'ReservationId': 'r-6670ce54', 'Groups': [{'GroupName': 'quicklaunch-1', 'GroupId': 'sg-72334242'}], 'Instances': [{'Monitoring': {'State': 'disabled'}, 'PublicDnsName': 'ec2-54-245-16-142.us-west-2.compute.amazonaws.com', 'Platform': 'windows', 'State': {'Code': 16, 'Name': 'running'}, 'EbsOptimized': False, 'LaunchTime': '2013-03-12T01:55:59.000Z', 'PublicIpAddress': '54.245.16.142', 'PrivateIpAddress': '10.253.17.74', 'ProductCodes': [], 'StateTransitionReason': '', 'InstanceId': 'i-78f1b94a', 'ImageId': 'ami-c4d643f4', 'PrivateDnsName': 'ip-10-253-17-74.us-west-2.compute.internal', 'KeyName': 'aws', 'SecurityGroups': [{'GroupName': 'quicklaunch-1', 'GroupId': 'sg-72334242'}], 'ClientToken': 'aOJaC1362847444140', 'InstanceType': 'm1.medium', 'NetworkInterfaces': [], 'Placement': {'Tenancy': 'default', 'GroupName': '', 'AvailabilityZone': 'us-west-2b'}, 'Hypervisor': 'xen', 'BlockDeviceMappings': [{'DeviceName': '/dev/sda1', 'Ebs': {'Status': 'attached', 'DeleteOnTermination': True, 'VolumeId': 'vol-a8d2e991', 'AttachTime': '2013-03-09T16:44:07.000Z'}}], 'Architecture': 'x86_64', 'RootDeviceType': 'ebs', 'RootDeviceName': '/dev/sda1', 'VirtualizationType': 'hvm', 'AmiLaunchIndex': 0}]}], 'ResponseMetadata': {'RequestId': 'd15d204f-fc31-4600-85d3-5c86e5483b92'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-volume.xml', b'<CreateVolumeResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <volumeId>vol-1a2b3c4d</volumeId>\n  <size>80</size>\n  <snapshotId/>\n  <availabilityZone>us-east-1a</availabilityZone>\n  <status>creating</status>\n  <createTime>YYYY-MM-DDTHH:MM:SS.000Z</createTime>\n  <volumeType>standard</volumeType>\n</CreateVolumeResponse>\n', OperationModel(name=CreateVolume), {'AvailabilityZone': 'us-east-1a', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'VolumeType': 'standard', 'VolumeId': 'vol-1a2b3c4d', 'State': 'creating', 'SnapshotId': '', 'CreateTime': 'YYYY-MM-DDTHH:MM:SS.000Z', 'Size': 80}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-vpc.xml', b'<CreateVpcResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n   <vpc>\n      <vpcId>vpc-1a2b3c4d</vpcId>\n      <state>pending</state>\n      <cidrBlock>10.0.0.0/16</cidrBlock>\n      <dhcpOptionsId>dopt-1a2b3c4d2</dhcpOptionsId>\n      <instanceTenancy>default</instanceTenancy>\n      <tagSet/>\n   </vpc>\n</CreateVpcResponse>\n', OperationModel(name=CreateVpc), {'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}, 'Vpc': {'VpcId': 'vpc-1a2b3c4d', 'InstanceTenancy': 'default', 'Tags': [], 'State': 'pending', 'DhcpOptionsId': 'dopt-1a2b3c4d2', 'CidrBlock': '10.0.0.0/16'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-create-vpn-gateway.xml', b'<CreateVpnGatewayResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n  <vpnGateway>\n    <vpnGatewayId>vgw-8db04f81</vpnGatewayId>\n    <state>pending</state>\n    <type>ipsec.1</type>\n    <availabilityZone>us-east-1a</availabilityZone>\n    <attachments/>\n    <tagSet/>\n  </vpnGateway>\n</CreateVpnGatewayResponse>\n', OperationModel(name=CreateVpnGateway), {'VpnGateway': {'AvailabilityZone': 'us-east-1a', 'Tags': [], 'VpcAttachments': [], 'State': 'pending', 'VpnGatewayId': 'vgw-8db04f81', 'Type': 'ipsec.1'}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-delete-internet-gateway.xml', b'<DeleteInternetGatewayResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <return>true</return>\n</DeleteInternetGatewayResponse>\n', OperationModel(name=DeleteInternetGateway), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-account-attributes.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeAccountAttributesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>14b4e6b1-ad06-4bdc-8dc0-e83bcd376f0c</requestId>\n    <accountAttributeSet>\n        <item>\n            <attributeName>vpc-max-security-groups-per-interface</attributeName>\n            <attributeValueSet>\n                <item>\n                    <attributeValue>5</attributeValue>\n                </item>\n            </attributeValueSet>\n        </item>\n        <item>\n            <attributeName>max-instances</attributeName>\n            <attributeValueSet>\n                <item>\n                    <attributeValue>20</attributeValue>\n                </item>\n            </attributeValueSet>\n        </item>\n        <item>\n            <attributeName>supported-platforms</attributeName>\n            <attributeValueSet>\n                <item>\n                    <attributeValue>EC2</attributeValue>\n                </item>\n                <item>\n                    <attributeValue>VPC</attributeValue>\n                </item>\n            </attributeValueSet>\n        </item>\n        <item>\n            <attributeName>default-vpc</attributeName>\n            <attributeValueSet>\n                <item>\n                    <attributeValue>none</attributeValue>\n                </item>\n            </attributeValueSet>\n        </item>\n    </accountAttributeSet>\n</DescribeAccountAttributesResponse>', OperationModel(name=DescribeAccountAttributes), {'ResponseMetadata': {'RequestId': '14b4e6b1-ad06-4bdc-8dc0-e83bcd376f0c'}, 'AccountAttributes': [{'AttributeName': 'vpc-max-security-groups-per-interface', 'AttributeValues': [{'AttributeValue': '5'}]}, {'AttributeName': 'max-instances', 'AttributeValues': [{'AttributeValue': '20'}]}, {'AttributeName': 'supported-platforms', 'AttributeValues': [{'AttributeValue': 'EC2'}, {'AttributeValue': 'VPC'}]}, {'AttributeName': 'default-vpc', 'AttributeValues': [{'AttributeValue': 'none'}]}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-addresses.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeAddressesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>b4cfd51c-a092-494f-8ee0-59912bef0ccc</requestId>\n    <addressesSet>\n        <item>\n            <publicIp>54.245.81.77</publicIp>\n            <domain>standard</domain>\n            <instanceId/>\n        </item>\n        <item>\n            <publicIp>54.245.99.8</publicIp>\n            <domain>standard</domain>\n            <instanceId/>\n        </item>\n        <item>\n            <publicIp>50.112.139.73</publicIp>\n            <allocationId>eipalloc-312e1758</allocationId>\n            <domain>vpc</domain>\n        </item>\n    </addressesSet>\n</DescribeAddressesResponse>', OperationModel(name=DescribeAddresses), {'ResponseMetadata': {'RequestId': 'b4cfd51c-a092-494f-8ee0-59912bef0ccc'}, 'Addresses': [{'PublicIp': '54.245.81.77', 'InstanceId': '', 'Domain': 'standard'}, {'PublicIp': '54.245.99.8', 'InstanceId': '', 'Domain': 'standard'}, {'PublicIp': '50.112.139.73', 'Domain': 'vpc', 'AllocationId': 'eipalloc-312e1758'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-availability-zones.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeAvailabilityZonesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>134223fa-6e75-437d-8235-5e7ad2482839</requestId>\n    <availabilityZoneInfo>\n        <item>\n            <zoneName>us-west-2a</zoneName>\n            <zoneState>available</zoneState>\n            <regionName>us-west-2</regionName>\n            <messageSet/>\n        </item>\n        <item>\n            <zoneName>us-west-2b</zoneName>\n            <zoneState>available</zoneState>\n            <regionName>us-west-2</regionName>\n            <messageSet/>\n        </item>\n        <item>\n            <zoneName>us-west-2c</zoneName>\n            <zoneState>available</zoneState>\n            <regionName>us-west-2</regionName>\n            <messageSet/>\n        </item>\n    </availabilityZoneInfo>\n</DescribeAvailabilityZonesResponse>', OperationModel(name=DescribeAvailabilityZones), {'AvailabilityZones': [{'State': 'available', 'RegionName': 'us-west-2', 'Messages': [], 'ZoneName': 'us-west-2a'}, {'State': 'available', 'RegionName': 'us-west-2', 'Messages': [], 'ZoneName': 'us-west-2b'}, {'State': 'available', 'RegionName': 'us-west-2', 'Messages': [], 'ZoneName': 'us-west-2c'}], 'ResponseMetadata': {'RequestId': '134223fa-6e75-437d-8235-5e7ad2482839'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-bundle-tasks.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeBundleTasksResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <bundleInstanceTasksSet>\n      <item>\n         <instanceId>i-12345678</instanceId>\n         <bundleId>bun-c1a540a8</bundleId>\n         <state>cancelling</state>\n         <startTime>2008-10-07T11:41:50.000Z</startTime>\n         <updateTime>2008-10-07T11:51:50.000Z</updateTime>\n         <storage>\n            <S3>\n               <bucket>myawsbucket</bucket>\n               <prefix>winami</prefix>\n            </S3>\n         </storage>\n         <progress>20%</progress>\n      </item>\n   </bundleInstanceTasksSet>\n</DescribeBundleTasksResponse>\n', OperationModel(name=DescribeBundleTasks), {'BundleTasks': [{'BundleId': 'bun-c1a540a8', 'InstanceId': 'i-12345678', 'Progress': '20%', 'StartTime': '2008-10-07T11:41:50.000Z', 'State': 'cancelling', 'Storage': {'S3': {'Bucket': 'myawsbucket', 'Prefix': 'winami'}}, 'UpdateTime': '2008-10-07T11:51:50.000Z'}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-customer-gateways.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeCustomerGatewaysResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n  <customerGatewaySet>\n    <item>\n       <customerGatewayId>cgw-b4dc3961</customerGatewayId>\n       <state>available</state>\n       <type>ipsec.1</type>\n       <ipAddress>12.1.2.3</ipAddress>\n       <bgpAsn>65534</bgpAsn>\n       <tagSet/>\n    </item>\n  </customerGatewaySet>\n</DescribeCustomerGatewaysResponse>\n', OperationModel(name=DescribeCustomerGateways), {'CustomerGateways': [{'BgpAsn': '65534', 'CustomerGatewayId': 'cgw-b4dc3961', 'IpAddress': '12.1.2.3', 'State': 'available', 'Tags': [], 'Type': 'ipsec.1'}], 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-dhcp-options.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeDhcpOptionsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>684ba87f-78a1-4c29-a70b-f6103a15c162</requestId>\n    <dhcpOptionsSet>\n        <item>\n            <dhcpOptionsId>dopt-eb291082</dhcpOptionsId>\n            <dhcpConfigurationSet>\n                <item>\n                    <key>domain-name</key>\n                    <valueSet>\n                        <item>\n                            <value>us-west-2.compute.internal</value>\n                        </item>\n                    </valueSet>\n                </item>\n                <item>\n                    <key>domain-name-servers</key>\n                    <valueSet>\n                        <item>\n                            <value>AmazonProvidedDNS</value>\n                        </item>\n                    </valueSet>\n                </item>\n            </dhcpConfigurationSet>\n        </item>\n    </dhcpOptionsSet>\n</DescribeDhcpOptionsResponse>', OperationModel(name=DescribeDhcpOptions), {'DhcpOptions': [{'DhcpConfigurations': [{'Values': [{'Value': 'us-west-2.compute.internal'}], 'Key': 'domain-name'}, {'Values': [{'Value': 'AmazonProvidedDNS'}], 'Key': 'domain-name-servers'}], 'DhcpOptionsId': 'dopt-eb291082'}], 'ResponseMetadata': {'RequestId': '684ba87f-78a1-4c29-a70b-f6103a15c162'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-export-tasks.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeExportTasksResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <exportTaskSet>\n    <item>\n      <exportTaskId>export-i-1234wxyz</exportTaskId>\n      <description>Example for docs</description>\n      <state>active</state>\n      <statusMessage>Running</statusMessage>\n      <instanceExport>\n\t<instanceId>i-12345678</instanceId>\n\t<targetEnvironment>VMWare</targetEnvironment>\n      </instanceExport>\n      <exportToS3>\n\t<diskImageFormat>VMDK</diskImageFormat>\n\t<containerFormat>OVA</containerFormat>\n\t<s3Bucket>my-bucket-for-exported-vm</s3Bucket>\n\t<s3Key>my-exports/ export-i-1234wxyz .ova</s3Key>\n      </exportToS3>\n    </item>\n  </exportTaskSet>\n</DescribeExportTasksResponse>\n', OperationModel(name=DescribeExportTasks), {'ExportTasks': [{'Description': 'Example for docs', 'ExportTaskId': 'export-i-1234wxyz', 'ExportToS3Task': {'ContainerFormat': 'OVA', 'DiskImageFormat': 'VMDK', 'S3Bucket': 'my-bucket-for-exported-vm', 'S3Key': 'my-exports/ export-i-1234wxyz .ova'}, 'InstanceExportDetails': {'InstanceId': 'i-12345678', 'TargetEnvironment': 'VMWare'}, 'State': 'active', 'StatusMessage': 'Running'}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-instance-attribute.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeInstanceAttributeResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>4c94c806-ef28-4f4c-b1c7-3e601fe39497</requestId>\n    <instanceId>i-12345678</instanceId>\n    <rootDeviceName>\n        <value>/dev/sda1</value>\n    </rootDeviceName>\n</DescribeInstanceAttributeResponse>\n\n', OperationModel(name=DescribeInstanceAttribute), {'ResponseMetadata': {'RequestId': '4c94c806-ef28-4f4c-b1c7-3e601fe39497'}, 'InstanceId': 'i-12345678', 'RootDeviceName': {'Value': '/dev/sda1'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-instance-status.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeInstanceStatusResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>8be1454b-ea0f-4037-9911-b48eda6d79c8</requestId>\n    <instanceStatusSet>\n        <item>\n            <instanceId>i-78f1b94a</instanceId>\n            <availabilityZone>us-west-2b</availabilityZone>\n            <instanceState>\n                <code>16</code>\n                <name>running</name>\n            </instanceState>\n            <systemStatus>\n                <status>ok</status>\n                <details>\n                    <item>\n                        <name>reachability</name>\n                        <status>passed</status>\n                    </item>\n                </details>\n            </systemStatus>\n            <instanceStatus>\n                <status>ok</status>\n                <details>\n                    <item>\n                        <name>reachability</name>\n                        <status>passed</status>\n                    </item>\n                </details>\n            </instanceStatus>\n        </item>\n    </instanceStatusSet>\n</DescribeInstanceStatusResponse>', OperationModel(name=DescribeInstanceStatus), {'InstanceStatuses': [{'InstanceId': 'i-78f1b94a', 'InstanceState': {'Code': 16, 'Name': 'running'}, 'AvailabilityZone': 'us-west-2b', 'SystemStatus': {'Status': 'ok', 'Details': [{'Status': 'passed', 'Name': 'reachability'}]}, 'InstanceStatus': {'Status': 'ok', 'Details': [{'Status': 'passed', 'Name': 'reachability'}]}}], 'ResponseMetadata': {'RequestId': '8be1454b-ea0f-4037-9911-b48eda6d79c8'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-internet-gateways.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeInternetGatewaysResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>dbdc612b-2fa3-4ba8-b96d-3a92a7a742b2</requestId>\n    <internetGatewaySet>\n        <item>\n            <internetGatewayId>igw-6228110b</internetGatewayId>\n            <attachmentSet>\n                <item>\n                    <vpcId>vpc-8d2910e4</vpcId>\n                    <state>available</state>\n                </item>\n            </attachmentSet>\n            <tagSet/>\n        </item>\n        <item>\n            <internetGatewayId>igw-f36c6a9a</internetGatewayId>\n            <attachmentSet/>\n            <tagSet/>\n        </item>\n    </internetGatewaySet>\n</DescribeInternetGatewaysResponse>', OperationModel(name=DescribeInternetGateways), {'InternetGateways': [{'Tags': [], 'InternetGatewayId': 'igw-6228110b', 'Attachments': [{'State': 'available', 'VpcId': 'vpc-8d2910e4'}]}, {'Tags': [], 'InternetGatewayId': 'igw-f36c6a9a', 'Attachments': []}], 'ResponseMetadata': {'RequestId': 'dbdc612b-2fa3-4ba8-b96d-3a92a7a742b2'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-key-pairs.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeKeyPairsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>f01984fe-0227-46e0-bd34-86fadf256477</requestId>\n    <keySet>\n        <item>\n            <keyName>aws</keyName>\n            <keyFingerprint>d1:15:f0:ce:7f:ee:94:b5:f2:76:d0:9a:bd:b2:30:18</keyFingerprint>\n        </item>\n    </keySet>\n</DescribeKeyPairsResponse>\n', OperationModel(name=DescribeKeyPairs), {'KeyPairs': [{'KeyName': 'aws', 'KeyFingerprint': 'd1:15:f0:ce:7f:ee:94:b5:f2:76:d0:9a:bd:b2:30:18'}], 'ResponseMetadata': {'RequestId': 'f01984fe-0227-46e0-bd34-86fadf256477'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-network-acls.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeNetworkAclsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>44c81884-4c88-40ef-b6e9-b04d207189c9</requestId>\n    <networkAclSet>\n        <item>\n            <networkAclId>acl-8c2910e5</networkAclId>\n            <vpcId>vpc-8d2910e4</vpcId>\n            <default>true</default>\n            <entrySet>\n                <item>\n                    <ruleNumber>100</ruleNumber>\n                    <protocol>-1</protocol>\n                    <ruleAction>allow</ruleAction>\n                    <egress>true</egress>\n                    <cidrBlock>0.0.0.0/0</cidrBlock>\n                </item>\n                <item>\n                    <ruleNumber>32767</ruleNumber>\n                    <protocol>-1</protocol>\n                    <ruleAction>deny</ruleAction>\n                    <egress>true</egress>\n                    <cidrBlock>0.0.0.0/0</cidrBlock>\n                </item>\n                <item>\n                    <ruleNumber>100</ruleNumber>\n                    <protocol>-1</protocol>\n                    <ruleAction>allow</ruleAction>\n                    <egress>false</egress>\n                    <cidrBlock>0.0.0.0/0</cidrBlock>\n                </item>\n                <item>\n                    <ruleNumber>32767</ruleNumber>\n                    <protocol>-1</protocol>\n                    <ruleAction>deny</ruleAction>\n                    <egress>false</egress>\n                    <cidrBlock>0.0.0.0/0</cidrBlock>\n                </item>\n            </entrySet>\n            <associationSet>\n                <item>\n                    <networkAclAssociationId>aclassoc-832910ea</networkAclAssociationId>\n                    <networkAclId>acl-8c2910e5</networkAclId>\n                    <subnetId>subnet-812910e8</subnetId>\n                </item>\n            </associationSet>\n            <tagSet/>\n        </item>\n    </networkAclSet>\n</DescribeNetworkAclsResponse>', OperationModel(name=DescribeNetworkAcls), {'NetworkAcls': [{'Associations': [{'SubnetId': 'subnet-812910e8', 'NetworkAclId': 'acl-8c2910e5', 'NetworkAclAssociationId': 'aclassoc-832910ea'}], 'NetworkAclId': 'acl-8c2910e5', 'VpcId': 'vpc-8d2910e4', 'Tags': [], 'Entries': [{'CidrBlock': '0.0.0.0/0', 'RuleNumber': 100, 'Protocol': '-1', 'Egress': True, 'RuleAction': 'allow'}, {'CidrBlock': '0.0.0.0/0', 'RuleNumber': 32767, 'Protocol': '-1', 'Egress': True, 'RuleAction': 'deny'}, {'CidrBlock': '0.0.0.0/0', 'RuleNumber': 100, 'Protocol': '-1', 'Egress': False, 'RuleAction': 'allow'}, {'CidrBlock': '0.0.0.0/0', 'RuleNumber': 32767, 'Protocol': '-1', 'Egress': False, 'RuleAction': 'deny'}], 'IsDefault': True}], 'ResponseMetadata': {'RequestId': '44c81884-4c88-40ef-b6e9-b04d207189c9'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-network-interfaces.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeNetworkInterfacesResponse xmlns=\'http://ec2.amazonaws.com/doc/2014-06-15/\'>\n    <requestId>fc45294c-006b-457b-bab9-012f5b3b0e40</requestId>\n     <networkInterfaceSet>\n       <item>\n         <networkInterfaceId>eni-0f62d866</networkInterfaceId>\n         <subnetId>subnet-c53c87ac</subnetId>\n         <vpcId>vpc-cc3c87a5</vpcId>\n         <availabilityZone>ap-southeast-1b</availabilityZone>\n         <description/>\n         <ownerId>123456789012</ownerId>\n         <requesterManaged>false</requesterManaged>\n         <status>in-use</status>\n         <macAddress>02:81:60:cb:27:37</macAddress>\n         <privateIpAddress>10.0.0.146</privateIpAddress>\n         <sourceDestCheck>true</sourceDestCheck>\n         <groupSet>\n           <item>\n             <groupId>sg-3f4b5653</groupId>\n             <groupName>default</groupName>\n           </item>\n         </groupSet>\n         <attachment>\n           <attachmentId>eni-attach-6537fc0c</attachmentId>\n           <instanceId>i-22197876</instanceId>\n           <instanceOwnerId>123456789012</instanceOwnerId>\n           <deviceIndex>0</deviceIndex>\n           <status>attached</status>\n           <attachTime>2012-07-01T21:45:27.000Z</attachTime>\n           <deleteOnTermination>true</deleteOnTermination>\n         </attachment>\n         <tagSet/>\n         <privateIpAddressesSet>\n           <item>\n             <privateIpAddress>10.0.0.146</privateIpAddress>\n             <primary>true</primary>\n           </item>\n           <item>\n             <privateIpAddress>10.0.0.148</privateIpAddress>\n             <primary>false</primary>\n           </item>\n           <item>\n             <privateIpAddress>10.0.0.150</privateIpAddress>\n             <primary>false</primary>\n           </item>\n         </privateIpAddressesSet>\n       </item>\n       <item>\n         <networkInterfaceId>eni-a66ed5cf</networkInterfaceId>\n         <subnetId>subnet-cd8a35a4</subnetId>\n         <vpcId>vpc-f28a359b</vpcId>\n         <availabilityZone>ap-southeast-1b</availabilityZone>\n         <description>Primary network interface</description>\n         <ownerId>123456789012</ownerId>\n         <requesterManaged>false</requesterManaged>\n         <status>in-use</status>\n         <macAddress>02:78:d7:00:8a:1e</macAddress>\n         <privateIpAddress>10.0.1.233</privateIpAddress>\n         <sourceDestCheck>true</sourceDestCheck>\n         <groupSet>\n           <item>\n             <groupId>sg-a2a0b2ce</groupId>\n             <groupName>quick-start-1</groupName>\n           </item>\n         </groupSet>\n         <attachment>\n           <attachmentId>eni-attach-a99c57c0</attachmentId>\n           <instanceId>i-886401dc</instanceId>\n           <instanceOwnerId>123456789012</instanceOwnerId>\n           <deviceIndex>0</deviceIndex>\n           <status>attached</status>\n           <attachTime>2012-06-27T20:08:44.000Z</attachTime>\n           <deleteOnTermination>true</deleteOnTermination>\n         </attachment>\n         <tagSet/>\n         <privateIpAddressesSet>\n           <item>\n             <privateIpAddress>10.0.1.233</privateIpAddress>\n             <primary>true</primary>\n           </item>\n           <item>\n             <privateIpAddress>10.0.1.20</privateIpAddress>\n             <primary>false</primary>\n           </item>\n         </privateIpAddressesSet>\n       </item>\n     </networkInterfaceSet>\n</DescribeNetworkInterfacesResponse>\n', OperationModel(name=DescribeNetworkInterfaces), {'NetworkInterfaces': [{'Attachment': {'AttachTime': '2012-07-01T21:45:27.000Z', 'AttachmentId': 'eni-attach-6537fc0c', 'DeleteOnTermination': True, 'DeviceIndex': 0, 'InstanceId': 'i-22197876', 'InstanceOwnerId': '123456789012', 'Status': 'attached'}, 'AvailabilityZone': 'ap-southeast-1b', 'Description': '', 'Groups': [{'GroupId': 'sg-3f4b5653', 'GroupName': 'default'}], 'MacAddress': '02:81:60:cb:27:37', 'NetworkInterfaceId': 'eni-0f62d866', 'OwnerId': '123456789012', 'PrivateIpAddress': '10.0.0.146', 'PrivateIpAddresses': [{'Primary': True, 'PrivateIpAddress': '10.0.0.146'}, {'Primary': False, 'PrivateIpAddress': '10.0.0.148'}, {'Primary': False, 'PrivateIpAddress': '10.0.0.150'}], 'RequesterManaged': False, 'SourceDestCheck': True, 'Status': 'in-use', 'SubnetId': 'subnet-c53c87ac', 'TagSet': [], 'VpcId': 'vpc-cc3c87a5'}, {'Attachment': {'AttachTime': '2012-06-27T20:08:44.000Z', 'AttachmentId': 'eni-attach-a99c57c0', 'DeleteOnTermination': True, 'DeviceIndex': 0, 'InstanceId': 'i-886401dc', 'InstanceOwnerId': '123456789012', 'Status': 'attached'}, 'AvailabilityZone': 'ap-southeast-1b', 'Description': 'Primary network interface', 'Groups': [{'GroupId': 'sg-a2a0b2ce', 'GroupName': 'quick-start-1'}], 'MacAddress': '02:78:d7:00:8a:1e', 'NetworkInterfaceId': 'eni-a66ed5cf', 'OwnerId': '123456789012', 'PrivateIpAddress': '10.0.1.233', 'PrivateIpAddresses': [{'Primary': True, 'PrivateIpAddress': '10.0.1.233'}, {'Primary': False, 'PrivateIpAddress': '10.0.1.20'}], 'RequesterManaged': False, 'SourceDestCheck': True, 'Status': 'in-use', 'SubnetId': 'subnet-cd8a35a4', 'TagSet': [], 'VpcId': 'vpc-f28a359b'}], 'ResponseMetadata': {'RequestId': 'fc45294c-006b-457b-bab9-012f5b3b0e40'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-placement-groups.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribePlacementGroupsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>d4904fd9-82c2-4ea5-adfe-a9cc3EXAMPLE</requestId>\n   <placementGroupSet>\n      <item>\n         <groupName>Project-cluster</groupName>\n         <strategy>cluster</strategy>\n         <state>available</state>\n      </item>\n   </placementGroupSet>\n</DescribePlacementGroupsResponse>\n', OperationModel(name=DescribePlacementGroups), {'PlacementGroups': [{'GroupName': 'Project-cluster', 'State': 'available', 'Strategy': 'cluster'}], 'ResponseMetadata': {'RequestId': 'd4904fd9-82c2-4ea5-adfe-a9cc3EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-regions.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeRegionsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>b5ad0cf6-846e-41be-a10d-767e2c519a71</requestId>\n    <regionInfo>\n        <item>\n            <regionName>eu-west-1</regionName>\n            <regionEndpoint>ec2.eu-west-1.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>sa-east-1</regionName>\n            <regionEndpoint>ec2.sa-east-1.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>us-east-1</regionName>\n            <regionEndpoint>ec2.us-east-1.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>ap-northeast-1</regionName>\n            <regionEndpoint>ec2.ap-northeast-1.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>us-west-2</regionName>\n            <regionEndpoint>ec2.us-west-2.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>us-west-1</regionName>\n            <regionEndpoint>ec2.us-west-1.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>ap-southeast-1</regionName>\n            <regionEndpoint>ec2.ap-southeast-1.amazonaws.com</regionEndpoint>\n        </item>\n        <item>\n            <regionName>ap-southeast-2</regionName>\n            <regionEndpoint>ec2.ap-southeast-2.amazonaws.com</regionEndpoint>\n        </item>\n    </regionInfo>\n</DescribeRegionsResponse>', OperationModel(name=DescribeRegions), {'Regions': [{'Endpoint': 'ec2.eu-west-1.amazonaws.com', 'RegionName': 'eu-west-1'}, {'Endpoint': 'ec2.sa-east-1.amazonaws.com', 'RegionName': 'sa-east-1'}, {'Endpoint': 'ec2.us-east-1.amazonaws.com', 'RegionName': 'us-east-1'}, {'Endpoint': 'ec2.ap-northeast-1.amazonaws.com', 'RegionName': 'ap-northeast-1'}, {'Endpoint': 'ec2.us-west-2.amazonaws.com', 'RegionName': 'us-west-2'}, {'Endpoint': 'ec2.us-west-1.amazonaws.com', 'RegionName': 'us-west-1'}, {'Endpoint': 'ec2.ap-southeast-1.amazonaws.com', 'RegionName': 'ap-southeast-1'}, {'Endpoint': 'ec2.ap-southeast-2.amazonaws.com', 'RegionName': 'ap-southeast-2'}], 'ResponseMetadata': {'RequestId': 'b5ad0cf6-846e-41be-a10d-767e2c519a71'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-reserved-instances-offerings.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeReservedInstancesOfferingsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>404d7db3-3ec5-4400-8d72-74b1553f176e</requestId>\n    <reservedInstancesOfferingsSet>\n        <item>\n            <reservedInstancesOfferingId>2628c27b-7c1c-4ad6-9f50-a09393f36ecf</reservedInstancesOfferingId>\n            <instanceType>c1.medium</instanceType>\n            <availabilityZone>us-west-2c</availabilityZone>\n            <duration>94608000</duration>\n            <fixedPrice>701.0</fixedPrice>\n            <usagePrice>0.0</usagePrice>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <instanceTenancy>default</instanceTenancy>\n            <currencyCode>USD</currencyCode>\n            <offeringType>Heavy Utilization</offeringType>\n            <recurringCharges>\n                <item>\n                    <frequency>Hourly</frequency>\n                    <amount>0.031</amount>\n                </item>\n            </recurringCharges>\n            <marketplace>false</marketplace>\n            <pricingDetailsSet/>\n        </item>\n        <item>\n            <reservedInstancesOfferingId>371f1882-2df3-43b0-8f62-f73956fcfabc</reservedInstancesOfferingId>\n            <instanceType>c1.medium</instanceType>\n            <availabilityZone>us-west-2c</availabilityZone>\n            <duration>94608000</duration>\n            <fixedPrice>701.0</fixedPrice>\n            <usagePrice>0.0</usagePrice>\n            <productDescription>Red Hat Enterprise Linux</productDescription>\n            <instanceTenancy>default</instanceTenancy>\n            <currencyCode>USD</currencyCode>\n            <offeringType>Heavy Utilization</offeringType>\n            <recurringCharges>\n                <item>\n                    <frequency>Hourly</frequency>\n                    <amount>0.091</amount>\n                </item>\n            </recurringCharges>\n            <marketplace>false</marketplace>\n            <pricingDetailsSet/>\n        </item>\n    </reservedInstancesOfferingsSet>\n    <nextToken>JqBdtVdGsvMjUysyEgwy/jVBCGAjj9G4/ivkfsXHt9A=</nextToken>\n</DescribeReservedInstancesOfferingsResponse>\n', OperationModel(name=DescribeReservedInstancesOfferings), {'ResponseMetadata': {'RequestId': '404d7db3-3ec5-4400-8d72-74b1553f176e'}, 'NextToken': 'JqBdtVdGsvMjUysyEgwy/jVBCGAjj9G4/ivkfsXHt9A=', 'ReservedInstancesOfferings': [{'OfferingType': 'Heavy Utilization', 'AvailabilityZone': 'us-west-2c', 'InstanceTenancy': 'default', 'PricingDetails': [], 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'UsagePrice': 0.0, 'RecurringCharges': [{'Amount': 0.031, 'Frequency': 'Hourly'}], 'Marketplace': False, 'CurrencyCode': 'USD', 'FixedPrice': 701.0, 'Duration': 94608000, 'ReservedInstancesOfferingId': '2628c27b-7c1c-4ad6-9f50-a09393f36ecf', 'InstanceType': 'c1.medium'}, {'OfferingType': 'Heavy Utilization', 'AvailabilityZone': 'us-west-2c', 'InstanceTenancy': 'default', 'PricingDetails': [], 'ProductDescription': 'Red Hat Enterprise Linux', 'UsagePrice': 0.0, 'RecurringCharges': [{'Amount': 0.091, 'Frequency': 'Hourly'}], 'Marketplace': False, 'CurrencyCode': 'USD', 'FixedPrice': 701.0, 'Duration': 94608000, 'ReservedInstancesOfferingId': '371f1882-2df3-43b0-8f62-f73956fcfabc', 'InstanceType': 'c1.medium'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-reserved-instances.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeReservedInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <reservedInstancesSet>\n      <item>\n         <reservedInstancesId>4b2293b4-5813-4cc8-9ce3-1957fc1dcfc8EXAMPLE</reservedInstancesId>\n         <instanceType>m1.xlarge</instanceType>\n         <availabilityZone>us-east-1a</availabilityZone>\n         <duration>31536000</duration>\n         <fixedPrice>1820.0</fixedPrice>\n         <usagePrice>0.24</usagePrice>\n         <instanceCount>3</instanceCount>\n         <productDescription>Linux/UNIX</productDescription>\n         <state>active</state>\n         <instanceTenancy>default</instanceTenancy>\n         <currencyCode>USD</currencyCode>\n         <offeringType>Light Utilization</offeringType>\n         <recurringCharges/>\n      </item>\n   </reservedInstancesSet>\n</DescribeReservedInstancesResponse>\n', OperationModel(name=DescribeReservedInstances), {'ReservedInstances': [{'AvailabilityZone': 'us-east-1a', 'CurrencyCode': 'USD', 'Duration': 31536000, 'FixedPrice': 1820.0, 'InstanceCount': 3, 'InstanceTenancy': 'default', 'InstanceType': 'm1.xlarge', 'OfferingType': 'Light Utilization', 'ProductDescription': 'Linux/UNIX', 'RecurringCharges': [], 'ReservedInstancesId': '4b2293b4-5813-4cc8-9ce3-1957fc1dcfc8EXAMPLE', 'State': 'active', 'UsagePrice': 0.24}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-route-tables.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeRouteTablesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>0a0c3fc4-1246-463b-b276-2823b5bc38e6</requestId>\n    <routeTableSet>\n        <item>\n            <routeTableId>rtb-2728114e</routeTableId>\n            <vpcId>vpc-8d2910e4</vpcId>\n            <routeSet>\n                <item>\n                    <destinationCidrBlock>10.0.0.0/16</destinationCidrBlock>\n                    <gatewayId>local</gatewayId>\n                    <state>active</state>\n                    <origin>CreateRouteTable</origin>\n                </item>\n                <item>\n                    <destinationCidrBlock>0.0.0.0/0</destinationCidrBlock>\n                    <gatewayId>igw-6228110b</gatewayId>\n                    <state>active</state>\n                    <origin>CreateRoute</origin>\n                </item>\n            </routeSet>\n            <associationSet>\n                <item>\n                    <routeTableAssociationId>rtbassoc-822019eb</routeTableAssociationId>\n                    <routeTableId>rtb-2728114e</routeTableId>\n                    <subnetId>subnet-812910e8</subnetId>\n                </item>\n            </associationSet>\n            <propagatingVgwSet/>\n            <tagSet/>\n        </item>\n        <item>\n            <routeTableId>rtb-8f2910e6</routeTableId>\n            <vpcId>vpc-8d2910e4</vpcId>\n            <routeSet>\n                <item>\n                    <destinationCidrBlock>10.0.0.0/16</destinationCidrBlock>\n                    <gatewayId>local</gatewayId>\n                    <state>active</state>\n                    <origin>CreateRouteTable</origin>\n                </item>\n            </routeSet>\n            <associationSet>\n                <item>\n                    <routeTableAssociationId>rtbassoc-8e2910e7</routeTableAssociationId>\n                    <routeTableId>rtb-8f2910e6</routeTableId>\n                    <main>true</main>\n                </item>\n            </associationSet>\n            <propagatingVgwSet/>\n            <tagSet/>\n        </item>\n    </routeTableSet>\n</DescribeRouteTablesResponse>', OperationModel(name=DescribeRouteTables), {'ResponseMetadata': {'RequestId': '0a0c3fc4-1246-463b-b276-2823b5bc38e6'}, 'RouteTables': [{'Associations': [{'SubnetId': 'subnet-812910e8', 'RouteTableAssociationId': 'rtbassoc-822019eb', 'RouteTableId': 'rtb-2728114e'}], 'RouteTableId': 'rtb-2728114e', 'VpcId': 'vpc-8d2910e4', 'PropagatingVgws': [], 'Tags': [], 'Routes': [{'GatewayId': 'local', 'DestinationCidrBlock': '10.0.0.0/16', 'Origin': 'CreateRouteTable', 'State': 'active'}, {'GatewayId': 'igw-6228110b', 'DestinationCidrBlock': '0.0.0.0/0', 'Origin': 'CreateRoute', 'State': 'active'}]}, {'Associations': [{'RouteTableAssociationId': 'rtbassoc-8e2910e7', 'Main': True, 'RouteTableId': 'rtb-8f2910e6'}], 'RouteTableId': 'rtb-8f2910e6', 'VpcId': 'vpc-8d2910e4', 'PropagatingVgws': [], 'Tags': [], 'Routes': [{'GatewayId': 'local', 'DestinationCidrBlock': '10.0.0.0/16', 'Origin': 'CreateRouteTable', 'State': 'active'}]}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-security-groups.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeSecurityGroupsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>4296401f-8b78-4f99-b1fb-71def4fc3701</requestId>\n    <securityGroupInfo>\n        <item>\n            <ownerId>123456789012</ownerId>\n            <groupId>sg-68d8a958</groupId>\n            <groupName>quicklaunch-0</groupName>\n            <groupDescription>quicklaunch-0</groupDescription>\n            <ipPermissions>\n                <item>\n                    <ipProtocol>tcp</ipProtocol>\n                    <fromPort>22</fromPort>\n                    <toPort>22</toPort>\n                    <groups/>\n                    <ipRanges>\n                        <item>\n                            <cidrIp>0.0.0.0/0</cidrIp>\n                        </item>\n                    </ipRanges>\n                </item>\n            </ipPermissions>\n            <ipPermissionsEgress/>\n        </item>\n        <item>\n            <ownerId>123456789012</ownerId>\n            <groupId>sg-72334242</groupId>\n            <groupName>quicklaunch-1</groupName>\n            <groupDescription>quicklaunch-1</groupDescription>\n            <ipPermissions>\n                <item>\n                    <ipProtocol>tcp</ipProtocol>\n                    <fromPort>3389</fromPort>\n                    <toPort>3389</toPort>\n                    <groups/>\n                    <ipRanges>\n                        <item>\n                            <cidrIp>0.0.0.0/0</cidrIp>\n                        </item>\n                    </ipRanges>\n                </item>\n            </ipPermissions>\n            <ipPermissionsEgress/>\n        </item>\n        <item>\n            <ownerId>123456789012</ownerId>\n            <groupId>sg-4e970e7e</groupId>\n            <groupName>notebook</groupName>\n            <groupDescription>For iPython notebook.</groupDescription>\n            <ipPermissions>\n                <item>\n                    <ipProtocol>tcp</ipProtocol>\n                    <fromPort>22</fromPort>\n                    <toPort>22</toPort>\n                    <groups/>\n                    <ipRanges>\n                        <item>\n                            <cidrIp>0.0.0.0/0</cidrIp>\n                        </item>\n                    </ipRanges>\n                </item>\n                <item>\n                    <ipProtocol>tcp</ipProtocol>\n                    <fromPort>443</fromPort>\n                    <toPort>443</toPort>\n                    <groups/>\n                    <ipRanges>\n                        <item>\n                            <cidrIp>0.0.0.0/0</cidrIp>\n                        </item>\n                    </ipRanges>\n                </item>\n                <item>\n                    <ipProtocol>tcp</ipProtocol>\n                    <fromPort>8888</fromPort>\n                    <toPort>8888</toPort>\n                    <groups/>\n                    <ipRanges>\n                        <item>\n                            <cidrIp>0.0.0.0/0</cidrIp>\n                        </item>\n                    </ipRanges>\n                </item>\n            </ipPermissions>\n            <ipPermissionsEgress/>\n        </item>\n        <item>\n            <ownerId>123456789012</ownerId>\n            <groupId>sg-eab831da</groupId>\n            <groupName>default</groupName>\n            <groupDescription>default group</groupDescription>\n            <ipPermissions>\n                <item>\n                    <ipProtocol>tcp</ipProtocol>\n                    <fromPort>0</fromPort>\n                    <toPort>65535</toPort>\n                    <groups>\n                        <item>\n                            <userId>123456789012</userId>\n                            <groupId>sg-eab831da</groupId>\n                            <groupName>default</groupName>\n                        </item>\n                    </groups>\n                    <ipRanges/>\n                </item>\n                <item>\n                    <ipProtocol>udp</ipProtocol>\n                    <fromPort>0</fromPort>\n                    <toPort>65535</toPort>\n                    <groups>\n                        <item>\n                            <userId>123456789012</userId>\n                            <groupId>sg-eab831da</groupId>\n                            <groupName>default</groupName>\n                        </item>\n                    </groups>\n                    <ipRanges/>\n                </item>\n                <item>\n                    <ipProtocol>icmp</ipProtocol>\n                    <fromPort>-1</fromPort>\n                    <toPort>-1</toPort>\n                    <groups>\n                        <item>\n                            <userId>123456789012</userId>\n                            <groupId>sg-eab831da</groupId>\n                            <groupName>default</groupName>\n                        </item>\n                    </groups>\n                    <ipRanges/>\n                </item>\n            </ipPermissions>\n            <ipPermissionsEgress/>\n        </item>\n        <item>\n            <ownerId>123456789012</ownerId>\n            <groupId>sg-97b1aefb</groupId>\n            <groupName>default</groupName>\n            <groupDescription>default VPC security group</groupDescription>\n            <vpcId>vpc-8d2910e4</vpcId>\n            <ipPermissions>\n                <item>\n                    <ipProtocol>-1</ipProtocol>\n                    <groups>\n                        <item>\n                            <userId>123456789012</userId>\n                            <groupId>sg-97b1aefb</groupId>\n                        </item>\n                    </groups>\n                    <ipRanges/>\n                </item>\n            </ipPermissions>\n            <ipPermissionsEgress>\n                <item>\n                    <ipProtocol>-1</ipProtocol>\n                    <groups/>\n                    <ipRanges>\n                        <item>\n                            <cidrIp>0.0.0.0/0</cidrIp>\n                        </item>\n                    </ipRanges>\n                </item>\n            </ipPermissionsEgress>\n        </item>\n    </securityGroupInfo>\n</DescribeSecurityGroupsResponse>\n', OperationModel(name=DescribeSecurityGroups), {'SecurityGroups': [{'IpPermissionsEgress': [], 'Description': 'quicklaunch-0', 'IpPermissions': [{'ToPort': 22, 'IpProtocol': 'tcp', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'UserIdGroupPairs': [], 'FromPort': 22}], 'GroupName': 'quicklaunch-0', 'OwnerId': '123456789012', 'GroupId': 'sg-68d8a958'}, {'IpPermissionsEgress': [], 'Description': 'quicklaunch-1', 'IpPermissions': [{'ToPort': 3389, 'IpProtocol': 'tcp', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'UserIdGroupPairs': [], 'FromPort': 3389}], 'GroupName': 'quicklaunch-1', 'OwnerId': '123456789012', 'GroupId': 'sg-72334242'}, {'IpPermissionsEgress': [], 'Description': 'For iPython notebook.', 'IpPermissions': [{'ToPort': 22, 'IpProtocol': 'tcp', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'UserIdGroupPairs': [], 'FromPort': 22}, {'ToPort': 443, 'IpProtocol': 'tcp', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'UserIdGroupPairs': [], 'FromPort': 443}, {'ToPort': 8888, 'IpProtocol': 'tcp', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'UserIdGroupPairs': [], 'FromPort': 8888}], 'GroupName': 'notebook', 'OwnerId': '123456789012', 'GroupId': 'sg-4e970e7e'}, {'IpPermissionsEgress': [], 'Description': 'default group', 'IpPermissions': [{'ToPort': 65535, 'IpProtocol': 'tcp', 'IpRanges': [], 'UserIdGroupPairs': [{'GroupName': 'default', 'UserId': '123456789012', 'GroupId': 'sg-eab831da'}], 'FromPort': 0}, {'ToPort': 65535, 'IpProtocol': 'udp', 'IpRanges': [], 'UserIdGroupPairs': [{'GroupName': 'default', 'UserId': '123456789012', 'GroupId': 'sg-eab831da'}], 'FromPort': 0}, {'ToPort': -1, 'IpProtocol': 'icmp', 'IpRanges': [], 'UserIdGroupPairs': [{'GroupName': 'default', 'UserId': '123456789012', 'GroupId': 'sg-eab831da'}], 'FromPort': -1}], 'GroupName': 'default', 'OwnerId': '123456789012', 'GroupId': 'sg-eab831da'}, {'VpcId': 'vpc-8d2910e4', 'Description': 'default VPC security group', 'IpPermissions': [{'IpProtocol': '-1', 'IpRanges': [], 'UserIdGroupPairs': [{'UserId': '123456789012', 'GroupId': 'sg-97b1aefb'}]}], 'GroupName': 'default', 'IpPermissionsEgress': [{'IpProtocol': '-1', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'UserIdGroupPairs': []}], 'OwnerId': '123456789012', 'GroupId': 'sg-97b1aefb'}], 'ResponseMetadata': {'RequestId': '4296401f-8b78-4f99-b1fb-71def4fc3701'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-snapshots.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeSnapshotsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>928b3baf-8729-4285-a244-1c47c8114916</requestId>\n    <snapshotSet>\n        <item>\n            <snapshotId>snap-b253e6da</snapshotId>\n            <volumeId>vol-ee102886</volumeId>\n            <status>completed</status>\n            <startTime>2011-12-27T17:20:21.000Z</startTime>\n            <progress>100%</progress>\n            <ownerId>123456789012</ownerId>\n            <volumeSize>10</volumeSize>\n            <description>Proxy Sniffer Data Disk NTFS 10 GB</description>\n        </item>\n        <item>\n            <snapshotId>snap-b6bf0cde</snapshotId>\n            <volumeId>vol-213dd14a</volumeId>\n            <status>completed</status>\n            <startTime>2012-01-08T00:41:31.000Z</startTime>\n            <progress>100%</progress>\n            <ownerId>123456789012</ownerId>\n            <volumeSize>90</volumeSize>\n            <description/>\n        </item>\n        <item>\n            <snapshotId>snap-1e099276</snapshotId>\n            <volumeId>vol-4ab8dc22</volumeId>\n            <status>completed</status>\n            <startTime>2012-02-22T17:25:10.000Z</startTime>\n            <progress>100%</progress>\n            <ownerId>123456789012</ownerId>\n            <volumeSize>8</volumeSize>\n            <description/>\n        </item>\n        <item>\n            <snapshotId>snap-d63550be</snapshotId>\n            <volumeId>vol-4d1b5c26</volumeId>\n            <status>completed</status>\n            <startTime>2012-02-23T22:26:43.000Z</startTime>\n            <progress>100%</progress>\n            <ownerId>123456789012</ownerId>\n            <volumeSize>1</volumeSize>\n            <description>pvlinux-debian-6.0-x86_0.7.0.62_120223_172028</description>\n        </item>\n    </snapshotSet>\n</DescribeSnapshotsResponse>\n', OperationModel(name=DescribeSnapshots), {'ResponseMetadata': {'RequestId': '928b3baf-8729-4285-a244-1c47c8114916'}, 'Snapshots': [{'Description': 'Proxy Sniffer Data Disk NTFS 10 GB', 'VolumeId': 'vol-ee102886', 'State': 'completed', 'VolumeSize': 10, 'Progress': '100%', 'StartTime': '2011-12-27T17:20:21.000Z', 'SnapshotId': 'snap-b253e6da', 'OwnerId': '123456789012'}, {'Description': '', 'VolumeId': 'vol-213dd14a', 'State': 'completed', 'VolumeSize': 90, 'Progress': '100%', 'StartTime': '2012-01-08T00:41:31.000Z', 'SnapshotId': 'snap-b6bf0cde', 'OwnerId': '123456789012'}, {'Description': '', 'VolumeId': 'vol-4ab8dc22', 'State': 'completed', 'VolumeSize': 8, 'Progress': '100%', 'StartTime': '2012-02-22T17:25:10.000Z', 'SnapshotId': 'snap-1e099276', 'OwnerId': '123456789012'}, {'Description': 'pvlinux-debian-6.0-x86_0.7.0.62_120223_172028', 'VolumeId': 'vol-4d1b5c26', 'State': 'completed', 'VolumeSize': 1, 'Progress': '100%', 'StartTime': '2012-02-23T22:26:43.000Z', 'SnapshotId': 'snap-d63550be', 'OwnerId': '123456789012'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-spot-instance-requests.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeSpotInstanceRequestsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <spotInstanceRequestSet>\n    <item>\n       <spotInstanceRequestId>sir-1a2b3c4d</spotInstanceRequestId>\n       <spotPrice>0.09</spotPrice>\n       <type>one-time</type>\n       <state>active</state>\n       <status>\n          <code>fulfilled</code>\n          <updateTime>YYYY-MM-DDTHH:MM:SS.000Z</updateTime>\n          <message>Your Spot request is fulfilled.</message>\n       </status>\n       <launchSpecification>\n          <imageId>ami-1a2b3c4d</imageId>\n          <keyName>gsg-keypair</keyName>\n          <groupSet>\n             <item>\n                <groupId>sg-1a2b3c4d</groupId>\n                <groupName>default</groupName>\n             </item>\n          </groupSet>\n          <instanceType>m1.small</instanceType>\n          <monitoring>\n             <enabled>false</enabled>\n          </monitoring>\n          <ebsOptimized>false</ebsOptimized>\n       </launchSpecification>\n       <instanceId>i-1a2b3c4d</instanceId>\n       <createTime>YYYY-MM-DDTHH:MM:SS.000Z</createTime>\n       <productDescription>Linux/UNIX</productDescription>\n       <launchedAvailabilityZone>us-east-1c</launchedAvailabilityZone>\n    </item>\n  </spotInstanceRequestSet>\n</DescribeSpotInstanceRequestsResponse>\n', OperationModel(name=DescribeSpotInstanceRequests), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'SpotInstanceRequests': [{'CreateTime': 'YYYY-MM-DDTHH:MM:SS.000Z', 'InstanceId': 'i-1a2b3c4d', 'LaunchSpecification': {'EbsOptimized': False, 'ImageId': 'ami-1a2b3c4d', 'InstanceType': 'm1.small', 'KeyName': 'gsg-keypair', 'Monitoring': {'Enabled': False}, 'SecurityGroups': [{'GroupId': 'sg-1a2b3c4d', 'GroupName': 'default'}]}, 'LaunchedAvailabilityZone': 'us-east-1c', 'ProductDescription': 'Linux/UNIX', 'SpotInstanceRequestId': 'sir-1a2b3c4d', 'SpotPrice': '0.09', 'State': 'active', 'Status': {'Code': 'fulfilled', 'Message': 'Your Spot request is fulfilled.', 'UpdateTime': 'YYYY-MM-DDTHH:MM:SS.000Z'}, 'Type': 'one-time'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-spot-price-history.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeSpotPriceHistoryResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>a71a795c-276d-4c9b-8212-b9302ccce158</requestId>\n    <spotPriceHistorySet>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T13:35:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-20T13:31:56.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T13:30:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T13:24:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T13:15:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T13:09:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T13:04:02.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T12:51:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T12:43:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-20T12:35:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T12:34:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-20T12:30:33.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T12:28:20.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-20T12:24:30.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T12:19:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T12:11:33.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T12:02:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T11:56:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T11:50:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T11:47:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T11:43:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T11:22:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T11:04:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T10:58:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-20T10:50:44.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T10:41:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T10:36:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T10:15:32.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-20T10:11:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T10:02:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T10:00:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T09:56:51.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-20T09:39:59.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-20T09:09:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T09:05:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-20T09:00:34.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T09:00:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T08:38:19.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-20T07:51:46.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-20T07:47:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T07:38:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.017000</spotPrice>\n            <timestamp>2013-03-20T07:33:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-20T07:18:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-20T07:16:43.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T06:42:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T06:42:47.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T06:42:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T06:42:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-20T06:33:48.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T06:30:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-20T06:24:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-20T06:24:45.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-20T06:24:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-20T06:24:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-20T06:23:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-20T06:23:00.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-20T06:23:00.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-20T06:22:56.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-20T06:22:56.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-20T06:22:56.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-20T06:20:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-20T06:20:34.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-20T06:20:34.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T06:18:59.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-20T06:18:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-20T06:18:54.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-20T06:18:54.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-20T06:18:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-20T06:18:45.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-20T06:18:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-20T06:15:26.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-20T06:14:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-20T06:11:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-20T06:07:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-20T06:07:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-20T06:07:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-20T06:06:16.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-20T06:06:16.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-20T06:06:16.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T06:04:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-20T05:58:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-20T05:58:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-20T05:56:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-20T05:56:57.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-20T05:56:57.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-20T05:56:56.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-20T05:56:56.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-20T05:56:56.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-20T05:51:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-20T05:51:10.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-20T05:51:10.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-20T05:51:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-20T05:51:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-20T05:51:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T05:36:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T05:36:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T05:34:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-20T05:34:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T05:32:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T05:32:22.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T05:32:22.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-20T05:28:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T05:14:00.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T04:51:53.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T04:42:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-20T04:38:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T04:35:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-20T04:27:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>1.122000</spotPrice>\n            <timestamp>2013-03-20T04:12:49.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.019000</spotPrice>\n            <timestamp>2013-03-20T04:10:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T04:07:17.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.016000</spotPrice>\n            <timestamp>2013-03-20T04:03:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>1.122000</spotPrice>\n            <timestamp>2013-03-20T04:01:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T03:56:00.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-20T03:50:28.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T03:50:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>1.122000</spotPrice>\n            <timestamp>2013-03-20T03:50:28.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T03:44:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-20T03:40:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-20T03:40:53.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-20T03:40:53.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-20T03:37:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-20T03:33:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T03:31:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-20T03:30:01.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T02:49:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-20T02:47:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-20T02:47:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-20T02:44:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-20T02:44:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-20T02:44:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:42:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:42:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-20T02:42:05.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T02:40:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:39:59.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:39:59.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:39:59.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.016000</spotPrice>\n            <timestamp>2013-03-20T02:36:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T02:32:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-20T02:31:12.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T02:30:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T02:30:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T02:30:41.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-20T02:30:41.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:29:14.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:29:14.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:29:14.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-20T02:29:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-20T02:29:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-20T02:29:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-20T02:29:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-20T02:29:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:29:04.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:29:04.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:29:04.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-20T02:29:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-20T02:29:01.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-20T02:29:01.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-20T02:28:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-20T02:28:55.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-20T02:28:55.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:28:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:28:42.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:28:42.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-20T02:27:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-20T02:27:31.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-20T02:27:31.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-20T02:27:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-20T02:27:26.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-20T02:27:26.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-20T02:26:51.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-20T02:26:51.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-20T02:26:51.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-20T02:25:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-20T02:25:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-20T02:25:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-20T02:25:21.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-20T02:25:21.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-20T02:25:21.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:23:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:23:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:23:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-20T02:23:21.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-20T02:23:21.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-20T02:23:21.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-20T02:21:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-20T02:21:55.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-20T02:21:55.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-20T02:21:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-20T02:21:53.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:21:50.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:21:50.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:21:50.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-20T02:21:46.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-20T02:21:46.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-20T02:21:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-20T02:21:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:21:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:21:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T02:21:39.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-20T02:21:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-20T02:21:38.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-20T02:21:38.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:21:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:21:34.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:21:34.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:21:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:21:22.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-20T02:21:22.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-20T02:21:20.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-20T02:21:20.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-20T02:21:19.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-20T02:21:19.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:21:19.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-20T02:21:18.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-20T02:21:18.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-20T02:21:18.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-20T02:21:18.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-20T02:21:18.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-20T02:21:18.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-20T02:20:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-20T02:20:03.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-20T02:20:03.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:20:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-20T02:19:59.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-20T02:19:59.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-20T02:19:58.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:19:58.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T02:19:58.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-20T02:19:56.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-20T02:19:56.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-20T02:19:56.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:19:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:19:47.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T02:19:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-20T02:16:06.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T01:53:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T01:44:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T01:39:07.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-20T01:35:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-20T01:35:30.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T01:35:18.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T01:33:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T01:18:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T01:12:59.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T00:43:22.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-20T00:41:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-20T00:34:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-20T00:27:06.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T00:24:56.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-20T00:23:19.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T00:17:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-20T00:12:04.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-20T00:06:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-20T00:00:33.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-19T23:47:57.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T23:46:09.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-19T23:40:40.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T23:35:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.015000</spotPrice>\n            <timestamp>2013-03-19T23:29:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-19T23:24:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T23:20:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T23:13:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T23:09:50.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T23:07:41.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T23:04:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.162000</spotPrice>\n            <timestamp>2013-03-19T23:02:07.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-19T23:00:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T22:47:19.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T22:45:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T22:41:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T22:37:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T22:32:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-19T22:32:36.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.820000</spotPrice>\n            <timestamp>2013-03-19T22:32:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T22:30:49.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T22:27:04.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T22:27:04.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T22:21:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T22:14:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T22:05:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T21:59:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-19T21:57:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-19T21:56:06.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-19T21:55:57.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T21:52:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T21:46:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-19T21:39:24.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T21:37:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-19T21:35:48.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T21:31:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T21:24:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T21:24:28.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-19T21:17:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-19T21:17:27.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-19T21:17:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-19T21:17:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-19T21:17:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-19T21:17:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-19T21:17:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-19T21:17:09.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-19T21:17:09.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-19T21:12:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-19T21:12:01.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-19T21:11:58.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-19T21:09:58.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T21:01:06.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.162000</spotPrice>\n            <timestamp>2013-03-19T21:01:06.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T20:55:41.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-19T20:50:29.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T20:46:46.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T20:39:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.240000</spotPrice>\n            <timestamp>2013-03-19T20:35:50.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T20:28:21.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.990000</spotPrice>\n            <timestamp>2013-03-19T20:24:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T20:19:33.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T20:19:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.100000</spotPrice>\n            <timestamp>2013-03-19T20:13:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.240000</spotPrice>\n            <timestamp>2013-03-19T20:08:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T19:58:59.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-19T19:58:57.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-19T19:58:57.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T19:41:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-19T19:38:50.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.240000</spotPrice>\n            <timestamp>2013-03-19T19:35:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-19T19:35:07.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T19:22:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T19:20:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.240000</spotPrice>\n            <timestamp>2013-03-19T19:13:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.100000</spotPrice>\n            <timestamp>2013-03-19T19:08:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T19:06:04.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-19T19:04:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-19T19:04:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-19T19:04:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.990000</spotPrice>\n            <timestamp>2013-03-19T19:02:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T19:00:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.900000</spotPrice>\n            <timestamp>2013-03-19T18:57:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T18:51:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.900000</spotPrice>\n            <timestamp>2013-03-19T18:44:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.240000</spotPrice>\n            <timestamp>2013-03-19T18:38:50.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.900000</spotPrice>\n            <timestamp>2013-03-19T18:33:23.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T18:27:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-19T18:24:04.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T18:20:16.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-19T18:11:12.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T17:49:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T17:45:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T17:43:58.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T15:43:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.018000</spotPrice>\n            <timestamp>2013-03-19T15:38:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T15:33:02.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.018000</spotPrice>\n            <timestamp>2013-03-19T15:27:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-19T15:03:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T13:56:36.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T13:54:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.015000</spotPrice>\n            <timestamp>2013-03-19T13:49:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-19T13:42:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-19T13:31:14.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T12:35:09.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-19T12:30:05.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T12:24:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T11:46:06.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T11:22:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-19T10:50:06.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T10:10:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T09:59:48.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T09:16:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T09:09:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T09:00:12.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T08:54:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-19T08:49:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T08:43:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-19T08:38:16.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T07:51:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-19T07:47:21.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-19T07:17:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-19T07:15:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T06:51:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T06:46:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T06:42:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T06:42:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T06:42:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T06:42:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T06:39:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T06:32:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-19T06:23:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-19T06:23:10.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-19T06:23:10.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-19T06:21:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-19T06:21:27.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-19T06:21:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-19T06:21:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-19T06:21:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-19T06:21:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-19T06:19:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-19T06:19:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-19T06:19:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-19T06:17:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-19T06:17:32.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-19T06:17:32.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-19T06:17:23.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-19T06:17:23.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-19T06:17:23.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-19T06:14:07.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T06:14:01.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-19T06:13:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-19T06:06:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-19T06:06:38.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-19T06:06:38.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-19T06:05:20.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-19T06:05:20.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-19T06:05:20.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-19T06:03:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-19T05:57:31.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-19T05:56:18.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-19T05:56:18.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-19T05:56:18.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-19T05:56:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-19T05:56:17.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-19T05:56:17.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-19T05:50:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-19T05:50:38.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-19T05:50:38.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-19T05:50:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-19T05:50:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-19T05:50:37.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T05:36:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T05:36:09.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T05:32:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T05:30:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T05:30:38.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T05:30:38.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T05:27:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T05:21:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T05:12:50.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T05:05:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T05:05:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T05:00:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.015000</spotPrice>\n            <timestamp>2013-03-19T05:00:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T04:47:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-19T04:38:17.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T04:17:07.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-19T04:00:44.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-19T03:49:54.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-19T03:40:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-19T03:40:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-19T03:40:40.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T03:35:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T03:35:36.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-19T03:33:49.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T03:30:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-19T03:29:54.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.031000</spotPrice>\n            <timestamp>2013-03-19T03:14:01.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T03:05:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T02:59:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.500000</spotPrice>\n            <timestamp>2013-03-19T02:52:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.100000</spotPrice>\n            <timestamp>2013-03-19T02:52:12.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.460000</spotPrice>\n            <timestamp>2013-03-19T02:47:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-19T02:47:03.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-19T02:47:03.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-19T02:43:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-19T02:43:44.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-19T02:43:44.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:41:49.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:41:49.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T02:41:40.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.700000</spotPrice>\n            <timestamp>2013-03-19T02:41:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.071000</spotPrice>\n            <timestamp>2013-03-19T02:41:40.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T02:39:47.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:39:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:39:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:39:37.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-19T02:31:04.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T02:30:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T02:30:36.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-19T02:30:36.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:29:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:29:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:29:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-19T02:27:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-19T02:27:22.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-19T02:27:22.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-19T02:27:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-19T02:27:17.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:27:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:27:15.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:27:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-19T02:27:14.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-19T02:27:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-19T02:27:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-19T02:27:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-19T02:27:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-19T02:27:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:26:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:26:54.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:26:54.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T02:25:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T02:25:44.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-19T02:25:44.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-19T02:25:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-19T02:25:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-19T02:25:39.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-19T02:25:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-19T02:25:05.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-19T02:25:05.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-19T02:23:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-19T02:23:41.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-19T02:23:41.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-19T02:23:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-19T02:23:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-19T02:23:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T02:23:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:21:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:21:42.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:21:42.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-19T02:21:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-19T02:21:41.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-19T02:21:41.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-19T02:20:14.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-19T02:20:14.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-19T02:20:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-19T02:20:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-19T02:20:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:20:12.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:20:12.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:20:12.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-19T02:20:07.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-19T02:20:07.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-19T02:20:07.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-19T02:20:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:20:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:20:00.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T02:20:00.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-19T02:19:58.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-19T02:19:58.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-19T02:19:58.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:19:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:19:55.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:19:55.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:19:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:19:45.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-19T02:19:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-19T02:19:42.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-19T02:19:42.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-19T02:19:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-19T02:19:42.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-19T02:19:42.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-19T02:19:40.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-19T02:19:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:19:40.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-19T02:19:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-19T02:19:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-19T02:19:39.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-19T02:18:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-19T02:18:27.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-19T02:18:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:18:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:18:24.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T02:18:24.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-19T02:18:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-19T02:18:22.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-19T02:18:22.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-19T02:18:19.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-19T02:18:19.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-19T02:18:19.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:18:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:18:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T02:18:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-19T02:18:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T02:11:07.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T02:05:49.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-19T01:35:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-19T01:35:17.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T01:35:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T01:26:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T01:19:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T01:13:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T01:08:16.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T00:59:14.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T00:52:06.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-19T00:50:21.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T00:46:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-19T00:41:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-19T00:25:41.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-19T00:22:02.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-19T00:16:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-19T00:11:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-19T00:00:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T23:55:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T23:49:46.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-18T23:46:14.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T23:40:51.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T23:40:51.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T23:35:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-18T23:33:48.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T23:30:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T23:24:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-18T23:23:21.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T23:17:46.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-18T23:09:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T23:08:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T23:07:03.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-18T23:03:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-18T22:59:58.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T22:58:00.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T22:56:15.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T22:48:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T22:45:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T22:43:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T22:41:54.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-18T22:36:36.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T22:33:05.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T22:29:33.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T22:09:56.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T22:04:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T21:59:18.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-18T21:57:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-18T21:56:00.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-18T21:55:53.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T21:53:58.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T21:48:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T21:43:18.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T21:41:30.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-18T21:38:00.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-18T21:34:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.016000</spotPrice>\n            <timestamp>2013-03-18T21:32:30.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T21:27:12.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T21:21:50.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-18T21:16:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-18T21:16:32.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-18T21:16:32.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T21:16:23.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-18T21:16:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-18T21:16:15.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-18T21:16:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-18T21:16:14.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-18T21:16:14.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-18T21:16:14.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-18T21:11:14.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-18T21:11:14.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-18T21:11:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-18T21:09:10.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T21:07:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T21:02:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T20:55:10.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-18T20:50:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-18T20:18:34.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T19:58:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-18T19:58:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-18T19:58:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T19:53:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-18T19:46:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T19:39:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-18T19:37:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-18T19:34:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-18T19:33:55.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T19:25:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T19:22:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-18T19:20:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-18T19:06:00.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-18T19:04:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-18T19:02:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-18T19:02:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T18:58:59.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-18T18:23:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T18:20:00.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-18T18:09:23.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T17:44:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T17:42:58.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T16:25:12.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T16:12:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T16:07:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T16:05:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T16:05:51.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T16:00:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.100000</spotPrice>\n            <timestamp>2013-03-18T16:00:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.500000</spotPrice>\n            <timestamp>2013-03-18T15:58:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.018000</spotPrice>\n            <timestamp>2013-03-18T15:55:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-18T15:53:16.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T15:39:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.018000</spotPrice>\n            <timestamp>2013-03-18T15:33:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T15:26:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T15:21:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T15:16:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T15:10:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T15:05:40.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T15:00:21.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T14:55:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T14:36:42.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T14:36:42.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T14:22:59.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T14:17:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T14:12:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T14:07:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T14:01:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T13:56:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T13:51:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T13:46:07.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T13:37:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-18T13:30:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T12:50:04.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T12:43:06.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T12:36:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-18T12:34:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-18T12:29:21.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T12:27:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-18T12:23:44.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T11:57:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T11:48:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T11:45:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T11:40:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T11:33:02.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T11:22:31.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-18T10:49:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-18T10:09:02.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T10:03:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T09:58:49.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T09:58:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-18T09:15:04.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-18T09:08:06.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-18T08:59:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T08:22:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T08:14:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T08:08:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-18T08:03:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T07:58:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.016000</spotPrice>\n            <timestamp>2013-03-18T07:53:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-18T07:49:34.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-18T07:45:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T07:40:56.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.016000</spotPrice>\n            <timestamp>2013-03-18T07:35:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.042000</spotPrice>\n            <timestamp>2013-03-18T07:16:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-18T07:15:04.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T06:43:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T06:41:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T06:41:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T06:41:39.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T06:41:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T06:38:26.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-18T06:29:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-18T06:21:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-18T06:21:27.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-18T06:21:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-18T06:21:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-18T06:21:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-18T06:21:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-18T06:21:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-18T06:21:24.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-18T06:21:24.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-18T06:17:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-18T06:17:30.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-18T06:17:30.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-18T06:15:57.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-18T06:15:57.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-18T06:15:57.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-18T06:15:48.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-18T06:15:48.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-18T06:15:48.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-18T06:12:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-18T06:12:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-18T06:05:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-18T06:05:30.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.439000</spotPrice>\n            <timestamp>2013-03-18T06:05:30.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-18T06:04:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-18T06:04:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.220000</spotPrice>\n            <timestamp>2013-03-18T06:04:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-18T05:56:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-18T05:55:33.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-18T05:55:33.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.192000</spotPrice>\n            <timestamp>2013-03-18T05:55:33.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-18T05:55:33.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-18T05:55:33.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.183000</spotPrice>\n            <timestamp>2013-03-18T05:55:33.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-18T05:50:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-18T05:50:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.101000</spotPrice>\n            <timestamp>2013-03-18T05:50:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-18T05:50:07.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-18T05:50:07.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m3.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.092000</spotPrice>\n            <timestamp>2013-03-18T05:50:07.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T05:34:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T05:34:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-18T05:30:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T05:29:08.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T05:29:08.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T05:29:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T05:20:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-18T05:15:23.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T05:11:46.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T04:57:53.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-18T04:52:41.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-18T04:36:50.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-18T03:48:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-18T03:39:45.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-18T03:39:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-18T03:29:33.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T03:15:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T03:05:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-18T03:00:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-18T02:43:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-18T02:43:15.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-18T02:43:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:41:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:41:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T02:39:33.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:39:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:39:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:39:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.025000</spotPrice>\n            <timestamp>2013-03-18T02:37:52.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-18T02:29:26.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T02:29:02.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T02:29:02.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-18T02:29:02.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:27:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:27:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:27:39.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-18T02:25:51.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-18T02:25:51.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-18T02:25:51.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-18T02:25:47.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-18T02:25:47.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:25:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:25:44.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:25:44.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-18T02:25:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-18T02:25:42.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-18T02:25:42.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-18T02:25:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-18T02:25:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.050000</spotPrice>\n            <timestamp>2013-03-18T02:25:37.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:25:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:25:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:25:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-18T02:24:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-18T02:24:15.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-18T02:24:15.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-18T02:24:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-18T02:24:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-18T02:24:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-18T02:23:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-18T02:23:39.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.038000</spotPrice>\n            <timestamp>2013-03-18T02:23:39.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-18T02:22:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-18T02:22:17.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-18T02:22:17.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-18T02:22:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-18T02:22:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-18T02:22:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:20:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:20:25.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:20:25.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-18T02:20:24.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-18T02:20:24.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-18T02:20:24.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-18T02:18:59.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-18T02:18:59.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.030000</spotPrice>\n            <timestamp>2013-03-18T02:18:59.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-18T02:18:58.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-18T02:18:58.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:18:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:18:55.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:18:55.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-18T02:18:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-18T02:18:52.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.234000</spotPrice>\n            <timestamp>2013-03-18T02:18:52.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-18T02:18:48.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:18:46.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:18:46.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T02:18:46.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-18T02:18:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-18T02:18:45.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-18T02:18:45.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:18:43.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:18:43.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:18:43.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:18:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:18:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.122000</spotPrice>\n            <timestamp>2013-03-18T02:18:35.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T02:18:32.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T02:18:32.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T02:18:32.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:18:30.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-18T02:18:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-18T02:18:30.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-18T02:18:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-18T02:18:30.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.067000</spotPrice>\n            <timestamp>2013-03-18T02:18:30.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-18T02:18:29.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-18T02:18:29.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>SUSE Linux (Amazon VPC)</productDescription>\n            <spotPrice>0.090000</spotPrice>\n            <timestamp>2013-03-18T02:18:29.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-18T02:17:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-18T02:17:17.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-18T02:17:17.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:17:16.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:17:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-18T02:17:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-18T02:17:13.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-18T02:17:13.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-18T02:17:13.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-18T02:17:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-18T02:17:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-18T02:17:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:17:02.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:17:02.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T02:17:02.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-18T01:35:22.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-18T01:35:14.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-18T01:35:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-18T01:28:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-18T00:40:51.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-18T00:23:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-18T00:20:23.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T23:59:22.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-17T23:59:02.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-17T23:45:21.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-17T23:23:06.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-17T23:07:43.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-17T23:05:41.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-17T23:02:30.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.211000</spotPrice>\n            <timestamp>2013-03-17T22:58:48.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T22:49:51.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-17T22:48:01.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-17T22:44:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-17T22:44:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-17T22:43:03.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T22:39:28.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-17T22:34:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T22:32:32.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-17T22:29:07.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T22:28:58.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-17T22:27:17.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-17T22:23:49.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T22:15:09.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.020000</spotPrice>\n            <timestamp>2013-03-17T22:09:55.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.083000</spotPrice>\n            <timestamp>2013-03-17T21:56:05.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-17T21:54:37.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-17T21:54:29.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T21:50:54.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T21:45:44.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-17T21:37:09.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-17T21:33:44.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T21:33:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T21:28:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-17T21:16:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-17T21:16:27.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-17T21:16:27.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-17T21:16:18.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-17T21:16:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-17T21:16:11.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>SUSE Linux</productDescription>\n            <spotPrice>0.351000</spotPrice>\n            <timestamp>2013-03-17T21:16:11.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-17T21:16:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-17T21:16:10.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cr1.8xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.343000</spotPrice>\n            <timestamp>2013-03-17T21:16:10.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-17T21:09:40.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.253000</spotPrice>\n            <timestamp>2013-03-17T21:09:40.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-17T21:09:38.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-17T21:07:41.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T21:00:58.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T20:54:10.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.021000</spotPrice>\n            <timestamp>2013-03-17T20:54:10.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.028000</spotPrice>\n            <timestamp>2013-03-17T20:49:16.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T20:35:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T20:28:22.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.320000</spotPrice>\n            <timestamp>2013-03-17T20:18:16.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T20:02:36.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T19:57:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.2xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.112000</spotPrice>\n            <timestamp>2013-03-17T19:57:21.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-17T19:57:19.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-17T19:57:19.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T19:48:52.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.013000</spotPrice>\n            <timestamp>2013-03-17T19:43:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.053000</spotPrice>\n            <timestamp>2013-03-17T19:36:42.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>c1.medium</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.080000</spotPrice>\n            <timestamp>2013-03-17T19:33:09.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T19:31:45.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T19:26:35.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.224000</spotPrice>\n            <timestamp>2013-03-17T19:21:35.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.004000</spotPrice>\n            <timestamp>2013-03-17T19:05:52.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows (Amazon VPC)</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-17T19:04:33.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>cc2.8xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.456000</spotPrice>\n            <timestamp>2013-03-17T19:02:39.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T19:02:33.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.026000</spotPrice>\n            <timestamp>2013-03-17T19:02:23.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T18:57:23.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX (Amazon VPC)</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T18:57:18.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T18:50:37.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T18:43:49.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.4xlarge</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.448000</spotPrice>\n            <timestamp>2013-03-17T18:23:08.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-17T18:19:34.000Z</timestamp>\n            <availabilityZone>us-west-2c</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T18:18:00.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.014000</spotPrice>\n            <timestamp>2013-03-17T18:12:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.large</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.106000</spotPrice>\n            <timestamp>2013-03-17T18:09:17.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>t1.micro</instanceType>\n            <productDescription>Windows</productDescription>\n            <spotPrice>0.009000</spotPrice>\n            <timestamp>2013-03-17T17:43:27.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T16:53:53.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T16:45:25.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T16:40:15.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T16:35:11.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T15:23:38.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T15:18:34.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.010000</spotPrice>\n            <timestamp>2013-03-17T15:13:27.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m1.small</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.012000</spotPrice>\n            <timestamp>2013-03-17T15:03:14.000Z</timestamp>\n            <availabilityZone>us-west-2b</availabilityZone>\n        </item>\n        <item>\n            <instanceType>m2.xlarge</instanceType>\n            <productDescription>Linux/UNIX</productDescription>\n            <spotPrice>0.056000</spotPrice>\n            <timestamp>2013-03-17T14:35:51.000Z</timestamp>\n            <availabilityZone>us-west-2a</availabilityZone>\n        </item>\n    </spotPriceHistorySet>\n    <nextToken>Qj9iZzP9N1Vh5jjNyad6X73sizWaPtVQ6328oKe9/GbmNSbOFX1TIhQaz5vok0nu</nextToken>\n</DescribeSpotPriceHistoryResponse>', OperationModel(name=DescribeSpotPriceHistory), {'ResponseMetadata': {'RequestId': 'a71a795c-276d-4c9b-8212-b9302ccce158'}, 'NextToken': 'Qj9iZzP9N1Vh5jjNyad6X73sizWaPtVQ6328oKe9/GbmNSbOFX1TIhQaz5vok0nu', 'SpotPriceHistory': [{'Timestamp': '2013-03-20T13:35:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T13:31:56.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T13:30:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T13:24:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T13:15:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T13:09:34.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T13:04:02.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:51:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:43:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:35:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T12:34:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:30:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T12:28:20.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:24:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T12:19:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:11:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T12:02:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T11:56:27.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T11:50:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T11:47:00.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T11:43:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T11:22:57.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T11:04:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T10:58:24.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T10:50:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T10:41:38.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T10:36:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T10:15:32.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T10:11:47.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T10:02:26.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T10:00:46.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T09:56:51.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T09:39:59.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T09:09:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T09:05:57.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T09:00:34.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T09:00:26.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T08:38:19.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T07:51:46.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T07:47:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T07:38:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T07:33:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.017000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T07:18:13.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T07:16:43.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:42:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:42:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:42:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:42:44.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:33:48.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:30:00.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:24:45.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:24:45.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:24:45.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:24:32.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:23:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:23:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:23:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:22:56.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:22:56.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:22:56.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:20:34.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:20:34.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:20:34.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:18:59.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:18:54.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:18:54.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:18:54.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:18:45.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:18:45.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:18:45.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:15:26.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:14:57.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:11:32.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:07:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:07:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:07:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:06:16.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T06:06:16.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T06:06:16.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T06:04:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:58:27.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:58:11.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:56:57.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:56:57.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T05:56:57.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:56:56.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:56:56.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T05:56:56.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:51:10.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:51:10.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T05:51:10.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:51:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:51:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T05:51:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:36:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:36:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:34:26.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:34:15.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:32:22.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:32:22.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T05:32:22.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T05:28:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T05:14:00.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T04:51:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T04:42:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T04:38:27.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T04:35:00.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T04:27:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T04:12:49.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '1.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T04:10:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.019000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T04:07:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T04:03:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.016000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T04:01:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '1.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T03:56:00.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T03:50:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T03:50:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T03:50:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '1.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T03:44:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T03:40:54.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T03:40:53.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T03:40:53.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T03:37:27.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T03:33:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T03:31:57.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T03:30:01.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:49:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:47:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:47:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:44:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:44:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:44:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:42:15.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:42:15.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:42:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:40:08.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:39:59.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:39:59.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:39:59.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:36:24.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.016000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:32:45.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:31:12.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:30:45.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:30:41.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:30:41.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:30:41.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:29:14.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:29:14.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:29:14.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:29:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:29:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:29:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:29:08.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:29:08.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:29:04.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:29:04.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:29:04.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:29:01.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:29:01.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:29:01.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:28:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:28:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:28:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:28:42.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:28:42.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:28:42.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:27:31.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:27:31.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:27:31.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:27:26.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:27:26.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:27:26.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:26:51.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:26:51.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:26:51.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:25:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:25:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:25:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:25:21.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:25:21.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:25:21.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:23:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:23:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:23:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:23:21.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:23:21.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:23:21.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:53.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:53.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:50.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:50.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:50.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:46.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:46.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:46.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:42.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:38.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:38.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:38.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:34.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:34.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:34.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:22.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:22.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:22.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:20.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:20.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:19.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:19.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:19.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:18.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:18.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:18.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:21:18.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:21:18.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:21:18.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:20:03.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:20:03.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:20:03.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:20:01.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:19:59.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:19:59.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:19:58.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:19:58.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:19:58.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:19:56.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:19:56.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:19:56.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:19:47.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T02:19:47.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T02:19:47.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T02:16:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T01:53:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T01:44:42.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T01:39:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T01:35:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T01:35:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T01:35:18.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T01:33:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T01:18:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T01:12:59.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T00:43:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T00:41:11.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T00:34:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-20T00:27:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T00:24:56.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T00:23:19.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-20T00:17:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T00:12:04.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T00:06:26.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-20T00:00:33.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T23:47:57.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T23:46:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T23:40:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T23:35:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T23:29:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.015000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T23:24:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T23:20:29.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T23:13:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T23:09:50.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T23:07:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T23:04:17.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T23:02:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.162000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T23:00:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T22:47:19.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:45:35.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:41:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T22:37:57.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:32:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:32:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T22:32:29.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.820000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:30:49.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T22:27:04.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:27:04.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T22:21:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:14:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T22:05:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:59:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:57:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:56:06.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:55:57.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:52:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:46:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:39:24.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T21:37:31.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:35:48.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T21:31:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:24:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:24:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T21:17:27.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:17:27.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:17:27.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T21:17:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:17:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:17:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T21:17:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:17:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:17:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T21:12:01.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:12:01.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:11:58.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:09:58.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T21:01:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T21:01:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.162000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T20:55:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T20:50:29.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T20:46:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:39:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:35:50.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.240000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:28:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:24:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.990000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:19:33.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T20:19:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:13:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.100000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T20:08:26.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.240000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:58:59.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T19:58:57.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T19:58:57.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T19:41:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:38:50.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:35:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.240000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:35:07.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T19:22:39.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T19:20:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:13:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.240000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:08:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.100000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:06:04.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T19:04:42.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:04:34.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:04:17.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:02:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.990000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T19:00:35.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T18:57:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.900000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T18:51:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T18:44:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.900000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T18:38:50.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.240000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T18:33:23.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.900000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T18:27:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T18:24:04.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T18:20:16.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T18:11:12.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T17:49:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T17:45:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T17:43:58.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T15:43:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T15:38:27.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.018000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T15:33:02.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T15:27:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.018000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T15:03:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T13:56:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T13:54:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T13:49:24.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.015000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T13:42:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T13:31:14.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T12:35:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T12:30:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T12:24:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T11:46:06.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T11:22:57.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T10:50:06.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T10:10:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T09:59:48.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T09:16:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T09:09:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T09:00:12.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T08:54:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T08:49:00.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T08:43:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T08:38:16.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T07:51:13.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T07:47:21.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T07:17:03.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T07:15:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:51:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:46:31.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:42:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:42:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:42:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:42:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:39:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:32:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:23:10.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:23:10.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:23:10.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:21:28.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:21:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:21:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:21:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:21:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:21:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:19:08.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:19:08.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:19:08.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:17:32.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:17:32.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:17:32.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:17:23.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:17:23.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:17:23.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:14:07.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:14:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:13:41.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:06:38.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:06:38.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:06:38.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:05:20.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T06:05:20.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T06:05:20.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T06:03:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:57:31.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:56:18.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:56:18.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T05:56:18.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:56:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:56:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T05:56:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:50:38.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:50:38.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T05:50:38.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:50:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:50:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T05:50:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:36:09.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:36:09.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:32:29.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:30:38.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:30:38.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T05:30:38.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T05:27:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:21:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:12:50.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T05:05:42.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:05:34.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:00:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T05:00:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.015000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T04:47:29.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T04:38:17.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T04:17:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T04:00:44.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T03:49:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T03:40:41.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T03:40:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T03:40:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T03:35:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T03:35:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T03:33:49.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T03:30:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T03:29:54.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T03:14:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.031000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T03:05:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:59:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:52:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.500000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:52:12.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.100000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:47:03.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.460000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:47:03.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:47:03.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:43:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:43:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:43:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:41:49.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:41:49.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:41:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:41:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.700000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:41:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.071000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:39:47.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:39:37.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:39:37.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:39:37.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:31:04.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:30:36.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:30:36.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:30:36.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:29:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:29:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:29:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:27:22.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:27:22.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:27:22.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:27:17.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:27:17.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:27:15.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:27:15.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:27:15.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:27:14.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:27:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:27:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:27:08.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:27:08.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:27:08.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:26:54.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:26:54.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:26:54.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:25:44.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:25:44.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:25:44.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:25:39.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:25:39.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:25:39.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:25:05.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:25:05.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:25:05.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:23:41.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:23:41.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:23:41.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:23:35.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:23:35.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:23:35.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:23:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:21:42.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:21:42.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:21:42.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:21:41.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:21:41.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:21:41.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:20:14.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:20:14.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:20:13.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:20:13.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:20:13.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:20:12.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:20:12.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:20:12.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:20:07.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:20:07.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:20:07.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:20:01.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:20:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:20:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:20:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:58.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:19:58.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:58.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:19:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:45.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:19:45.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:45.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:42.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:42.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:42.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:19:42.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:42.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:19:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:19:39.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:19:39.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:19:39.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:18:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:18:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:18:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:18:26.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:18:24.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:18:24.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:18:22.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:18:22.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:18:22.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:18:19.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:18:19.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:18:19.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:18:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:18:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T02:18:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T02:18:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:11:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T02:05:49.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T01:35:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T01:35:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T01:35:03.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T01:26:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T01:19:03.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T01:13:42.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T01:08:16.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T00:59:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T00:52:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T00:50:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T00:46:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T00:41:08.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-19T00:25:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T00:22:02.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-19T00:16:32.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T00:11:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-19T00:00:11.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T23:55:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:49:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:46:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T23:40:51.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:40:51.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T23:35:34.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:33:48.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T23:30:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:24:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:23:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:17:46.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:09:11.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T23:08:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T23:07:03.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T23:03:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T22:59:58.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T22:58:00.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T22:56:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T22:48:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T22:45:31.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T22:43:53.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T22:41:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T22:36:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T22:33:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T22:29:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T22:09:56.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T22:04:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:59:18.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:57:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:56:00.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:55:53.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:53:58.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:48:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:43:18.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:41:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:38:00.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:34:27.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:32:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.016000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:27:12.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:21:50.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:16:32.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:16:32.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:16:32.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:16:23.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:16:15.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:16:15.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:16:15.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:16:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:16:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:16:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T21:11:14.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:11:14.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:11:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:09:10.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T21:07:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T21:02:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T20:55:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T20:50:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T20:18:34.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T19:58:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T19:58:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T19:58:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T19:53:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:46:32.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:39:31.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:37:34.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:34:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:33:55.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T19:25:29.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:22:08.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T19:20:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:06:00.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T19:04:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:02:47.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T19:02:31.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T18:58:59.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T18:23:45.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T18:20:00.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T18:09:23.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T17:44:35.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T17:42:58.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T16:25:12.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T16:12:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T16:07:22.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T16:05:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T16:05:51.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T16:00:24.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T16:00:03.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.100000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:58:34.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.500000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:55:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.018000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:53:16.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T15:39:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:33:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.018000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:26:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:21:30.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:16:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:10:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:05:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T15:00:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T14:55:03.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T14:36:42.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T14:36:42.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T14:22:59.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T14:17:44.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T14:12:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T14:07:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T14:01:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T13:56:38.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T13:51:24.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T13:46:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T13:37:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T13:30:11.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T12:50:04.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T12:43:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T12:36:08.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T12:34:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T12:29:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T12:27:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T12:23:44.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T11:57:38.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T11:48:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T11:45:08.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T11:40:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T11:33:02.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T11:22:31.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T10:49:08.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T10:09:02.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T10:03:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T09:58:49.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T09:58:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T09:15:04.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T09:08:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T08:59:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T08:22:45.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T08:14:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T08:08:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T08:03:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:58:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:53:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.016000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:49:34.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T07:45:47.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:40:56.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:35:42.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.016000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:16:29.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.042000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T07:15:04.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:43:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:41:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:41:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:41:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:41:35.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:38:26.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:29:38.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:21:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:21:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:21:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:21:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:21:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:21:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:21:24.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:21:24.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:21:24.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:17:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:17:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:17:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:15:57.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:15:57.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:15:57.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:15:48.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:15:48.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:15:48.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:12:40.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:12:17.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:05:30.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:05:30.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:05:30.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.439000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T06:04:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T06:04:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T06:04:13.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.220000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:56:47.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:55:33.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:55:33.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T05:55:33.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.192000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:55:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:55:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T05:55:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.2xlarge', 'SpotPrice': '0.183000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:50:08.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:50:08.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T05:50:08.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.101000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:50:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:50:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T05:50:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm3.xlarge', 'SpotPrice': '0.092000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:34:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:34:27.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:30:54.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:29:08.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:29:08.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T05:29:08.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T05:20:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:15:23.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T05:11:46.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T04:57:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T04:52:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T04:36:50.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T03:48:40.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T03:39:45.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T03:39:45.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T03:29:33.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T03:15:47.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T03:05:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T03:00:13.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:43:15.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:43:15.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:43:15.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:41:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:41:25.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:39:33.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:39:25.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:39:25.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:39:25.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:37:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.025000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:29:26.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:29:02.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:29:02.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:29:02.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:27:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:27:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:27:39.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:25:51.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:25:51.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:25:51.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:25:47.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:25:47.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:25:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:25:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:25:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:25:42.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:25:42.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:25:42.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:25:37.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:25:37.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:25:37.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.050000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:25:25.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:25:25.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:25:25.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:24:15.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:24:15.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:24:15.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:24:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:24:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:24:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:23:39.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:23:39.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:23:39.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.038000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:22:17.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:22:17.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:22:17.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:22:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:22:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:22:13.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:20:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:20:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:20:25.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:20:24.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:20:24.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:20:24.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:59.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:59.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:59.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.030000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:58.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:58.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:55.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:52.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:52.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:52.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.234000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:48.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:46.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:46.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:46.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:45.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:45.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:45.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:43.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:43.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:43.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:35.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:35.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:35.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.122000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:32.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:32.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:32.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:30.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:30.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:30.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:30.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.067000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:18:29.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:18:29.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:18:29.000Z', 'ProductDescription': 'SUSE Linux (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.090000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:17:17.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:17:17.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:17:17.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:17:16.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:17:13.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:17:13.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:17:13.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:17:13.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:17:13.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:17:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:17:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:17:11.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T02:17:02.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T02:17:02.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T02:17:02.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'm1.small', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T01:35:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T01:35:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-18T01:35:01.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T01:28:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T00:40:51.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-18T00:23:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-18T00:20:23.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T23:59:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T23:59:02.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T23:45:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T23:23:06.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T23:07:43.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T23:05:41.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T23:02:30.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:58:48.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.211000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T22:49:51.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:48:01.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:44:39.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:44:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:43:03.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:39:28.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:34:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:32:32.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T22:29:07.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T22:28:58.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:27:17.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T22:23:49.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:15:09.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T22:09:55.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.020000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:56:05.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.xlarge', 'SpotPrice': '0.083000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:54:37.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:54:29.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:50:54.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:45:44.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:37:09.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T21:33:44.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T21:33:38.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:28:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:16:27.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:16:27.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:16:27.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T21:16:18.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T21:16:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:16:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:16:11.000Z', 'ProductDescription': 'SUSE Linux', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.351000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T21:16:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:16:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:16:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'cr1.8xlarge', 'SpotPrice': '0.343000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T21:09:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T21:09:40.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.253000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:09:38.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:07:41.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T21:00:58.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T20:54:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T20:54:10.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.medium', 'SpotPrice': '0.021000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T20:49:16.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'c1.medium', 'SpotPrice': '0.028000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T20:35:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T20:28:22.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T20:18:16.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.xlarge', 'SpotPrice': '0.320000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T20:02:36.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:57:27.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:57:21.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.2xlarge', 'SpotPrice': '0.112000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T19:57:19.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T19:57:19.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T19:48:52.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:43:45.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.013000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:36:42.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.medium', 'SpotPrice': '0.053000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:33:09.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'c1.medium', 'SpotPrice': '0.080000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T19:31:45.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:26:35.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:21:35.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.224000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T19:05:52.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 't1.micro', 'SpotPrice': '0.004000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T19:04:33.000Z', 'ProductDescription': 'Windows (Amazon VPC)', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:02:39.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'cc2.8xlarge', 'SpotPrice': '0.456000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:02:33.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T19:02:23.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.small', 'SpotPrice': '0.026000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T18:57:23.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T18:57:18.000Z', 'ProductDescription': 'Linux/UNIX (Amazon VPC)', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T18:50:37.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T18:43:49.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T18:23:08.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm2.4xlarge', 'SpotPrice': '0.448000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T18:19:34.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2c'}, {'Timestamp': '2013-03-17T18:18:00.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T18:12:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.014000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T18:09:17.000Z', 'ProductDescription': 'Windows', 'InstanceType': 'm1.large', 'SpotPrice': '0.106000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T17:43:27.000Z', 'ProductDescription': 'Windows', 'InstanceType': 't1.micro', 'SpotPrice': '0.009000', 'AvailabilityZone': 'us-west-2a'}, {'Timestamp': '2013-03-17T16:53:53.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T16:45:25.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T16:40:15.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T16:35:11.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T15:23:38.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T15:18:34.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T15:13:27.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.010000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T15:03:14.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm1.small', 'SpotPrice': '0.012000', 'AvailabilityZone': 'us-west-2b'}, {'Timestamp': '2013-03-17T14:35:51.000Z', 'ProductDescription': 'Linux/UNIX', 'InstanceType': 'm2.xlarge', 'SpotPrice': '0.056000', 'AvailabilityZone': 'us-west-2a'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-subnets.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeSubnetsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>00759e83-6720-41e3-bb47-7f2cad470782</requestId>\n    <subnetSet>\n        <item>\n            <subnetId>subnet-812910e8</subnetId>\n            <state>available</state>\n            <vpcId>vpc-8d2910e4</vpcId>\n            <cidrBlock>10.0.0.0/24</cidrBlock>\n            <availableIpAddressCount>251</availableIpAddressCount>\n            <availabilityZone>us-west-2a</availabilityZone>\n            <defaultForAz>false</defaultForAz>\n            <mapPublicIpOnLaunch>false</mapPublicIpOnLaunch>\n        </item>\n    </subnetSet>\n</DescribeSubnetsResponse>', OperationModel(name=DescribeSubnets), {'Subnets': [{'VpcId': 'vpc-8d2910e4', 'CidrBlock': '10.0.0.0/24', 'MapPublicIpOnLaunch': False, 'DefaultForAz': False, 'State': 'available', 'AvailabilityZone': 'us-west-2a', 'SubnetId': 'subnet-812910e8', 'AvailableIpAddressCount': 251}], 'ResponseMetadata': {'RequestId': '00759e83-6720-41e3-bb47-7f2cad470782'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-tags.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeTagsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>902d44a6-9456-4df3-9dcf-f2a26b77da7c</requestId>\n    <tagSet>\n        <item>\n            <resourceId>i-fde9cece</resourceId>\n            <resourceType>instance</resourceType>\n            <key>notebook</key>\n            <value/>\n        </item>\n    </tagSet>\n</DescribeTagsResponse>', OperationModel(name=DescribeTags), {'ResponseMetadata': {'RequestId': '902d44a6-9456-4df3-9dcf-f2a26b77da7c'}, 'Tags': [{'ResourceType': 'instance', 'ResourceId': 'i-fde9cece', 'Value': '', 'Key': 'notebook'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-volume-status.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeVolumeStatusResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>2e8b63e6-0016-4fa8-9cf0-49bcaa991c6b</requestId>\n    <volumeStatusSet>\n        <item>\n            <volumeId>vol-bc71579a</volumeId>\n            <availabilityZone>us-west-2a</availabilityZone>\n            <volumeStatus>\n                <status>ok</status>\n                <details>\n                    <item>\n                        <name>io-enabled</name>\n                        <status>passed</status>\n                    </item>\n                    <item>\n                        <name>io-performance</name>\n                        <status>not-applicable</status>\n                    </item>\n                </details>\n            </volumeStatus>\n            <eventsSet/>\n            <actionsSet/>\n        </item>\n        <item>\n            <volumeId>vol-a8d2e991</volumeId>\n            <availabilityZone>us-west-2b</availabilityZone>\n            <volumeStatus>\n                <status>ok</status>\n                <details>\n                    <item>\n                        <name>io-enabled</name>\n                        <status>passed</status>\n                    </item>\n                    <item>\n                        <name>io-performance</name>\n                        <status>not-applicable</status>\n                    </item>\n                </details>\n            </volumeStatus>\n            <eventsSet/>\n            <actionsSet/>\n        </item>\n    </volumeStatusSet>\n</DescribeVolumeStatusResponse>', OperationModel(name=DescribeVolumeStatus), {'ResponseMetadata': {'RequestId': '2e8b63e6-0016-4fa8-9cf0-49bcaa991c6b'}, 'VolumeStatuses': [{'VolumeStatus': {'Status': 'ok', 'Details': [{'Status': 'passed', 'Name': 'io-enabled'}, {'Status': 'not-applicable', 'Name': 'io-performance'}]}, 'AvailabilityZone': 'us-west-2a', 'VolumeId': 'vol-bc71579a', 'Actions': [], 'Events': []}, {'VolumeStatus': {'Status': 'ok', 'Details': [{'Status': 'passed', 'Name': 'io-enabled'}, {'Status': 'not-applicable', 'Name': 'io-performance'}]}, 'AvailabilityZone': 'us-west-2b', 'VolumeId': 'vol-a8d2e991', 'Actions': [], 'Events': []}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-volumes.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeVolumesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>93f17066-e6f7-4fc2-8308-2c49c99ab86b</requestId>\n    <volumeSet>\n        <item>\n            <volumeId>vol-bc71579a</volumeId>\n            <size>8</size>\n            <snapshotId>snap-2723f74f</snapshotId>\n            <availabilityZone>us-west-2a</availabilityZone>\n            <status>in-use</status>\n            <createTime>2012-10-16T20:00:16.000Z</createTime>\n            <attachmentSet>\n                <item>\n                    <volumeId>vol-bc71579a</volumeId>\n                    <instanceId>i-fde9cece</instanceId>\n                    <device>/dev/sda1</device>\n                    <status>attached</status>\n                    <attachTime>2012-10-16T20:00:21.000Z</attachTime>\n                    <deleteOnTermination>true</deleteOnTermination>\n                </item>\n            </attachmentSet>\n            <volumeType>standard</volumeType>\n        </item>\n        <item>\n            <volumeId>vol-a8d2e991</volumeId>\n            <size>30</size>\n            <snapshotId>snap-3d367c04</snapshotId>\n            <availabilityZone>us-west-2b</availabilityZone>\n            <status>in-use</status>\n            <createTime>2013-03-09T16:43:57.000Z</createTime>\n            <attachmentSet>\n                <item>\n                    <volumeId>vol-a8d2e991</volumeId>\n                    <instanceId>i-78f1b94a</instanceId>\n                    <device>/dev/sda1</device>\n                    <status>attached</status>\n                    <attachTime>2013-03-09T16:44:07.000Z</attachTime>\n                    <deleteOnTermination>true</deleteOnTermination>\n                </item>\n            </attachmentSet>\n            <volumeType>standard</volumeType>\n        </item>\n    </volumeSet>\n</DescribeVolumesResponse>', OperationModel(name=DescribeVolumes), {'ResponseMetadata': {'RequestId': '93f17066-e6f7-4fc2-8308-2c49c99ab86b'}, 'Volumes': [{'AvailabilityZone': 'us-west-2a', 'Attachments': [{'AttachTime': '2012-10-16T20:00:21.000Z', 'InstanceId': 'i-fde9cece', 'VolumeId': 'vol-bc71579a', 'State': 'attached', 'DeleteOnTermination': True, 'Device': '/dev/sda1'}], 'VolumeType': 'standard', 'VolumeId': 'vol-bc71579a', 'State': 'in-use', 'SnapshotId': 'snap-2723f74f', 'CreateTime': '2012-10-16T20:00:16.000Z', 'Size': 8}, {'AvailabilityZone': 'us-west-2b', 'Attachments': [{'AttachTime': '2013-03-09T16:44:07.000Z', 'InstanceId': 'i-78f1b94a', 'VolumeId': 'vol-a8d2e991', 'State': 'attached', 'DeleteOnTermination': True, 'Device': '/dev/sda1'}], 'VolumeType': 'standard', 'VolumeId': 'vol-a8d2e991', 'State': 'in-use', 'SnapshotId': 'snap-3d367c04', 'CreateTime': '2013-03-09T16:43:57.000Z', 'Size': 30}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-vpcs.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeVpcsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>ed65eddd-6d71-4eee-bc93-83d3a672c209</requestId>\n    <vpcSet>\n        <item>\n            <vpcId>vpc-8d2910e4</vpcId>\n            <state>available</state>\n            <cidrBlock>10.0.0.0/16</cidrBlock>\n            <dhcpOptionsId>dopt-eb291082</dhcpOptionsId>\n            <instanceTenancy>default</instanceTenancy>\n            <isDefault>false</isDefault>\n        </item>\n    </vpcSet>\n</DescribeVpcsResponse>', OperationModel(name=DescribeVpcs), {'Vpcs': [{'VpcId': 'vpc-8d2910e4', 'InstanceTenancy': 'default', 'State': 'available', 'DhcpOptionsId': 'dopt-eb291082', 'CidrBlock': '10.0.0.0/16', 'IsDefault': False}], 'ResponseMetadata': {'RequestId': 'ed65eddd-6d71-4eee-bc93-83d3a672c209'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-vpn-connections.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeVpnConnectionsResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n  <vpnConnectionSet>\n    <item>\n      <vpnConnectionId>vpn-44a8938f</vpnConnectionId>\n      <state>available</state>\n      <customerGatewayConfiguration>Gateway Info</customerGatewayConfiguration>\n      <type>ipsec.1</type>\n      <customerGatewayId>cgw-b4dc3961</customerGatewayId>\n      <vpnGatewayId>vgw-8db04f81</vpnGatewayId>\n      <tagSet/>\n    </item>\n  </vpnConnectionSet>\n</DescribeVpnConnectionsResponse>\n', OperationModel(name=DescribeVpnConnections), {'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}, 'VpnConnections': [{'CustomerGatewayConfiguration': 'Gateway Info', 'CustomerGatewayId': 'cgw-b4dc3961', 'State': 'available', 'Tags': [], 'Type': 'ipsec.1', 'VpnConnectionId': 'vpn-44a8938f', 'VpnGatewayId': 'vgw-8db04f81'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-describe-vpn-gateways.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<DescribeVpnGatewaysResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n  <vpnGatewaySet>\n    <item>\n      <vpnGatewayId>vgw-8db04f81</vpnGatewayId>\n      <state>available</state>\n      <type>ipsec.1</type>\n      <availabilityZone>us-east-1a</availabilityZone>\n      <attachments>\n        <item>\n          <vpcId>vpc-1a2b3c4d</vpcId>\n          <state>attached</state>\n        </item>\n      </attachments>\n      <tagSet/>\n    </item>\n  </vpnGatewaySet>\n</DescribeVpnGatewaysResponse>\n', OperationModel(name=DescribeVpnGateways), {'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}, 'VpnGateways': [{'AvailabilityZone': 'us-east-1a', 'State': 'available', 'Tags': [], 'Type': 'ipsec.1', 'VpcAttachments': [{'State': 'attached', 'VpcId': 'vpc-1a2b3c4d'}], 'VpnGatewayId': 'vgw-8db04f81'}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-detach-network-interface.xml', b"<DetachNetworkInterfaceResponse xmlns='http://ec2.amazonaws.com/doc/2011-11-15/'>\n    <requestId>ce540707-0635-46bc-97da-33a8a362a0e8</requestId>\n    <return>true</return>\n</DetachNetworkInterfaceResponse>\n", OperationModel(name=DetachNetworkInterface), {'ResponseMetadata': {'RequestId': 'ce540707-0635-46bc-97da-33a8a362a0e8'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-detach-volume.xml', b'<DetachVolumeResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <volumeId>vol-1a2b3c4d</volumeId>\n   <instanceId>i-1a2b3c4d</instanceId>\n   <device>/dev/sdh</device>\n   <status>detaching</status>\n   <attachTime>YYYY-MM-DDTHH:MM:SS.000Z</attachTime>\n</DetachVolumeResponse>\n', OperationModel(name=DetachVolume), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'AttachTime': 'YYYY-MM-DDTHH:MM:SS.000Z', 'InstanceId': 'i-1a2b3c4d', 'VolumeId': 'vol-1a2b3c4d', 'State': 'detaching', 'Device': '/dev/sdh'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-get-password-data.xml', b'<GetPasswordDataResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <instanceId>i-2574e22a</instanceId>\n  <timestamp>2009-10-24 15:00:00</timestamp>\n  <passwordData>TGludXggdmVyc2lvbiAyLjYuMTYteGVuVSAoYnVpbGRlckBwYXRjaGJhdC5hbWF6b25zYSkgKGdj</passwordData>\n</GetPasswordDataResponse>\n', OperationModel(name=GetPasswordData), {'InstanceId': 'i-2574e22a', 'Timestamp': '2009-10-24 15:00:00', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'PasswordData': 'TGludXggdmVyc2lvbiAyLjYuMTYteGVuVSAoYnVpbGRlckBwYXRjaGJhdC5hbWF6b25zYSkgKGdj'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-import-instance.xml', b'<ImportInstanceResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <conversionTask>\n    <conversionTaskId>import-i-ffvko9js</conversionTaskId>\n    <expirationTime>2010-12-22T12:01Z</expirationTime>\n    <importInstance>\n       <volumes>\n          <item>\n             <bytesConverted>0</bytesConverted>\n             <availabilityZone>us-east-1a</availabilityZone>\n             <image>\n                <format>VMDK</format>\n                <size>1179593728</size>\n                <importManifestUrl>https://s3.amazonaws.com/myawsbucket/a3a5e1b6-590d-43cc-97c1-15c7325d3f41/Win_2008_Server_Data_Center_SP2_32-bit.vmdkmanifest.xml?AWSaccessKeyId=AKIAIOSFODNN7EXAMPLE%26Expires=1294855591%26Signature=5snej01T1TtL0uR7KExtEXAMPLE%3D</importManifestUrl>\n             </image>\n             <description/>\n             <volume>\n                <size>12</size>\n                <id>vol-1a2b3c4d</id>\n             </volume>\n             <status>active</status>\n             <statusMessage/>\n          </item>\n       </volumes>\n       <instanceId>i-12655a7f</instanceId>\n       <description/>\n    </importInstance>\n  </conversionTask>\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n</ImportInstanceResponse>\n', OperationModel(name=ImportInstance), {'ConversionTask': {'ConversionTaskId': 'import-i-ffvko9js', 'ImportInstance': {'InstanceId': 'i-12655a7f', 'Description': '', 'Volumes': [{'Status': 'active', 'AvailabilityZone': 'us-east-1a', 'Description': '', 'Image': {'Size': 1179593728, 'ImportManifestUrl': 'https://s3.amazonaws.com/myawsbucket/a3a5e1b6-590d-43cc-97c1-15c7325d3f41/Win_2008_Server_Data_Center_SP2_32-bit.vmdkmanifest.xml?AWSaccessKeyId=AKIAIOSFODNN7EXAMPLE%26Expires=1294855591%26Signature=5snej01T1TtL0uR7KExtEXAMPLE%3D', 'Format': 'VMDK'}, 'Volume': {'Id': 'vol-1a2b3c4d', 'Size': 12}, 'BytesConverted': 0, 'StatusMessage': ''}]}, 'ExpirationTime': '2010-12-22T12:01Z'}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-import-key-pair.xml', b'<ImportKeyPairResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n   <keyName>gsg-keypair</keyName>\n   <keyFingerprint>00:00:00: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00</keyFingerprint>\n</ImportKeyPairResponse>\n', OperationModel(name=ImportKeyPair), {'KeyName': 'gsg-keypair', 'KeyFingerprint': '00:00:00: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00', 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-import-volume.xml', b'<ImportVolumeResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <conversionTask>\n     <conversionTaskId>import-i-fh95npoc</conversionTaskId>\n     <expirationTime>2010-12-22T12:01Z</expirationTime>\n     <importVolume>\n        <bytesConverted>0</bytesConverted>\n        <availabilityZone>us-east-1c</availabilityZone>\n        <description/>\n        <image>\n            <format>VDMK</format>\n            <size>128696320</size>\n            <importManifestUrl>https://s3.amazonaws.com/myawsbucket/a3a5e1b6-590d-43cc-97c1-15c7325d3f41/Win_2008_Server_Data_Center_SP2_32-bit.vmdkmanifest.xml?AWSaccessKeyId=AKIAIOSFODNN7EXAMPLE%26Expires=1294855591%26Signature=5snej01T1TtL0uR7KExtEXAMPLE%3D</importManifestUrl>\n            <checksum>ccb1b0536a4a70e86016b85229b5c6b10b14a4eb</checksum>\n        </image>\n        <volume>\n           <size>8</size>\n           <id>vol-34d8a2ff</id>\n        </volume>\n     </importVolume>\n     <state>active</state>\n     <statusMessage/>\n  </conversionTask>\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\n</ImportVolumeResponse>\n', OperationModel(name=ImportVolume), {'ConversionTask': {'ConversionTaskId': 'import-i-fh95npoc', 'ImportVolume': {'Volume': {'Id': 'vol-34d8a2ff', 'Size': 8}, 'Image': {'Checksum': 'ccb1b0536a4a70e86016b85229b5c6b10b14a4eb', 'Size': 128696320, 'ImportManifestUrl': 'https://s3.amazonaws.com/myawsbucket/a3a5e1b6-590d-43cc-97c1-15c7325d3f41/Win_2008_Server_Data_Center_SP2_32-bit.vmdkmanifest.xml?AWSaccessKeyId=AKIAIOSFODNN7EXAMPLE%26Expires=1294855591%26Signature=5snej01T1TtL0uR7KExtEXAMPLE%3D', 'Format': 'VDMK'}, 'BytesConverted': 0, 'Description': '', 'AvailabilityZone': 'us-east-1c'}, 'ExpirationTime': '2010-12-22T12:01Z', 'State': 'active', 'StatusMessage': ''}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-modify-snapshot-attribute.xml', b'<ModifySnapshotAttributeResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <return>true</return>\n</ModifySnapshotAttributeResponse>\n', OperationModel(name=ModifySnapshotAttribute), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-monitor-instances.xml', b'<MonitorInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n    <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n    <instancesSet>\n      <item>\n        <instanceId>i-43a4412a</instanceId>\n        <monitoring>\n          <state>pending</state>\n        </monitoring>\n    </item>\n    <item>\n      <instanceId>i-23a3397d</instanceId>\n        <monitoring>\n          <state>pending</state>\n        </monitoring>\n      </item>\n    </instancesSet>\n</MonitorInstancesResponse>\n', OperationModel(name=MonitorInstances), {'InstanceMonitorings': [{'InstanceId': 'i-43a4412a', 'Monitoring': {'State': 'pending'}}, {'InstanceId': 'i-23a3397d', 'Monitoring': {'State': 'pending'}}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-register-image.xml', b'<RegisterImageResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <imageId>ami-1a2b3c4d</imageId>\n</RegisterImageResponse>\n', OperationModel(name=RegisterImage), {'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}, 'ImageId': 'ami-1a2b3c4d'}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-replace-network-acl-association.xml', b'<ReplaceNetworkAclAssociationResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <newAssociationId>aclassoc-17b85d7e</newAssociationId>\n</ReplaceNetworkAclAssociationResponse>\n', OperationModel(name=ReplaceNetworkAclAssociation), {'NewAssociationId': 'aclassoc-17b85d7e', 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-request-spot-instances.xml', b'<RequestSpotInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <spotInstanceRequestSet>\n      <item>\n         <spotInstanceRequestId>sir-1a2b3c4d</spotInstanceRequestId>\n         <spotPrice>0.5</spotPrice>\n         <type>one-time</type>\n         <state>open</state>\n         <availabilityZoneGroup>MyAzGroup</availabilityZoneGroup>\n         <launchSpecification>\n            <imageId>ami-1a2b3c4d</imageId>\n            <groupSet>\n               <item>\n                  <groupId></groupId>\n                  <groupName></groupName>\n               </item>\n            </groupSet>\n            <instanceType>m1.small</instanceType>\n            <blockDeviceMapping/>\n            <monitoring>\n               <enabled>false</enabled>\n            </monitoring>\n            <ebsOptimized>false</ebsOptimized>\n         </launchSpecification>\n         <createTime>YYYY-MM-DDTHH:MM:SS.000Z</createTime>\n         <productDescription>Linux/UNIX</productDescription>\n      </item>\n   </spotInstanceRequestSet>\n</RequestSpotInstancesResponse>\n', OperationModel(name=RequestSpotInstances), {'SpotInstanceRequests': [{'ProductDescription': 'Linux/UNIX', 'SpotInstanceRequestId': 'sir-1a2b3c4d', 'State': 'open', 'AvailabilityZoneGroup': 'MyAzGroup', 'LaunchSpecification': {'EbsOptimized': False, 'BlockDeviceMappings': [], 'Monitoring': {'Enabled': False}, 'SecurityGroups': [{'GroupName': '', 'GroupId': ''}], 'InstanceType': 'm1.small', 'ImageId': 'ami-1a2b3c4d'}, 'Type': 'one-time', 'CreateTime': 'YYYY-MM-DDTHH:MM:SS.000Z', 'SpotPrice': '0.5'}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-run-instances.xml', b"<RunInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2014-06-15/'>\n    <requestId>e86ff3c8-2400-45e3-a4e7-f158a69283d4</requestId>\n    <reservationId>r-157ad274</reservationId>\n    <ownerId>111122223333</ownerId>\n    <groupSet/>\n    <instancesSet>\n        <item>\n            <instanceId>i-0ee0356c</instanceId>\n            <imageId>ami-31814f58</imageId>\n            <instanceState>\n                <code>0</code>\n                <name>pending</name>\n            </instanceState>\n            <privateDnsName/>\n            <dnsName/>\n            <reason/>\n            <amiLaunchIndex>0</amiLaunchIndex>\n            <productCodes/>\n            <instanceType>m1.small</instanceType>\n            <launchTime>2011-12-20T08:29:31.000Z</launchTime>\n            <placement>\n                <availabilityZone>us-east-1b</availabilityZone>\n                <groupName/>\n                <tenancy>default</tenancy>\n            </placement>\n            <kernelId>aki-805ea7e9</kernelId>\n            <monitoring>\n                <state>disabled</state>\n            </monitoring>\n            <subnetId>subnet-b2a249da</subnetId>\n            <vpcId>vpc-1ea24976</vpcId>\n            <privateIpAddress>10.0.0.142</privateIpAddress>\n            <sourceDestCheck>true</sourceDestCheck>\n            <groupSet>\n                <item>\n                    <groupId>sg-050c1369</groupId>\n                    <groupName>default</groupName>\n                </item>\n            </groupSet>\n            <stateReason>\n                <code>pending</code>\n                <message>pending</message>\n            </stateReason>\n            <architecture>i386</architecture>\n            <rootDeviceType>ebs</rootDeviceType>\n            <rootDeviceName>/dev/sda1</rootDeviceName>\n            <blockDeviceMapping/>\n            <virtualizationType>paravirtual</virtualizationType>\n            <clientToken/>\n            <hypervisor>xen</hypervisor>\n            <networkInterfaceSet>\n                <item>\n                    <networkInterfaceId>eni-c6bb50ae</networkInterfaceId>\n                    <subnetId>subnet-b2a249da</subnetId>\n                    <vpcId>vpc-1ea24976</vpcId>\n                    <description/>\n                    <ownerId>111122223333</ownerId>\n                    <status>in-use</status>\n                    <privateIpAddress>10.0.0.142</privateIpAddress>\n                    <sourceDestCheck>true</sourceDestCheck>\n                    <groupSet>\n                        <item>\n                            <groupId>sg-050c1369</groupId>\n                            <groupName>default</groupName>\n                        </item>\n                    </groupSet>\n                    <attachment>\n                        <attachmentId>eni-attach-0326646a</attachmentId>\n                        <deviceIndex>0</deviceIndex>\n                        <status>attaching</status>\n                        <attachTime>2011-12-20T08:29:31.000Z</attachTime>\n                        <deleteOnTermination>true</deleteOnTermination>\n                    </attachment>\n                </item>\n            </networkInterfaceSet>\n        </item>\n    </instancesSet>\n</RunInstancesResponse>\n", OperationModel(name=RunInstances), {'OwnerId': '111122223333', 'ReservationId': 'r-157ad274', 'ResponseMetadata': {'RequestId': 'e86ff3c8-2400-45e3-a4e7-f158a69283d4'}, 'Groups': [], 'Instances': [{'Monitoring': {'State': 'disabled'}, 'PublicDnsName': '', 'StateReason': {'Message': 'pending', 'Code': 'pending'}, 'State': {'Code': 0, 'Name': 'pending'}, 'LaunchTime': '2011-12-20T08:29:31.000Z', 'PrivateIpAddress': '10.0.0.142', 'ProductCodes': [], 'VpcId': 'vpc-1ea24976', 'StateTransitionReason': '', 'InstanceId': 'i-0ee0356c', 'ImageId': 'ami-31814f58', 'PrivateDnsName': '', 'SecurityGroups': [{'GroupName': 'default', 'GroupId': 'sg-050c1369'}], 'ClientToken': '', 'SubnetId': 'subnet-b2a249da', 'InstanceType': 'm1.small', 'NetworkInterfaces': [{'Status': 'in-use', 'SourceDestCheck': True, 'VpcId': 'vpc-1ea24976', 'Description': '', 'NetworkInterfaceId': 'eni-c6bb50ae', 'Attachment': {'Status': 'attaching', 'DeviceIndex': 0, 'DeleteOnTermination': True, 'AttachmentId': 'eni-attach-0326646a', 'AttachTime': '2011-12-20T08:29:31.000Z'}, 'Groups': [{'GroupName': 'default', 'GroupId': 'sg-050c1369'}], 'SubnetId': 'subnet-b2a249da', 'OwnerId': '111122223333', 'PrivateIpAddress': '10.0.0.142'}], 'SourceDestCheck': True, 'Placement': {'GroupName': '', 'Tenancy': 'default', 'AvailabilityZone': 'us-east-1b'}, 'Hypervisor': 'xen', 'BlockDeviceMappings': [], 'Architecture': 'i386', 'KernelId': 'aki-805ea7e9', 'RootDeviceName': '/dev/sda1', 'VirtualizationType': 'paravirtual', 'RootDeviceType': 'ebs', 'AmiLaunchIndex': 0}]}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-start-instances.xml', b'<StartInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <instancesSet>\n    <item>\n      <instanceId>i-10a64379</instanceId>\n      <currentState>\n          <code>0</code>\n          <name>pending</name>\n      </currentState>\n      <previousState>\n          <code>80</code>\n          <name>stopped</name>\n      </previousState>\n    </item>\n  </instancesSet>\n</StartInstancesResponse>\n', OperationModel(name=StartInstances), {'StartingInstances': [{'InstanceId': 'i-10a64379', 'CurrentState': {'Code': 0, 'Name': 'pending'}, 'PreviousState': {'Code': 80, 'Name': 'stopped'}}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-stop-instances.xml', b'<StopInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n  <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n  <instancesSet>\n    <item>\n      <instanceId>i-10a64379</instanceId>\n      <currentState>\n          <code>64</code>\n          <name>stopping</name>\n      </currentState>\n      <previousState>\n          <code>16</code>\n          <name>running</name>\n      </previousState>\n    </item>\n  </instancesSet>\n</StopInstancesResponse>\n', OperationModel(name=StopInstances), {'StoppingInstances': [{'InstanceId': 'i-10a64379', 'CurrentState': {'Code': 64, 'Name': 'stopping'}, 'PreviousState': {'Code': 16, 'Name': 'running'}}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/responses/ec2-unmonitor-instances.xml', b'<UnmonitorInstancesResponse xmlns="http://ec2.amazonaws.com/doc/2014-06-15/">\n   <requestId>59dbff89-35bd-4eac-99ed-be587EXAMPLE</requestId>\n   <instancesSet>\n      <item>\n         <instanceId>i-43a4412a</instanceId>\n         <monitoring>\n            <state>disabled</state>\n         </monitoring>\n      </item>\n      <item>\n         <instanceId>i-23a3397d</instanceId>\n         <monitoring>\n            <state>disabled</state>\n         </monitoring>\n      </item>\n   </instancesSet>\n</UnmonitorInstancesResponse>\n', OperationModel(name=UnmonitorInstances), {'InstanceMonitorings': [{'InstanceId': 'i-43a4412a', 'Monitoring': {'State': 'disabled'}}, {'InstanceId': 'i-23a3397d', 'Monitoring': {'State': 'disabled'}}], 'ResponseMetadata': {'RequestId': '59dbff89-35bd-4eac-99ed-be587EXAMPLE'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/cloudformation-cancel-update-stack.xml', b'<ErrorResponse xmlns="http://cloudformation.amazonaws.com/doc/2010-05-15/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>ValidationError</Code>\n    <Message>Stack: foobar does not exist</Message>\n  </Error>\n  <RequestId>21113b58-b7e4-11e2-91fa-05ec834fa451</RequestId>\n</ErrorResponse>\n', OperationModel(name=CancelUpdateStack), {'Error': {'Code': 'ValidationError', 'Message': 'Stack: foobar does not exist', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '21113b58-b7e4-11e2-91fa-05ec834fa451'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/rds-describe-db-instances.xml', b'<ErrorResponse xmlns="http://rds.amazonaws.com/doc/2013-09-09/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>DBInstanceNotFound</Code>\n    <Message>DBInstance foobar not found.</Message>\n  </Error>\n  <RequestId>b41f03f1-b7f8-11e2-9b07-955bffd33505</RequestId>\n</ErrorResponse>\n', OperationModel(name=DescribeDBInstances), {'Error': {'Code': 'DBInstanceNotFound', 'Message': 'DBInstance foobar not found.', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': 'b41f03f1-b7f8-11e2-9b07-955bffd33505'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/elb-describe-load-balancers.xml', b'<ErrorResponse xmlns="http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>LoadBalancerNotFound</Code>\n    <Message>Cannot find Load Balancer foobar</Message>\n  </Error>\n  <RequestId>88e880c0-b7f7-11e2-ac25-87bc0c2182b8</RequestId>\n</ErrorResponse>\n', OperationModel(name=DescribeLoadBalancers), {'Error': {'Code': 'LoadBalancerNotFound', 'Message': 'Cannot find Load Balancer foobar', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '88e880c0-b7f7-11e2-ac25-87bc0c2182b8'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/ses-delete-identity.xml', b'<ErrorResponse xmlns="http://ses.amazonaws.com/doc/2010-12-01/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>InvalidParameterValue</Code>\n    <Message>Identity foobar is invalid. Must be a verified email address or domain.</Message>\n  </Error>\n  <RequestId>332db868-b7f9-11e2-b4a6-337840b53735</RequestId>\n</ErrorResponse>\n', OperationModel(name=DeleteIdentity), {'Error': {'Code': 'InvalidParameterValue', 'Message': 'Identity foobar is invalid. Must be a verified email address or domain.', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '332db868-b7f9-11e2-b4a6-337840b53735'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/autoscaling-delete-policy.xml', b'<ErrorResponse xmlns="http://autoscaling.amazonaws.com/doc/2011-01-01/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>ValidationError</Code>\n    <Message>The AutoScaling Group name is required when specifying a policy by its name</Message>\n  </Error>\n  <RequestId>9e27be2f-b7e3-11e2-a0e4-f9780ed1763e</RequestId>\n</ErrorResponse>\n', OperationModel(name=DeletePolicy), {'Error': {'Code': 'ValidationError', 'Message': 'The AutoScaling Group name is required when specifying a policy by its name', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '9e27be2f-b7e3-11e2-a0e4-f9780ed1763e'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/iam-get-user.xml', b'<ErrorResponse xmlns="https://iam.amazonaws.com/doc/2010-05-08/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>NoSuchEntity</Code>\n    <Message>The user with name foobar cannot be found.</Message>\n  </Error>\n  <RequestId>358299bb-b7f8-11e2-8d39-e3a125f625ee</RequestId>\n</ErrorResponse>\n', OperationModel(name=GetUser), {'Error': {'Code': 'NoSuchEntity', 'Message': 'The user with name foobar cannot be found.', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '358299bb-b7f8-11e2-8d39-e3a125f625ee'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/importexport-get-status.xml', b'<ErrorResponse xmlns="http://importexport.amazonaws.com/doc/2010-06-01/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>InvalidJobIdException</Code>\n    <Message>No such job foobar for your account</Message>\n  </Error>\n  <RequestId>83281264-b7f8-11e2-a9e1-3f6477e78873</RequestId>\n</ErrorResponse>\n', OperationModel(name=GetStatus), {'Error': {'Code': 'InvalidJobIdException', 'Message': 'No such job foobar for your account', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '83281264-b7f8-11e2-a9e1-3f6477e78873'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/sqs-delete-queue.xml', b'<?xml version="1.0"?>\n<ErrorResponse xmlns="http://queue.amazonaws.com/doc/2012-11-05/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>InvalidAddress</Code>\n    <Message>The address foobar is not valid for this endpoint.</Message>\n    <Detail/>\n  </Error>\n  <RequestId>9b06cd2c-b433-550f-bde2-8728ce9b1a93</RequestId>\n</ErrorResponse>\n', OperationModel(name=DeleteQueue), {'Error': {'Code': 'InvalidAddress', 'Detail': None, 'Message': 'The address foobar is not valid for this endpoint.', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '9b06cd2c-b433-550f-bde2-8728ce9b1a93'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/sts-get-session-token.xml', b'<ErrorResponse xmlns="https://sts.amazonaws.com/doc/2011-06-15/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>AccessDenied</Code>\n    <Message>GetSessionToken call failed, unable to validate MFA code.  Please verify your MFA serial number is valid and associated with this user.</Message>\n  </Error>\n  <RequestId>8088f6eb-b7fb-11e2-8d25-4b9f3b52b80f</RequestId>\n</ErrorResponse>\n', OperationModel(name=GetSessionToken), {'Error': {'Code': 'AccessDenied', 'Message': 'GetSessionToken call failed, unable to validate MFA code.  Please verify your MFA serial number is valid and associated with this user.', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '8088f6eb-b7fb-11e2-8d25-4b9f3b52b80f'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/route53-get-hosted-zone.xml', b'<ErrorResponse xmlns="https://route53.amazonaws.com/doc/2013-04-01/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>InvalidInput</Code>\n    <Message>Invalid resource type: foo</Message>\n  </Error>\n  <RequestId>request_id</RequestId>\n</ErrorResponse>\n', OperationModel(name=GetHostedZone), {'Error': {'Code': 'InvalidInput', 'Message': 'Invalid resource type: foo', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': 'request_id'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/s3-create-bucket.xml', b'<Error>\n  <Code>BucketAlreadyOwnedByYou</Code>\n  <Message>Your previous request to create the named bucket succeeded and you already own it.</Message>\n  <BucketName>garnaat-pdx</BucketName>\n  <RequestId>96380E1CB938DDF7</RequestId>\n  <HostId>uCyKZYcyp+7qYdvAcvwQueBs6VdfDURJZTrhTjc3gTfsqaWjC2n532mPb0P+ZQ4Q</HostId>\n</Error>\n', OperationModel(name=CreateBucket), {'Error': {'BucketName': 'garnaat-pdx', 'Code': 'BucketAlreadyOwnedByYou', 'Message': 'Your previous request to create the named bucket succeeded and you already own it.'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/s3-list-objects.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<Error>\n  <Code>AccessDenied</Code>\n  <Message>Access Denied</Message>\n  <RequestId>9C7D5181867045BB</RequestId>\n  <HostId>XNe9pgGHhc+EBMJajTIuknWns46Dd3psDfbWyo1pbc0dULg/tkidZSeWG5VNitPJ</HostId>\n</Error>\n', OperationModel(name=ListObjects), {'Error': {'Code': 'AccessDenied', 'Message': 'Access Denied'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/cloudwatch-describe-alarm-history.xml', b'<ErrorResponse xmlns="http://monitoring.amazonaws.com/doc/2010-08-01/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>InvalidNextToken</Code>\n    <Message>The token \'fiebaz\' was invalid</Message>\n  </Error>\n  <RequestId>0cbee924-b7f3-11e2-9844-5359a37be512</RequestId>\n</ErrorResponse>\n', OperationModel(name=DescribeAlarmHistory), {'Error': {'Code': 'InvalidNextToken', 'Message': "The token 'fiebaz' was invalid", 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '0cbee924-b7f3-11e2-9844-5359a37be512'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/sns-delete-topic.xml', b'<ErrorResponse xmlns="http://sns.amazonaws.com/doc/2010-03-31/">\n  <Error>\n    <Type>Sender</Type>\n    <Code>InvalidParameter</Code>\n    <Message>TopicArn</Message>\n  </Error>\n  <RequestId>8c4c8aa7-436b-5b46-91d5-c0a339158557</RequestId>\n</ErrorResponse>\n', OperationModel(name=DeleteTopic), {'Error': {'Code': 'InvalidParameter', 'Message': 'TopicArn', 'Type': 'Sender'}, 'ResponseMetadata': {'RequestId': '8c4c8aa7-436b-5b46-91d5-c0a339158557'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_xml_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/xml/errors/ec2-describe-instances.xml', b'<?xml version="1.0" encoding="UTF-8"?>\n<Response>\n  <Errors>\n    <Error>\n      <Code>InvalidInstanceID.Malformed</Code>\n      <Message>Invalid id: "foobar"</Message>\n    </Error>\n  </Errors>\n  <RequestID>dfb14b43-9a55-4d8e-b676-e8034d12bbeb</RequestID>\n</Response>\n', OperationModel(name=DescribeInstances), {'Error': {'Code': 'InvalidInstanceID.Malformed', 'Message': 'Invalid id: "foobar"'}, 'ResponseMetadata': {'RequestId': 'dfb14b43-9a55-4d8e-b676-e8034d12bbeb'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/datapipeline-create-pipeline.json', b'{"__type":"AccessDeniedException","Message":"Operation createPipeline is not allowed to be performed with role identity"}\n', OperationModel(name=CreatePipeline), {'Error': {'Message': 'Operation createPipeline is not allowed to be performed with role identity', 'Code': 'AccessDeniedException'}, 'ResponseMetadata': {}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/directconnect-delete-connection.json', b'{"__type":"DirectConnectClientException","message":"Connection ID foobar has an invalid format."}\n', OperationModel(name=DeleteConnection), {'ResponseMetadata': {}, 'Error': {'Message': 'Connection ID foobar has an invalid format.', 'Code': 'DirectConnectClientException'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/dynamodb-put-item.json', b'{"__type":"com.amazonaws.dynamodb.v20111205#ProvisionedThroughputExceededException",\n    "message":"The level of configured provisioned throughput for the table was exceeded.  Consider increasing your provisioning level with the UpdateTable API"}\n', OperationModel(name=PutItem), {'ResponseMetadata': {}, 'Error': {'Message': 'The level of configured provisioned throughput for the table was exceeded.  Consider increasing your provisioning level with the UpdateTable API', 'Code': 'ProvisionedThroughputExceededException'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/elastictranscoder-delete-pipeline.json', b'{\n  "message": "1 validation error detected: Value \'foobar\' at \'id\' failed to satisfy constraint: Member must satisfy regular expression pattern: ^\\\\d{13}-\\\\w{6}$",\n  "__headers__": {\n    "x-amzn-requestid": "1234",\n    "content-length": "120",\n    "date": "Wed, 19 Feb 2014 22:13:13 GMT",\n    "nncoection": "close",\n    "content-type": "application/json",\n    "x-amzn-errortype": "ValidationException:"\n  }\n}\n', OperationModel(name=DeletePipeline), {'ResponseMetadata': {'RequestId': '1234'}, 'Error': {'Message': "1 validation error detected: Value 'foobar' at 'id' failed to satisfy constraint: Member must satisfy regular expression pattern: ^\\d{13}-\\w{6}$", 'Code': 'ValidationException'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/opsworks-delete-stack.json', b'{"__type":"ResourceNotFoundException","message":"Unable to find stack with ID foobar"}\n', OperationModel(name=DeleteStack), {'ResponseMetadata': {}, 'Error': {'Message': 'Unable to find stack with ID foobar', 'Code': 'ResourceNotFoundException'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/storagegateway-delete-gateway.json', b'{"__type":"ValidationException","message":"1 validation error detected: Value \'foobar\' at \'gatewayARN\' failed to satisfy constraint: Member must have length greater than or equal to 50"}\n', OperationModel(name=DeleteGateway), {'ResponseMetadata': {}, 'Error': {'Message': "1 validation error detected: Value 'foobar' at 'gatewayARN' failed to satisfy constraint: Member must have length greater than or equal to 50", 'Code': 'ValidationException'}}) ... ok
tests.unit.response_parsing.test_response_parsing.test_json_errors_parsing('/home/srezepin/git/botocore/tests/unit/response_parsing/json/errors/swf-deprecate-domain.json', b'{"__type":"com.amazonaws.swf.base.model#UnknownResourceFault","message":"Unknown domain: foobar"}\n', OperationModel(name=DeprecateDomain), {'ResponseMetadata': {}, 'Error': {'Message': 'Unknown domain: foobar', 'Code': 'UnknownResourceFault'}}) ... ok
test_client_s3_accelerate_client_config_overrides_scoped (tests.unit.test_args.TestCreateClientArgs) ... ok
test_client_s3_accelerate_from_client_config (tests.unit.test_args.TestCreateClientArgs) ... ok
test_client_s3_accelerate_from_varying_forms_of_true (tests.unit.test_args.TestCreateClientArgs) ... ok
test_client_s3_dualstack_handles_varying_forms_of_true (tests.unit.test_args.TestCreateClientArgs) ... ok
test_compute_s3_config_only_scoped_config (tests.unit.test_args.TestCreateClientArgs) ... ok
test_compute_s3_configuration (tests.unit.test_args.TestCreateClientArgs) ... ok
test_max_pool_from_client_config_forwarded_to_endpoint_creator (tests.unit.test_args.TestCreateClientArgs) ... ok
test_provide_retry_config (tests.unit.test_args.TestCreateClientArgs) ... ok
test_proxies_from_client_config_forwarded_to_endpoint_creator (tests.unit.test_args.TestCreateClientArgs) ... ok
test_region_does_not_resolve_if_not_s3_and_endpoint_url_provided (tests.unit.test_args.TestCreateClientArgs) ... ok
test_s3_with_endpoint_url_still_resolves_region (tests.unit.test_args.TestCreateClientArgs) ... ok
test_encodes_unicode_method_line (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_expect_100_continue_no_response_from_server (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_expect_100_continue_returned (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_expect_100_continue_sends_307 (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_expect_100_sends_connection_header (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_handles_expect_100_with_different_reason_phrase (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_message_body_is_file_like_object (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_no_expect_header_set (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_state_reset_on_connection_close (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_tunnel_raises_socket_error (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_tunnel_readline_none_bugfix (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_tunnel_readline_normal (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_tunnel_uses_std_lib (tests.unit.test_awsrequest.TestAWSHTTPConnection) ... ok
test_prepare_body_content_adds_content_length (tests.unit.test_awsrequest.TestAWSPreparedRequest) ... ok
test_prepare_body_ignores_existing_transfer_encoding (tests.unit.test_awsrequest.TestAWSPreparedRequest) ... ok
test_prepare_body_removes_transfer_encoding (tests.unit.test_awsrequest.TestAWSPreparedRequest) ... ok
test_cannot_reset_stream_raises_error (tests.unit.test_awsrequest.TestAWSRequest) ... ok
test_duck_type_for_file_check (tests.unit.test_awsrequest.TestAWSRequest) ... ok
test_should_reset_stream (tests.unit.test_awsrequest.TestAWSRequest) ... ok
test_create_request_object (tests.unit.test_awsrequest.TestCreateRequestObject) ... ok
test_custom_endpoint_with_query_string (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_prepare_request_dict_for_get (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_prepare_request_dict_for_get_no_user_agent (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_prepare_request_dict_with_context (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_query_string_serialized_to_url (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_url_path_combined_with_endpoint_url (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_url_path_is_slash (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_url_path_is_slash_with_endpoint_url_no_slash (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_url_path_with_trailing_slash (tests.unit.test_awsrequest.TestPrepareRequestDict) ... ok
test_anonymous_client_request (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_api_version_is_passed_to_loader_if_provided (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_before_call_short_circuits_request (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_can_disable_param_validation_from_scoped_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_can_override_max_attempts (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_can_set_credentials_in_client_init (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_can_use_guessed_endpoints (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_config_trumps_scoped_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_create_unicode (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_created_emits_events (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_custom_user_agent_extra_in_request (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_custom_user_agent_in_request (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_default_for_s3_addressing_style (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_doesnt_validate_params_when_validation_disabled (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_error_message_for_positional_args (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_generated_from_model (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_has_endpoint_url_on_meta (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_has_exceptions_attribute (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_has_modeled_exceptions (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_has_non_standard_partition_on_meta (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_has_region_name_on_meta (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_has_standard_partition_on_meta (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_makes_call (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_method_called_event (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_method_docstring (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_method_help (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_method_to_api_mapping (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_name (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_name_using_abreviation (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_name_with_amazon (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_name_with_no_full_name_or_abbreviation (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_name_with_non_alphabet_characters (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_payload_signing_client_config_overrides_scoped (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_payload_signing_from_client_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_payload_signing_from_scoped_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_payload_signing_from_varying_forms_of_true (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_register_seperate_unique_id_event (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_registers_request_created_handler (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_accelerate_client_config_overrides_scoped (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_accelerate_from_client_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_accelerate_from_scoped_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_accelerate_from_varying_forms_of_true (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_auto_registers_correctly (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_config_overrides_scoped_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_default_registers_correctly (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_path_registers_correctly (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_virtual_registers_correctly (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_with_bad_value (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_with_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_with_incorrect_style (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_s3_addressing_style_with_scoped_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_signature_no_override (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_signature_override_arg (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_signature_override_config_file (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_signs_call (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_user_agent_in_request (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_uses_given_region_name_and_endpoint_url_when_present (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_uses_signing_name_even_with_no_resolve (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_uses_signing_name_from_credential_scope (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_uses_signing_name_from_model_if_present_if_resolved (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_uses_signing_region_from_credential_scope (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_validates_params_by_default (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_custom_both_timeout (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_custom_connect_timeout (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_custom_neither_timeout (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_custom_params (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_custom_read_timeout (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_endpoint_url (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_client_with_response_parser_factory (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_clients_have_meta_object (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_clients_inherit_handlers_from_session (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_clients_inherit_only_at_create_time (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_create_client_class_creates_class (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_create_client_class_forwards_api_version (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_custom_accelerate_url_forces_virtual_host (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_custom_endpoint_uses_path_style (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_event_emitted_when_invoked (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_events_are_per_client (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_getattr_emits_event (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_getattr_event_returns_response (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_operation_can_paginate (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_operation_cannot_paginate (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_paginator_class_name_from_client (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_paginator_help_from_client (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_creates_retryhandler (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_has_no_pagination_configs (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_has_no_waiter_configs (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_has_retry_event (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_has_waiter_configs (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_registers_retry_handler (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_service_retry_missing_config (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_signing_region_does_not_change_client_region (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_successful_pagination_object_created (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_try_to_paginate_non_paginated (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_waiter_config_uses_service_name_not_endpoint_prefix (tests.unit.test_client.TestAutoGeneratedClient) ... ok
test_can_construct_dualstack_endpoint_when_enabled (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_can_create_http_urls (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_can_guess_endpoint_and_use_given_endpoint_url (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_can_use_endpoint_url_with_resolved_endpoint (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_cred_scope_does_not_override_signing_region_if_endpoint_url (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_credential_scope_overrides_signing_region (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_disable_dualstack_explicitly (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_does_not_use_https_if_not_available (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_dualstack_can_use_client_config (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_dualstack_client_config_beats_scoped_config (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_dualstack_honors_dns_suffix (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_guesses_endpoint_as_last_resort (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_raises_when_signature_version_is_not_found (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_raises_when_signature_version_is_unknown (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_resolved_region_overrides_region_when_no_endpoint_url (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_credential_scope_signing_name (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_known_signers_from_list_of_signature_versions (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_region_from_client_config_if_available (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_s3v4_over_others_for_s3 (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_s3v4_over_s3_for_s3 (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_service_name_as_signing_name (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_service_signing_name_when_present_and_no_cred_scope (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_signature_version_from_client_config (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_signature_version_from_client_config_when_guessing (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_signature_version_from_scoped_config (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_ssl_common_name_over_hostname_if_present (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_us_east_1_by_default_for_s3 (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_uses_v4_over_other_signers (tests.unit.test_client.TestClientEndpointBridge) ... ok
test_anonymous_client_request (tests.unit.test_client.TestClientErrors) ... ok
test_api_version_is_passed_to_loader_if_provided (tests.unit.test_client.TestClientErrors) ... ok
test_before_call_short_circuits_request (tests.unit.test_client.TestClientErrors) ... ok
test_can_disable_param_validation_from_scoped_config (tests.unit.test_client.TestClientErrors) ... ok
test_can_override_max_attempts (tests.unit.test_client.TestClientErrors) ... ok
test_can_set_credentials_in_client_init (tests.unit.test_client.TestClientErrors) ... ok
test_client_can_use_guessed_endpoints (tests.unit.test_client.TestClientErrors) ... ok
test_client_config_trumps_scoped_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_create_unicode (tests.unit.test_client.TestClientErrors) ... ok
test_client_created_emits_events (tests.unit.test_client.TestClientErrors) ... ok
test_client_custom_user_agent_extra_in_request (tests.unit.test_client.TestClientErrors) ... ok
test_client_custom_user_agent_in_request (tests.unit.test_client.TestClientErrors) ... ok
test_client_default_for_s3_addressing_style (tests.unit.test_client.TestClientErrors) ... ok
test_client_doesnt_validate_params_when_validation_disabled (tests.unit.test_client.TestClientErrors) ... ok
test_client_error_message_for_positional_args (tests.unit.test_client.TestClientErrors) ... ok
test_client_generated_from_model (tests.unit.test_client.TestClientErrors) ... ok
test_client_has_endpoint_url_on_meta (tests.unit.test_client.TestClientErrors) ... ok
test_client_has_exceptions_attribute (tests.unit.test_client.TestClientErrors) ... ok
test_client_has_modeled_exceptions (tests.unit.test_client.TestClientErrors) ... ok
test_client_has_non_standard_partition_on_meta (tests.unit.test_client.TestClientErrors) ... ok
test_client_has_region_name_on_meta (tests.unit.test_client.TestClientErrors) ... ok
test_client_has_standard_partition_on_meta (tests.unit.test_client.TestClientErrors) ... ok
test_client_makes_call (tests.unit.test_client.TestClientErrors) ... ok
test_client_makes_call_with_error (tests.unit.test_client.TestClientErrors) ... ok
test_client_method_called_event (tests.unit.test_client.TestClientErrors) ... ok
test_client_method_docstring (tests.unit.test_client.TestClientErrors) ... ok
test_client_method_help (tests.unit.test_client.TestClientErrors) ... ok
test_client_method_to_api_mapping (tests.unit.test_client.TestClientErrors) ... ok
test_client_name (tests.unit.test_client.TestClientErrors) ... ok
test_client_name_using_abreviation (tests.unit.test_client.TestClientErrors) ... ok
test_client_name_with_amazon (tests.unit.test_client.TestClientErrors) ... ok
test_client_name_with_no_full_name_or_abbreviation (tests.unit.test_client.TestClientErrors) ... ok
test_client_name_with_non_alphabet_characters (tests.unit.test_client.TestClientErrors) ... ok
test_client_payload_signing_client_config_overrides_scoped (tests.unit.test_client.TestClientErrors) ... ok
test_client_payload_signing_from_client_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_payload_signing_from_scoped_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_payload_signing_from_varying_forms_of_true (tests.unit.test_client.TestClientErrors) ... ok
test_client_register_seperate_unique_id_event (tests.unit.test_client.TestClientErrors) ... ok
test_client_registers_request_created_handler (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_accelerate_client_config_overrides_scoped (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_accelerate_from_client_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_accelerate_from_scoped_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_accelerate_from_varying_forms_of_true (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_auto_registers_correctly (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_config_overrides_scoped_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_default_registers_correctly (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_path_registers_correctly (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_virtual_registers_correctly (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_with_bad_value (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_with_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_with_incorrect_style (tests.unit.test_client.TestClientErrors) ... ok
test_client_s3_addressing_style_with_scoped_config (tests.unit.test_client.TestClientErrors) ... ok
test_client_signature_no_override (tests.unit.test_client.TestClientErrors) ... ok
test_client_signature_override_arg (tests.unit.test_client.TestClientErrors) ... ok
test_client_signature_override_config_file (tests.unit.test_client.TestClientErrors) ... ok
test_client_signs_call (tests.unit.test_client.TestClientErrors) ... ok
test_client_user_agent_in_request (tests.unit.test_client.TestClientErrors) ... ok
test_client_uses_given_region_name_and_endpoint_url_when_present (tests.unit.test_client.TestClientErrors) ... ok
test_client_uses_signing_name_even_with_no_resolve (tests.unit.test_client.TestClientErrors) ... ok
test_client_uses_signing_name_from_credential_scope (tests.unit.test_client.TestClientErrors) ... ok
test_client_uses_signing_name_from_model_if_present_if_resolved (tests.unit.test_client.TestClientErrors) ... ok
test_client_uses_signing_region_from_credential_scope (tests.unit.test_client.TestClientErrors) ... ok
test_client_validates_params_by_default (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_custom_both_timeout (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_custom_connect_timeout (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_custom_neither_timeout (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_custom_params (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_custom_read_timeout (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_endpoint_url (tests.unit.test_client.TestClientErrors) ... ok
test_client_with_response_parser_factory (tests.unit.test_client.TestClientErrors) ... ok
test_clients_have_meta_object (tests.unit.test_client.TestClientErrors) ... ok
test_clients_inherit_handlers_from_session (tests.unit.test_client.TestClientErrors) ... ok
test_clients_inherit_only_at_create_time (tests.unit.test_client.TestClientErrors) ... ok
test_create_client_class_creates_class (tests.unit.test_client.TestClientErrors) ... ok
test_create_client_class_forwards_api_version (tests.unit.test_client.TestClientErrors) ... ok
test_custom_accelerate_url_forces_virtual_host (tests.unit.test_client.TestClientErrors) ... ok
test_custom_endpoint_uses_path_style (tests.unit.test_client.TestClientErrors) ... ok
test_error_with_dot_separated_code (tests.unit.test_client.TestClientErrors) ... ok
test_error_with_empty_code (tests.unit.test_client.TestClientErrors) ... ok
test_error_with_empty_contents (tests.unit.test_client.TestClientErrors) ... ok
test_error_with_empty_message (tests.unit.test_client.TestClientErrors) ... ok
test_error_with_missing_code (tests.unit.test_client.TestClientErrors) ... ok
test_error_with_no_wire_code (tests.unit.test_client.TestClientErrors) ... ok
test_event_emitted_when_invoked (tests.unit.test_client.TestClientErrors) ... ok
test_events_are_per_client (tests.unit.test_client.TestClientErrors) ... ok
test_exception_classes_across_clients_are_the_same (tests.unit.test_client.TestClientErrors) ... ok
test_getattr_emits_event (tests.unit.test_client.TestClientErrors) ... ok
test_getattr_event_returns_response (tests.unit.test_client.TestClientErrors) ... ok
test_operation_can_paginate (tests.unit.test_client.TestClientErrors) ... ok
test_operation_cannot_paginate (tests.unit.test_client.TestClientErrors) ... ok
test_paginator_class_name_from_client (tests.unit.test_client.TestClientErrors) ... ok
test_paginator_help_from_client (tests.unit.test_client.TestClientErrors) ... ok
test_service_creates_retryhandler (tests.unit.test_client.TestClientErrors) ... ok
test_service_has_no_pagination_configs (tests.unit.test_client.TestClientErrors) ... ok
test_service_has_no_waiter_configs (tests.unit.test_client.TestClientErrors) ... ok
test_service_has_retry_event (tests.unit.test_client.TestClientErrors) ... ok
test_service_has_waiter_configs (tests.unit.test_client.TestClientErrors) ... ok
test_service_registers_retry_handler (tests.unit.test_client.TestClientErrors) ... ok
test_service_retry_missing_config (tests.unit.test_client.TestClientErrors) ... ok
test_signing_region_does_not_change_client_region (tests.unit.test_client.TestClientErrors) ... ok
test_successful_pagination_object_created (tests.unit.test_client.TestClientErrors) ... ok
test_try_to_paginate_non_paginated (tests.unit.test_client.TestClientErrors) ... ok
test_waiter_config_uses_service_name_not_endpoint_prefix (tests.unit.test_client.TestClientErrors) ... ok
test_can_set_retry_max_attempts (tests.unit.test_client.TestConfig) ... ok
test_can_use_args_to_construct (tests.unit.test_client.TestConfig) ... ok
test_can_use_kwargs_to_construct (tests.unit.test_client.TestConfig) ... ok
test_can_use_mix_of_args_and_kwargs (tests.unit.test_client.TestConfig) ... ok
test_create_with_multiple_kwargs (tests.unit.test_client.TestConfig) ... ok
test_general_merge_keeps_default_values (tests.unit.test_client.TestConfig) ... ok
test_invalid_kwargs (tests.unit.test_client.TestConfig) ... ok
test_merge_overrides_only_when_user_provided_values (tests.unit.test_client.TestConfig) ... ok
test_merge_overrides_values (tests.unit.test_client.TestConfig) ... ok
test_merge_overrides_values_even_when_using_default (tests.unit.test_client.TestConfig) ... ok
test_merge_overrides_values_even_when_using_default_timeout (tests.unit.test_client.TestConfig) ... ok
test_merge_returns_new_config_object (tests.unit.test_client.TestConfig) ... ok
test_pass_invalid_length_of_args (tests.unit.test_client.TestConfig) ... ok
test_validates_max_retry_attempts (tests.unit.test_client.TestConfig) ... ok
test_validates_retry_config (tests.unit.test_client.TestConfig) ... ok
test_binary (tests.unit.test_compat.TestEnsureBytes) ... ok
test_non_ascii (tests.unit.test_compat.TestEnsureBytes) ... ok
test_non_string_or_bytes_raises_error (tests.unit.test_compat.TestEnsureBytes) ... ok
test_string (tests.unit.test_compat.TestEnsureBytes) ... ok
test_unicode (tests.unit.test_compat.TestEnsureBytes) ... ok
test_available (tests.unit.test_compat.TestGetMD5) ... ok
test_unavailable_raises_error (tests.unit.test_compat.TestGetMD5) ... ok
test_unquote_normal (tests.unit.test_compat.TestUnquoteStr) ... ok
test_unquote_str (tests.unit.test_compat.TestUnquoteStr) ... ok
test_unquote_with_spaces (tests.unit.test_compat.TestUnquoteStr) ... ok
test_total_seconds (tests.unit.test_compat.TotalSecondsTest) ... ok
tests.unit.test_compat.test_compat_shell_split_windows('', [], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('spam \\\\', ['spam', '\\\\'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('spam ', ['spam'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows(' spam', ['spam'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('spam eggs', ['spam', 'eggs'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('spam\teggs', ['spam', 'eggs'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('spam\neggs', ['spam\neggs'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('""', [''], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('" "', [' '], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('"\t"', ['\t'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('\\\\', ['\\\\'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('\\\\ ', ['\\\\'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('\\\\\t', ['\\\\'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('\\"', ['"'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('"abc" d e', ['abc', 'd', 'e'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('a\\\\b d"e f"g h', ['a\\\\b', 'de fg', 'h'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('a\\\\\\"b c d', ['a\\"b', 'c', 'd'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('a\\\\\\\\"b c" d e', ['a\\\\b c', 'd', 'e'], 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_windows('"', <class 'ValueError'>, 'win32') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('', [], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('', [], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam \\\\', ['spam', '\\'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam \\\\', ['spam', '\\'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam ', ['spam'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam ', ['spam'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix(' spam', ['spam'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix(' spam', ['spam'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam eggs', ['spam', 'eggs'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam eggs', ['spam', 'eggs'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam\teggs', ['spam', 'eggs'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam\teggs', ['spam', 'eggs'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam\neggs', ['spam', 'eggs'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('spam\neggs', ['spam', 'eggs'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('""', [''], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('""', [''], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('" "', [' '], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('" "', [' '], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('"\t"', ['\t'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('"\t"', ['\t'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\\\', ['\\'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\\\', ['\\'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\\\ ', ['\\'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\\\ ', ['\\'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\\\\t', ['\\'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\\\\t', ['\\'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\"', ['"'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('\\"', ['"'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('"abc" d e', ['abc', 'd', 'e'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('"abc" d e', ['abc', 'd', 'e'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('a\\\\b d"e f"g h', ['a\\b', 'de fg', 'h'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('a\\\\b d"e f"g h', ['a\\b', 'de fg', 'h'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('a\\\\\\"b c d', ['a\\"b', 'c', 'd'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('a\\\\\\"b c d', ['a\\"b', 'c', 'd'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('a\\\\\\\\"b c" d e', ['a\\\\b c', 'd', 'e'], 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('a\\\\\\\\"b c" d e', ['a\\\\b c', 'd', 'e'], 'darwin') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('"', <class 'ValueError'>, 'linux2') ... ok
tests.unit.test_compat.test_compat_shell_split_unix('"', <class 'ValueError'>, 'darwin') ... ok
test_bad_profiles_are_ignored (tests.unit.test_configloader.TestConfigLoader) ... ok
test_config (tests.unit.test_configloader.TestConfigLoader) ... ok
test_config_not_found (tests.unit.test_configloader.TestConfigLoader) ... ok
test_config_parse_error (tests.unit.test_configloader.TestConfigLoader) ... ok
test_multi_file_load (tests.unit.test_configloader.TestConfigLoader) ... ok
test_nested_bad_config (tests.unit.test_configloader.TestConfigLoader) ... ok
test_nested_hierarchy_parsing (tests.unit.test_configloader.TestConfigLoader) ... ok
test_nested_hierarchy_with_no_subsection_parsing (tests.unit.test_configloader.TestConfigLoader) ... ok
test_profile_map_conversion (tests.unit.test_configloader.TestConfigLoader) ... ok
test_unicode_bytes_path (tests.unit.test_configloader.TestConfigLoader) ... ok
test_unicode_bytes_path_not_found (tests.unit.test_configloader.TestConfigLoader) ... ok
test_can_remove_providers (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_first_credential_non_none_wins (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_get_provider_by_name (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_get_unknown_provider_raises_error (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_inject_additional_providers_after_existing (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_inject_provider_before_existing (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_load_credentials_single_provider (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_no_creds_loaded (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_provider_unknown (tests.unit.test_credentials.CredentialResolverTest) ... ok
test_assume_role_in_cache_but_expired (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_cache_key_is_windows_safe (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_cache_key_with_policy (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_cache_key_with_role_session_name (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_duration_seconds_can_be_provided (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_expiration_in_datetime_format (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_external_id_can_be_provided (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_mfa (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_mfa_refresh_enabled (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_no_cache (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_policy_can_be_provided (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_refreshes (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_retrieves_from_cache (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_role_session_name_can_be_provided (tests.unit.test_credentials.TestAssumeRoleCredentialFetcher) ... ok
test_assume_role_in_cache_but_expired (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_mfa_cannot_refresh_credentials (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_populates_session_name_on_refresh (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_refresher_serializes_datetime (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_retrieves_from_cache (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_with_credential_source (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_with_datetime (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_with_mfa (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_assume_role_with_no_cache (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_cache_key_is_windows_safe (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_cache_key_with_role_session_name (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_chain_prefers_cache (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_credential_source_not_among_providers (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_credential_source_returns_none (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_credential_source_with_no_providers_configured (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_credential_source_with_no_resolver_configured (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_external_id_provided (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_incomplete_source_credentials_raises_error (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_infinite_looping_profiles_raises_error (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_no_config_is_noop (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_recursive_assume_role (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_role_session_name_provided (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_source_profile_and_credential_source_provided (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_source_profile_can_reference_self (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_source_profile_does_not_exist (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_source_profile_not_provided (tests.unit.test_credentials.TestAssumeRoleCredentialProvider) ... ok
test_boto_config_file_exists_in_home_dir (tests.unit.test_credentials.TestBotoProvider) ... ok
test_env_var_set_for_boto_location (tests.unit.test_credentials.TestBotoProvider) ... ok
test_no_boto_config_file_exists (tests.unit.test_credentials.TestBotoProvider) ... ok
test_partial_creds_is_error (tests.unit.test_credentials.TestBotoProvider) ... ok
test_assume_role_creds_returned_with_config_file (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_assume_role_creds_returned_with_cred_file (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_config_file_returns_creds_if_assume_role_not_used (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_creds_file_returns_creds_if_assume_role_not_used (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_get_canonical_assume_role_without_shared_files (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_get_canonical_shared_files_without_assume_role (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_load_source_credentials (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_load_source_credentials_case_insensitive (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_load_unknown_canonical_name_raises_error (tests.unit.test_credentials.TestCanonicalNameSourceProvider) ... ok
test_config_file_errors_ignored (tests.unit.test_credentials.TestConfigFileProvider) ... ok
test_config_file_exists (tests.unit.test_credentials.TestConfigFileProvider) ... ok
test_config_file_missing_profile_config (tests.unit.test_credentials.TestConfigFileProvider) ... ok
test_partial_creds_is_error (tests.unit.test_credentials.TestConfigFileProvider) ... ok
test_can_pass_basic_auth_token (tests.unit.test_credentials.TestContainerProvider) ... ok
test_can_use_full_url (tests.unit.test_credentials.TestContainerProvider) ... ok
test_creds_refresh_when_needed (tests.unit.test_credentials.TestContainerProvider) ... ok
test_http_error_propagated (tests.unit.test_credentials.TestContainerProvider) ... ok
test_http_error_propagated_on_refresh (tests.unit.test_credentials.TestContainerProvider) ... ok
test_noop_if_env_var_is_not_set (tests.unit.test_credentials.TestContainerProvider) ... ok
test_retrieve_from_provider_if_env_var_present (tests.unit.test_credentials.TestContainerProvider) ... ok
test_create_credential_resolver (tests.unit.test_credentials.TestCreateCredentialResolver) ... ok
test_custom_cache (tests.unit.test_credentials.TestCreateCredentialResolver) ... ok
test_default_cache (tests.unit.test_credentials.TestCreateCredentialResolver) ... ok
test_env_provider_added_if_profile_from_env_set (tests.unit.test_credentials.TestCreateCredentialResolver) ... ok
test_explicit_profile_ignores_env_provider (tests.unit.test_credentials.TestCreateCredentialResolver) ... ok
test_no_profile_checks_env_provider (tests.unit.test_credentials.TestCreateCredentialResolver) ... ok
test_detect_nonascii_character (tests.unit.test_credentials.TestCredentials) ... ok
test_unicode_input (tests.unit.test_credentials.TestCredentials) ... ok
test_refresh_only_called_once (tests.unit.test_credentials.TestDeferredRefreshableCredentials) ... ok
test_refresh_using_called_on_first_access (tests.unit.test_credentials.TestDeferredRefreshableCredentials) ... ok
test_can_override_env_var_mapping (tests.unit.test_credentials.TestEnvVar) ... ok
test_can_override_expiry_env_var_mapping (tests.unit.test_credentials.TestEnvVar) ... ok
test_can_override_partial_env_var_mapping (tests.unit.test_credentials.TestEnvVar) ... ok
test_credentials_do_not_become_refreshable (tests.unit.test_credentials.TestEnvVar) ... ok
test_credentials_not_refreshable_if_no_expiry_present (tests.unit.test_credentials.TestEnvVar) ... ok
test_credentials_only_refresh_when_needed (tests.unit.test_credentials.TestEnvVar) ... ok
test_credentials_refresh (tests.unit.test_credentials.TestEnvVar) ... ok
test_credentials_throw_error_if_expiry_goes_away (tests.unit.test_credentials.TestEnvVar) ... ok
test_envvars_are_found_no_token (tests.unit.test_credentials.TestEnvVar) ... ok
test_envvars_found_with_security_token (tests.unit.test_credentials.TestEnvVar) ... ok
test_envvars_found_with_session_token (tests.unit.test_credentials.TestEnvVar) ... ok
test_envvars_not_found (tests.unit.test_credentials.TestEnvVar) ... ok
test_missing_access_key_id_raises_error (tests.unit.test_credentials.TestEnvVar) ... ok
test_partial_creds_is_an_error (tests.unit.test_credentials.TestEnvVar) ... ok
test_load_from_instance_metadata (tests.unit.test_credentials.TestInstanceMetadataProvider) ... ok
test_no_role_creds_exist (tests.unit.test_credentials.TestInstanceMetadataProvider) ... ok
test_add_key_and_contains_check (tests.unit.test_credentials.TestJSONCache) ... ok
test_added_key_can_be_retrieved (tests.unit.test_credentials.TestJSONCache) ... ok
test_can_add_multiple_keys (tests.unit.test_credentials.TestJSONCache) ... ok
test_can_override_existing_values (tests.unit.test_credentials.TestJSONCache) ... ok
test_file_is_truncated_before_writing (tests.unit.test_credentials.TestJSONCache) ... ok
test_key_error_raised_when_cache_key_does_not_exist (tests.unit.test_credentials.TestJSONCache) ... ok
test_only_accepts_json_serializable_data (tests.unit.test_credentials.TestJSONCache) ... ok
test_permissions_for_file_restricted (tests.unit.test_credentials.TestJSONCache) ... ok
test_supports_contains_check (tests.unit.test_credentials.TestJSONCache) ... ok
test_working_dir_does_not_exist (tests.unit.test_credentials.TestJSONCache) ... ok
test_load_ec2_credentials_file_exists (tests.unit.test_credentials.TestOriginalEC2Provider) ... ok
test_load_ec2_credentials_file_not_exist (tests.unit.test_credentials.TestOriginalEC2Provider) ... ok
test_can_pass_arguments_through (tests.unit.test_credentials.TestProcessProvider) ... ok
test_can_refresh_credentials (tests.unit.test_credentials.TestProcessProvider) ... ok
test_can_retrieve_via_process (tests.unit.test_credentials.TestProcessProvider) ... ok
test_missing_access_key_raises_exception (tests.unit.test_credentials.TestProcessProvider) ... ok
test_missing_expiration (tests.unit.test_credentials.TestProcessProvider) ... ok
test_missing_expiration_and_session_token (tests.unit.test_credentials.TestProcessProvider) ... ok
test_missing_secret_key_raises_exception (tests.unit.test_credentials.TestProcessProvider) ... ok
test_missing_session_token (tests.unit.test_credentials.TestProcessProvider) ... ok
test_missing_version_in_payload_returned_raises_exception (tests.unit.test_credentials.TestProcessProvider) ... ok
test_non_zero_rc_raises_exception (tests.unit.test_credentials.TestProcessProvider) ... ok
test_process_not_invoked_if_not_configured_for_empty_config (tests.unit.test_credentials.TestProcessProvider) ... ok
test_process_not_invoked_if_profile_does_not_exist (tests.unit.test_credentials.TestProcessProvider) ... ok
test_unsupported_version_raises_mismatch (tests.unit.test_credentials.TestProcessProvider) ... ok
test_advisory_refresh_needed (tests.unit.test_credentials.TestRefreshLogic) ... ok
test_exception_propogated_on_error_during_mandatory_period (tests.unit.test_credentials.TestRefreshLogic) ... ok
test_exception_propogated_on_expired_credentials (tests.unit.test_credentials.TestRefreshLogic) ... ok
test_mandatory_refresh_needed (tests.unit.test_credentials.TestRefreshLogic) ... ok
test_refresh_fails_is_not_an_error_during_advisory_period (tests.unit.test_credentials.TestRefreshLogic) ... ok
test_refresh_giving_expired_credentials_raises_exception (tests.unit.test_credentials.TestRefreshLogic) ... ok
test_detect_nonascii_character (tests.unit.test_credentials.TestRefreshableCredentials) ... ok
test_get_credentials_set (tests.unit.test_credentials.TestRefreshableCredentials) ... ok
test_no_expiration (tests.unit.test_credentials.TestRefreshableCredentials) ... ok
test_no_refresh_needed (tests.unit.test_credentials.TestRefreshableCredentials) ... ok
test_refresh_needed (tests.unit.test_credentials.TestRefreshableCredentials) ... ok
test_unicode_input (tests.unit.test_credentials.TestRefreshableCredentials) ... ok
test_credential_file_exists_default_profile (tests.unit.test_credentials.TestSharedCredentialsProvider) ... ok
test_credentials_file_does_not_exist_returns_none (tests.unit.test_credentials.TestSharedCredentialsProvider) ... ok
test_credentials_file_exists_with_session_token (tests.unit.test_credentials.TestSharedCredentialsProvider) ... ok
test_credentials_file_with_multiple_profiles (tests.unit.test_credentials.TestSharedCredentialsProvider) ... ok
test_partial_creds_raise_error (tests.unit.test_credentials.TestSharedCredentialsProvider) ... ok
test_auth_header_preserved_from_s3_redirects (tests.unit.test_endpoint.TestAWSSession) ... ok
test_max_pool_conns_injects_custom_adapter (tests.unit.test_endpoint.TestAWSSession) ... ok
test_can_specify_max_pool_conns (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_create_endpoint_with_customized_timeout (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_create_endpoint_with_default_timeout (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_creates_endpoint_with_configured_url (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_env_ignored_if_explicitly_passed (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_get_endpoint_default_verify_ssl (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_honor_cert_bundle_env_var (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_verify_ssl_can_be_disabled (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_verify_ssl_can_specify_cert_bundle (tests.unit.test_endpoint.TestEndpointCreator) ... ok
test_can_specify_max_pool_connections (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_can_specify_proxies (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_make_request_injects_better_bad_status_line_error_msg (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_make_request_injects_better_dns_error_msg (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_make_request_no_signature_version (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_make_request_with_context (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_make_request_with_no_auth (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_make_request_with_proxies (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_timeout_can_be_specified (tests.unit.test_endpoint.TestEndpointFeatures) ... ok
test_retry_attempts_added_to_response_metadata (tests.unit.test_endpoint.TestRetryInterface) ... ok
test_retry_attempts_is_zero_when_not_retried (tests.unit.test_endpoint.TestRetryInterface) ... ok
test_retry_events_are_emitted (tests.unit.test_endpoint.TestRetryInterface) ... ok
test_retry_events_can_alter_behavior (tests.unit.test_endpoint.TestRetryInterface) ... ok
test_retry_on_socket_errors (tests.unit.test_endpoint.TestRetryInterface) ... ok
test_reset_stream_on_retry (tests.unit.test_endpoint.TestS3ResetStreamOnRetry) ... ok
test_from_code (tests.unit.test_errorfactory.TestBaseClientExceptions) ... ok
test_from_code_nonmatch_defaults_to_client_error (tests.unit.test_errorfactory.TestBaseClientExceptions) ... ok
test_gettattr_message (tests.unit.test_errorfactory.TestBaseClientExceptions) ... ok
test_has_client_error (tests.unit.test_errorfactory.TestBaseClientExceptions) ... ok
test_class_name (tests.unit.test_errorfactory.TestClientExceptionsFactory) ... ok
test_collects_modeled_exceptions_for_all_operations (tests.unit.test_errorfactory.TestClientExceptionsFactory) ... ok
test_creates_modeled_exception (tests.unit.test_errorfactory.TestClientExceptionsFactory) ... ok
test_creates_modeled_exception_mapping_that_has_code (tests.unit.test_errorfactory.TestClientExceptionsFactory) ... ok
test_creates_modeled_exception_mapping_that_has_no_code (tests.unit.test_errorfactory.TestClientExceptionsFactory) ... ok
tests.unit.test_exceptions.test_client_error_can_handle_missing_code_or_message ... ok
tests.unit.test_exceptions.test_client_error_has_operation_name_set ... ok
tests.unit.test_exceptions.test_client_error_set_correct_operation_name ... ok
tests.unit.test_exceptions.test_retry_info_added_when_present ... ok
tests.unit.test_exceptions.test_retry_info_not_added_if_retry_attempts_not_present ... ok
tests.unit.test_exceptions.test_can_handle_when_response_missing_error_key ... ok
test_add_md5_raises_error_when_md5_unavailable (tests.unit.test_handlers.TestAddMD5) ... ok
test_add_md5_with_bytearray_object (tests.unit.test_handlers.TestAddMD5) ... ok
test_add_md5_with_bytes_object (tests.unit.test_handlers.TestAddMD5) ... ok
test_add_md5_with_file_like_body (tests.unit.test_handlers.TestAddMD5) ... ok
test_adds_md5_when_s3v2 (tests.unit.test_handlers.TestAddMD5) ... ok
test_adds_md5_when_s3v4 (tests.unit.test_handlers.TestAddMD5) ... ok
test_adds_md5_when_v4 (tests.unit.test_handlers.TestAddMD5) ... ok
test_conditional_does_not_add_when_md5_unavailable (tests.unit.test_handlers.TestAddMD5) ... ok
test_command_alias (tests.unit.test_handlers.TestCommandAlias) ... ok
test_binary (tests.unit.test_handlers.TestConvertStringBodyToFileLikeObject) ... ok
test_file (tests.unit.test_handlers.TestConvertStringBodyToFileLikeObject) ... ok
test_non_ascii_characters (tests.unit.test_handlers.TestConvertStringBodyToFileLikeObject) ... ok
test_string (tests.unit.test_handlers.TestConvertStringBodyToFileLikeObject) ... ok
test_unicode (tests.unit.test_handlers.TestConvertStringBodyToFileLikeObject) ... ok
test_200_response_with_no_error_left_untouched (tests.unit.test_handlers.TestHandlers) ... ok
test_500_response_can_be_none (tests.unit.test_handlers.TestHandlers) ... ok
test_500_status_code_set_for_200_response (tests.unit.test_handlers.TestHandlers) ... ok
test_accept_header_not_added_if_present (tests.unit.test_handlers.TestHandlers) ... ok
test_account_id_not_added_if_present (tests.unit.test_handlers.TestHandlers) ... ok
test_application_json_header_added (tests.unit.test_handlers.TestHandlers) ... ok
test_bucket_too_long_raises_exception (tests.unit.test_handlers.TestHandlers) ... ok
test_cant_decode_quoted_jsondoc (tests.unit.test_handlers.TestHandlers) ... ok
test_checksum_added_only_if_not_exists (tests.unit.test_handlers.TestHandlers) ... ok
test_copy_source_has_validation_failure (tests.unit.test_handlers.TestHandlers) ... ok
test_copy_source_ignored_if_not_dict (tests.unit.test_handlers.TestHandlers) ... ok
test_copy_source_supports_dict (tests.unit.test_handlers.TestHandlers) ... ok
test_copy_source_supports_optional_version_id (tests.unit.test_handlers.TestHandlers) ... ok
test_copy_source_with_multiple_questions (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_json_policy (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_list_objects (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_list_objects_does_not_decode_without_context (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_list_objects_with_common_prefixes (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_list_objects_with_delimiter (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_list_objects_with_marker (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_list_objects_with_nextmarker (tests.unit.test_handlers.TestHandlers) ... ok
test_decode_quoted_jsondoc (tests.unit.test_handlers.TestHandlers) ... ok
test_dest_region_removed (tests.unit.test_handlers.TestHandlers) ... ok
test_destination_region_always_changed (tests.unit.test_handlers.TestHandlers) ... ok
test_disable_signing (tests.unit.test_handlers.TestHandlers) ... ok
test_does_decode_template_body_in_order (tests.unit.test_handlers.TestHandlers) ... ok
test_get_bucket_location_optional (tests.unit.test_handlers.TestHandlers) ... ok
test_get_console_output (tests.unit.test_handlers.TestHandlers) ... ok
test_get_console_output_bad_unicode_errors (tests.unit.test_handlers.TestHandlers) ... ok
test_get_console_output_cant_be_decoded (tests.unit.test_handlers.TestHandlers) ... ok
test_get_template_has_error_response (tests.unit.test_handlers.TestHandlers) ... ok
test_glacier_checksums_added (tests.unit.test_handlers.TestHandlers) ... ok
test_glacier_checksums_support_raw_bytes (tests.unit.test_handlers.TestHandlers) ... ok
test_glacier_version_header_added (tests.unit.test_handlers.TestHandlers) ... ok
test_inject_account_id (tests.unit.test_handlers.TestHandlers) ... ok
test_inject_presigned_url_ec2 (tests.unit.test_handlers.TestHandlers) ... ok
test_inject_presigned_url_rds (tests.unit.test_handlers.TestHandlers) ... ok
test_invalid_char_in_bucket_raises_exception (tests.unit.test_handlers.TestHandlers) ... ok
test_noop_if_output_key_does_not_exist (tests.unit.test_handlers.TestHandlers) ... ok
test_not_dns_compat_but_still_valid_bucket_name (tests.unit.test_handlers.TestHandlers) ... ok
test_only_quote_url_path_not_version_id (tests.unit.test_handlers.TestHandlers) ... ok
test_only_version_id_is_special_cased (tests.unit.test_handlers.TestHandlers) ... ok
test_presigned_url_already_present_ec2 (tests.unit.test_handlers.TestHandlers) ... ok
test_presigned_url_already_present_for_rds (tests.unit.test_handlers.TestHandlers) ... ok
test_presigned_url_already_present_rds (tests.unit.test_handlers.TestHandlers) ... ok
test_presigned_url_casing_changed_for_rds (tests.unit.test_handlers.TestHandlers) ... ok
test_presigned_url_with_source_region_ec2 (tests.unit.test_handlers.TestHandlers) ... ok
test_presigned_url_with_source_region_rds (tests.unit.test_handlers.TestHandlers) ... ok
test_quote_source_header_needs_no_changes (tests.unit.test_handlers.TestHandlers) ... ok
test_register_retry_for_handlers_with_no_endpoint_prefix (tests.unit.test_handlers.TestHandlers) ... ok
test_register_retry_handlers (tests.unit.test_handlers.TestHandlers) ... ok
test_route53_resource_id (tests.unit.test_handlers.TestHandlers) ... ok
test_route53_resource_id_missing_input_shape (tests.unit.test_handlers.TestHandlers) ... ok
test_run_instances_userdata (tests.unit.test_handlers.TestHandlers) ... ok
test_run_instances_userdata_blob (tests.unit.test_handlers.TestHandlers) ... ok
test_set_encoding_type (tests.unit.test_handlers.TestHandlers) ... ok
test_set_operation_specific_signer_no_auth_type (tests.unit.test_handlers.TestHandlers) ... ok
test_set_operation_specific_signer_s3v4 (tests.unit.test_handlers.TestHandlers) ... ok
test_set_operation_specific_signer_s3v4_unsigned_payload (tests.unit.test_handlers.TestHandlers) ... ok
test_set_operation_specific_signer_unsigned (tests.unit.test_handlers.TestHandlers) ... ok
test_set_operation_specific_signer_v4 (tests.unit.test_handlers.TestHandlers) ... ok
test_set_operation_specific_signer_v4_unsinged_payload (tests.unit.test_handlers.TestHandlers) ... ok
test_source_region_removed (tests.unit.test_handlers.TestHandlers) ... ok
test_source_region_removed_when_presigned_url_provided_for_rds (tests.unit.test_handlers.TestHandlers) ... ok
test_switch_host_with_param (tests.unit.test_handlers.TestHandlers) ... ok
test_tree_hash_added_only_if_not_exists (tests.unit.test_handlers.TestHandlers) ... ok
test_use_event_operation_name (tests.unit.test_handlers.TestHandlers) ... ok
test_valid_bucket_name_hyphen (tests.unit.test_handlers.TestHandlers) ... ok
test_valid_bucket_name_period (tests.unit.test_handlers.TestHandlers) ... ok
test_valid_bucket_name_underscore (tests.unit.test_handlers.TestHandlers) ... ok
test_validate_non_ascii_metadata_keys (tests.unit.test_handlers.TestHandlers) ... ok
test_validate_non_ascii_metadata_values (tests.unit.test_handlers.TestHandlers) ... ok
test_validate_non_triggered_when_no_md_specified (tests.unit.test_handlers.TestHandlers) ... ok
test_validation_is_noop_if_no_bucket_param_exists (tests.unit.test_handlers.TestHandlers) ... ok
test_validation_passes_when_all_ascii_chars (tests.unit.test_handlers.TestHandlers) ... ok
test_alias_parameter_and_original_in_call (tests.unit.test_handlers.TestParameterAlias) ... ok
test_alias_parameter_in_call (tests.unit.test_handlers.TestParameterAlias) ... ok
test_alias_parameter_in_call_does_not_touch_original (tests.unit.test_handlers.TestParameterAlias) ... ok
test_alias_parameter_in_documentation_request_example (tests.unit.test_handlers.TestParameterAlias) ... ok
test_alias_parameter_in_documentation_request_params (tests.unit.test_handlers.TestParameterAlias) ... ok
test_does_not_alias_parameter_for_no_input_shape (tests.unit.test_handlers.TestParameterAlias) ... ok
test_does_not_alias_parameter_for_not_modeled_member (tests.unit.test_handlers.TestParameterAlias) ... ok
test_s3_special_case_is_before_other_retry (tests.unit.test_handlers.TestRetryHandlerOrder) ... ok
test_copy_source_sse_params (tests.unit.test_handlers.TestSSEMD5) ... ok
test_copy_source_sse_params_as_str (tests.unit.test_handlers.TestSSEMD5) ... ok
test_raises_error_when_md5_unavailable (tests.unit.test_handlers.TestSSEMD5) ... ok
test_sse_params (tests.unit.test_handlers.TestSSEMD5) ... ok
test_sse_params_as_str (tests.unit.test_handlers.TestSSEMD5) ... ok
test_can_get_history_recorder (tests.unit.test_history.TestGetHistoryRecorder) ... ok
test_does_reuse_history_recorder (tests.unit.test_history.TestGetHistoryRecorder) ... ok
test_can_attach_and_call_handler_emit (tests.unit.test_history.TestHistoryRecorder) ... ok
test_can_call_multiple_handlers (tests.unit.test_history.TestHistoryRecorder) ... ok
test_can_ignore_handler_exceptions (tests.unit.test_history.TestHistoryRecorder) ... ok
test_does_not_call_handlers_when_disabled (tests.unit.test_history.TestHistoryRecorder) ... ok
test_does_not_call_handlers_when_never_enabled (tests.unit.test_history.TestHistoryRecorder) ... ok
test_does_use_botocore_source_by_default (tests.unit.test_history.TestHistoryRecorder) ... ok
test_all_none (tests.unit.test_hooks.TestFirstNonNoneResponse) ... ok
test_default_value_if_non_none_found (tests.unit.test_hooks.TestFirstNonNoneResponse) ... ok
test_first_non_none (tests.unit.test_hooks.TestFirstNonNoneResponse) ... ok
test_catch_all_hook (tests.unit.test_hooks.TestHierarchicalEventEmitter) ... ok
test_hook_called_in_proper_order (tests.unit.test_hooks.TestHierarchicalEventEmitter) ... ok
test_non_dot_behavior (tests.unit.test_hooks.TestHierarchicalEventEmitter) ... ok
test_with_dots (tests.unit.test_hooks.TestHierarchicalEventEmitter) ... ok
test_all_hooks (tests.unit.test_hooks.TestStopProcessing) ... ok
test_no_handlers (tests.unit.test_hooks.TestStopProcessing) ... ok
test_no_responses (tests.unit.test_hooks.TestStopProcessing) ... ok
test_stop_processing_after_first_response (tests.unit.test_hooks.TestStopProcessing) ... ok
test_cache_cleared_properly (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_can_unregister_for_wildcard_events (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_complicated_register_unregister (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_copy_emitter (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_copy_emitter_with_unique_id_event (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_copy_events_with_partials (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_handler_call_order_with_hierarchy (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_handlers_called_in_order (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_hierarchical_wildcard_handler (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_multiple_wildcard_events (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_one_level_wildcard_handler (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_first_hierarchy (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_first_single_level (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_last_hierarchy (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_multiple_handlers_for_same_event (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_unregister_first_last (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_with_no_uses_count_unregister (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_with_unique_id (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_with_uses_count_initially (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_with_uses_count_not_initially (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_register_with_uses_count_unregister (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_remove_handler_with_and_without_unique_id (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_remove_handler_with_unique_id (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_unregister_does_not_exist (tests.unit.test_hooks.TestWildcardHandlers) ... ok
test_injection (tests.unit.test_idempotency.TestIdempotencyInjection) ... ok
test_provided (tests.unit.test_idempotency.TestIdempotencyInjection) ... ok
test_process_empty_extras (tests.unit.test_loaders.TestExtrasProcessor) ... ok
test_process_empty_list (tests.unit.test_loaders.TestExtrasProcessor) ... ok
test_process_in_order (tests.unit.test_loaders.TestExtrasProcessor) ... ok
test_process_merge_key (tests.unit.test_loaders.TestExtrasProcessor) ... ok
test_file_does_not_exist_returns_false (tests.unit.test_loaders.TestJSONFileLoader) ... ok
test_file_exists_check (tests.unit.test_loaders.TestJSONFileLoader) ... ok
test_file_with_non_ascii (tests.unit.test_loaders.TestJSONFileLoader) ... ok
test_load_file (tests.unit.test_loaders.TestJSONFileLoader) ... ok
test_load_json_file_does_not_exist_returns_none (tests.unit.test_loaders.TestJSONFileLoader) ... ok
test_can_add_to_search_path (tests.unit.test_loaders.TestLoader) ... ok
test_can_initialize_with_search_paths (tests.unit.test_loaders.TestLoader) ... ok
test_create_loader_parses_data_path (tests.unit.test_loaders.TestLoader) ... ok
test_data_not_found_raises_exception (tests.unit.test_loaders.TestLoader) ... ok
test_default_search_paths (tests.unit.test_loaders.TestLoader) ... ok
test_error_raised_if_service_does_not_exist (tests.unit.test_loaders.TestLoader) ... ok
test_load_data_uses_loader (tests.unit.test_loaders.TestLoader) ... ok
test_load_service_model (tests.unit.test_loaders.TestLoader) ... ok
test_load_service_model_enforces_case (tests.unit.test_loaders.TestLoader) ... ok
test_load_service_model_uses_provided_type_name (tests.unit.test_loaders.TestLoader) ... ok
test_determine_latest (tests.unit.test_loaders.TestLoadersWithDirectorySearching) ... ok
test_list_available_services (tests.unit.test_loaders.TestLoadersWithDirectorySearching) ... ok
test_append_extra_type (tests.unit.test_loaders.TestMergeExtras) ... ok
test_extras_not_found (tests.unit.test_loaders.TestMergeExtras) ... ok
test_include_default_extras (tests.unit.test_loaders.TestMergeExtras) ... ok
test_merge_extras (tests.unit.test_loaders.TestMergeExtras) ... ok
test_no_merge_in_extras (tests.unit.test_loaders.TestMergeExtras) ... ok
test_sdk_empty_extras_skipped (tests.unit.test_loaders.TestMergeExtras) ... ok
test_documentation_on_shape_used (tests.unit.test_model.TestBuilders) ... ok
test_enum_values_on_string_used (tests.unit.test_model.TestBuilders) ... ok
test_nested_structure (tests.unit.test_model.TestBuilders) ... ok
test_ordered_shape_builder (tests.unit.test_model.TestBuilders) ... ok
test_structure_shape_builder_with_scalar_types (tests.unit.test_model.TestBuilders) ... ok
test_structure_shape_with_list (tests.unit.test_model.TestBuilders) ... ok
test_structure_shape_with_map_type (tests.unit.test_model.TestBuilders) ... ok
test_structure_shape_with_structure_type (tests.unit.test_model.TestBuilders) ... ok
test_unknown_shape_type (tests.unit.test_model.TestBuilders) ... ok
test_use_shape_name_when_provided (tests.unit.test_model.TestBuilders) ... ok
test_deep_merge (tests.unit.test_model.TestDeepMerge) ... ok
test_merges_copy_dict (tests.unit.test_model.TestDeepMerge) ... ok
test_auth_type_not_set (tests.unit.test_model.TestOperationModelFromService) ... ok
test_deprecated_absent (tests.unit.test_model.TestOperationModelFromService) ... ok
test_deprecated_present (tests.unit.test_model.TestOperationModelFromService) ... ok
test_deprecated_present_false (tests.unit.test_model.TestOperationModelFromService) ... ok
test_error_shapes (tests.unit.test_model.TestOperationModelFromService) ... ok
test_has_auth_type (tests.unit.test_model.TestOperationModelFromService) ... ok
test_has_documentation_property (tests.unit.test_model.TestOperationModelFromService) ... ok
test_name_and_wire_name_defaults_to_same_value (tests.unit.test_model.TestOperationModelFromService) ... ok
test_name_from_service (tests.unit.test_model.TestOperationModelFromService) ... ok
test_name_from_service_model_when_differs_from_name (tests.unit.test_model.TestOperationModelFromService) ... ok
test_operation_input_model (tests.unit.test_model.TestOperationModelFromService) ... ok
test_operation_name_in_repr (tests.unit.test_model.TestOperationModelFromService) ... ok
test_operation_output_model (tests.unit.test_model.TestOperationModelFromService) ... ok
test_operation_shape_not_required (tests.unit.test_model.TestOperationModelFromService) ... ok
test_service_model_available_from_operation_model (tests.unit.test_model.TestOperationModelFromService) ... ok
test_wire_name_always_matches_model (tests.unit.test_model.TestOperationModelFromService) ... ok
test_not_streaming_input_for_operation (tests.unit.test_model.TestOperationModelStreamingTypes) ... ok
test_not_streaming_output_for_operation (tests.unit.test_model.TestOperationModelStreamingTypes) ... ok
test_streaming_input_for_operation (tests.unit.test_model.TestOperationModelStreamingTypes) ... ok
test_streaming_output_for_operation (tests.unit.test_model.TestOperationModelStreamingTypes) ... ok
test_documentation_exposed_as_property (tests.unit.test_model.TestServiceModel) ... ok
test_metadata_available (tests.unit.test_model.TestServiceModel) ... ok
test_operation_does_not_exist (tests.unit.test_model.TestServiceModel) ... ok
test_service_name_can_be_overriden (tests.unit.test_model.TestServiceModel) ... ok
test_service_name_defaults_to_endpoint_prefix (tests.unit.test_model.TestServiceModel) ... ok
test_shape_names (tests.unit.test_model.TestServiceModel) ... ok
test_signing_name_defaults_to_endpoint_prefix (tests.unit.test_model.TestServiceModel) ... ok
test_bad_shape_ref (tests.unit.test_model.TestShapeResolver) ... ok
test_get_shape_by_name (tests.unit.test_model.TestShapeResolver) ... ok
test_missing_type_key (tests.unit.test_model.TestShapeResolver) ... ok
test_resolve_shape_reference (tests.unit.test_model.TestShapeResolver) ... ok
test_resolve_shape_references_with_member_traits (tests.unit.test_model.TestShapeResolver) ... ok
test_serialization_cache (tests.unit.test_model.TestShapeResolver) ... ok
test_shape_does_not_exist (tests.unit.test_model.TestShapeResolver) ... ok
test_shape_list (tests.unit.test_model.TestShapeResolver) ... ok
test_shape_metadata (tests.unit.test_model.TestShapeResolver) ... ok
test_shape_name_in_repr (tests.unit.test_model.TestShapeResolver) ... ok
test_shape_overrides (tests.unit.test_model.TestShapeResolver) ... ok
test_shape_type_structure (tests.unit.test_model.TestShapeResolver) ... ok
tests.unit.test_model.test_missing_model_attribute_raises_exception('api_version',) ... ok
tests.unit.test_model.test_missing_model_attribute_raises_exception('protocol',) ... ok
test_build_full_result_with_bytes (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_build_full_result_with_listed_bytes (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_build_full_result_with_multiple_bytes_values (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_build_full_result_with_nested_bytes (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_resume_with_bytes (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_resume_with_listed_bytes (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_resume_with_multiple_bytes_values (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_resume_with_nested_bytes (tests.unit.test_paginate.TestBinaryTokens) ... ok
test_deprecated_multiple_starting_token (tests.unit.test_paginate.TestDeprecatedStartingToken) ... ok
test_deprecated_starting_token (tests.unit.test_paginate.TestDeprecatedStartingToken) ... ok
test_deprecated_starting_token_rejects_too_many_input_tokens (tests.unit.test_paginate.TestDeprecatedStartingToken) ... ok
test_deprecated_starting_token_returns_new_style_next_token (tests.unit.test_paginate.TestDeprecatedStartingToken) ... ok
test_deprecated_starting_token_without_all_input_set_to_none (tests.unit.test_paginate.TestDeprecatedStartingToken) ... ok
test_build_full_result_with_single_key (tests.unit.test_paginate.TestExpressionKeyIterators) ... ok
test_result_key_iters (tests.unit.test_paginate.TestExpressionKeyIterators) ... ok
test_include_non_aggregate_keys (tests.unit.test_paginate.TestIncludeNonResultKeys) ... ok
test_include_with_multiple_result_keys (tests.unit.test_paginate.TestIncludeNonResultKeys) ... ok
test_include_with_nested_result_keys (tests.unit.test_paginate.TestIncludeNonResultKeys) ... ok
test_different_kinds_of_result_key (tests.unit.test_paginate.TestIncludeResultKeys) ... ok
test_result_key_is_missing (tests.unit.test_paginate.TestIncludeResultKeys) ... ok
test_bad_input_tokens (tests.unit.test_paginate.TestKeyIterators) ... ok
test_build_full_result_with_single_key (tests.unit.test_paginate.TestKeyIterators) ... ok
test_max_items_as_strings (tests.unit.test_paginate.TestKeyIterators) ... ok
test_max_items_can_be_specified (tests.unit.test_paginate.TestKeyIterators) ... ok
test_max_items_can_be_specified_truncates_response (tests.unit.test_paginate.TestKeyIterators) ... ok
test_max_items_exceeds_actual_amount (tests.unit.test_paginate.TestKeyIterators) ... ok
test_next_token_on_page_boundary (tests.unit.test_paginate.TestKeyIterators) ... ok
test_result_key_iters (tests.unit.test_paginate.TestKeyIterators) ... ok
test_resume_next_marker_mid_page (tests.unit.test_paginate.TestKeyIterators) ... ok
test_build_full_result_with_multiple_input_keys (tests.unit.test_paginate.TestMultipleInputKeys) ... ok
test_result_key_exposed_on_page_iterator (tests.unit.test_paginate.TestMultipleInputKeys) ... ok
test_result_key_exposed_on_paginator (tests.unit.test_paginate.TestMultipleInputKeys) ... ok
test_resume_encounters_an_empty_payload (tests.unit.test_paginate.TestMultipleInputKeys) ... ok
test_resume_with_multiple_input_keys (tests.unit.test_paginate.TestMultipleInputKeys) ... ok
test_build_full_result_with_different_length_result_keys (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_build_full_result_with_multiple_result_keys (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_build_full_result_with_zero_length_result_key (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_build_result_with_secondary_keys (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_resume_with_secondary_keys (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_resume_with_secondary_result_as_integer (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_resume_with_secondary_result_as_string (tests.unit.test_paginate.TestMultipleResultKeys) ... ok
test_s3_list_multipart_uploads (tests.unit.test_paginate.TestMultipleTokens) ... ok
test_clean_token (tests.unit.test_paginate.TestOptionalTokens) ... ok
test_any_passed_in_args_are_unmodified (tests.unit.test_paginate.TestPagination) ... ok
test_build_full_result_with_single_key (tests.unit.test_paginate.TestPagination) ... ok
test_build_multiple_results (tests.unit.test_paginate.TestPagination) ... ok
test_exception_raised_if_same_next_token (tests.unit.test_paginate.TestPagination) ... ok
test_more_tokens (tests.unit.test_paginate.TestPagination) ... ok
test_more_tokens_is_path_expression (tests.unit.test_paginate.TestPagination) ... ok
test_next_token_in_response (tests.unit.test_paginate.TestPagination) ... ok
test_next_token_is_string (tests.unit.test_paginate.TestPagination) ... ok
test_next_token_with_or_expression (tests.unit.test_paginate.TestPagination) ... ok
test_no_next_token (tests.unit.test_paginate.TestPagination) ... ok
test_page_size (tests.unit.test_paginate.TestPagination) ... ok
test_result_key_available (tests.unit.test_paginate.TestPagination) ... ok
test_with_empty_markers (tests.unit.test_paginate.TestPagination) ... ok
test_get_paginator (tests.unit.test_paginate.TestPaginatorModel) ... ok
test_get_paginator_no_exists (tests.unit.test_paginate.TestPaginatorModel) ... ok
test_no_page_size (tests.unit.test_paginate.TestPaginatorPageSize) ... ok
test_page_size (tests.unit.test_paginate.TestPaginatorPageSize) ... ok
test_page_size_incorrectly_provided (tests.unit.test_paginate.TestPaginatorPageSize) ... ok
test_s3_list_object_complex (tests.unit.test_paginate.TestPaginatorWithPathExpressions) ... ok
test_s3_list_objects (tests.unit.test_paginate.TestPaginatorWithPathExpressions) ... ok
test_empty_when_no_match (tests.unit.test_paginate.TestSearchOverResults) ... ok
test_no_yield_when_no_match_on_page (tests.unit.test_paginate.TestSearchOverResults) ... ok
test_yields_individual_list_values (tests.unit.test_paginate.TestSearchOverResults) ... ok
test_yields_non_list_values (tests.unit.test_paginate.TestSearchOverResults) ... ok
test_int_page_size (tests.unit.test_paginate.TestStringPageSize) ... ok
test_str_page_size (tests.unit.test_paginate.TestStringPageSize) ... ok
test_decode (tests.unit.test_paginate.TestTokenDecoder) ... ok
test_decode_with_bytes (tests.unit.test_paginate.TestTokenDecoder) ... ok
test_decode_with_listed_bytes (tests.unit.test_paginate.TestTokenDecoder) ... ok
test_decode_with_multiple_bytes_values (tests.unit.test_paginate.TestTokenDecoder) ... ok
test_decode_with_nested_bytes (tests.unit.test_paginate.TestTokenDecoder) ... ok
test_can_decorate_scalar_parsing (tests.unit.test_parsers.TestCanDecorateResponseParsing) ... ok
test_can_decorate_timestamp_parser (tests.unit.test_parsers.TestCanDecorateResponseParsing) ... ok
test_normal_blob_parsing (tests.unit.test_parsers.TestCanDecorateResponseParsing) ... ok
test_invalid_xml_shown_in_error_message (tests.unit.test_parsers.TestHandlesInvalidXMLResponses) ... ok
test_empty_json_response (tests.unit.test_parsers.TestHandlesNoOutputShape) ... ok
test_empty_query_response (tests.unit.test_parsers.TestHandlesNoOutputShape) ... ok
test_empty_rest_json_response (tests.unit.test_parsers.TestHandlesNoOutputShape) ... ok
test_empty_rest_xml_response (tests.unit.test_parsers.TestHandlesNoOutputShape) ... ok
test_can_add_errors_into_response (tests.unit.test_parsers.TestHeaderResponseInclusion) ... ok
test_can_always_json_serialize_headers (tests.unit.test_parsers.TestHeaderResponseInclusion) ... ok
test_can_parse_glacier_error_response (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parse_rest_json_errors (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parse_rest_xml_errors (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parse_restjson_error_code (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parse_route53_with_missing_message (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parse_sdb_error_response_query_protocol (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parse_with_case_insensitive_keys (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_can_parser_ec2_errors (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_error_response_with_no_body_rest_json (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_error_response_with_string_body_rest_json (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_error_response_with_xml_body_rest_json (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_parse_error_response_for_query_protocol (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_response_metadata_errors_alternate_form_json_protocol (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_response_metadata_errors_for_json_protocol (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_s3_error_response (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_s3_error_response_with_no_body (tests.unit.test_parsers.TestParseErrorResponses) ... ok
test_multiple_structures_list_returns_struture (tests.unit.test_parsers.TestRESTXMLResponses) ... ok
test_metadata_always_exists_for_ec2 (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_metadata_always_exists_for_json (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_metadata_always_exists_for_query (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_metadata_always_exists_on_rest_json_response (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_metadata_always_exists_on_rest_xml_response (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_response_metadata_from_s3_response (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_response_metadata_on_json_request (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_response_metadata_on_rest_json_response (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_response_metadata_parsed_for_ec2 (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_response_metadata_parsed_for_query_service (tests.unit.test_parsers.TestResponseMetadataParsed) ... ok
test_can_parse_float_timestamps (tests.unit.test_parsers.TestResponseParsingDatetimes) ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.EC2QueryParser object at 0x7f8a0a2ea710>, b'<html><body><b>Http/1.1 Service Unavailable</b></body></html>') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.EC2QueryParser object at 0x7f8a0a15ceb8>, b'') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.QueryParser object at 0x7f8a09712fd0>, b'<html><body><b>Http/1.1 Service Unavailable</b></body></html>') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.QueryParser object at 0x7f8a0981ef98>, b'') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.JSONParser object at 0x7f8a09672978>, b'<html><body><b>Http/1.1 Service Unavailable</b></body></html>') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.JSONParser object at 0x7f8a09712630>, b'') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.RestJSONParser object at 0x7f8a096729b0>, b'<html><body><b>Http/1.1 Service Unavailable</b></body></html>') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.RestJSONParser object at 0x7f8a09672a90>, b'') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.RestXMLParser object at 0x7f8a09672b38>, b'<html><body><b>Http/1.1 Service Unavailable</b></body></html>') ... ok
tests.unit.test_parsers.test_can_handle_generic_error_message(<botocore.parsers.RestXMLParser object at 0x7f8a09672b00>, b'') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Foo', 'val1'), ('Bar', 'val2')])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Foo=val1&Bar=val2')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure with locationName and queryName applied to members'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType'), ('locationName', 'barLocationName')])), ('Yuck', OrderedDict([('shape', 'StringType'), ('locationName', 'yuckLocationName'), ('queryName', 'yuckQueryName')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Foo', 'val1'), ('Bar', 'val2'), ('Yuck', 'val3')])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Foo=val1&BarLocationName=val2&yuckQueryName=val3')])), ('description', 'Structure with locationName and queryName applied to members'), ('suite_id', 1), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Nested structure members'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('StructArg', OrderedDict([('shape', 'StructType'), ('locationName', 'Struct')]))]))])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ScalarArg', OrderedDict([('shape', 'StringType'), ('locationName', 'Scalar')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('StructArg', OrderedDict([('ScalarArg', 'foo')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Struct.Scalar=foo')])), ('description', 'Nested structure members'), ('suite_id', 2), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List types'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListArg', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'Strings')]))])), ('Strings', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListArg', ['foo', 'bar', 'baz'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ListArg.1=foo&ListArg.2=bar&ListArg.3=baz')])), ('description', 'List types'), ('suite_id', 3), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List with location name applied to member'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListArg', OrderedDict([('shape', 'ListType'), ('locationName', 'ListMemberName')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('LocationName', 'item')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListArg', ['a', 'b', 'c'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ListMemberName.1=a&ListMemberName.2=b&ListMemberName.3=c')])), ('description', 'List with location name applied to member'), ('suite_id', 4), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List with locationName and queryName'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListArg', OrderedDict([('shape', 'ListType'), ('locationName', 'ListMemberName'), ('queryName', 'ListQueryName')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('LocationName', 'item')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListArg', ['a', 'b', 'c'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ListQueryName.1=a&ListQueryName.2=b&ListQueryName.3=c')])), ('description', 'List with locationName and queryName'), ('suite_id', 5), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Base64 encoded Blobs'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BlobArg', OrderedDict([('shape', 'BlobType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BlobArg', 'foo')])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&BlobArg=Zm9v')])), ('description', 'Base64 encoded Blobs'), ('suite_id', 6), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp values'), ('metadata', OrderedDict([('protocol', 'ec2'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArg', OrderedDict([('shape', 'TimestampType')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArg', 1422172800)])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&TimeArg=2015-01-25T08%3A00%3A00Z')])), ('description', 'Timestamp values'), ('suite_id', 7), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Name', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName'), ('http', OrderedDict([('method', 'POST')]))])), ('params', OrderedDict([('Name', 'myname')])), ('serialized', OrderedDict([('body', '{"Name": "myname"}'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('uri', '/')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp values'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArg', OrderedDict([('shape', 'TimestampType')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArg', 1422172800)])), ('serialized', OrderedDict([('body', '{"TimeArg": 1422172800}'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('uri', '/')])), ('description', 'Timestamp values'), ('suite_id', 1), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Base64 encoded Blobs'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BlobArg', OrderedDict([('shape', 'BlobType')])), ('BlobMap', OrderedDict([('shape', 'BlobMapType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')])), ('BlobMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'BlobType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BlobArg', 'foo')])), ('serialized', OrderedDict([('body', '{"BlobArg": "Zm9v"}'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('uri', '/')])), ('description', 'Base64 encoded Blobs'), ('suite_id', 2), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Base64 encoded Blobs'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BlobArg', OrderedDict([('shape', 'BlobType')])), ('BlobMap', OrderedDict([('shape', 'BlobMapType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')])), ('BlobMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'BlobType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BlobMap', OrderedDict([('key1', 'foo'), ('key2', 'bar')]))])), ('serialized', OrderedDict([('body', '{"BlobMap": {"key1": "Zm9v", "key2": "YmFy"}}'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('uri', '/')])), ('description', 'Base64 encoded Blobs'), ('suite_id', 2), ('test_id', 1)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Nested blobs'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListParam', OrderedDict([('shape', 'ListOfStructures')]))]))])), ('ListOfStructures', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'BlobType')]))])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListParam', ['foo', 'bar'])])), ('serialized', OrderedDict([('body', '{"ListParam": ["Zm9v", "YmFy"]}'), ('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')]))])), ('description', 'Nested blobs'), ('suite_id', 3), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('body', '{"RecursiveStruct": {"NoRecurse": "foo"}}')])), ('description', 'Recursive shapes'), ('suite_id', 4), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('body', '{"RecursiveStruct": {"RecursiveStruct": {"NoRecurse": "foo"}}}')])), ('description', 'Recursive shapes'), ('suite_id', 4), ('test_id', 1)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))]))]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('body', '{"RecursiveStruct": {"RecursiveStruct": {"RecursiveStruct": {"RecursiveStruct": {"NoRecurse": "foo"}}}}}')])), ('description', 'Recursive shapes'), ('suite_id', 4), ('test_id', 2)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('NoRecurse', 'bar')])])]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('body', '{"RecursiveStruct": {"RecursiveList": [{"NoRecurse": "foo"}, {"NoRecurse": "bar"}]}}')])), ('description', 'Recursive shapes'), ('suite_id', 4), ('test_id', 3)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'bar')]))])])]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('body', '{"RecursiveStruct": {"RecursiveList": [{"NoRecurse": "foo"}, {"RecursiveStruct": {"NoRecurse": "bar"}}]}}')])), ('description', 'Recursive shapes'), ('suite_id', 4), ('test_id', 4)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveMap', OrderedDict([('foo', OrderedDict([('NoRecurse', 'foo')])), ('bar', OrderedDict([('NoRecurse', 'bar')]))]))]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('body', '{"RecursiveStruct": {"RecursiveMap": {"foo": {"NoRecurse": "foo"}, "bar": {"NoRecurse": "bar"}}}}')])), ('description', 'Recursive shapes'), ('suite_id', 4), ('test_id', 5)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Empty maps'), ('metadata', OrderedDict([('protocol', 'json'), ('jsonVersion', '1.1'), ('targetPrefix', 'com.amazonaws.foo')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'MapType')]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName'), ('http', OrderedDict([('method', 'POST')]))])), ('params', OrderedDict([('Map', OrderedDict())])), ('serialized', OrderedDict([('body', '{"Map": {}}'), ('headers', OrderedDict([('X-Amz-Target', 'com.amazonaws.foo.OperationName'), ('Content-Type', 'application/x-amz-json-1.1')])), ('uri', '/')])), ('description', 'Empty maps'), ('suite_id', 5), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')])), ('Baz', OrderedDict([('shape', 'BooleanType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('BooleanType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Foo', 'val1'), ('Bar', 'val2')])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Foo=val1&Bar=val2')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')])), ('Baz', OrderedDict([('shape', 'BooleanType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('BooleanType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Baz', True)])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Baz=true')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 1)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')])), ('Baz', OrderedDict([('shape', 'BooleanType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('BooleanType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Baz', False)])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Baz=false')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 2)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Nested structure members'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('StructArg', OrderedDict([('shape', 'StructType')]))]))])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ScalarArg', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('StructArg', OrderedDict([('ScalarArg', 'foo')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&StructArg.ScalarArg=foo')])), ('description', 'Nested structure members'), ('suite_id', 1), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List types'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListArg', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'Strings')]))])), ('Strings', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListArg', ['foo', 'bar', 'baz'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ListArg.member.1=foo&ListArg.member.2=bar&ListArg.member.3=baz')])), ('description', 'List types'), ('suite_id', 2), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List types'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListArg', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'Strings')]))])), ('Strings', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListArg', [])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ListArg=')])), ('description', 'List types'), ('suite_id', 2), ('test_id', 1)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened list'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ScalarArg', OrderedDict([('shape', 'StringType')])), ('ListArg', OrderedDict([('shape', 'ListType')])), ('NamedListArg', OrderedDict([('shape', 'NamedListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')])), ('flattened', True)])), ('NamedListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'Foo')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ScalarArg', 'foo'), ('ListArg', ['a', 'b', 'c'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ScalarArg=foo&ListArg.1=a&ListArg.2=b&ListArg.3=c')])), ('description', 'Flattened list'), ('suite_id', 3), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened list'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ScalarArg', OrderedDict([('shape', 'StringType')])), ('ListArg', OrderedDict([('shape', 'ListType')])), ('NamedListArg', OrderedDict([('shape', 'NamedListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')])), ('flattened', True)])), ('NamedListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'Foo')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('NamedListArg', ['a'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&Foo.1=a')])), ('description', 'Flattened list'), ('suite_id', 3), ('test_id', 1)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Serialize flattened map type'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('MapArg', OrderedDict([('shape', 'StringMap')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('MapArg', OrderedDict([('key1', 'val1'), ('key2', 'val2')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&MapArg.1.key=key1&MapArg.1.value=val1&MapArg.2.key=key2&MapArg.2.value=val2')])), ('description', 'Serialize flattened map type'), ('suite_id', 4), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Non flattened list with LocationName'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListArg', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'item')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ListArg', ['a', 'b', 'c'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ListArg.item.1=a&ListArg.item.2=b&ListArg.item.3=c')])), ('description', 'Non flattened list with LocationName'), ('suite_id', 5), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened list with LocationName'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ScalarArg', OrderedDict([('shape', 'StringType')])), ('ListArg', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'ListArgLocation')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('ScalarArg', 'foo'), ('ListArg', ['a', 'b', 'c'])])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&ScalarArg=foo&ListArgLocation.1=a&ListArgLocation.2=b&ListArgLocation.3=c')])), ('description', 'Flattened list with LocationName'), ('suite_id', 6), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Serialize map type'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('MapArg', OrderedDict([('shape', 'StringMap')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('MapArg', OrderedDict([('key1', 'val1'), ('key2', 'val2')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&MapArg.entry.1.key=key1&MapArg.entry.1.value=val1&MapArg.entry.2.key=key2&MapArg.entry.2.value=val2')])), ('description', 'Serialize map type'), ('suite_id', 7), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Serialize map type with locationName'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('MapArg', OrderedDict([('shape', 'StringMap')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType'), ('locationName', 'TheKey')])), ('value', OrderedDict([('shape', 'StringType'), ('locationName', 'TheValue')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('MapArg', OrderedDict([('key1', 'val1'), ('key2', 'val2')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&MapArg.entry.1.TheKey=key1&MapArg.entry.1.TheValue=val1&MapArg.entry.2.TheKey=key2&MapArg.entry.2.TheValue=val2')])), ('description', 'Serialize map type with locationName'), ('suite_id', 8), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Base64 encoded Blobs'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BlobArg', OrderedDict([('shape', 'BlobType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BlobArg', 'foo')])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&BlobArg=Zm9v')])), ('description', 'Base64 encoded Blobs'), ('suite_id', 9), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp values'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArg', OrderedDict([('shape', 'TimestampType')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArg', 1422172800)])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&TimeArg=2015-01-25T08%3A00%3A00Z')])), ('description', 'Timestamp values'), ('suite_id', 10), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&RecursiveStruct.NoRecurse=foo')])), ('description', 'Recursive shapes'), ('suite_id', 11), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&RecursiveStruct.RecursiveStruct.NoRecurse=foo')])), ('description', 'Recursive shapes'), ('suite_id', 11), ('test_id', 1)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))]))]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&RecursiveStruct.RecursiveStruct.RecursiveStruct.RecursiveStruct.NoRecurse=foo')])), ('description', 'Recursive shapes'), ('suite_id', 11), ('test_id', 2)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('NoRecurse', 'bar')])])]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&RecursiveStruct.RecursiveList.member.1.NoRecurse=foo&RecursiveStruct.RecursiveList.member.2.NoRecurse=bar')])), ('description', 'Recursive shapes'), ('suite_id', 11), ('test_id', 3)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'bar')]))])])]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&RecursiveStruct.RecursiveList.member.1.NoRecurse=foo&RecursiveStruct.RecursiveList.member.2.RecursiveStruct.NoRecurse=bar')])), ('description', 'Recursive shapes'), ('suite_id', 11), ('test_id', 4)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'query'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveMap', OrderedDict([('foo', OrderedDict([('NoRecurse', 'foo')])), ('bar', OrderedDict([('NoRecurse', 'bar')]))]))]))])), ('serialized', OrderedDict([('uri', '/'), ('headers', OrderedDict([('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')])), ('body', 'Action=OperationName&Version=2014-01-01&RecursiveStruct.RecursiveMap.entry.1.key=foo&RecursiveStruct.RecursiveMap.entry.1.value.NoRecurse=foo&RecursiveStruct.RecursiveMap.entry.2.key=bar&RecursiveStruct.RecursiveMap.entry.2.value.NoRecurse=bar')])), ('description', 'Recursive shapes'), ('suite_id', 11), ('test_id', 5)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'URI parameter only with no location name'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'foo')])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/foo'), ('headers', OrderedDict())])), ('description', 'URI parameter only with no location name'), ('suite_id', 1), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'URI parameter only with location name'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType'), ('location', 'uri'), ('locationName', 'PipelineId')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Foo', 'bar')])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/bar'), ('headers', OrderedDict())])), ('description', 'URI parameter only with location name'), ('suite_id', 2), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Querystring list of strings'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Items', OrderedDict([('shape', 'StringList'), ('location', 'querystring'), ('locationName', 'item')]))]))])), ('StringList', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'String')]))])), ('String', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Items', ['value1', 'value2'])])), ('serialized', OrderedDict([('body', ''), ('uri', '/path?item=value1&item=value2'), ('headers', OrderedDict())])), ('description', 'Querystring list of strings'), ('suite_id', 3), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'String to string maps in querystring'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri')])), ('QueryDoc', OrderedDict([('shape', 'MapStringStringType'), ('location', 'querystring')]))]))])), ('MapStringStringType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'foo'), ('QueryDoc', OrderedDict([('bar', 'baz'), ('fizz', 'buzz')]))])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/foo?bar=baz&fizz=buzz'), ('headers', OrderedDict())])), ('description', 'String to string maps in querystring'), ('suite_id', 4), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'String to string list maps in querystring'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri')])), ('QueryDoc', OrderedDict([('shape', 'MapStringStringListType'), ('location', 'querystring')]))]))])), ('MapStringStringListType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringListType')]))])), ('StringListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'id'), ('QueryDoc', OrderedDict([('foo', ['bar', 'baz']), ('fizz', ['buzz', 'pop'])]))])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/id?foo=bar&foo=baz&fizz=buzz&fizz=pop'), ('headers', OrderedDict())])), ('description', 'String to string list maps in querystring'), ('suite_id', 5), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Boolean in querystring'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BoolQuery', OrderedDict([('shape', 'BoolType'), ('location', 'querystring'), ('locationName', 'bool-query')]))]))])), ('BoolType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BoolQuery', True)])), ('serialized', OrderedDict([('body', ''), ('uri', '/path?bool-query=true'), ('headers', OrderedDict())])), ('description', 'Boolean in querystring'), ('suite_id', 6), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Boolean in querystring'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BoolQuery', OrderedDict([('shape', 'BoolType'), ('location', 'querystring'), ('locationName', 'bool-query')]))]))])), ('BoolType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BoolQuery', False)])), ('serialized', OrderedDict([('body', ''), ('uri', '/path?bool-query=false'), ('headers', OrderedDict())])), ('description', 'Boolean in querystring'), ('suite_id', 6), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'URI parameter and querystring params'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri'), ('locationName', 'PipelineId')])), ('Ascending', OrderedDict([('shape', 'StringType'), ('location', 'querystring'), ('locationName', 'Ascending')])), ('PageToken', OrderedDict([('shape', 'StringType'), ('location', 'querystring'), ('locationName', 'PageToken')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'foo'), ('Ascending', 'true'), ('PageToken', 'bar')])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/foo?Ascending=true&PageToken=bar'), ('headers', OrderedDict())])), ('description', 'URI parameter and querystring params'), ('suite_id', 7), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'URI parameter, querystring params and JSON body'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri'), ('locationName', 'PipelineId')])), ('Ascending', OrderedDict([('shape', 'StringType'), ('location', 'querystring'), ('locationName', 'Ascending')])), ('PageToken', OrderedDict([('shape', 'StringType'), ('location', 'querystring'), ('locationName', 'PageToken')])), ('Config', OrderedDict([('shape', 'StructType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('A', OrderedDict([('shape', 'StringType')])), ('B', OrderedDict([('shape', 'StringType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'foo'), ('Ascending', 'true'), ('PageToken', 'bar'), ('Config', OrderedDict([('A', 'one'), ('B', 'two')]))])), ('serialized', OrderedDict([('body', '{"Config": {"A": "one", "B": "two"}}'), ('uri', '/2014-01-01/jobsByPipeline/foo?Ascending=true&PageToken=bar'), ('headers', OrderedDict())])), ('description', 'URI parameter, querystring params and JSON body'), ('suite_id', 8), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'URI parameter, querystring params, headers and JSON body'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri'), ('locationName', 'PipelineId')])), ('Ascending', OrderedDict([('shape', 'StringType'), ('location', 'querystring'), ('locationName', 'Ascending')])), ('Checksum', OrderedDict([('shape', 'StringType'), ('location', 'header'), ('locationName', 'x-amz-checksum')])), ('PageToken', OrderedDict([('shape', 'StringType'), ('location', 'querystring'), ('locationName', 'PageToken')])), ('Config', OrderedDict([('shape', 'StructType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('A', OrderedDict([('shape', 'StringType')])), ('B', OrderedDict([('shape', 'StringType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'foo'), ('Ascending', 'true'), ('Checksum', '12345'), ('PageToken', 'bar'), ('Config', OrderedDict([('A', 'one'), ('B', 'two')]))])), ('serialized', OrderedDict([('body', '{"Config": {"A": "one", "B": "two"}}'), ('uri', '/2014-01-01/jobsByPipeline/foo?Ascending=true&PageToken=bar'), ('headers', OrderedDict([('x-amz-checksum', '12345')]))])), ('description', 'URI parameter, querystring params, headers and JSON body'), ('suite_id', 9), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Streaming payload'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('vaultName', OrderedDict([('shape', 'StringType'), ('location', 'uri'), ('locationName', 'vaultName')])), ('checksum', OrderedDict([('shape', 'StringType'), ('location', 'header'), ('locationName', 'x-amz-sha256-tree-hash')])), ('body', OrderedDict([('shape', 'Stream')]))])), ('required', ['vaultName']), ('payload', 'body')])), ('StringType', OrderedDict([('type', 'string')])), ('Stream', OrderedDict([('type', 'blob'), ('streaming', True)]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/vaults/{vaultName}/archives')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('vaultName', 'name'), ('checksum', 'foo'), ('body', 'contents')])), ('serialized', OrderedDict([('body', 'contents'), ('uri', '/2014-01-01/vaults/name/archives'), ('headers', OrderedDict([('x-amz-sha256-tree-hash', 'foo')]))])), ('description', 'Streaming payload'), ('suite_id', 10), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Serialize blobs in body'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType'), ('location', 'uri'), ('locationName', 'Foo')])), ('Bar', OrderedDict([('shape', 'BlobType')]))])), ('required', ['Foo'])])), ('StringType', OrderedDict([('type', 'string')])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/{Foo}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Foo', 'foo_name'), ('Bar', 'Blob param')])), ('serialized', OrderedDict([('body', '{"Bar": "QmxvYiBwYXJhbQ=="}'), ('uri', '/2014-01-01/foo_name')])), ('description', 'Serialize blobs in body'), ('suite_id', 11), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob payload'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))]))])), ('FooShape', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape'), ('payload', 'foo')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', 'bar')])), ('serialized', OrderedDict([('method', 'POST'), ('body', 'bar'), ('uri', '/')])), ('description', 'Blob payload'), ('suite_id', 12), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob payload'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))]))])), ('FooShape', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape'), ('payload', 'foo')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/')])), ('description', 'Blob payload'), ('suite_id', 12), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure payload'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))]))])), ('FooShape', OrderedDict([('locationName', 'foo'), ('type', 'structure'), ('members', OrderedDict([('baz', OrderedDict([('shape', 'BazShape')]))]))])), ('BazShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape'), ('payload', 'foo')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', OrderedDict([('baz', 'bar')]))])), ('serialized', OrderedDict([('method', 'POST'), ('body', '{"baz": "bar"}'), ('uri', '/')])), ('description', 'Structure payload'), ('suite_id', 13), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure payload'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))]))])), ('FooShape', OrderedDict([('locationName', 'foo'), ('type', 'structure'), ('members', OrderedDict([('baz', OrderedDict([('shape', 'BazShape')]))]))])), ('BazShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape'), ('payload', 'foo')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/')])), ('description', 'Structure payload'), ('suite_id', 13), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Omits null query params, but serializes empty strings'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('location', 'querystring'), ('locationName', 'param-name'), ('shape', 'Foo')]))]))])), ('Foo', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('name', 'OperationName'), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')]))])), ('params', OrderedDict([('foo', None)])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/path')])), ('description', 'Omits null query params, but serializes empty strings'), ('suite_id', 14), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Omits null query params, but serializes empty strings'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('location', 'querystring'), ('locationName', 'param-name'), ('shape', 'Foo')]))]))])), ('Foo', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('name', 'OperationName'), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path?abc=mno')])), ('input', OrderedDict([('shape', 'InputShape')]))])), ('params', OrderedDict([('foo', '')])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/path?abc=mno&param-name=')])), ('description', 'Omits null query params, but serializes empty strings'), ('suite_id', 14), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"RecursiveStruct": {"NoRecurse": "foo"}}')])), ('description', 'Recursive shapes'), ('suite_id', 15), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"RecursiveStruct": {"RecursiveStruct": {"NoRecurse": "foo"}}}')])), ('description', 'Recursive shapes'), ('suite_id', 15), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))]))]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"RecursiveStruct": {"RecursiveStruct": {"RecursiveStruct": {"RecursiveStruct": {"NoRecurse": "foo"}}}}}')])), ('description', 'Recursive shapes'), ('suite_id', 15), ('test_id', 2)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('NoRecurse', 'bar')])])]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"RecursiveStruct": {"RecursiveList": [{"NoRecurse": "foo"}, {"NoRecurse": "bar"}]}}')])), ('description', 'Recursive shapes'), ('suite_id', 15), ('test_id', 3)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'bar')]))])])]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"RecursiveStruct": {"RecursiveList": [{"NoRecurse": "foo"}, {"RecursiveStruct": {"NoRecurse": "bar"}}]}}')])), ('description', 'Recursive shapes'), ('suite_id', 15), ('test_id', 4)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveMap', OrderedDict([('foo', OrderedDict([('NoRecurse', 'foo')])), ('bar', OrderedDict([('NoRecurse', 'bar')]))]))]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"RecursiveStruct": {"RecursiveMap": {"foo": {"NoRecurse": "foo"}, "bar": {"NoRecurse": "bar"}}}}')])), ('description', 'Recursive shapes'), ('suite_id', 15), ('test_id', 5)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp values'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArg', OrderedDict([('shape', 'TimestampType')])), ('TimeArgInHeader', OrderedDict([('shape', 'TimestampType'), ('location', 'header'), ('locationName', 'x-amz-timearg')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArg', 1422172800)])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"TimeArg": 1422172800}')])), ('description', 'Timestamp values'), ('suite_id', 16), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp values'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArg', OrderedDict([('shape', 'TimestampType')])), ('TimeArgInHeader', OrderedDict([('shape', 'TimestampType'), ('location', 'header'), ('locationName', 'x-amz-timearg')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArgInHeader', 1422172800)])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict([('x-amz-timearg', 'Sun, 25 Jan 2015 08:00:00 GMT')])), ('body', '')])), ('description', 'Timestamp values'), ('suite_id', 16), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Named locations in JSON body'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArg', OrderedDict([('shape', 'TimestampType'), ('locationName', 'timestamp_location')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArg', 1422172800)])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '{"timestamp_location": 1422172800}')])), ('description', 'Named locations in JSON body'), ('suite_id', 17), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'String payload'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))]))])), ('FooShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape'), ('payload', 'foo')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', 'bar')])), ('serialized', OrderedDict([('method', 'POST'), ('body', 'bar'), ('uri', '/')])), ('description', 'String payload'), ('suite_id', 18), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON value trait'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Attr', OrderedDict([('shape', 'StringType'), ('jsonvalue', True), ('location', 'header'), ('locationName', 'X-Amz-Foo')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('Attr', OrderedDict([('Foo', 'Bar')]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict([('X-Amz-Foo', 'eyJGb28iOiJCYXIifQ==')])), ('body', '')])), ('description', 'JSON value trait'), ('suite_id', 20), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON value trait'), ('metadata', OrderedDict([('protocol', 'rest-json'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Attr', OrderedDict([('shape', 'StringType'), ('jsonvalue', True), ('location', 'header'), ('locationName', 'X-Amz-Foo')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '')])), ('description', 'JSON value trait'), ('suite_id', 20), ('test_id', 1)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Basic XML serialization'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Name', OrderedDict([('shape', 'StringType')])), ('Description', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('Name', 'foo'), ('Description', 'bar')])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><Name>foo</Name><Description>bar</Description></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Basic XML serialization'), ('suite_id', 0), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Basic XML serialization'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Name', OrderedDict([('shape', 'StringType')])), ('Description', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'PUT'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('Name', 'foo'), ('Description', 'bar')])), ('serialized', OrderedDict([('method', 'PUT'), ('body', '<OperationRequest xmlns="https://foo/"><Name>foo</Name><Description>bar</Description></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Basic XML serialization'), ('suite_id', 0), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Basic XML serialization'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Name', OrderedDict([('shape', 'StringType')])), ('Description', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/hostedzone')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('method', 'GET'), ('body', ''), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Basic XML serialization'), ('suite_id', 0), ('test_id', 2)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Serialize other scalar types'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('First', OrderedDict([('shape', 'BoolType')])), ('Second', OrderedDict([('shape', 'BoolType')])), ('Third', OrderedDict([('shape', 'FloatType')])), ('Fourth', OrderedDict([('shape', 'IntegerType')]))]))])), ('BoolType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('IntegerType', OrderedDict([('type', 'integer')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('First', True), ('Second', False), ('Third', 1.2), ('Fourth', 3)])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><First>true</First><Second>false</Second><Third>1.2</Third><Fourth>3</Fourth></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Serialize other scalar types'), ('suite_id', 1), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Nested structures'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('SubStructure', OrderedDict([('shape', 'SubStructure')])), ('Description', OrderedDict([('shape', 'StringType')]))]))])), ('SubStructure', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('SubStructure', OrderedDict([('Foo', 'a'), ('Bar', 'b')])), ('Description', 'baz')])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><SubStructure><Foo>a</Foo><Bar>b</Bar></SubStructure><Description>baz</Description></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Nested structures'), ('suite_id', 2), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Nested structures'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('SubStructure', OrderedDict([('shape', 'SubStructure')])), ('Description', OrderedDict([('shape', 'StringType')]))]))])), ('SubStructure', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('SubStructure', OrderedDict([('Foo', 'a'), ('Bar', None)])), ('Description', 'baz')])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><SubStructure><Foo>a</Foo></SubStructure><Description>baz</Description></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Nested structures'), ('suite_id', 2), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Nested structures'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('SubStructure', OrderedDict([('shape', 'SubStructure')])), ('Description', OrderedDict([('shape', 'StringType')]))]))])), ('SubStructure', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')])), ('Bar', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('SubStructure', OrderedDict()), ('Description', 'baz')])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><SubStructure /><Description>baz</Description></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Nested structures'), ('suite_id', 3), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Non flattened lists'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListParam', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('ListParam', ['one', 'two', 'three'])])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><ListParam><member>one</member><member>two</member><member>three</member></ListParam></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Non flattened lists'), ('suite_id', 4), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Non flattened lists with locationName'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListParam', OrderedDict([('shape', 'ListShape'), ('locationName', 'AlternateName')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'NotMember')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('ListParam', ['one', 'two', 'three'])])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><AlternateName><NotMember>one</NotMember><NotMember>two</NotMember><NotMember>three</NotMember></AlternateName></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Non flattened lists with locationName'), ('suite_id', 5), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened lists'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListParam', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('ListParam', ['one', 'two', 'three'])])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><ListParam>one</ListParam><ListParam>two</ListParam><ListParam>three</ListParam></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Flattened lists'), ('suite_id', 6), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened lists with locationName'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListParam', OrderedDict([('shape', 'ListShape'), ('locationName', 'item')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('ListParam', ['one', 'two', 'three'])])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><item>one</item><item>two</item><item>three</item></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Flattened lists with locationName'), ('suite_id', 7), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List of structures'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListParam', OrderedDict([('shape', 'ListShape'), ('locationName', 'item')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'SingleFieldStruct')])), ('flattened', True)])), ('StringType', OrderedDict([('type', 'string')])), ('SingleFieldStruct', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Element', OrderedDict([('shape', 'StringType'), ('locationName', 'value')]))]))]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('ListParam', [OrderedDict([('Element', 'one')]), OrderedDict([('Element', 'two')]), OrderedDict([('Element', 'three')])])])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><item><value>one</value></item><item><value>two</value></item><item><value>three</value></item></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'List of structures'), ('suite_id', 8), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob and timestamp shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('StructureParam', OrderedDict([('shape', 'StructureShape')]))]))])), ('StructureShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('t', OrderedDict([('shape', 'TShape')])), ('b', OrderedDict([('shape', 'BShape')]))]))])), ('TShape', OrderedDict([('type', 'timestamp')])), ('BShape', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/2014-01-01/hostedzone')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('StructureParam', OrderedDict([('t', 1422172800), ('b', 'foo')]))])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<OperationRequest xmlns="https://foo/"><StructureParam><t>2015-01-25T08:00:00Z</t><b>Zm9v</b></StructureParam></OperationRequest>'), ('uri', '/2014-01-01/hostedzone'), ('headers', OrderedDict())])), ('description', 'Blob and timestamp shapes'), ('suite_id', 9), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Header maps'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))]))])), ('FooShape', OrderedDict([('type', 'map'), ('location', 'headers'), ('locationName', 'x-foo-'), ('key', OrderedDict([('shape', 'FooKeyValue')])), ('value', OrderedDict([('shape', 'FooKeyValue')]))])), ('FooKeyValue', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', OrderedDict([('a', 'b'), ('c', 'd')]))])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/'), ('headers', OrderedDict([('x-foo-a', 'b'), ('x-foo-c', 'd')]))])), ('description', 'Header maps'), ('suite_id', 10), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Querystring list of strings'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Items', OrderedDict([('shape', 'StringList'), ('location', 'querystring'), ('locationName', 'item')]))]))])), ('StringList', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'String')]))])), ('String', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Items', ['value1', 'value2'])])), ('serialized', OrderedDict([('body', ''), ('uri', '/path?item=value1&item=value2'), ('headers', OrderedDict())])), ('description', 'Querystring list of strings'), ('suite_id', 11), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'String to string maps in querystring'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri')])), ('QueryDoc', OrderedDict([('shape', 'MapStringStringType'), ('location', 'querystring')]))]))])), ('MapStringStringType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'foo'), ('QueryDoc', OrderedDict([('bar', 'baz'), ('fizz', 'buzz')]))])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/foo?bar=baz&fizz=buzz'), ('headers', OrderedDict())])), ('description', 'String to string maps in querystring'), ('suite_id', 12), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'String to string list maps in querystring'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('PipelineId', OrderedDict([('shape', 'StringType'), ('location', 'uri')])), ('QueryDoc', OrderedDict([('shape', 'MapStringStringListType'), ('location', 'querystring')]))]))])), ('MapStringStringListType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringListType')]))])), ('StringListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/2014-01-01/jobsByPipeline/{PipelineId}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('PipelineId', 'id'), ('QueryDoc', OrderedDict([('foo', ['bar', 'baz']), ('fizz', ['buzz', 'pop'])]))])), ('serialized', OrderedDict([('body', ''), ('uri', '/2014-01-01/jobsByPipeline/id?foo=bar&foo=baz&fizz=buzz&fizz=pop'), ('headers', OrderedDict())])), ('description', 'String to string list maps in querystring'), ('suite_id', 13), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Boolean in querystring'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BoolQuery', OrderedDict([('shape', 'BoolType'), ('location', 'querystring'), ('locationName', 'bool-query')]))]))])), ('BoolType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BoolQuery', True)])), ('serialized', OrderedDict([('body', ''), ('uri', '/path?bool-query=true'), ('headers', OrderedDict())])), ('description', 'Boolean in querystring'), ('suite_id', 14), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Boolean in querystring'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BoolQuery', OrderedDict([('shape', 'BoolType'), ('location', 'querystring'), ('locationName', 'bool-query')]))]))])), ('BoolType', OrderedDict([('type', 'boolean')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('BoolQuery', False)])), ('serialized', OrderedDict([('body', ''), ('uri', '/path?bool-query=false'), ('headers', OrderedDict())])), ('description', 'Boolean in querystring'), ('suite_id', 14), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'String payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', 'bar')])), ('serialized', OrderedDict([('method', 'POST'), ('body', 'bar'), ('uri', '/')])), ('description', 'String payload'), ('suite_id', 15), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', 'bar')])), ('serialized', OrderedDict([('method', 'POST'), ('body', 'bar'), ('uri', '/')])), ('description', 'Blob payload'), ('suite_id', 16), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/')])), ('description', 'Blob payload'), ('suite_id', 16), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('locationName', 'foo'), ('type', 'structure'), ('members', OrderedDict([('baz', OrderedDict([('shape', 'BazShape')]))]))])), ('BazShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', OrderedDict([('baz', 'bar')]))])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<foo><baz>bar</baz></foo>'), ('uri', '/')])), ('description', 'Structure payload'), ('suite_id', 17), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('locationName', 'foo'), ('type', 'structure'), ('members', OrderedDict([('baz', OrderedDict([('shape', 'BazShape')]))]))])), ('BazShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/')])), ('description', 'Structure payload'), ('suite_id', 17), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('locationName', 'foo'), ('type', 'structure'), ('members', OrderedDict([('baz', OrderedDict([('shape', 'BazShape')]))]))])), ('BazShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', OrderedDict())])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<foo />'), ('uri', '/')])), ('description', 'Structure payload'), ('suite_id', 17), ('test_id', 2)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Structure payload'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'FooShape')]))])), ('payload', 'foo')])), ('FooShape', OrderedDict([('locationName', 'foo'), ('type', 'structure'), ('members', OrderedDict([('baz', OrderedDict([('shape', 'BazShape')]))]))])), ('BazShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('foo', None)])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/')])), ('description', 'Structure payload'), ('suite_id', 17), ('test_id', 3)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'XML Attribute'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Grant', OrderedDict([('shape', 'Grant')]))])), ('payload', 'Grant')])), ('Grant', OrderedDict([('type', 'structure'), ('locationName', 'Grant'), ('members', OrderedDict([('Grantee', OrderedDict([('shape', 'Grantee')]))]))])), ('Grantee', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Type', OrderedDict([('shape', 'Type'), ('locationName', 'xsi:type'), ('xmlAttribute', True)])), ('EmailAddress', OrderedDict([('shape', 'StringType')]))])), ('xmlNamespace', OrderedDict([('prefix', 'xsi'), ('uri', 'http://www.w3.org/2001/XMLSchema-instance')]))])), ('Type', OrderedDict([('type', 'string')])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'POST'), ('requestUri', '/')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Grant', OrderedDict([('Grantee', OrderedDict([('EmailAddress', 'foo@example.com'), ('Type', 'CanonicalUser')]))]))])), ('serialized', OrderedDict([('method', 'POST'), ('body', '<Grant><Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser"><EmailAddress>foo@example.com</EmailAddress></Grantee></Grant>'), ('uri', '/')])), ('description', 'XML Attribute'), ('suite_id', 18), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Greedy keys'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Bucket', OrderedDict([('shape', 'BucketShape'), ('location', 'uri')])), ('Key', OrderedDict([('shape', 'KeyShape'), ('location', 'uri')]))]))])), ('BucketShape', OrderedDict([('type', 'string')])), ('KeyShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('http', OrderedDict([('method', 'GET'), ('requestUri', '/{Bucket}/{Key+}')])), ('input', OrderedDict([('shape', 'InputShape')])), ('name', 'OperationName')])), ('params', OrderedDict([('Key', 'testing /123'), ('Bucket', 'my/bucket')])), ('serialized', OrderedDict([('method', 'GET'), ('body', ''), ('uri', '/my%2Fbucket/testing%20/123')])), ('description', 'Greedy keys'), ('suite_id', 19), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Omits null query params, but serializes empty strings'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('location', 'querystring'), ('locationName', 'param-name'), ('shape', 'Foo')]))]))])), ('Foo', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('name', 'OperationName'), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('input', OrderedDict([('shape', 'InputShape')]))])), ('params', OrderedDict([('foo', None)])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/path')])), ('description', 'Omits null query params, but serializes empty strings'), ('suite_id', 20), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Omits null query params, but serializes empty strings'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('location', 'querystring'), ('locationName', 'param-name'), ('shape', 'Foo')]))]))])), ('Foo', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('name', 'OperationName'), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path?abc=mno')])), ('input', OrderedDict([('shape', 'InputShape')]))])), ('params', OrderedDict([('foo', '')])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/path?abc=mno&param-name=')])), ('description', 'Omits null query params, but serializes empty strings'), ('suite_id', 20), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))])), ('serialized', OrderedDict([('uri', '/path'), ('body', '<OperationRequest xmlns="https://foo/"><RecursiveStruct><NoRecurse>foo</NoRecurse></RecursiveStruct></OperationRequest>')])), ('description', 'Recursive shapes'), ('suite_id', 21), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))])), ('serialized', OrderedDict([('uri', '/path'), ('body', '<OperationRequest xmlns="https://foo/"><RecursiveStruct><RecursiveStruct><NoRecurse>foo</NoRecurse></RecursiveStruct></RecursiveStruct></OperationRequest>')])), ('description', 'Recursive shapes'), ('suite_id', 21), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'foo')]))]))]))]))])), ('serialized', OrderedDict([('uri', '/path'), ('body', '<OperationRequest xmlns="https://foo/"><RecursiveStruct><RecursiveStruct><RecursiveStruct><RecursiveStruct><NoRecurse>foo</NoRecurse></RecursiveStruct></RecursiveStruct></RecursiveStruct></RecursiveStruct></OperationRequest>')])), ('description', 'Recursive shapes'), ('suite_id', 21), ('test_id', 2)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('NoRecurse', 'bar')])])]))])), ('serialized', OrderedDict([('uri', '/path'), ('body', '<OperationRequest xmlns="https://foo/"><RecursiveStruct><RecursiveList><member><NoRecurse>foo</NoRecurse></member><member><NoRecurse>bar</NoRecurse></member></RecursiveList></RecursiveStruct></OperationRequest>')])), ('description', 'Recursive shapes'), ('suite_id', 21), ('test_id', 3)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveList', [OrderedDict([('NoRecurse', 'foo')]), OrderedDict([('RecursiveStruct', OrderedDict([('NoRecurse', 'bar')]))])])]))])), ('serialized', OrderedDict([('uri', '/path'), ('body', '<OperationRequest xmlns="https://foo/"><RecursiveStruct><RecursiveList><member><NoRecurse>foo</NoRecurse></member><member><RecursiveStruct><NoRecurse>bar</NoRecurse></RecursiveStruct></member></RecursiveList></RecursiveStruct></OperationRequest>')])), ('description', 'Recursive shapes'), ('suite_id', 21), ('test_id', 4)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Recursive shapes'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')]))]))])), ('RecursiveStructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('NoRecurse', OrderedDict([('shape', 'StringType')])), ('RecursiveStruct', OrderedDict([('shape', 'RecursiveStructType')])), ('RecursiveList', OrderedDict([('shape', 'RecursiveListType')])), ('RecursiveMap', OrderedDict([('shape', 'RecursiveMapType')]))]))])), ('RecursiveListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'RecursiveStructType')]))])), ('RecursiveMapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'RecursiveStructType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape'), ('locationName', 'OperationRequest'), ('xmlNamespace', OrderedDict([('uri', 'https://foo/')]))])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('RecursiveStruct', OrderedDict([('RecursiveMap', OrderedDict([('foo', OrderedDict([('NoRecurse', 'foo')])), ('bar', OrderedDict([('NoRecurse', 'bar')]))]))]))])), ('serialized', OrderedDict([('uri', '/path'), ('body', '<OperationRequest xmlns="https://foo/"><RecursiveStruct><RecursiveMap><entry><key>foo</key><value><NoRecurse>foo</NoRecurse></value></entry><entry><key>bar</key><value><NoRecurse>bar</NoRecurse></value></entry></RecursiveMap></RecursiveStruct></OperationRequest>')])), ('description', 'Recursive shapes'), ('suite_id', 21), ('test_id', 5)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp in header'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeArgInHeader', OrderedDict([('shape', 'TimestampType'), ('location', 'header'), ('locationName', 'x-amz-timearg')]))]))])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('TimeArgInHeader', 1422172800)])), ('serialized', OrderedDict([('method', 'POST'), ('body', ''), ('uri', '/path'), ('headers', OrderedDict([('x-amz-timearg', 'Sun, 25 Jan 2015 08:00:00 GMT')]))])), ('description', 'Timestamp in header'), ('suite_id', 22), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON value trait'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Attr', OrderedDict([('shape', 'StringType'), ('jsonvalue', True), ('location', 'header'), ('locationName', 'X-Amz-Foo')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict([('Attr', OrderedDict([('Foo', 'Bar')]))])), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict([('X-Amz-Foo', 'eyJGb28iOiJCYXIifQ==')])), ('body', '')])), ('description', 'JSON value trait'), ('suite_id', 24), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON value trait'), ('metadata', OrderedDict([('protocol', 'rest-xml'), ('apiVersion', '2014-01-01')])), ('shapes', OrderedDict([('InputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Attr', OrderedDict([('shape', 'StringType'), ('jsonvalue', True), ('location', 'header'), ('locationName', 'X-Amz-Foo')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('input', OrderedDict([('shape', 'InputShape')])), ('http', OrderedDict([('method', 'POST'), ('requestUri', '/path')])), ('name', 'OperationName')])), ('params', OrderedDict()), ('serialized', OrderedDict([('uri', '/path'), ('headers', OrderedDict()), ('body', '')])), ('description', 'JSON value trait'), ('suite_id', 24), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType'), ('locationName', 'FooNum')])), ('FalseBool', OrderedDict([('shape', 'BooleanType')])), ('TrueBool', OrderedDict([('shape', 'BooleanType')])), ('Float', OrderedDict([('shape', 'FloatType')])), ('Double', OrderedDict([('shape', 'DoubleType')])), ('Long', OrderedDict([('shape', 'LongType')])), ('Char', OrderedDict([('shape', 'CharType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')])), ('BooleanType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('DoubleType', OrderedDict([('type', 'double')])), ('LongType', OrderedDict([('type', 'long')])), ('CharType', OrderedDict([('type', 'character')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Str', 'myname'), ('Num', 123), ('FalseBool', False), ('TrueBool', True), ('Float', 1.2), ('Double', 1.3), ('Long', 200), ('Char', 'a')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Str>myname</Str><FooNum>123</FooNum><FalseBool>false</FalseBool><TrueBool>true</TrueBool><Float>1.2</Float><Double>1.3</Double><Long>200</Long><Char>a</Char><RequestId>request-id</RequestId></OperationNameResponse>')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Blob', OrderedDict([('shape', 'BlobType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Blob', 'value')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Blob>dmFsdWU=</Blob><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Blob'), ('suite_id', 1), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><ListMember><member>abc</member><member>123</member></ListMember><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Lists'), ('suite_id', 2), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List with custom member name'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'item')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><ListMember><item>abc</item><item>123</item></ListMember><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'List with custom member name'), ('suite_id', 3), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened List'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType'), ('flattened', True)]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><ListMember>abc</ListMember><ListMember>123</ListMember><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Flattened List'), ('suite_id', 4), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Normal map'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'MapType')]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StructureType')]))])), ('StructureType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', OrderedDict([('foo', 'bar')])), ('baz', OrderedDict([('foo', 'bam')]))]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Map><entry><key>qux</key><value><foo>bar</foo></value></entry><entry><key>baz</key><value><foo>bam</foo></value></entry></Map><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Normal map'), ('suite_id', 5), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened map'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'MapType'), ('flattened', True)]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar'), ('baz', 'bam')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Map><key>qux</key><value>bar</value></Map><Map><key>baz</key><value>bam</value></Map><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Flattened map'), ('suite_id', 6), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Named map'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'MapType'), ('flattened', True)]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType'), ('locationName', 'foo')])), ('value', OrderedDict([('shape', 'StringType'), ('locationName', 'bar')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar'), ('baz', 'bam')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Map><foo>qux</foo><bar>bar</bar></Map><Map><foo>baz</foo><bar>bam</bar></Map><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Named map'), ('suite_id', 7), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Empty string'), ('metadata', OrderedDict([('protocol', 'ec2')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Foo', '')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Foo/><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Empty string'), ('suite_id', 8), ('test_id', 0)]), 'ec2.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType')])), ('FalseBool', OrderedDict([('shape', 'BooleanType')])), ('TrueBool', OrderedDict([('shape', 'BooleanType')])), ('Float', OrderedDict([('shape', 'FloatType')])), ('Double', OrderedDict([('shape', 'DoubleType')])), ('Long', OrderedDict([('shape', 'LongType')])), ('Char', OrderedDict([('shape', 'CharType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')])), ('BooleanType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('DoubleType', OrderedDict([('type', 'double')])), ('LongType', OrderedDict([('type', 'long')])), ('CharType', OrderedDict([('type', 'character')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Str', 'myname'), ('Num', 123), ('FalseBool', False), ('TrueBool', True), ('Float', 1.2), ('Double', 1.3), ('Long', 200), ('Char', 'a')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"Str": "myname", "Num": 123, "FalseBool": false, "TrueBool": true, "Float": 1.2, "Double": 1.3, "Long": 200, "Char": "a"}')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob members'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BlobMember', OrderedDict([('shape', 'BlobType')])), ('StructMember', OrderedDict([('shape', 'BlobContainer')]))]))])), ('BlobType', OrderedDict([('type', 'blob')])), ('BlobContainer', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'BlobType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('BlobMember', 'hi!'), ('StructMember', OrderedDict([('foo', 'there!')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"BlobMember": "aGkh", "StructMember": {"foo": "dGhlcmUh"}}')])), ('description', 'Blob members'), ('suite_id', 1), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp members'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeMember', OrderedDict([('shape', 'TimeType')])), ('StructMember', OrderedDict([('shape', 'TimeContainer')]))]))])), ('TimeType', OrderedDict([('type', 'timestamp')])), ('TimeContainer', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'TimeType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('TimeMember', 1398796238), ('StructMember', OrderedDict([('foo', 1398796238)]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"TimeMember": 1398796238, "StructMember": {"foo": 1398796238}}')])), ('description', 'Timestamp members'), ('suite_id', 2), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType')])), ('ListMemberMap', OrderedDict([('shape', 'ListTypeMap')])), ('ListMemberStruct', OrderedDict([('shape', 'ListTypeStruct')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('ListTypeMap', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'MapType')]))])), ('ListTypeStruct', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StructType')]))])), ('StringType', OrderedDict([('type', 'string')])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict())])), ('MapType', OrderedDict([('type', 'string'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['a', 'b'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"ListMember": ["a", "b"]}')])), ('description', 'Lists'), ('suite_id', 3), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType')])), ('ListMemberMap', OrderedDict([('shape', 'ListTypeMap')])), ('ListMemberStruct', OrderedDict([('shape', 'ListTypeStruct')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('ListTypeMap', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'MapType')]))])), ('ListTypeStruct', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StructType')]))])), ('StringType', OrderedDict([('type', 'string')])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict())])), ('MapType', OrderedDict([('type', 'string'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['a', None]), ('ListMemberMap', [OrderedDict(), None, None, OrderedDict()]), ('ListMemberStruct', [OrderedDict(), None, None, OrderedDict()])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"ListMember": ["a", null], "ListMemberMap": [{}, null, null, {}], "ListMemberStruct": [{}, null, null, {}]}')])), ('description', 'Lists'), ('suite_id', 3), ('test_id', 1)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Maps'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('MapMember', OrderedDict([('shape', 'MapType')]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'NumberList')]))])), ('StringType', OrderedDict([('type', 'string')])), ('NumberList', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'IntegerType')]))])), ('IntegerType', OrderedDict([('type', 'integer')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('MapMember', OrderedDict([('a', [1, 2]), ('b', [3, 4])]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"MapMember": {"a": [1, 2], "b": [3, 4]}}')])), ('description', 'Maps'), ('suite_id', 4), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Ignores extra data'), ('metadata', OrderedDict([('protocol', 'json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('StrType', OrderedDict([('shape', 'StrType')]))]))])), ('StrType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict()), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"foo": "bar"}')])), ('description', 'Ignores extra data'), ('suite_id', 5), ('test_id', 0)]), 'json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType'), ('locationName', 'FooNum')])), ('FalseBool', OrderedDict([('shape', 'BooleanType')])), ('TrueBool', OrderedDict([('shape', 'BooleanType')])), ('Float', OrderedDict([('shape', 'FloatType')])), ('Double', OrderedDict([('shape', 'DoubleType')])), ('Long', OrderedDict([('shape', 'LongType')])), ('Char', OrderedDict([('shape', 'CharType')])), ('Timestamp', OrderedDict([('shape', 'TimestampType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')])), ('BooleanType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('DoubleType', OrderedDict([('type', 'double')])), ('LongType', OrderedDict([('type', 'long')])), ('CharType', OrderedDict([('type', 'character')])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Str', 'myname'), ('Num', 123), ('FalseBool', False), ('TrueBool', True), ('Float', 1.2), ('Double', 1.3), ('Long', 200), ('Char', 'a'), ('Timestamp', 1422172800)])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Str>myname</Str><FooNum>123</FooNum><FalseBool>false</FalseBool><TrueBool>true</TrueBool><Float>1.2</Float><Double>1.3</Double><Long>200</Long><Char>a</Char><Timestamp>2015-01-25T08:00:00Z</Timestamp></OperationNameResult><ResponseMetadata><RequestId>request-id</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Not all members in response'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Str', 'myname')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Str>myname</Str></OperationNameResult><ResponseMetadata><RequestId>request-id</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Not all members in response'), ('suite_id', 1), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Blob', OrderedDict([('shape', 'BlobType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Blob', 'value')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Blob>dmFsdWU=</Blob></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Blob'), ('suite_id', 2), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><ListMember><member>abc</member><member>123</member></ListMember></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Lists'), ('suite_id', 3), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List with custom member name'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'item')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><ListMember><item>abc</item><item>123</item></ListMember></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'List with custom member name'), ('suite_id', 4), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened List'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('flattened', True), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><ListMember>abc</ListMember><ListMember>123</ListMember></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Flattened List'), ('suite_id', 5), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened single element list'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('flattened', True), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><ListMember>abc</ListMember></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Flattened single element list'), ('suite_id', 6), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List of structures'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('List', OrderedDict([('shape', 'ListOfStructs')]))]))])), ('ListOfStructs', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StructureShape')]))])), ('StructureShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringShape')])), ('Bar', OrderedDict([('shape', 'StringShape')])), ('Baz', OrderedDict([('shape', 'StringShape')]))]))])), ('StringShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('List', [OrderedDict([('Foo', 'firstfoo'), ('Bar', 'firstbar'), ('Baz', 'firstbaz')]), OrderedDict([('Foo', 'secondfoo'), ('Bar', 'secondbar'), ('Baz', 'secondbaz')])])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse xmlns="https://service.amazonaws.com/doc/2010-05-08/"><OperationNameResult><List><member><Foo>firstfoo</Foo><Bar>firstbar</Bar><Baz>firstbaz</Baz></member><member><Foo>secondfoo</Foo><Bar>secondbar</Bar><Baz>secondbaz</Baz></member></List></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'List of structures'), ('suite_id', 7), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened list of structures'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('resultWrapper', 'OperationNameResult'), ('members', OrderedDict([('List', OrderedDict([('shape', 'ListOfStructs')]))]))])), ('ListOfStructs', OrderedDict([('type', 'list'), ('flattened', True), ('member', OrderedDict([('shape', 'StructureShape')]))])), ('StructureShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringShape')])), ('Bar', OrderedDict([('shape', 'StringShape')])), ('Baz', OrderedDict([('shape', 'StringShape')]))]))])), ('StringShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('List', [OrderedDict([('Foo', 'firstfoo'), ('Bar', 'firstbar'), ('Baz', 'firstbaz')]), OrderedDict([('Foo', 'secondfoo'), ('Bar', 'secondbar'), ('Baz', 'secondbaz')])])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse xmlns="https://service.amazonaws.com/doc/2010-05-08/"><OperationNameResult><List><Foo>firstfoo</Foo><Bar>firstbar</Bar><Baz>firstbaz</Baz></List><List><Foo>secondfoo</Foo><Bar>secondbar</Bar><Baz>secondbaz</Baz></List></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Flattened list of structures'), ('suite_id', 8), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened list with location name'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('List', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('flattened', True), ('member', OrderedDict([('shape', 'StringShape'), ('locationName', 'NamedList')]))])), ('StringShape', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('List', ['a', 'b'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse xmlns="https://service.amazonaws.com/doc/2010-05-08/"><OperationNameResult><NamedList>a</NamedList><NamedList>b</NamedList></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Flattened list with location name'), ('suite_id', 9), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Normal map'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'StringMap')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StructType')]))])), ('StringType', OrderedDict([('type', 'string')])), ('StructType', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'StringType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', OrderedDict([('foo', 'bar')])), ('baz', OrderedDict([('foo', 'bam')]))]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse xmlns="https://service.amazonaws.com/doc/2010-05-08"><OperationNameResult><Map><entry><key>qux</key><value><foo>bar</foo></value></entry><entry><key>baz</key><value><foo>bam</foo></value></entry></Map></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Normal map'), ('suite_id', 10), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened map'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'StringMap'), ('flattened', True)]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar'), ('baz', 'bam')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Map><key>qux</key><value>bar</value></Map><Map><key>baz</key><value>bam</value></Map></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Flattened map'), ('suite_id', 11), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened map in shape definition'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'StringMap'), ('locationName', 'Attribute')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType'), ('locationName', 'Name')])), ('value', OrderedDict([('shape', 'StringType'), ('locationName', 'Value')])), ('flattened', True), ('locationName', 'Attribute')])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Attribute><Name>qux</Name><Value>bar</Value></Attribute></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Flattened map in shape definition'), ('suite_id', 12), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Named map'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'MapType')]))]))])), ('MapType', OrderedDict([('type', 'map'), ('flattened', True), ('key', OrderedDict([('locationName', 'foo'), ('shape', 'StringType')])), ('value', OrderedDict([('locationName', 'bar'), ('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar'), ('baz', 'bam')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Map><foo>qux</foo><bar>bar</bar></Map><Map><foo>baz</foo><bar>bam</bar></Map></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Named map'), ('suite_id', 13), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Empty string'), ('metadata', OrderedDict([('protocol', 'query')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('resultWrapper', 'OperationNameResult'), ('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Foo', '')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><OperationNameResult><Foo/></OperationNameResult><ResponseMetadata><RequestId>requestid</RequestId></ResponseMetadata></OperationNameResponse>')])), ('description', 'Empty string'), ('suite_id', 14), ('test_id', 0)]), 'query.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ImaHeader', OrderedDict([('shape', 'HeaderShape')])), ('ImaHeaderLocation', OrderedDict([('shape', 'HeaderShape'), ('locationName', 'X-Foo')])), ('Status', OrderedDict([('shape', 'StatusShape'), ('location', 'statusCode')])), ('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType')])), ('FalseBool', OrderedDict([('shape', 'BooleanType')])), ('TrueBool', OrderedDict([('shape', 'BooleanType')])), ('Float', OrderedDict([('shape', 'FloatType')])), ('Double', OrderedDict([('shape', 'DoubleType')])), ('Long', OrderedDict([('shape', 'LongType')])), ('Char', OrderedDict([('shape', 'CharType')]))]))])), ('HeaderShape', OrderedDict([('type', 'string'), ('location', 'header')])), ('StatusShape', OrderedDict([('type', 'integer')])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')])), ('BooleanType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('DoubleType', OrderedDict([('type', 'double')])), ('LongType', OrderedDict([('type', 'long')])), ('CharType', OrderedDict([('type', 'character')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ImaHeader', 'test'), ('ImaHeaderLocation', 'abc'), ('Status', 200), ('Str', 'myname'), ('Num', 123), ('FalseBool', False), ('TrueBool', True), ('Float', 1.2), ('Double', 1.3), ('Long', 200), ('Char', 'a')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('ImaHeader', 'test'), ('X-Foo', 'abc')])), ('body', '{"Str": "myname", "Num": 123, "FalseBool": false, "TrueBool": true, "Float": 1.2, "Double": 1.3, "Long": 200, "Char": "a"}')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob members'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('BlobMember', OrderedDict([('shape', 'BlobType')])), ('StructMember', OrderedDict([('shape', 'BlobContainer')]))]))])), ('BlobType', OrderedDict([('type', 'blob')])), ('BlobContainer', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'BlobType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('BlobMember', 'hi!'), ('StructMember', OrderedDict([('foo', 'there!')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"BlobMember": "aGkh", "StructMember": {"foo": "dGhlcmUh"}}')])), ('description', 'Blob members'), ('suite_id', 1), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Timestamp members'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('TimeMember', OrderedDict([('shape', 'TimeType')])), ('StructMember', OrderedDict([('shape', 'TimeContainer')]))]))])), ('TimeType', OrderedDict([('type', 'timestamp')])), ('TimeContainer', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'TimeType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('TimeMember', 1398796238), ('StructMember', OrderedDict([('foo', 1398796238)]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"TimeMember": 1398796238, "StructMember": {"foo": 1398796238}}')])), ('description', 'Timestamp members'), ('suite_id', 2), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['a', 'b'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"ListMember": ["a", "b"]}')])), ('description', 'Lists'), ('suite_id', 3), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists with structure member'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListType')]))]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'SingleStruct')]))])), ('StringType', OrderedDict([('type', 'string')])), ('SingleStruct', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', [OrderedDict([('Foo', 'a')]), OrderedDict([('Foo', 'b')])])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"ListMember": [{"Foo": "a"}, {"Foo": "b"}]}')])), ('description', 'Lists with structure member'), ('suite_id', 4), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Maps'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('MapMember', OrderedDict([('shape', 'MapType')]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'ListType')]))])), ('ListType', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'IntegerType')]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('MapMember', OrderedDict([('a', [1, 2]), ('b', [3, 4])]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"MapMember": {"a": [1, 2], "b": [3, 4]}}')])), ('description', 'Maps'), ('suite_id', 5), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Complex Map Values'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('MapMember', OrderedDict([('shape', 'MapType')]))]))])), ('MapType', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'TimeType')]))])), ('TimeType', OrderedDict([('type', 'timestamp')])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('MapMember', OrderedDict([('a', 1398796238), ('b', 1398796238)]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"MapMember": {"a": 1398796238, "b": 1398796238}}')])), ('description', 'Complex Map Values'), ('suite_id', 6), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Ignores extra data'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('StrType', OrderedDict([('shape', 'StrType')]))]))])), ('StrType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict()), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '{"foo": "bar"}')])), ('description', 'Ignores extra data'), ('suite_id', 7), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Ignores undefined output'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict())]), OrderedDict([('given', OrderedDict([('name', 'OperationName')])), ('result', OrderedDict()), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', 'OK')])), ('description', 'Ignores undefined output'), ('suite_id', 8), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Supports header maps'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('AllHeaders', OrderedDict([('shape', 'HeaderMap'), ('location', 'headers')])), ('PrefixedHeaders', OrderedDict([('shape', 'HeaderMap'), ('location', 'headers'), ('locationName', 'X-')]))]))])), ('HeaderMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('AllHeaders', OrderedDict([('Content-Length', '10'), ('x-Foo', 'bar'), ('X-bam', 'boo')])), ('PrefixedHeaders', OrderedDict([('Foo', 'bar'), ('bam', 'boo')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('Content-Length', '10'), ('x-Foo', 'bar'), ('X-bam', 'boo')])), ('body', '{}')])), ('description', 'Supports header maps'), ('suite_id', 9), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON payload'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('payload', 'Data'), ('members', OrderedDict([('Header', OrderedDict([('shape', 'StringType'), ('location', 'header'), ('locationName', 'X-Foo')])), ('Data', OrderedDict([('shape', 'BodyStructure')]))]))])), ('BodyStructure', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Header', 'baz'), ('Data', OrderedDict([('Foo', 'abc')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('X-Foo', 'baz')])), ('body', '{"Foo": "abc"}')])), ('description', 'JSON payload'), ('suite_id', 10), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Streaming payload'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('payload', 'Stream'), ('members', OrderedDict([('Stream', OrderedDict([('shape', 'Stream')]))]))])), ('Stream', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Stream', 'abc')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', 'abc')])), ('description', 'Streaming payload'), ('suite_id', 11), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON value trait'), ('metadata', OrderedDict([('protocol', 'rest-json')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Attr', OrderedDict([('shape', 'StringType'), ('jsonvalue', True), ('location', 'header'), ('locationName', 'X-Amz-Foo')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Attr', OrderedDict([('Foo', 'Bar')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('X-Amz-Foo', 'eyJGb28iOiJCYXIifQ==')])), ('body', '')])), ('description', 'JSON value trait'), ('suite_id', 12), ('test_id', 0)]), 'rest-json.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ImaHeader', OrderedDict([('shape', 'HeaderShape')])), ('ImaHeaderLocation', OrderedDict([('shape', 'HeaderShape'), ('locationName', 'X-Foo')])), ('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType'), ('locationName', 'FooNum')])), ('FalseBool', OrderedDict([('shape', 'BooleanType')])), ('TrueBool', OrderedDict([('shape', 'BooleanType')])), ('Float', OrderedDict([('shape', 'FloatType')])), ('Double', OrderedDict([('shape', 'DoubleType')])), ('Long', OrderedDict([('shape', 'LongType')])), ('Char', OrderedDict([('shape', 'CharType')])), ('Timestamp', OrderedDict([('shape', 'TimestampType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')])), ('BooleanType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('DoubleType', OrderedDict([('type', 'double')])), ('LongType', OrderedDict([('type', 'long')])), ('CharType', OrderedDict([('type', 'character')])), ('HeaderShape', OrderedDict([('type', 'string'), ('location', 'header')])), ('StatusShape', OrderedDict([('type', 'integer'), ('location', 'statusCode')])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ImaHeader', 'test'), ('ImaHeaderLocation', 'abc'), ('Str', 'myname'), ('Num', 123), ('FalseBool', False), ('TrueBool', True), ('Float', 1.2), ('Double', 1.3), ('Long', 200), ('Char', 'a'), ('Timestamp', 1422172800)])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('ImaHeader', 'test'), ('X-Foo', 'abc')])), ('body', '<OperationNameResponse><Str>myname</Str><FooNum>123</FooNum><FalseBool>false</FalseBool><TrueBool>true</TrueBool><Float>1.2</Float><Double>1.3</Double><Long>200</Long><Char>a</Char><Timestamp>2015-01-25T08:00:00Z</Timestamp></OperationNameResponse>')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ImaHeader', OrderedDict([('shape', 'HeaderShape')])), ('ImaHeaderLocation', OrderedDict([('shape', 'HeaderShape'), ('locationName', 'X-Foo')])), ('Str', OrderedDict([('shape', 'StringType')])), ('Num', OrderedDict([('shape', 'IntegerType'), ('locationName', 'FooNum')])), ('FalseBool', OrderedDict([('shape', 'BooleanType')])), ('TrueBool', OrderedDict([('shape', 'BooleanType')])), ('Float', OrderedDict([('shape', 'FloatType')])), ('Double', OrderedDict([('shape', 'DoubleType')])), ('Long', OrderedDict([('shape', 'LongType')])), ('Char', OrderedDict([('shape', 'CharType')])), ('Timestamp', OrderedDict([('shape', 'TimestampType')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('IntegerType', OrderedDict([('type', 'integer')])), ('BooleanType', OrderedDict([('type', 'boolean')])), ('FloatType', OrderedDict([('type', 'float')])), ('DoubleType', OrderedDict([('type', 'double')])), ('LongType', OrderedDict([('type', 'long')])), ('CharType', OrderedDict([('type', 'character')])), ('HeaderShape', OrderedDict([('type', 'string'), ('location', 'header')])), ('StatusShape', OrderedDict([('type', 'integer'), ('location', 'statusCode')])), ('TimestampType', OrderedDict([('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ImaHeader', 'test'), ('ImaHeaderLocation', 'abc'), ('Str', ''), ('Num', 123), ('FalseBool', False), ('TrueBool', True), ('Float', 1.2), ('Double', 1.3), ('Long', 200), ('Char', 'a'), ('Timestamp', 1422172800)])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('ImaHeader', 'test'), ('X-Foo', 'abc')])), ('body', '<OperationNameResponse><Str></Str><FooNum>123</FooNum><FalseBool>false</FalseBool><TrueBool>true</TrueBool><Float>1.2</Float><Double>1.3</Double><Long>200</Long><Char>a</Char><Timestamp>2015-01-25T08:00:00Z</Timestamp></OperationNameResponse>')])), ('description', 'Scalar members'), ('suite_id', 0), ('test_id', 1)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Blob'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Blob', OrderedDict([('shape', 'BlobType')]))]))])), ('BlobType', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Blob', 'value')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><Blob>dmFsdWU=</Blob></OperationNameResult>')])), ('description', 'Blob'), ('suite_id', 1), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Lists'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><ListMember><member>abc</member><member>123</member></ListMember></OperationNameResult>')])), ('description', 'Lists'), ('suite_id', 2), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'List with custom member name'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'ListShape')]))]))])), ('ListShape', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType'), ('locationName', 'item')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><ListMember><item>abc</item><item>123</item></ListMember></OperationNameResult>')])), ('description', 'List with custom member name'), ('suite_id', 3), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened List'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('ListMember', OrderedDict([('shape', 'StringList'), ('flattened', True)]))]))])), ('StringList', OrderedDict([('type', 'list'), ('member', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('ListMember', ['abc', '123'])])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><ListMember>abc</ListMember><ListMember>123</ListMember></OperationNameResult>')])), ('description', 'Flattened List'), ('suite_id', 4), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Normal map'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'StringMap')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'SingleStructure')]))])), ('SingleStructure', OrderedDict([('type', 'structure'), ('members', OrderedDict([('foo', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', OrderedDict([('foo', 'bar')])), ('baz', OrderedDict([('foo', 'bam')]))]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><Map><entry><key>qux</key><value><foo>bar</foo></value></entry><entry><key>baz</key><value><foo>bam</foo></value></entry></Map></OperationNameResult>')])), ('description', 'Normal map'), ('suite_id', 5), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Flattened map'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'StringMap'), ('flattened', True)]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType')])), ('value', OrderedDict([('shape', 'StringType')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar'), ('baz', 'bam')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><Map><key>qux</key><value>bar</value></Map><Map><key>baz</key><value>bam</value></Map></OperationNameResult>')])), ('description', 'Flattened map'), ('suite_id', 6), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Named map'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Map', OrderedDict([('shape', 'StringMap')]))]))])), ('StringMap', OrderedDict([('type', 'map'), ('key', OrderedDict([('shape', 'StringType'), ('locationName', 'foo')])), ('value', OrderedDict([('shape', 'StringType'), ('locationName', 'bar')]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Map', OrderedDict([('qux', 'bar'), ('baz', 'bam')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResult><Map><entry><foo>qux</foo><bar>bar</bar></entry><entry><foo>baz</foo><bar>bam</bar></entry></Map></OperationNameResult>')])), ('description', 'Named map'), ('suite_id', 7), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'XML payload'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('payload', 'Data'), ('members', OrderedDict([('Header', OrderedDict([('shape', 'StringType'), ('location', 'header'), ('locationName', 'X-Foo')])), ('Data', OrderedDict([('shape', 'SingleStructure')]))]))])), ('StringType', OrderedDict([('type', 'string')])), ('SingleStructure', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')]))]))]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Header', 'baz'), ('Data', OrderedDict([('Foo', 'abc')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('X-Foo', 'baz')])), ('body', '<OperationNameResponse><Foo>abc</Foo></OperationNameResponse>')])), ('description', 'XML payload'), ('suite_id', 8), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Streaming payload'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('payload', 'Stream'), ('members', OrderedDict([('Stream', OrderedDict([('shape', 'BlobStream')]))]))])), ('BlobStream', OrderedDict([('type', 'blob')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Stream', 'abc')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', 'abc')])), ('description', 'Streaming payload'), ('suite_id', 9), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Scalar members in headers'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Str', OrderedDict([('locationName', 'x-str'), ('shape', 'StringHeaderType')])), ('Integer', OrderedDict([('locationName', 'x-int'), ('shape', 'IntegerHeaderType')])), ('TrueBool', OrderedDict([('locationName', 'x-true-bool'), ('shape', 'BooleanHeaderType')])), ('FalseBool', OrderedDict([('locationName', 'x-false-bool'), ('shape', 'BooleanHeaderType')])), ('Float', OrderedDict([('locationName', 'x-float'), ('shape', 'FloatHeaderType')])), ('Double', OrderedDict([('locationName', 'x-double'), ('shape', 'DoubleHeaderType')])), ('Long', OrderedDict([('locationName', 'x-long'), ('shape', 'LongHeaderType')])), ('Char', OrderedDict([('locationName', 'x-char'), ('shape', 'CharHeaderType')])), ('Timestamp', OrderedDict([('locationName', 'x-timestamp'), ('shape', 'TimestampHeaderType')]))]))])), ('StringHeaderType', OrderedDict([('location', 'header'), ('type', 'string')])), ('IntegerHeaderType', OrderedDict([('location', 'header'), ('type', 'integer')])), ('BooleanHeaderType', OrderedDict([('location', 'header'), ('type', 'boolean')])), ('FloatHeaderType', OrderedDict([('location', 'header'), ('type', 'float')])), ('DoubleHeaderType', OrderedDict([('location', 'header'), ('type', 'double')])), ('LongHeaderType', OrderedDict([('location', 'header'), ('type', 'long')])), ('CharHeaderType', OrderedDict([('location', 'header'), ('type', 'character')])), ('TimestampHeaderType', OrderedDict([('location', 'header'), ('type', 'timestamp')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Str', 'string'), ('Integer', 1), ('TrueBool', True), ('FalseBool', False), ('Float', 1.5), ('Double', 1.5), ('Long', 100), ('Char', 'a'), ('Timestamp', 1422172800)])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('x-str', 'string'), ('x-int', '1'), ('x-true-bool', 'true'), ('x-false-bool', 'false'), ('x-float', '1.5'), ('x-double', '1.5'), ('x-long', '100'), ('x-char', 'a'), ('x-timestamp', 'Sun, 25 Jan 2015 08:00:00 GMT')])), ('body', '')])), ('description', 'Scalar members in headers'), ('suite_id', 10), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'Empty string'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Foo', OrderedDict([('shape', 'StringType')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Foo', '')])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict()), ('body', '<OperationNameResponse><Foo/><RequestId>requestid</RequestId></OperationNameResponse>')])), ('description', 'Empty string'), ('suite_id', 11), ('test_id', 0)]), 'rest-xml.json') ... ok
tests.unit.test_protocols.test_compliance(OrderedDict([('description', 'JSON value trait'), ('metadata', OrderedDict([('protocol', 'rest-xml')])), ('shapes', OrderedDict([('OutputShape', OrderedDict([('type', 'structure'), ('members', OrderedDict([('Attr', OrderedDict([('shape', 'StringType'), ('jsonvalue', True), ('location', 'header'), ('locationName', 'X-Amz-Foo')]))]))])), ('StringType', OrderedDict([('type', 'string')]))]))]), OrderedDict([('given', OrderedDict([('output', OrderedDict([('shape', 'OutputShape')])), ('name', 'OperationName')])), ('result', OrderedDict([('Attr', OrderedDict([('Foo', 'Bar')]))])), ('response', OrderedDict([('status_code', 200), ('headers', OrderedDict([('X-Amz-Foo', 'eyJGb28iOiJCYXIifQ==')])), ('body', '')])), ('description', 'JSON value trait'), ('suite_id', 12), ('test_id', 0)]), 'rest-xml.json') ... ok
test_constructs_endpoints_for_regionalized_regex_match (tests.unit.test_regions.TestEndpointResolver) ... ok
test_constructs_endpoints_for_unknown_service_but_known_region (tests.unit.test_regions.TestEndpointResolver) ... ok
test_constructs_partition_endpoints_for_real_partition_region (tests.unit.test_regions.TestEndpointResolver) ... ok
test_constructs_partition_endpoints_for_regex_match (tests.unit.test_regions.TestEndpointResolver) ... ok
test_constructs_regionalized_endpoints_for_exact_matches (tests.unit.test_regions.TestEndpointResolver) ... ok
test_ensures_region_is_not_none (tests.unit.test_regions.TestEndpointResolver) ... ok
test_ensures_required_keys_present (tests.unit.test_regions.TestEndpointResolver) ... ok
test_gets_endpoint_names (tests.unit.test_regions.TestEndpointResolver) ... ok
test_gets_endpoint_names_for_partition (tests.unit.test_regions.TestEndpointResolver) ... ok
test_gives_hostname_and_common_name_unaltered (tests.unit.test_regions.TestEndpointResolver) ... ok
test_list_regional_endpoints_only (tests.unit.test_regions.TestEndpointResolver) ... ok
test_merges_partition_default_keys_with_no_overwrite (tests.unit.test_regions.TestEndpointResolver) ... ok
test_merges_partition_default_keys_with_overwrite (tests.unit.test_regions.TestEndpointResolver) ... ok
test_merges_service_keys (tests.unit.test_regions.TestEndpointResolver) ... ok
test_returns_dns_suffix_if_available (tests.unit.test_regions.TestEndpointResolver) ... ok
test_returns_empty_list_when_listing_for_different_partition (tests.unit.test_regions.TestEndpointResolver) ... ok
test_returns_empty_list_when_no_service_found (tests.unit.test_regions.TestEndpointResolver) ... ok
test_returns_none_when_no_match (tests.unit.test_regions.TestEndpointResolver) ... ok
tests_uses_partition_endpoint_when_no_region_provided (tests.unit.test_regions.TestEndpointResolver) ... ok
test_get_response_nonstreaming_ng (tests.unit.test_response.TestGetResponse) ... ok
test_get_response_nonstreaming_ok (tests.unit.test_response.TestGetResponse) ... ok
test_get_response_streaming_ng (tests.unit.test_response.TestGetResponse) ... ok
test_get_response_streaming_ok (tests.unit.test_response.TestGetResponse) ... ok
test_streaming_body_closes (tests.unit.test_response.TestStreamWrapper) ... ok
test_streaming_body_with_invalid_length (tests.unit.test_response.TestStreamWrapper) ... ok
test_streaming_body_with_single_read (tests.unit.test_response.TestStreamWrapper) ... ok
test_streaming_body_with_zero_read (tests.unit.test_response.TestStreamWrapper) ... ok
test_streaming_wrapper_validates_content_length (tests.unit.test_response.TestStreamWrapper) ... ok
test_crc32_check_fails (tests.unit.test_retryhandler.TestCRC32Checker) ... ok
test_crc32_matches (tests.unit.test_retryhandler.TestCRC32Checker) ... ok
test_crc32_missing (tests.unit.test_retryhandler.TestCRC32Checker) ... ok
test_connection_timeouts_are_retried (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_crc32_check_propogates_error (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_create_retry_for_operation (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_create_retry_handler_with_no_operation (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_create_retry_handler_with_socket_errors (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_create_retry_single_checker_service_level (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_retry_pool_closed_errors (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_retry_with_socket_errors (tests.unit.test_retryhandler.TestCreateRetryConfiguration) ... ok
test_delay_with_numeric_base (tests.unit.test_retryhandler.TestDelayExponential) ... ok
test_delay_with_rand_string (tests.unit.test_retryhandler.TestDelayExponential) ... ok
test_value_error_raised_with_non_positive_number (tests.unit.test_retryhandler.TestDelayExponential) ... ok
test_error_code_checker (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_error_code_checker_does_not_match (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_error_code_checker_ignore_caught_exception (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_exception_checker_ignores_response (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_max_attempts (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_max_attempts_successful (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_multi_checker (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_status_code_checker (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_value_error_raised_when_missing_response_and_exception (tests.unit.test_retryhandler.TestRetryCheckers) ... ok
test_action_tied_to_policy (tests.unit.test_retryhandler.TestRetryHandler) ... ok
test_none_response_when_no_matches (tests.unit.test_retryhandler.TestRetryHandler) ... ok
test_get_object_almost_an_ip_address_name_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_get_object_ip_address_name_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_get_object_non_dns_name_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_get_object_non_dns_name_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_invalid_endpoint_raises_exception (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_dns_name (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_dns_name_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_in_fips (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_in_restricted_regions (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_non_dns_name (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_non_dns_name_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_list_objects_unicode_query_string_eu_central_1 (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_non_existent_region (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_put_object_dns_name_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_put_object_dns_name_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_put_object_dns_name_single_letter_non_classic (tests.unit.test_s3_addressing.TestS3Addressing) ... ok
test_blob_accepts_bytes_type (tests.unit.test_serialize.TestBinaryTypes) ... ok
test_blob_accepts_str_type (tests.unit.test_serialize.TestBinaryTypes) ... ok
test_blob_handles_unicode_chars (tests.unit.test_serialize.TestBinaryTypes) ... ok
test_blob_accepts_bytes_type (tests.unit.test_serialize.TestBinaryTypesJSON) ... ok
test_blob_serialization_when_payload_is_bytes (tests.unit.test_serialize.TestBinaryTypesWithRestXML) ... ok
test_blob_serialization_when_payload_is_unicode (tests.unit.test_serialize.TestBinaryTypesWithRestXML) ... ok
test_blob_serialization_with_file_like_object (tests.unit.test_serialize.TestBinaryTypesWithRestXML) ... ok
test_always_serialized_as_str (tests.unit.test_serialize.TestHeaderSerialization) ... ok
test_instantiate_with_validation (tests.unit.test_serialize.TestInstanceCreation) ... ok
test_instantiate_without_validation (tests.unit.test_serialize.TestInstanceCreation) ... ok
test_accepts_epoch (tests.unit.test_serialize.TestJSONTimestampSerialization) ... ok
test_accepts_iso_8601_format (tests.unit.test_serialize.TestJSONTimestampSerialization) ... ok
test_accepts_partial_iso_format (tests.unit.test_serialize.TestJSONTimestampSerialization) ... ok
test_restxml_serializes_unicode (tests.unit.test_serialize.TestRestXMLUnicodeSerialization) ... ok
test_accepts_datetime_object (tests.unit.test_serialize.TestTimestampHeadersWithRestXML) ... ok
test_accepts_iso_8601_format (tests.unit.test_serialize.TestTimestampHeadersWithRestXML) ... ok
test_accepts_iso_8601_format_non_utc (tests.unit.test_serialize.TestTimestampHeadersWithRestXML) ... ok
test_accepts_rfc_822_format (tests.unit.test_serialize.TestTimestampHeadersWithRestXML) ... ok
test_accepts_unix_timestamp_integer (tests.unit.test_serialize.TestTimestampHeadersWithRestXML) ... ok
test_accepts_datetime_object (tests.unit.test_serialize.TestTimestamps) ... ok
test_accepts_iso_8601_format (tests.unit.test_serialize.TestTimestamps) ... ok
test_accepts_naive_datetime_object (tests.unit.test_serialize.TestTimestamps) ... ok
test_accepts_timestamp_without_tz_info (tests.unit.test_serialize.TestTimestamps) ... ok
test_microsecond_timestamp_without_tz_info (tests.unit.test_serialize.TestTimestamps) ... ok
test_default_profile_specified_raises_exception (tests.unit.test_session.SessionTest) ... ok
test_emit_delegates_to_emitter (tests.unit.test_session.SessionTest) ... ok
test_emit_first_non_none (tests.unit.test_session.SessionTest) ... ok
test_emitter_can_be_passed_in (tests.unit.test_session.SessionTest) ... ok
test_file_logger (tests.unit.test_session.SessionTest) ... ok
test_full_config_merges_creds_file_data (tests.unit.test_session.SessionTest) ... ok
test_full_config_property (tests.unit.test_session.SessionTest) ... ok
test_general_purpose_logger (tests.unit.test_session.SessionTest) ... ok
test_get_aws_services_in_alphabetical_order (tests.unit.test_session.SessionTest) ... ok
test_logger_name_can_be_passed_in (tests.unit.test_session.SessionTest) ... ok
test_multiple_env_vars_uses_second_var (tests.unit.test_session.SessionTest) ... ok
test_path_not_in_available_profiles (tests.unit.test_session.SessionTest) ... ok
test_profile (tests.unit.test_session.SessionTest) ... ok
test_profile_does_not_exist_raises_exception (tests.unit.test_session.SessionTest) ... ok
test_profile_does_not_exist_with_default_profile (tests.unit.test_session.SessionTest) ... ok
test_profile_when_pulled_from_env (tests.unit.test_session.SessionTest) ... ok
test_profile_when_set_explicitly (tests.unit.test_session.SessionTest) ... ok
test_register_with_unique_id (tests.unit.test_session.SessionTest) ... ok
test_supports_multiple_env_vars_for_single_logical_name (tests.unit.test_session.SessionTest) ... ok
test_type_conversions_occur_when_specified (tests.unit.test_session.SessionTest) ... ok
test_variable_does_not_exist (tests.unit.test_session.SessionTest) ... ok
test_registered_builtin_handlers (tests.unit.test_session.TestBuiltinEventHandlers) ... ok
test_can_lazy_register_a_component (tests.unit.test_session.TestComponentLocator) ... ok
test_can_register_and_retrieve_component (tests.unit.test_session.TestComponentLocator) ... ok
test_last_registration_wins (tests.unit.test_session.TestComponentLocator) ... ok
test_latest_registration_overrides_lazy (tests.unit.test_session.TestComponentLocator) ... ok
test_latest_registration_wins_even_if_lazy (tests.unit.test_session.TestComponentLocator) ... ok
test_lazy_registration_factory_does_not_remove_from_list_on_error (tests.unit.test_session.TestComponentLocator) ... ok
test_unknown_component_raises_exception (tests.unit.test_session.TestComponentLocator) ... ok
test_config_loader_delegation (tests.unit.test_session.TestConfigLoaderObject) ... ok
test_can_create_client (tests.unit.test_session.TestCreateClient) ... ok
test_can_specify_multiple_versions_from_config (tests.unit.test_session.TestCreateClient) ... ok
test_config_passed_to_client_creator (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_no_region_and_no_client_config (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_use_no_api_version_by_default (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_uses_api_version_from_config (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_verify_param_overrides_all (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_ca_bundle_from_config (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_ca_bundle_from_env_var (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_default_client_config (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_merging_client_configs (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_region (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_region_and_client_config (tests.unit.test_session.TestCreateClient) ... ok
test_create_client_with_verify_param (tests.unit.test_session.TestCreateClient) ... ok
test_cred_provider_called_when_partial_creds_provided (tests.unit.test_session.TestCreateClient) ... ok
test_credential_provider_not_called_when_creds_provided (tests.unit.test_session.TestCreateClient) ... ok
test_param_api_version_overrides_config_value (tests.unit.test_session.TestCreateClient) ... ok
test_new_session_has_no_default_client_config (tests.unit.test_session.TestDefaultClientConfig) ... ok
test_set_and_get_client_config (tests.unit.test_session.TestDefaultClientConfig) ... ok
test_get_paginator_model (tests.unit.test_session.TestGetPaginatorModel) ... ok
test_get_service_model (tests.unit.test_session.TestGetServiceModel) ... ok
test_get_waiter_model (tests.unit.test_session.TestGetWaiterModel) ... ok
test_default_value_can_be_overriden (tests.unit.test_session.TestSessionConfigurationVars) ... ok
test_per_session_config_vars (tests.unit.test_session.TestSessionConfigurationVars) ... ok
test_lists_partitions_on_disk (tests.unit.test_session.TestSessionPartitionFiles) ... ok
test_provides_empty_list_for_unknown_service_regions (tests.unit.test_session.TestSessionPartitionFiles) ... ok
test_proxies_list_endpoints_to_resolver (tests.unit.test_session.TestSessionPartitionFiles) ... ok
test_agent_extra_and_exec_env (tests.unit.test_session.TestSessionUserAgent) ... ok
test_can_append_to_user_agent (tests.unit.test_session.TestSessionUserAgent) ... ok
test_can_change_user_agent_name (tests.unit.test_session.TestSessionUserAgent) ... ok
test_can_change_user_agent_version (tests.unit.test_session.TestSessionUserAgent) ... ok
test_execution_env_not_set (tests.unit.test_session.TestSessionUserAgent) ... ok
test_execution_env_set (tests.unit.test_session.TestSessionUserAgent) ... ok
test_build_canned_policy (tests.unit.test_signers.TestCloudfrontSigner) ... ok
test_build_custom_policy (tests.unit.test_signers.TestCloudfrontSigner) ... ok
test_generate_presign_url_with_custom_policy (tests.unit.test_signers.TestCloudfrontSigner) ... ok
test_generate_presign_url_with_expire_time (tests.unit.test_signers.TestCloudfrontSigner) ... ok
test_custom_region (tests.unit.test_signers.TestGenerateDBAuthToken) ... ok
test_generate_db_auth_token (tests.unit.test_signers.TestGenerateDBAuthToken) ... ok
test_generate_presigned_post (tests.unit.test_signers.TestGeneratePresignedPost) ... ok
test_generate_presigned_post_expires (tests.unit.test_signers.TestGeneratePresignedPost) ... ok
test_generate_presigned_post_non_s3_client (tests.unit.test_signers.TestGeneratePresignedPost) ... ok
test_generate_presigned_post_with_filename (tests.unit.test_signers.TestGeneratePresignedPost) ... ok
test_generate_presigned_post_with_prefilled (tests.unit.test_signers.TestGeneratePresignedPost) ... ok
test_generate_presign_url_emits_is_presign_in_context (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url_emits_param_events (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url_expires (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url_missing_required_params (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url_override_http_method (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url_unknown_method_name (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigned_url_with_query_string (tests.unit.test_signers.TestGenerateUrl) ... ok
test_generate_presigne_post_choose_signer_override_known (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_presigned_post (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_presigned_post_bad_signer_raises_error (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_presigned_post_choose_signer_override (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_presigned_post_emits_choose_signer (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_presigned_post_with_conditions (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_presigned_post_with_region_override (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_generate_unsigned_post (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_presigned_post_throws_unsupported_signature_error (tests.unit.test_signers.TestS3PostPresigner) ... ok
test_choose_signer_override (tests.unit.test_signers.TestSigner) ... ok
test_choose_signer_passes_context (tests.unit.test_signers.TestSigner) ... ok
test_disable_signing (tests.unit.test_signers.TestSigner) ... ok
test_emits_before_sign (tests.unit.test_signers.TestSigner) ... ok
test_emits_choose_signer (tests.unit.test_signers.TestSigner) ... ok
test_generate_presigned_url (tests.unit.test_signers.TestSigner) ... ok
test_generate_presigned_url_with_exipres_in (tests.unit.test_signers.TestSigner) ... ok
test_generate_presigned_url_with_region_override (tests.unit.test_signers.TestSigner) ... ok
test_generate_url_choose_signer_override (tests.unit.test_signers.TestSigner) ... ok
test_generate_url_emits_choose_signer (tests.unit.test_signers.TestSigner) ... ok
test_generate_url_unsigned (tests.unit.test_signers.TestSigner) ... ok
test_get_auth (tests.unit.test_signers.TestSigner) ... ok
test_get_auth_bad_override (tests.unit.test_signers.TestSigner) ... ok
test_get_auth_signature_override (tests.unit.test_signers.TestSigner) ... ok
test_no_credentials_case_is_forwarded_to_signer (tests.unit.test_signers.TestSigner) ... ok
test_presign_with_custom_signing_name (tests.unit.test_signers.TestSigner) ... ok
test_presigned_url_throws_unsupported_signature_error (tests.unit.test_signers.TestSigner) ... ok
test_region_name (tests.unit.test_signers.TestSigner) ... ok
test_region_required_for_sigv4 (tests.unit.test_signers.TestSigner) ... ok
test_sign_with_custom_signing_name (tests.unit.test_signers.TestSigner) ... ok
test_sign_with_expires_in (tests.unit.test_signers.TestSigner) ... ok
test_sign_with_region_name (tests.unit.test_signers.TestSigner) ... ok
test_sign_with_signing_type_presign_post (tests.unit.test_signers.TestSigner) ... ok
test_sign_with_signing_type_presign_url (tests.unit.test_signers.TestSigner) ... ok
test_sign_with_signing_type_standard (tests.unit.test_signers.TestSigner) ... ok
test_signature_version (tests.unit.test_signers.TestSigner) ... ok
test_signer_with_refreshable_credentials_gets_credential_set (tests.unit.test_signers.TestSigner) ... ok
test_signing_name (tests.unit.test_signers.TestSigner) ... ok
test_unknown_signer_raises_unknown_on_standard (tests.unit.test_signers.TestSigner) ... ok
test_unknown_signer_raises_unsupported_when_not_standard (tests.unit.test_signers.TestSigner) ... ok
test_add_response (tests.unit.test_stub.TestStubber) ... ok
test_add_response_fails_when_missing_client_method (tests.unit.test_stub.TestStubber) ... ok
test_assert_no_responses_remaining (tests.unit.test_stub.TestStubber) ... ok
test_context_manager (tests.unit.test_stub.TestStubber) ... ok
test_get_client_error_response (tests.unit.test_stub.TestStubber) ... ok
test_get_client_error_with_extra_error_meta (tests.unit.test_stub.TestStubber) ... ok
test_get_client_error_with_extra_response_meta (tests.unit.test_stub.TestStubber) ... ok
test_get_response (tests.unit.test_stub.TestStubber) ... ok
test_get_response_errors_with_no_stubs (tests.unit.test_stub.TestStubber) ... ok
test_stubber_registers_events (tests.unit.test_stub.TestStubber) ... ok
test_stubber_unregisters_events (tests.unit.test_stub.TestStubber) ... ok
test_validate_ignores_response_metadata (tests.unit.test_stub.TestStubber) ... ok
test_validates_on_empty_output_shape (tests.unit.test_stub.TestStubber) ... ok
test_validates_service_response (tests.unit.test_stub.TestStubber) ... ok
test_client_override_max_attempts (tests.unit.test_translate.TestBuildRetryConfig) ... ok
test_inject_retry_config (tests.unit.test_translate.TestBuildRetryConfig) ... ok
test_resolve_reference (tests.unit.test_translate.TestBuildRetryConfig) ... ok
test_service_specific_defaults_no_mutate_default_retry (tests.unit.test_translate.TestBuildRetryConfig) ... ok
test_generate_nested_structure (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_generate_scalar_list (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_generate_scalar_map (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_generate_scalars (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_generate_string (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_generate_string_enum (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_handles_recursive_shapes (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_will_use_member_names_for_string_values (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_will_use_member_names_for_string_values_of_list (tests.unit.test_utils.TestArgumentGenerator) ... ok
test_cached_property_only_called_once (tests.unit.test_utils.TestCachedProperty) ... ok
test_cached_property_same_value (tests.unit.test_utils.TestCachedProperty) ... ok
test_as_binary (tests.unit.test_utils.TestChecksums) ... ok
test_as_hex (tests.unit.test_utils.TestChecksums) ... ok
test_empty_hash (tests.unit.test_utils.TestChecksums) ... ok
test_can_retrieve_full_uri_with_fixed_ip (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_can_retrieve_uri (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_can_retry_requests (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_can_specify_extra_headers_are_merged (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_can_use_127_ip_addr (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_can_use_127_ip_addr_with_port (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_error_raised_on_no_json_response (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_error_raised_on_non_200_response (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_error_raised_on_nonallowed_url (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_external_host_not_allowed_if_https (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_link_local_http_is_not_allowed (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_link_local_https_is_not_allowed (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_localhost_http_is_allowed (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_localhost_https_is_allowed (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_localhost_with_port_http_is_allowed (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_non_link_local_nonallowed_url (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_propagates_credential_error_on_http_errors (tests.unit.test_utils.TestContainerMetadataFetcher) ... ok
test_datetime2timestamp_aware (tests.unit.test_utils.TestDatetime2Timestamp) ... ok
test_datetime2timestamp_naive (tests.unit.test_utils.TestDatetime2Timestamp) ... ok
test_deep_merge (tests.unit.test_utils.TestDeepMerge) ... ok
test_merge_boolean (tests.unit.test_utils.TestDeepMerge) ... ok
test_merge_list (tests.unit.test_utils.TestDeepMerge) ... ok
test_merge_number (tests.unit.test_utils.TestDeepMerge) ... ok
test_merge_overrides_value (tests.unit.test_utils.TestDeepMerge) ... ok
test_merge_string (tests.unit.test_utils.TestDeepMerge) ... ok
test_simple_merge (tests.unit.test_utils.TestDeepMerge) ... ok
test_can_provide_default_endpoint_url (tests.unit.test_utils.TestFixS3Host) ... ok
test_dns_style_not_used_for_get_bucket_location (tests.unit.test_utils.TestFixS3Host) ... ok
test_fix_s3_host_initial (tests.unit.test_utils.TestFixS3Host) ... ok
test_fix_s3_host_only_applied_once (tests.unit.test_utils.TestFixS3Host) ... ok
test_no_endpoint_url_uses_request_url (tests.unit.test_utils.TestFixS3Host) ... ok
test_client_name_using_abreviation (tests.unit.test_utils.TestGetServiceModuleName) ... ok
test_client_name_with_amazon (tests.unit.test_utils.TestGetServiceModuleName) ... ok
test_client_name_with_no_full_name_or_abbreviation (tests.unit.test_utils.TestGetServiceModuleName) ... ok
test_client_name_with_non_alphabet_characters (tests.unit.test_utils.TestGetServiceModuleName) ... ok
test_default (tests.unit.test_utils.TestGetServiceModuleName) ... ok
test_cache_single_method_call (tests.unit.test_utils.TestInstanceCache) ... ok
test_can_cache_kwargs (tests.unit.test_utils.TestInstanceCache) ... ok
test_can_cache_multiple_methods (tests.unit.test_utils.TestInstanceCache) ... ok
test_disabled_by_environment (tests.unit.test_utils.TestInstanceMetadataFetcher) ... ok
test_disabled_by_environment_mixed_case (tests.unit.test_utils.TestInstanceMetadataFetcher) ... ok
test_disabling_env_var_not_true (tests.unit.test_utils.TestInstanceMetadataFetcher) ... ok
test_json_value_header (tests.unit.test_utils.TestIsJSONValueHeader) ... ok
test_no_serialization_section (tests.unit.test_utils.TestIsJSONValueHeader) ... ok
test_non_header_jsonvalue_shape (tests.unit.test_utils.TestIsJSONValueHeader) ... ok
test_non_jsonvalue_shape (tests.unit.test_utils.TestIsJSONValueHeader) ... ok
test_non_string_jsonvalue_shape (tests.unit.test_utils.TestIsJSONValueHeader) ... ok
test_can_have_port (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_cannot_have_spaces (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_dns_name_is_valid (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_hostname_can_end_with_dot (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_hostname_no_dots (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_ip_address_is_allowed (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_ip_can_have_port (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_long_hostname (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_missing_scheme (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_no_new_lines (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_path_component_ignored (tests.unit.test_utils.TestIsValidEndpointURL) ... ok
test_list_values_append (tests.unit.test_utils.TestMergeDicts) ... ok
test_list_values_mismatching_types (tests.unit.test_utils.TestMergeDicts) ... ok
test_list_values_missing_key (tests.unit.test_utils.TestMergeDicts) ... ok
test_list_values_no_append (tests.unit.test_utils.TestMergeDicts) ... ok
test_merge_dicts_new_keys (tests.unit.test_utils.TestMergeDicts) ... ok
test_merge_dicts_overrides (tests.unit.test_utils.TestMergeDicts) ... ok
test_merge_empty_dict_does_nothing (tests.unit.test_utils.TestMergeDicts) ... ok
test_more_than_one_sub_dict (tests.unit.test_utils.TestMergeDicts) ... ok
test_new_keys (tests.unit.test_utils.TestMergeDicts) ... ok
test_key_val_pair_with_blank_lines (tests.unit.test_utils.TestParseEC2CredentialsFile) ... ok
test_key_val_parser_lenient (tests.unit.test_utils.TestParseEC2CredentialsFile) ... ok
test_multiple_equals_on_line (tests.unit.test_utils.TestParseEC2CredentialsFile) ... ok
test_os_error_raises_config_not_found (tests.unit.test_utils.TestParseEC2CredentialsFile) ... ok
test_parse_ec2_content (tests.unit.test_utils.TestParseEC2CredentialsFile) ... ok
test_parse_ec2_content_empty (tests.unit.test_utils.TestParseEC2CredentialsFile) ... ok
test_parse_epoch (tests.unit.test_utils.TestParseTimestamps) ... ok
test_parse_epoch_as_string (tests.unit.test_utils.TestParseTimestamps) ... ok
test_parse_epoch_zero_time (tests.unit.test_utils.TestParseTimestamps) ... ok
test_parse_gmt_in_uk_time (tests.unit.test_utils.TestParseTimestamps) ... ok
test_parse_invalid_timestamp (tests.unit.test_utils.TestParseTimestamps) ... ok
test_parse_iso8601 (tests.unit.test_utils.TestParseTimestamps) ... ok
test_parse_rfc822 (tests.unit.test_utils.TestParseTimestamps) ... ok
test_handles_full_iso_8601 (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_handles_int_epoch (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_handles_naive_datetime (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_handles_other_timezone (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_handles_string_epoch (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_handles_utc_time (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_year_only_iso_8601 (tests.unit.test_utils.TestParseToUTCDatetime) ... ok
test_percent_encode_bytes (tests.unit.test_utils.TestPercentEncode) ... ok
test_percent_encode_obj (tests.unit.test_utils.TestPercentEncode) ... ok
test_percent_encode_text (tests.unit.test_utils.TestPercentEncode) ... ok
test_percent_encode_dict_single_pair (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_percent_encode_dict_string_string (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_percent_encode_empty (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_percent_encode_list_values_of_string (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_percent_encode_single_list_of_values (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_percent_encode_special_chars (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_percent_encode_string_string_tuples (tests.unit.test_utils.TestPercentEncodeSequence) ... ok
test_does_not_redirect_if_None_response (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_does_not_redirect_if_previously_redirected (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_does_not_redirect_if_region_cannot_be_found (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_does_not_redirect_unless_permanentredirect_recieved (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_get_region_from_head_bucket_error (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_get_region_from_head_bucket_success (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_get_region_from_response (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_get_region_from_response_error_body (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_only_changes_context_if_bucket_in_cache (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_only_changes_request_url_if_endpoint_present (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_redirect_from_error (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_redirects_301 (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_redirects_400_head_bucket (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_set_request_url (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_set_request_url_keeps_old_scheme (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_sets_signing_context_from_cache (tests.unit.test_utils.TestS3RegionRedirector) ... ok
test_multiple_depth_existing (tests.unit.test_utils.TestSetValueFromJMESPath) ... ok
test_multiple_depth_new (tests.unit.test_utils.TestSetValueFromJMESPath) ... ok
test_single_depth_existing (tests.unit.test_utils.TestSetValueFromJMESPath) ... ok
test_single_depth_new (tests.unit.test_utils.TestSetValueFromJMESPath) ... ok
test_do_not_switch_black_listed_operations (tests.unit.test_utils.TestSwitchHostS3Accelerate) ... ok
test_switch_host (tests.unit.test_utils.TestSwitchHostS3Accelerate) ... ok
test_uses_dualstack (tests.unit.test_utils.TestSwitchHostS3Accelerate) ... ok
test_uses_original_endpoint_scheme (tests.unit.test_utils.TestSwitchHostS3Accelerate) ... ok
test_fix_s3_host_only_applied_once (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_is_unaffected_by_sigv4 (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_switch_to_virtual_host_style (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_throws_invalid_dns_name_error (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_uses_default_endpoint (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_virtual_host_style_for_make_bucket (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_virtual_host_style_not_used_for_get_bucket_location (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_virtual_host_style_not_used_for_list_buckets (tests.unit.test_utils.TestSwitchToVirtualHostStyle) ... ok
test_already_snake_cased (tests.unit.test_utils.TestTransformName) ... ok
test_consecutive_upper_case (tests.unit.test_utils.TestTransformName) ... ok
test_consecutive_upper_case_middle_string (tests.unit.test_utils.TestTransformName) ... ok
test_lower_camel_case (tests.unit.test_utils.TestTransformName) ... ok
test_partial_rename (tests.unit.test_utils.TestTransformName) ... ok
test_s3_prefix (tests.unit.test_utils.TestTransformName) ... ok
test_special_case_ends_with_s (tests.unit.test_utils.TestTransformName) ... ok
test_special_cases (tests.unit.test_utils.TestTransformName) ... ok
test_upper_camel_case (tests.unit.test_utils.TestTransformName) ... ok
test_empty_tree_hash (tests.unit.test_utils.TestTreeHash) ... ok
test_tree_hash_exactly_one_mb (tests.unit.test_utils.TestTreeHash) ... ok
test_tree_hash_less_than_one_mb (tests.unit.test_utils.TestTreeHash) ... ok
test_tree_hash_multiple_of_one_mb (tests.unit.test_utils.TestTreeHash) ... ok
test_tree_hash_offset_of_one_mb_multiple (tests.unit.test_utils.TestTreeHash) ... ok
test_empty_url_normalization (tests.unit.test_utils.TestURINormalization) ... ok
test_remove_dot_segments (tests.unit.test_utils.TestURINormalization) ... ok
test_copy_returns_same_object (tests.unit.test_utils.TestUnsigned) ... ok
test_deepcopy_returns_same_object (tests.unit.test_utils.TestUnsigned) ... ok
test_invalid_exp (tests.unit.test_utils.TestValidateJMESPathForSet) ... ok
test_accepts_jsonvalue_string (tests.unit.test_validate.TestValidateJSONValueTrait) ... ok
test_validate_jsonvalue_string (tests.unit.test_validate.TestValidateJSONValueTrait) ... ok
test_validate_keys_and_values (tests.unit.test_validate.TestValidateMapType) ... ok
test_does_not_validate_greater_than_range (tests.unit.test_validate.TestValidateRanges) ... ok
test_does_not_validate_list_max_length_constraint (tests.unit.test_validate.TestValidateRanges) ... ok
test_does_not_validate_max_when_only_max_value_specified (tests.unit.test_validate.TestValidateRanges) ... ok
test_does_not_validate_string_max_length_contraint (tests.unit.test_validate.TestValidateRanges) ... ok
test_less_than_range (tests.unit.test_validate.TestValidateRanges) ... ok
test_list_min_length_constraint (tests.unit.test_validate.TestValidateRanges) ... ok
test_only_min_value_specified (tests.unit.test_validate.TestValidateRanges) ... ok
test_string_min_length_contraint (tests.unit.test_validate.TestValidateRanges) ... ok
test_within_range (tests.unit.test_validate.TestValidateRanges) ... ok
test_validate_nested_required_param (tests.unit.test_validate.TestValidateRequiredParams) ... ok
test_validate_required_params (tests.unit.test_validate.TestValidateRequiredParams) ... ok
test_validate_unknown_param (tests.unit.test_validate.TestValidateRequiredParams) ... ok
test_validate_type (tests.unit.test_validate.TestValidateTypeBlob) ... ok
test_validates_bytearray (tests.unit.test_validate.TestValidateTypeBlob) ... ok
test_validates_bytes (tests.unit.test_validate.TestValidateTypeBlob) ... ok
test_validates_file_like_object (tests.unit.test_validate.TestValidateTypeBlob) ... ok
test_can_handle_none_datetimes (tests.unit.test_validate.TestValidateTypes) ... ok
test_datetime_accepts_string_timestamp (tests.unit.test_validate.TestValidateTypes) ... ok
test_datetime_type_accepts_datetime_obj (tests.unit.test_validate.TestValidateTypes) ... ok
test_validate_string (tests.unit.test_validate.TestValidateTypes) ... ok
test_decimal_allowed (tests.unit.test_validate.TestValidationFloatType) ... ok
test_decimal_still_validates_range (tests.unit.test_validate.TestValidationFloatType) ... ok
test_range_float (tests.unit.test_validate.TestValidationFloatType) ... ok
test_distribution_deployed (tests.unit.test_waiters.CloudFrontWaitersTest) ... ok
test_invalidation_completed (tests.unit.test_waiters.CloudFrontWaitersTest) ... ok
test_streaming_distribution_deployed (tests.unit.test_waiters.CloudFrontWaitersTest) ... ok
test_can_create_waiter_from_client (tests.unit.test_waiters.TestCreateWaiter) ... ok
test_waiter_class_name (tests.unit.test_waiters.TestCreateWaiter) ... ok
test_waiter_help_documentation (tests.unit.test_waiters.TestCreateWaiter) ... ok
test_normalized_op_method_makes_call (tests.unit.test_waiters.TestOperationMethods) ... ok
test_normalized_op_returns_error_response (tests.unit.test_waiters.TestOperationMethods) ... ok
test_get_single_waiter_config (tests.unit.test_waiters.TestWaiterModel) ... ok
test_get_waiter_does_not_exist (tests.unit.test_waiters.TestWaiterModel) ... ok
test_path_all_matcher_does_not_receive_list (tests.unit.test_waiters.TestWaiterModel) ... ok
test_path_all_missing_field (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_acceptor_matches_jmespath (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_acceptors_built_with_matcher_func (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_config_attributes (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_does_not_match_path_all (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_supports_all_three_states (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_supports_error (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_supports_path_all (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_supports_path_any (tests.unit.test_waiters.TestWaiterModel) ... ok
test_single_waiter_supports_status_code (tests.unit.test_waiters.TestWaiterModel) ... ok
test_unknown_matcher (tests.unit.test_waiters.TestWaiterModel) ... ok
test_unsupported_waiter_version (tests.unit.test_waiters.TestWaiterModel) ... ok
test_waiter_handles_error_responses_with_path_matchers (tests.unit.test_waiters.TestWaiterModel) ... ok
test_waiter_names (tests.unit.test_waiters.TestWaiterModel) ... ok
test_waiter_version (tests.unit.test_waiters.TestWaiterModel) ... ok
test_wont_load_missing_version_in_config (tests.unit.test_waiters.TestWaiterModel) ... ok
test_kwargs_are_passed_through (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_last_response_available_on_waiter_error (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_unspecified_errors_propagate_error_code (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_unspecified_errors_stops_waiter (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_handles_retry_state (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_honors_delay_time_between_retries (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_invocation_config_honors_delay (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_invocation_config_honors_max_attempts (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_never_matches (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_transitions_to_failure_state (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_transitions_to_retry_but_max_attempts_exceeded (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_waiter_waits_until_acceptor_matches (tests.unit.test_waiters.TestWaitersObjects) ... ok
test_all_aliases_are_documented_correctly (tests.functional.docs.test_alias.TestAliasesDocumented) ... ok
test_documents_encoding_of_user_data (tests.functional.docs.test_autoscaling.TestAutoscalingDocs) ... ok
test_copy_snapshot_destination_region_is_autopopulated (tests.functional.docs.test_ec2.TestEc2Docs) ... ok
test_copy_snapshot_presigned_url_is_autopopulated (tests.functional.docs.test_ec2.TestEc2Docs) ... ok
test_documents_encoding_of_user_data (tests.functional.docs.test_ec2.TestEc2Docs) ... ok
test_idempotency_documented (tests.functional.docs.test_ec2.TestEc2Docs) ... ok
test_account_id (tests.functional.docs.test_glacier.TestGlacierDocs) ... ok
test_checksum (tests.functional.docs.test_glacier.TestGlacierDocs) ... ok
test_jsonheader_docs (tests.functional.docs.test_lex.TestLexDocs) ... ok
test_auto_populates_copy_source_sse_customer_key_md5 (tests.functional.docs.test_s3.TestS3Docs) ... ok
test_auto_populates_sse_customer_key_md5 (tests.functional.docs.test_s3.TestS3Docs) ... ok
test_copy_source_documented_as_union_type (tests.functional.docs.test_s3.TestS3Docs) ... ok
test_copy_source_param_docs_also_modified (tests.functional.docs.test_s3.TestS3Docs) ... ok
test_hides_content_md5_when_impossible_to_provide (tests.functional.docs.test_s3.TestS3Docs) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteScalingPolicy', OrderedDict([('input', OrderedDict([('PolicyName', 'web-app-cpu-lt-25'), ('ResourceId', 'service/default/web-app'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes a scaling policy for the Amazon ECS service called web-app, which is running in the default cluster.'), ('id', 'to-delete-a-scaling-policy-1470863892689'), ('title', 'To delete a scaling policy')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeregisterScalableTarget', OrderedDict([('input', OrderedDict([('ResourceId', 'service/default/web-app'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deregisters a scalable target for an Amazon ECS service called web-app that is running in the default cluster.'), ('id', 'to-deregister-a-scalable-target-1470864164895'), ('title', 'To deregister a scalable target')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScalableTargets', OrderedDict([('input', OrderedDict([('ServiceNamespace', 'ecs')])), ('output', OrderedDict([('ScalableTargets', [OrderedDict([('CreationTime', '2016-05-06T11:21:46.199Z'), ('MaxCapacity', 10), ('MinCapacity', 1), ('ResourceId', 'service/default/web-app'), ('RoleARN', 'arn:aws:iam::012345678910:role/ApplicationAutoscalingECSRole'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the scalable targets for the ecs service namespace.'), ('id', 'to-describe-scalable-targets-1470864286961'), ('title', 'To describe scalable targets')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScalingActivities', OrderedDict([('input', OrderedDict([('ResourceId', 'service/default/web-app'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs')])), ('output', OrderedDict([('ScalingActivities', [OrderedDict([('ActivityId', 'e6c5f7d1-dbbb-4a3f-89b2-51f33e766399'), ('Cause', 'monitor alarm web-app-cpu-lt-25 in state ALARM triggered policy web-app-cpu-lt-25'), ('Description', 'Setting desired count to 1.'), ('EndTime', '2016-05-06T16:04:32.111Z'), ('ResourceId', 'service/default/web-app'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs'), ('StartTime', '2016-05-06T16:03:58.171Z'), ('StatusCode', 'Successful'), ('StatusMessage', 'Successfully set desired count to 1. Change successfully fulfilled by ecs.')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the scaling activities for an Amazon ECS service called web-app that is running in the default cluster.'), ('id', 'to-describe-scaling-activities-for-a-scalable-target-1470864398629'), ('title', 'To describe scaling activities for a scalable target')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScalingPolicies', OrderedDict([('input', OrderedDict([('ServiceNamespace', 'ecs')])), ('output', OrderedDict([('NextToken', ''), ('ScalingPolicies', [OrderedDict([('Alarms', [OrderedDict([('AlarmARN', 'arn:aws:cloudwatch:us-west-2:012345678910:alarm:web-app-cpu-gt-75'), ('AlarmName', 'web-app-cpu-gt-75')])]), ('CreationTime', '2016-05-06T12:11:39.230Z'), ('PolicyARN', 'arn:aws:autoscaling:us-west-2:012345678910:scalingPolicy:6d8972f3-efc8-437c-92d1-6270f29a66e7:resource/ecs/service/default/web-app:policyName/web-app-cpu-gt-75'), ('PolicyName', 'web-app-cpu-gt-75'), ('PolicyType', 'StepScaling'), ('ResourceId', 'service/default/web-app'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs'), ('StepScalingPolicyConfiguration', OrderedDict([('AdjustmentType', 'PercentChangeInCapacity'), ('Cooldown', 60), ('StepAdjustments', [OrderedDict([('MetricIntervalLowerBound', 0), ('ScalingAdjustment', 200)])])]))])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the scaling policies for the ecs service namespace.'), ('id', 'to-describe-scaling-policies-1470864609734'), ('title', 'To describe scaling policies')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutScalingPolicy', OrderedDict([('input', OrderedDict([('PolicyName', 'web-app-cpu-gt-75'), ('PolicyType', 'StepScaling'), ('ResourceId', 'service/default/web-app'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs'), ('StepScalingPolicyConfiguration', OrderedDict([('AdjustmentType', 'PercentChangeInCapacity'), ('Cooldown', 60), ('StepAdjustments', [OrderedDict([('MetricIntervalLowerBound', 0), ('ScalingAdjustment', 200)])])]))])), ('output', OrderedDict([('PolicyARN', 'arn:aws:autoscaling:us-west-2:012345678910:scalingPolicy:6d8972f3-efc8-437c-92d1-6270f29a66e7:resource/ecs/service/default/web-app:policyName/web-app-cpu-gt-75')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example applies a scaling policy to an Amazon ECS service called web-app in the default cluster. The policy increases the desired count of the service by 200%, with a cool down period of 60 seconds.'), ('id', 'to-apply-a-scaling-policy-to-an-amazon-ecs-service-1470864779862'), ('title', 'To apply a scaling policy to an Amazon ECS service')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutScalingPolicy', OrderedDict([('input', OrderedDict([('PolicyName', 'fleet-cpu-gt-75'), ('PolicyType', 'StepScaling'), ('ResourceId', 'spot-fleet-request/sfr-45e69d8a-be48-4539-bbf3-3464e99c50c3'), ('ScalableDimension', 'ec2:spot-fleet-request:TargetCapacity'), ('ServiceNamespace', 'ec2'), ('StepScalingPolicyConfiguration', OrderedDict([('AdjustmentType', 'PercentChangeInCapacity'), ('Cooldown', 180), ('StepAdjustments', [OrderedDict([('MetricIntervalLowerBound', 0), ('ScalingAdjustment', 200)])])]))])), ('output', OrderedDict([('PolicyARN', 'arn:aws:autoscaling:us-east-1:012345678910:scalingPolicy:89406401-0cb7-4130-b770-d97cca0e446b:resource/ec2/spot-fleet-request/sfr-45e69d8a-be48-4539-bbf3-3464e99c50c3:policyName/fleet-cpu-gt-75')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example applies a scaling policy to an Amazon EC2 Spot fleet. The policy increases the target capacity of the spot fleet by 200%, with a cool down period of 180 seconds.",\n   '), ('id', 'to-apply-a-scaling-policy-to-an-amazon-ec2-spot-fleet-1472073278469'), ('title', 'To apply a scaling policy to an Amazon EC2 Spot fleet')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterScalableTarget', OrderedDict([('input', OrderedDict([('MaxCapacity', 10), ('MinCapacity', 1), ('ResourceId', 'service/default/web-app'), ('RoleARN', 'arn:aws:iam::012345678910:role/ApplicationAutoscalingECSRole'), ('ScalableDimension', 'ecs:service:DesiredCount'), ('ServiceNamespace', 'ecs')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example registers a scalable target from an Amazon ECS service called web-app that is running on the default cluster, with a minimum desired count of 1 task and a maximum desired count of 10 tasks.'), ('id', 'to-register-a-new-scalable-target-1470864910380'), ('title', 'To register an ECS service as a scalable target')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterScalableTarget', OrderedDict([('input', OrderedDict([('MaxCapacity', 10), ('MinCapacity', 1), ('ResourceId', 'spot-fleet-request/sfr-45e69d8a-be48-4539-bbf3-3464e99c50c3'), ('RoleARN', 'arn:aws:iam::012345678910:role/ApplicationAutoscalingSpotRole'), ('ScalableDimension', 'ec2:spot-fleet-request:TargetCapacity'), ('ServiceNamespace', 'ec2')])), ('output', OrderedDict()), ('comments', OrderedDict()), ('description', 'This example registers a scalable target from an Amazon EC2 Spot fleet with a minimum target capacity of 1 and a maximum of 10.'), ('id', 'to-register-an-ec2-spot-fleet-as-a-scalable-target-1472072899649'), ('title', 'To register an EC2 Spot fleet as a scalable target')]), <botocore.model.ServiceModel object at 0x7f89fefb9860>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachInstances', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('InstanceIds', ['i-93633f9b'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example attaches the specified instance to the specified Auto Scaling group.'), ('id', 'autoscaling-attach-instances-1'), ('title', 'To attach an instance to an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachLoadBalancerTargetGroups', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('TargetGroupARNs', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example attaches the specified target group to the specified Auto Scaling group.'), ('id', 'autoscaling-attach-load-balancer-target-groups-1'), ('title', 'To attach a target group to an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachLoadBalancers', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LoadBalancerNames', ['my-load-balancer'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example attaches the specified load balancer to the specified Auto Scaling group.'), ('id', 'autoscaling-attach-load-balancers-1'), ('title', 'To attach a load balancer to an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CompleteLifecycleAction', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LifecycleActionResult', 'CONTINUE'), ('LifecycleActionToken', 'bcd2f1b8-9a78-44d3-8a7a-4dd07d7cf635'), ('LifecycleHookName', 'my-lifecycle-hook')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example notifies Auto Scaling that the specified lifecycle action is complete so that it can finish launching or terminating the instance.'), ('id', 'autoscaling-complete-lifecycle-action-1'), ('title', 'To complete the lifecycle action')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LaunchConfigurationName', 'my-launch-config'), ('MaxSize', 3), ('MinSize', 1), ('VPCZoneIdentifier', 'subnet-4176792c')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an Auto Scaling group.'), ('id', 'autoscaling-create-auto-scaling-group-1'), ('title', 'To create an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('AvailabilityZones', ['us-west-2c']), ('HealthCheckGracePeriod', 120), ('HealthCheckType', 'ELB'), ('LaunchConfigurationName', 'my-launch-config'), ('LoadBalancerNames', ['my-load-balancer']), ('MaxSize', 3), ('MinSize', 1)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an Auto Scaling group and attaches the specified Classic Load Balancer.'), ('id', 'autoscaling-create-auto-scaling-group-2'), ('title', 'To create an Auto Scaling group with an attached load balancer')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('HealthCheckGracePeriod', 120), ('HealthCheckType', 'ELB'), ('LaunchConfigurationName', 'my-launch-config'), ('MaxSize', 3), ('MinSize', 1), ('TargetGroupARNs', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067']), ('VPCZoneIdentifier', 'subnet-4176792c, subnet-65ea5f08')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an Auto Scaling group and attaches the specified target group.'), ('id', 'autoscaling-create-auto-scaling-group-3'), ('title', 'To create an Auto Scaling group with an attached target group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLaunchConfiguration', OrderedDict([('input', OrderedDict([('IamInstanceProfile', 'my-iam-role'), ('ImageId', 'ami-12345678'), ('InstanceType', 'm3.medium'), ('LaunchConfigurationName', 'my-launch-config'), ('SecurityGroups', ['sg-eb2af88e'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a launch configuration.'), ('id', 'autoscaling-create-launch-configuration-1'), ('title', 'To create a launch configuration')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateOrUpdateTags', OrderedDict([('input', OrderedDict([('Tags', [OrderedDict([('Key', 'Role'), ('PropagateAtLaunch', True), ('ResourceId', 'my-auto-scaling-group'), ('ResourceType', 'auto-scaling-group'), ('Value', 'WebServer')]), OrderedDict([('Key', 'Dept'), ('PropagateAtLaunch', True), ('ResourceId', 'my-auto-scaling-group'), ('ResourceType', 'auto-scaling-group'), ('Value', 'Research')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds two tags to the specified Auto Scaling group.'), ('id', 'autoscaling-create-or-update-tags-1'), ('title', 'To create or update tags for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified Auto Scaling group.'), ('id', 'autoscaling-delete-auto-scaling-group-1'), ('title', 'To delete an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('ForceDelete', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified Auto Scaling group and all its instances.'), ('id', 'autoscaling-delete-auto-scaling-group-2'), ('title', 'To delete an Auto Scaling group and all its instances')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLaunchConfiguration', OrderedDict([('input', OrderedDict([('LaunchConfigurationName', 'my-launch-config')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified launch configuration.'), ('id', 'autoscaling-delete-launch-configuration-1'), ('title', 'To delete a launch configuration')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLifecycleHook', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LifecycleHookName', 'my-lifecycle-hook')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified lifecycle hook.'), ('id', 'autoscaling-delete-lifecycle-hook-1'), ('title', 'To delete a lifecycle hook')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteNotificationConfiguration', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('TopicARN', 'arn:aws:sns:us-west-2:123456789012:my-sns-topic')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified notification from the specified Auto Scaling group.'), ('id', 'autoscaling-delete-notification-configuration-1'), ('title', 'To delete an Auto Scaling notification')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeletePolicy', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('PolicyName', 'ScaleIn')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified Auto Scaling policy.'), ('id', 'autoscaling-delete-policy-1'), ('title', 'To delete an Auto Scaling policy')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteScheduledAction', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('ScheduledActionName', 'my-scheduled-action')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified scheduled action from the specified Auto Scaling group.'), ('id', 'autoscaling-delete-scheduled-action-1'), ('title', 'To delete a scheduled action from an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTags', OrderedDict([('input', OrderedDict([('Tags', [OrderedDict([('Key', 'Dept'), ('ResourceId', 'my-auto-scaling-group'), ('ResourceType', 'auto-scaling-group'), ('Value', 'Research')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified tag from the specified Auto Scaling group.'), ('id', 'autoscaling-delete-tags-1'), ('title', 'To delete a tag from an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAccountLimits', OrderedDict([('output', OrderedDict([('MaxNumberOfAutoScalingGroups', 20), ('MaxNumberOfLaunchConfigurations', 100), ('NumberOfAutoScalingGroups', 3), ('NumberOfLaunchConfigurations', 5)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the Auto Scaling limits for your AWS account.'), ('id', 'autoscaling-describe-account-limits-1'), ('title', 'To describe your Auto Scaling account limits')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAdjustmentTypes', OrderedDict([('output', OrderedDict([('AdjustmentTypes', [OrderedDict([('AdjustmentType', 'ChangeInCapacity')]), OrderedDict([('AdjustmentType', 'ExactCapcity')]), OrderedDict([('AdjustmentType', 'PercentChangeInCapacity')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the available adjustment types.'), ('id', 'autoscaling-describe-adjustment-types-1'), ('title', 'To describe the Auto Scaling adjustment types')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAutoScalingGroups', OrderedDict([('input', OrderedDict([('AutoScalingGroupNames', ['my-auto-scaling-group'])])), ('output', OrderedDict([('AutoScalingGroups', [OrderedDict([('AutoScalingGroupARN', 'arn:aws:autoscaling:us-west-2:123456789012:autoScalingGroup:930d940e-891e-4781-a11a-7b0acd480f03:autoScalingGroupName/my-auto-scaling-group'), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('AvailabilityZones', ['us-west-2c']), ('CreatedTime', '2013-08-19T20:53:25.584Z'), ('DefaultCooldown', 300), ('DesiredCapacity', 1), ('EnabledMetrics', []), ('HealthCheckGracePeriod', 300), ('HealthCheckType', 'EC2'), ('Instances', [OrderedDict([('AvailabilityZone', 'us-west-2c'), ('HealthStatus', 'Healthy'), ('InstanceId', 'i-4ba0837f'), ('LaunchConfigurationName', 'my-launch-config'), ('LifecycleState', 'InService')])]), ('LaunchConfigurationName', 'my-launch-config'), ('LoadBalancerNames', []), ('MaxSize', 1), ('MinSize', 0), ('NewInstancesProtectedFromScaleIn', False), ('SuspendedProcesses', []), ('Tags', []), ('TerminationPolicies', ['Default']), ('VPCZoneIdentifier', 'subnet-12345678')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified Auto Scaling group.'), ('id', 'autoscaling-describe-auto-scaling-groups-1'), ('title', 'To describe an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAutoScalingInstances', OrderedDict([('input', OrderedDict([('InstanceIds', ['i-4ba0837f'])])), ('output', OrderedDict([('AutoScalingInstances', [OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('AvailabilityZone', 'us-west-2c'), ('HealthStatus', 'HEALTHY'), ('InstanceId', 'i-4ba0837f'), ('LaunchConfigurationName', 'my-launch-config'), ('LifecycleState', 'InService'), ('ProtectedFromScaleIn', False)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified Auto Scaling instance.'), ('id', 'autoscaling-describe-auto-scaling-instances-1'), ('title', 'To describe one or more Auto Scaling instances')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAutoScalingNotificationTypes', OrderedDict([('output', OrderedDict([('AutoScalingNotificationTypes', ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR', 'autoscaling:TEST_NOTIFICATION'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the available notification types.'), ('id', 'autoscaling-describe-auto-scaling-notification-types-1'), ('title', 'To describe the Auto Scaling notification types')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLaunchConfigurations', OrderedDict([('input', OrderedDict([('LaunchConfigurationNames', ['my-launch-config'])])), ('output', OrderedDict([('LaunchConfigurations', [OrderedDict([('AssociatePublicIpAddress', True), ('BlockDeviceMappings', []), ('CreatedTime', '2014-05-07T17:39:28.599Z'), ('EbsOptimized', False), ('ImageId', 'ami-043a5034'), ('InstanceMonitoring', OrderedDict([('Enabled', True)])), ('InstanceType', 't1.micro'), ('LaunchConfigurationARN', 'arn:aws:autoscaling:us-west-2:123456789012:launchConfiguration:98d3b196-4cf9-4e88-8ca1-8547c24ced8b:launchConfigurationName/my-launch-config'), ('LaunchConfigurationName', 'my-launch-config'), ('SecurityGroups', ['sg-67ef0308'])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified launch configuration.'), ('id', 'autoscaling-describe-launch-configurations-1'), ('title', 'To describe Auto Scaling launch configurations')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLifecycleHookTypes', OrderedDict([('output', OrderedDict([('LifecycleHookTypes', ['autoscaling:EC2_INSTANCE_LAUNCHING', 'autoscaling:EC2_INSTANCE_TERMINATING'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the available lifecycle hook types.'), ('id', 'autoscaling-describe-lifecycle-hook-types-1'), ('title', 'To describe the available types of lifecycle hooks')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLifecycleHooks', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('output', OrderedDict([('LifecycleHooks', [OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('DefaultResult', 'ABANDON'), ('GlobalTimeout', 172800), ('HeartbeatTimeout', 3600), ('LifecycleHookName', 'my-lifecycle-hook'), ('LifecycleTransition', 'autoscaling:EC2_INSTANCE_LAUNCHING'), ('NotificationTargetARN', 'arn:aws:sns:us-west-2:123456789012:my-sns-topic'), ('RoleARN', 'arn:aws:iam::123456789012:role/my-auto-scaling-role')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the lifecycle hooks for the specified Auto Scaling group.'), ('id', 'autoscaling-describe-lifecycle-hooks-1'), ('title', 'To describe your lifecycle hooks')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancerTargetGroups', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('output', OrderedDict([('LoadBalancerTargetGroups', [OrderedDict([('LoadBalancerTargetGroupARN', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('State', 'Added')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the target groups attached to the specified Auto Scaling group.'), ('id', 'autoscaling-describe-load-balancer-target-groups-1'), ('title', 'To describe the target groups for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancers', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('output', OrderedDict([('LoadBalancers', [OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('State', 'Added')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the load balancers attached to the specified Auto Scaling group.'), ('id', 'autoscaling-describe-load-balancers-1'), ('title', 'To describe the load balancers for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeMetricCollectionTypes', OrderedDict([('output', OrderedDict([('Granularities', [OrderedDict([('Granularity', '1Minute')])]), ('Metrics', [OrderedDict([('Metric', 'GroupMinSize')]), OrderedDict([('Metric', 'GroupMaxSize')]), OrderedDict([('Metric', 'GroupDesiredCapacity')]), OrderedDict([('Metric', 'GroupInServiceInstances')]), OrderedDict([('Metric', 'GroupPendingInstances')]), OrderedDict([('Metric', 'GroupTerminatingInstances')]), OrderedDict([('Metric', 'GroupStandbyInstances')]), OrderedDict([('Metric', 'GroupTotalInstances')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the available metric collection types.'), ('id', 'autoscaling-describe-metric-collection-types-1'), ('title', 'To describe the Auto Scaling metric collection types')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNotificationConfigurations', OrderedDict([('input', OrderedDict([('AutoScalingGroupNames', ['my-auto-scaling-group'])])), ('output', OrderedDict([('NotificationConfigurations', [OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('NotificationType', 'autoscaling:TEST_NOTIFICATION'), ('TopicARN', 'arn:aws:sns:us-west-2:123456789012:my-sns-topic-2')]), OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('NotificationType', 'autoscaling:TEST_NOTIFICATION'), ('TopicARN', 'arn:aws:sns:us-west-2:123456789012:my-sns-topic')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the notification configurations for the specified Auto Scaling group.'), ('id', 'autoscaling-describe-notification-configurations-1'), ('title', 'To describe Auto Scaling notification configurations')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribePolicies', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('output', OrderedDict([('ScalingPolicies', [OrderedDict([('AdjustmentType', 'ChangeInCapacity'), ('Alarms', []), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('PolicyARN', 'arn:aws:autoscaling:us-west-2:123456789012:scalingPolicy:2233f3d7-6290-403b-b632-93c553560106:autoScalingGroupName/my-auto-scaling-group:policyName/ScaleIn'), ('PolicyName', 'ScaleIn'), ('ScalingAdjustment', -1)]), OrderedDict([('AdjustmentType', 'PercentChangeInCapacity'), ('Alarms', []), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('Cooldown', 60), ('MinAdjustmentStep', 2), ('PolicyARN', 'arn:aws:autoscaling:us-west-2:123456789012:scalingPolicy:2b435159-cf77-4e89-8c0e-d63b497baad7:autoScalingGroupName/my-auto-scaling-group:policyName/ScalePercentChange'), ('PolicyName', 'ScalePercentChange'), ('ScalingAdjustment', 25)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the policies for the specified Auto Scaling group.'), ('id', 'autoscaling-describe-policies-1'), ('title', 'To describe Auto Scaling policies')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScalingActivities', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('output', OrderedDict([('Activities', [OrderedDict([('ActivityId', 'f9f2d65b-f1f2-43e7-b46d-d86756459699'), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('Cause', 'At 2013-08-19T20:53:25Z a user request created an AutoScalingGroup changing the desired capacity from 0 to 1.  At 2013-08-19T20:53:29Z an instance was started in response to a difference between desired and actual capacity, increasing the capacity from 0 to 1.'), ('Description', 'Launching a new EC2 instance: i-4ba0837f'), ('Details', 'details'), ('EndTime', '2013-08-19T20:54:02Z'), ('Progress', 100), ('StartTime', '2013-08-19T20:53:29.930Z'), ('StatusCode', 'Successful')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the scaling activities for the specified Auto Scaling group.'), ('id', 'autoscaling-describe-scaling-activities-1'), ('title', 'To describe the scaling activities for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScalingProcessTypes', OrderedDict([('output', OrderedDict([('Processes', [OrderedDict([('ProcessName', 'AZRebalance')]), OrderedDict([('ProcessName', 'AddToLoadBalancer')]), OrderedDict([('ProcessName', 'AlarmNotification')]), OrderedDict([('ProcessName', 'HealthCheck')]), OrderedDict([('ProcessName', 'Launch')]), OrderedDict([('ProcessName', 'ReplaceUnhealthy')]), OrderedDict([('ProcessName', 'ScheduledActions')]), OrderedDict([('ProcessName', 'Terminate')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the Auto Scaling process types.'), ('id', 'autoscaling-describe-scaling-process-types-1'), ('title', 'To describe the Auto Scaling process types')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScheduledActions', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group')])), ('output', OrderedDict([('ScheduledUpdateGroupActions', [OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('DesiredCapacity', 4), ('MaxSize', 6), ('MinSize', 2), ('Recurrence', '30 0 1 12 0'), ('ScheduledActionARN', 'arn:aws:autoscaling:us-west-2:123456789012:scheduledUpdateGroupAction:8e86b655-b2e6-4410-8f29-b4f094d6871c:autoScalingGroupName/my-auto-scaling-group:scheduledActionName/my-scheduled-action'), ('ScheduledActionName', 'my-scheduled-action'), ('StartTime', '2016-12-01T00:30:00Z'), ('Time', '2016-12-01T00:30:00Z')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the scheduled actions for the specified Auto Scaling group.'), ('id', 'autoscaling-describe-scheduled-actions-1'), ('title', 'To describe scheduled actions')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTags', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'auto-scaling-group'), ('Values', ['my-auto-scaling-group'])])])])), ('output', OrderedDict([('Tags', [OrderedDict([('Key', 'Dept'), ('PropagateAtLaunch', True), ('ResourceId', 'my-auto-scaling-group'), ('ResourceType', 'auto-scaling-group'), ('Value', 'Research')]), OrderedDict([('Key', 'Role'), ('PropagateAtLaunch', True), ('ResourceId', 'my-auto-scaling-group'), ('ResourceType', 'auto-scaling-group'), ('Value', 'WebServer')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the tags for the specified Auto Scaling group.'), ('id', 'autoscaling-describe-tags-1'), ('title', 'To describe tags')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTerminationPolicyTypes', OrderedDict([('output', OrderedDict([('TerminationPolicyTypes', ['ClosestToNextInstanceHour', 'Default', 'NewestInstance', 'OldestInstance', 'OldestLaunchConfiguration'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the available termination policy types.'), ('id', 'autoscaling-describe-termination-policy-types-1'), ('title', 'To describe termination policy types')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachInstances', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('InstanceIds', ['i-93633f9b']), ('ShouldDecrementDesiredCapacity', True)])), ('output', OrderedDict([('Activities', [OrderedDict([('ActivityId', '5091cb52-547a-47ce-a236-c9ccbc2cb2c9'), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('Cause', 'At 2015-04-12T15:02:16Z instance i-93633f9b was detached in response to a user request, shrinking the capacity from 2 to 1.'), ('Description', 'Detaching EC2 instance: i-93633f9b'), ('Details', 'details'), ('Progress', 50), ('StartTime', '2015-04-12T15:02:16.179Z'), ('StatusCode', 'InProgress')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the specified instance from the specified Auto Scaling group.'), ('id', 'autoscaling-detach-instances-1'), ('title', 'To detach an instance from an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachLoadBalancerTargetGroups', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('TargetGroupARNs', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the specified target group from the specified Auto Scaling group'), ('id', 'autoscaling-detach-load-balancer-target-groups-1'), ('title', 'To detach a target group from an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachLoadBalancers', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LoadBalancerNames', ['my-load-balancer'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the specified load balancer from the specified Auto Scaling group.'), ('id', 'autoscaling-detach-load-balancers-1'), ('title', 'To detach a load balancer from an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisableMetricsCollection', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('Metrics', ['GroupDesiredCapacity'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disables collecting data for the GroupDesiredCapacity metric for the specified Auto Scaling group.'), ('id', 'autoscaling-disable-metrics-collection-1'), ('title', 'To disable metrics collection for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnableMetricsCollection', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('Granularity', '1Minute')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables data collection for the specified Auto Scaling group.'), ('id', 'autoscaling-enable-metrics-collection-1'), ('title', 'To enable metrics collection for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnterStandby', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('InstanceIds', ['i-93633f9b']), ('ShouldDecrementDesiredCapacity', True)])), ('output', OrderedDict([('Activities', [OrderedDict([('ActivityId', 'ffa056b4-6ed3-41ba-ae7c-249dfae6eba1'), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('Cause', 'At 2015-04-12T15:10:23Z instance i-93633f9b was moved to standby in response to a user request, shrinking the capacity from 2 to 1.'), ('Description', 'Moving EC2 instance to Standby: i-93633f9b'), ('Details', 'details'), ('Progress', 50), ('StartTime', '2015-04-12T15:10:23.640Z'), ('StatusCode', 'InProgress')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example puts the specified instance into standby mode.'), ('id', 'autoscaling-enter-standby-1'), ('title', 'To move instances into standby mode')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ExecutePolicy', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('HonorCooldown', True), ('PolicyName', 'ScaleIn')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example executes the specified Auto Scaling policy for the specified Auto Scaling group.'), ('id', 'autoscaling-execute-policy-1'), ('title', 'To execute an Auto Scaling policy')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ExitStandby', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('InstanceIds', ['i-93633f9b'])])), ('output', OrderedDict([('Activities', [OrderedDict([('ActivityId', '142928e1-a2dc-453a-9b24-b85ad6735928'), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('Cause', 'At 2015-04-12T15:14:29Z instance i-93633f9b was moved out of standby in response to a user request, increasing the capacity from 1 to 2.'), ('Description', 'Moving EC2 instance out of Standby: i-93633f9b'), ('Details', 'details'), ('Progress', 30), ('StartTime', '2015-04-12T15:14:29.886Z'), ('StatusCode', 'PreInService')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example moves the specified instance out of standby mode.'), ('id', 'autoscaling-exit-standby-1'), ('title', 'To move instances out of standby mode')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutLifecycleHook', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LifecycleHookName', 'my-lifecycle-hook'), ('LifecycleTransition', 'autoscaling:EC2_INSTANCE_LAUNCHING'), ('NotificationTargetARN', 'arn:aws:sns:us-west-2:123456789012:my-sns-topic --role-arn'), ('RoleARN', 'arn:aws:iam::123456789012:role/my-auto-scaling-role')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a lifecycle hook.'), ('id', 'autoscaling-put-lifecycle-hook-1'), ('title', 'To create a lifecycle hook')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutNotificationConfiguration', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('NotificationTypes', ['autoscaling:TEST_NOTIFICATION']), ('TopicARN', 'arn:aws:sns:us-west-2:123456789012:my-sns-topic')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified notification to the specified Auto Scaling group.'), ('id', 'autoscaling-put-notification-configuration-1'), ('title', 'To add an Auto Scaling notification')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutScalingPolicy', OrderedDict([('input', OrderedDict([('AdjustmentType', 'ChangeInCapacity'), ('AutoScalingGroupName', 'my-auto-scaling-group'), ('PolicyName', 'ScaleIn'), ('ScalingAdjustment', -1)])), ('output', OrderedDict([('PolicyARN', 'arn:aws:autoscaling:us-west-2:123456789012:scalingPolicy:2233f3d7-6290-403b-b632-93c553560106:autoScalingGroupName/my-auto-scaling-group:policyName/ScaleIn')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified policy to the specified Auto Scaling group.'), ('id', 'autoscaling-put-scaling-policy-1'), ('title', 'To add a scaling policy to an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutScheduledUpdateGroupAction', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('DesiredCapacity', 4), ('EndTime', '2014-05-12T08:00:00Z'), ('MaxSize', 6), ('MinSize', 2), ('ScheduledActionName', 'my-scheduled-action'), ('StartTime', '2014-05-12T08:00:00Z')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified scheduled action to the specified Auto Scaling group.'), ('id', 'autoscaling-put-scheduled-update-group-action-1'), ('title', 'To add a scheduled action to an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RecordLifecycleActionHeartbeat', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LifecycleActionToken', 'bcd2f1b8-9a78-44d3-8a7a-4dd07d7cf635'), ('LifecycleHookName', 'my-lifecycle-hook')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example records a lifecycle action heartbeat to keep the instance in a pending state.'), ('id', 'autoscaling-record-lifecycle-action-heartbeat-1'), ('title', 'To record a lifecycle action heartbeat')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ResumeProcesses', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('ScalingProcesses', ['AlarmNotification'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example resumes the specified suspended scaling process for the specified Auto Scaling group.'), ('id', 'autoscaling-resume-processes-1'), ('title', 'To resume Auto Scaling processes')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetDesiredCapacity', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('DesiredCapacity', 2), ('HonorCooldown', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example sets the desired capacity for the specified Auto Scaling group.'), ('id', 'autoscaling-set-desired-capacity-1'), ('title', 'To set the desired capacity for an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetInstanceHealth', OrderedDict([('input', OrderedDict([('HealthStatus', 'Unhealthy'), ('InstanceId', 'i-93633f9b')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example sets the health status of the specified instance to Unhealthy.'), ('id', 'autoscaling-set-instance-health-1'), ('title', 'To set the health status of an instance')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetInstanceProtection', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('InstanceIds', ['i-93633f9b']), ('ProtectedFromScaleIn', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables instance protection for the specified instance.'), ('id', 'autoscaling-set-instance-protection-1'), ('title', 'To enable instance protection for an instance')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetInstanceProtection', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('InstanceIds', ['i-93633f9b']), ('ProtectedFromScaleIn', False)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disables instance protection for the specified instance.'), ('id', 'autoscaling-set-instance-protection-2'), ('title', 'To disable instance protection for an instance')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SuspendProcesses', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('ScalingProcesses', ['AlarmNotification'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example suspends the specified scaling process for the specified Auto Scaling group.'), ('id', 'autoscaling-suspend-processes-1'), ('title', 'To suspend Auto Scaling processes')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('TerminateInstanceInAutoScalingGroup', OrderedDict([('input', OrderedDict([('InstanceId', 'i-93633f9b'), ('ShouldDecrementDesiredCapacity', False)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example terminates the specified instance from the specified Auto Scaling group without updating the size of the group. Auto Scaling launches a replacement instance after the specified instance terminates.'), ('id', 'autoscaling-terminate-instance-in-auto-scaling-group-1'), ('title', 'To terminate an instance in an Auto Scaling group')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('LaunchConfigurationName', 'new-launch-config')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example updates the launch configuration of the specified Auto Scaling group.'), ('id', 'autoscaling-update-auto-scaling-group-1'), ('title', 'To update the launch configuration')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('MaxSize', 3), ('MinSize', 1)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example updates the minimum size and maximum size of the specified Auto Scaling group.'), ('id', 'autoscaling-update-auto-scaling-group-2'), ('title', 'To update the minimum and maximum size')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAutoScalingGroup', OrderedDict([('input', OrderedDict([('AutoScalingGroupName', 'my-auto-scaling-group'), ('NewInstancesProtectedFromScaleIn', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables instance protection for the specified Auto Scaling group.'), ('id', 'autoscaling-update-auto-scaling-group-3'), ('title', 'To enable instance protection')]), <botocore.model.ServiceModel object at 0x7f8a04494400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelJob', OrderedDict([('input', OrderedDict([('jobId', '1d828f65-7a4d-42e8-996d-3b900ed59dc4'), ('reason', 'Cancelling job.')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example cancels a job with the specified job ID.'), ('id', 'to-cancel-a-job-1481152314733'), ('title', 'To cancel a job')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateComputeEnvironment', OrderedDict([('input', OrderedDict([('type', 'MANAGED'), ('computeEnvironmentName', 'C4OnDemand'), ('computeResources', OrderedDict([('type', 'EC2'), ('desiredvCpus', 48), ('ec2KeyPair', 'id_rsa'), ('instanceRole', 'ecsInstanceRole'), ('instanceTypes', ['c4.large', 'c4.xlarge', 'c4.2xlarge', 'c4.4xlarge', 'c4.8xlarge']), ('maxvCpus', 128), ('minvCpus', 0), ('securityGroupIds', ['sg-cf5093b2']), ('subnets', ['subnet-220c0e0a', 'subnet-1a95556d', 'subnet-978f6dce']), ('tags', OrderedDict([('Name', 'Batch Instance - C4OnDemand')]))])), ('serviceRole', 'arn:aws:iam::012345678910:role/AWSBatchServiceRole'), ('state', 'ENABLED')])), ('output', OrderedDict([('computeEnvironmentArn', 'arn:aws:batch:us-east-1:012345678910:compute-environment/C4OnDemand'), ('computeEnvironmentName', 'C4OnDemand')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a managed compute environment with specific C4 instance types that are launched on demand. The compute environment is called C4OnDemand.'), ('id', 'to-create-a-managed-ec2-compute-environment-1481152600017'), ('title', 'To create a managed EC2 compute environment')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateComputeEnvironment', OrderedDict([('input', OrderedDict([('type', 'MANAGED'), ('computeEnvironmentName', 'M4Spot'), ('computeResources', OrderedDict([('type', 'SPOT'), ('bidPercentage', 20), ('desiredvCpus', 4), ('ec2KeyPair', 'id_rsa'), ('instanceRole', 'ecsInstanceRole'), ('instanceTypes', ['m4']), ('maxvCpus', 128), ('minvCpus', 0), ('securityGroupIds', ['sg-cf5093b2']), ('spotIamFleetRole', 'arn:aws:iam::012345678910:role/aws-ec2-spot-fleet-role'), ('subnets', ['subnet-220c0e0a', 'subnet-1a95556d', 'subnet-978f6dce']), ('tags', OrderedDict([('Name', 'Batch Instance - M4Spot')]))])), ('serviceRole', 'arn:aws:iam::012345678910:role/AWSBatchServiceRole'), ('state', 'ENABLED')])), ('output', OrderedDict([('computeEnvironmentArn', 'arn:aws:batch:us-east-1:012345678910:compute-environment/M4Spot'), ('computeEnvironmentName', 'M4Spot')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a managed compute environment with the M4 instance type that is launched when the Spot bid price is at or below 20% of the On-Demand price for the instance type. The compute environment is called M4Spot.'), ('id', 'to-create-a-managed-ec2-spot-compute-environment-1481152844190'), ('title', 'To create a managed EC2 Spot compute environment')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateJobQueue', OrderedDict([('input', OrderedDict([('computeEnvironmentOrder', [OrderedDict([('computeEnvironment', 'M4Spot'), ('order', 1)])]), ('jobQueueName', 'LowPriority'), ('priority', 10), ('state', 'ENABLED')])), ('output', OrderedDict([('jobQueueArn', 'arn:aws:batch:us-east-1:012345678910:job-queue/LowPriority'), ('jobQueueName', 'LowPriority')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a job queue called LowPriority that uses the M4Spot compute environment.'), ('id', 'to-create-a-job-queue-with-a-single-compute-environment-1481152967946'), ('title', 'To create a job queue with a single compute environment')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateJobQueue', OrderedDict([('input', OrderedDict([('computeEnvironmentOrder', [OrderedDict([('computeEnvironment', 'C4OnDemand'), ('order', 1)]), OrderedDict([('computeEnvironment', 'M4Spot'), ('order', 2)])]), ('jobQueueName', 'HighPriority'), ('priority', 1), ('state', 'ENABLED')])), ('output', OrderedDict([('jobQueueArn', 'arn:aws:batch:us-east-1:012345678910:job-queue/HighPriority'), ('jobQueueName', 'HighPriority')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a job queue called HighPriority that uses the C4OnDemand compute environment with an order of 1 and the M4Spot compute environment with an order of 2.'), ('id', 'to-create-a-job-queue-with-multiple-compute-environments-1481153027051'), ('title', 'To create a job queue with multiple compute environments')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteComputeEnvironment', OrderedDict([('input', OrderedDict([('computeEnvironment', 'P2OnDemand')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the P2OnDemand compute environment.'), ('id', 'to-delete-a-compute-environment-1481153105644'), ('title', 'To delete a compute environment')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteJobQueue', OrderedDict([('input', OrderedDict([('jobQueue', 'GPGPU')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the GPGPU job queue.'), ('id', 'to-delete-a-job-queue-1481153508134'), ('title', 'To delete a job queue')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeregisterJobDefinition', OrderedDict([('input', OrderedDict([('jobDefinition', 'sleep10')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deregisters a job definition called sleep10.'), ('id', 'to-deregister-a-job-definition-1481153579565'), ('title', 'To deregister a job definition')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeComputeEnvironments', OrderedDict([('input', OrderedDict([('computeEnvironments', ['P2OnDemand'])])), ('output', OrderedDict([('computeEnvironments', [OrderedDict([('type', 'MANAGED'), ('computeEnvironmentArn', 'arn:aws:batch:us-east-1:012345678910:compute-environment/P2OnDemand'), ('computeEnvironmentName', 'P2OnDemand'), ('computeResources', OrderedDict([('type', 'EC2'), ('desiredvCpus', 48), ('ec2KeyPair', 'id_rsa'), ('instanceRole', 'ecsInstanceRole'), ('instanceTypes', ['p2']), ('maxvCpus', 128), ('minvCpus', 0), ('securityGroupIds', ['sg-cf5093b2']), ('subnets', ['subnet-220c0e0a', 'subnet-1a95556d', 'subnet-978f6dce']), ('tags', OrderedDict([('Name', 'Batch Instance - P2OnDemand')]))])), ('ecsClusterArn', 'arn:aws:ecs:us-east-1:012345678910:cluster/P2OnDemand_Batch_2c06f29d-d1fe-3a49-879d-42394c86effc'), ('serviceRole', 'arn:aws:iam::012345678910:role/AWSBatchServiceRole'), ('state', 'ENABLED'), ('status', 'VALID'), ('statusReason', 'ComputeEnvironment Healthy')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the P2OnDemand compute environment.'), ('id', 'to-describe-a-compute-environment-1481153713334'), ('title', 'To describe a compute environment')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeJobDefinitions', OrderedDict([('input', OrderedDict([('status', 'ACTIVE')])), ('output', OrderedDict([('jobDefinitions', [OrderedDict([('type', 'container'), ('containerProperties', OrderedDict([('command', ['sleep', '60']), ('environment', []), ('image', 'busybox'), ('memory', 128), ('mountPoints', []), ('ulimits', []), ('vcpus', 1), ('volumes', [])])), ('jobDefinitionArn', 'arn:aws:batch:us-east-1:012345678910:job-definition/sleep60:1'), ('jobDefinitionName', 'sleep60'), ('revision', 1), ('status', 'ACTIVE')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes all of your active job definitions.'), ('id', 'to-describe-active-job-definitions-1481153895831'), ('title', 'To describe active job definitions')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeJobQueues', OrderedDict([('input', OrderedDict([('jobQueues', ['HighPriority'])])), ('output', OrderedDict([('jobQueues', [OrderedDict([('computeEnvironmentOrder', [OrderedDict([('computeEnvironment', 'arn:aws:batch:us-east-1:012345678910:compute-environment/C4OnDemand'), ('order', 1)])]), ('jobQueueArn', 'arn:aws:batch:us-east-1:012345678910:job-queue/HighPriority'), ('jobQueueName', 'HighPriority'), ('priority', 1), ('state', 'ENABLED'), ('status', 'VALID'), ('statusReason', 'JobQueue Healthy')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the HighPriority job queue.'), ('id', 'to-describe-a-job-queue-1481153995804'), ('title', 'To describe a job queue')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeJobs', OrderedDict([('input', OrderedDict([('jobs', ['24fa2d7a-64c4-49d2-8b47-f8da4fbde8e9'])])), ('output', OrderedDict([('jobs', [OrderedDict([('container', OrderedDict([('command', ['sleep', '60']), ('containerInstanceArn', 'arn:aws:ecs:us-east-1:012345678910:container-instance/5406d7cd-58bd-4b8f-9936-48d7c6b1526c'), ('environment', []), ('exitCode', 0), ('image', 'busybox'), ('memory', 128), ('mountPoints', []), ('ulimits', []), ('vcpus', 1), ('volumes', [])])), ('createdAt', 1480460782010), ('dependsOn', []), ('jobDefinition', 'sleep60'), ('jobId', '24fa2d7a-64c4-49d2-8b47-f8da4fbde8e9'), ('jobName', 'example'), ('jobQueue', 'arn:aws:batch:us-east-1:012345678910:job-queue/HighPriority'), ('parameters', OrderedDict()), ('startedAt', 1480460816500), ('status', 'SUCCEEDED'), ('stoppedAt', 1480460880699)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes a job with the specified job ID.'), ('id', 'to-describe-a-specific-job-1481154090490'), ('title', 'To describe a specific job')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListJobs', OrderedDict([('input', OrderedDict([('jobQueue', 'HighPriority')])), ('output', OrderedDict([('jobSummaryList', [OrderedDict([('jobId', 'e66ff5fd-a1ff-4640-b1a2-0b0a142f49bb'), ('jobName', 'example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists the running jobs in the HighPriority job queue.'), ('id', 'to-list-running-jobs-1481154202164'), ('title', 'To list running jobs')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListJobs', OrderedDict([('input', OrderedDict([('jobQueue', 'HighPriority'), ('jobStatus', 'SUBMITTED')])), ('output', OrderedDict([('jobSummaryList', [OrderedDict([('jobId', '68f0c163-fbd4-44e6-9fd1-25b14a434786'), ('jobName', 'example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists jobs in the HighPriority job queue that are in the SUBMITTED job status.'), ('id', 'to-list-submitted-jobs-1481154251623'), ('title', 'To list submitted jobs')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterJobDefinition', OrderedDict([('input', OrderedDict([('type', 'container'), ('containerProperties', OrderedDict([('command', ['sleep', '10']), ('image', 'busybox'), ('memory', 128), ('vcpus', 1)])), ('jobDefinitionName', 'sleep10')])), ('output', OrderedDict([('jobDefinitionArn', 'arn:aws:batch:us-east-1:012345678910:job-definition/sleep10:1'), ('jobDefinitionName', 'sleep10'), ('revision', 1)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example registers a job definition for a simple container job.'), ('id', 'to-register-a-job-definition-1481154325325'), ('title', 'To register a job definition')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SubmitJob', OrderedDict([('input', OrderedDict([('jobDefinition', 'sleep60'), ('jobName', 'example'), ('jobQueue', 'HighPriority')])), ('output', OrderedDict([('jobId', '876da822-4198-45f2-a252-6cea32512ea8'), ('jobName', 'example')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example submits a simple container job called example to the HighPriority job queue.'), ('id', 'to-submit-a-job-to-a-queue-1481154481673'), ('title', 'To submit a job to a queue')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('TerminateJob', OrderedDict([('input', OrderedDict([('jobId', '61e743ed-35e4-48da-b2de-5c8333821c84'), ('reason', 'Terminating job.')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example terminates a job with the specified job ID.'), ('id', 'to-terminate-a-job-1481154558276'), ('title', 'To terminate a job')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateComputeEnvironment', OrderedDict([('input', OrderedDict([('computeEnvironment', 'P2OnDemand'), ('state', 'DISABLED')])), ('output', OrderedDict([('computeEnvironmentArn', 'arn:aws:batch:us-east-1:012345678910:compute-environment/P2OnDemand'), ('computeEnvironmentName', 'P2OnDemand')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disables the P2OnDemand compute environment so it can be deleted.'), ('id', 'to-update-a-compute-environment-1481154702731'), ('title', 'To update a compute environment')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateJobQueue', OrderedDict([('input', OrderedDict([('jobQueue', 'GPGPU'), ('state', 'DISABLED')])), ('output', OrderedDict([('jobQueueArn', 'arn:aws:batch:us-east-1:012345678910:job-queue/GPGPU'), ('jobQueueName', 'GPGPU')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disables a job queue so that it can be deleted.'), ('id', 'to-update-a-job-queue-1481154806981'), ('title', 'To update a job queue')]), <botocore.model.ServiceModel object at 0x7f89fa9658d0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelUpdateStack', OrderedDict([('input', OrderedDict([('StackName', 'MyStack')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example cancels an update of the specified stack.'), ('id', 'to-cancel-a-stack-update-that-is-in-progress-1472747085196'), ('title', 'To cancel a stack update in progress')]), <botocore.model.ServiceModel object at 0x7f89fca27c50>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateStack', OrderedDict([('input', OrderedDict([('NotificationARNs', []), ('Parameters', [OrderedDict([('ParameterKey', 'KeyPairName'), ('ParameterValue', 'ExampleKeyPair')]), OrderedDict([('ParameterKey', 'SubnetIDs'), ('ParameterValue', 'ExampleSubnetID1, ExampleSubnetID2')])]), ('ResourceTypes', []), ('StackName', 'MyStack'), ('Tags', []), ('TemplateURL', 'https://s3.amazonaws.com/example/updated.template')])), ('output', OrderedDict([('StackId', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example updates the template and input parameters for the specified stack.'), ('id', 'to-update-an-aws-cloudformation-stack-1472841931621'), ('title', 'To update an AWS CloudFormation stack')]), <botocore.model.ServiceModel object at 0x7f89fca27c50>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateStack', OrderedDict([('input', OrderedDict([('NotificationARNs', []), ('Parameters', [OrderedDict([('ParameterKey', 'KeyPairName'), ('UsePreviousValue', True)]), OrderedDict([('ParameterKey', 'SubnetIDs'), ('ParameterValue', 'SampleSubnetID1, UpdatedSampleSubnetID2')])]), ('ResourceTypes', []), ('StackName', 'MyStack'), ('Tags', []), ('TemplateURL', 'https://s3.amazonaws.com/example/updated.template')])), ('output', OrderedDict([('StackId', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This example updates only the the specified parameter value for the specified stack. If you don't specify a parameter value, AWS CloudFormation uses the default value from the template."), ('id', 'to-update-an-aws-cloudformation-stack-1472841931621'), ('title', 'To update an AWS CloudFormation stack')]), <botocore.model.ServiceModel object at 0x7f89fca27c50>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateStack', OrderedDict([('input', OrderedDict([('Capabilities', []), ('NotificationARNs', ['arn:aws:sns:use-east-1:123456789012:mytopic1', 'arn:aws:sns:us-east-1:123456789012:mytopic2']), ('Parameters', []), ('ResourceTypes', []), ('StackName', 'MyStack'), ('Tags', []), ('TemplateURL', 'https://s3.amazonaws.com/example/updated.template'), ('UsePreviousTemplate', True)])), ('output', OrderedDict([('StackId', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds two stack notification topics to the specified stack.'), ('id', 'to-update-an-aws-cloudformation-stack-1472841931621'), ('title', 'To update an AWS CloudFormation stack')]), <botocore.model.ServiceModel object at 0x7f89fca27c50>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ValidateTemplate', OrderedDict([('input', OrderedDict([('TemplateBody', 'MyTemplate.json')])), ('output', OrderedDict([('Capabilities', []), ('CapabilitiesReason', ''), ('Description', 'AWS CloudFormation Example Template S3_Bucket: An example template that shows how to create a publicly-accessible S3 bucket. IMPORTANT: This template creates an S3 bucket. You will be billed for the AWS resources used if you create a stack from this template.'), ('Parameters', [])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example validates the specified template.'), ('id', 'to-validate-an-aws-cloudformation-template-1472839072307'), ('title', 'To validate an AWS CloudFormation template')]), <botocore.model.ServiceModel object at 0x7f89fca27c50>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDevicePool', OrderedDict([('input', OrderedDict([('name', 'MyDevicePool'), ('description', 'My Android devices'), ('projectArn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('rules', [])])), ('output', OrderedDict([('devicePool', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('name', 'A device pool contains related devices, such as devices that run only on Android or that run only on iOS.'), ('projectArn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example creates a new device pool named MyDevicePool inside an existing project.'), ('id', 'createdevicepool-example-1470862210860'), ('title', 'To create a new device pool')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateProject', OrderedDict([('input', OrderedDict([('name', 'MyProject')])), ('output', OrderedDict([('project', OrderedDict([('name', 'MyProject'), ('arn', 'arn:aws:devicefarm:us-west-2:183774035805:project:5e01a8c7-c861-4c0a-b1d5-12345EXAMPLE'), ('created', '1472660939.152')]))])), ('comments', OrderedDict([('input', OrderedDict([('name', 'A project in Device Farm is a workspace that contains test runs. A run is a test of a single app against one or more devices.')])), ('output', OrderedDict())])), ('description', 'The following example creates a new project named MyProject.'), ('id', 'createproject-example-1470862210860'), ('title', 'To create a new project')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRemoteAccessSession', OrderedDict([('input', OrderedDict([('name', 'MySession'), ('configuration', OrderedDict([('billingMethod', 'METERED')])), ('deviceArn', 'arn:aws:devicefarm:us-west-2::device:123EXAMPLE'), ('projectArn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('remoteAccessSession', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('deviceArn', 'You can get the device ARN by using the list-devices CLI command.'), ('projectArn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example creates a remote access session named MySession.'), ('id', 'to-create-a-remote-access-session-1470970668274'), ('title', 'To create a remote access session')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateUpload', OrderedDict([('input', OrderedDict([('name', 'MyAppiumPythonUpload'), ('type', 'APPIUM_PYTHON_TEST_PACKAGE'), ('projectArn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('upload', OrderedDict([('name', 'MyAppiumPythonUpload'), ('type', 'APPIUM_PYTHON_TEST_PACKAGE'), ('arn', 'arn:aws:devicefarm:us-west-2:183774035805:upload:5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/b5340a65-3da7-4da6-a26e-12345EXAMPLE'), ('created', '1472661404.186'), ('status', 'INITIALIZED'), ('url', 'https://prod-us-west-2-uploads.s3-us-west-2.amazonaws.com/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A183774035805%3Aproject%3A5e01a8c7-c861-4c0a-b1d5-12345EXAMPLE/uploads/arn%3Aaws%3Adevicefarm%3Aus-west-2%3A183774035805%3Aupload%3A5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/b5340a65-3da7-4da6-a26e-12345EXAMPLE/MyAppiumPythonUpload?AWSAccessKeyId=1234567891011EXAMPLE&Expires=1472747804&Signature=1234567891011EXAMPLE')]))])), ('comments', OrderedDict([('input', OrderedDict([('projectArn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example creates a new Appium Python test package upload inside an existing project.'), ('id', 'createupload-example-1470864711775'), ('title', 'To create a new test package upload')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDevicePool', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2::devicepool:123-456-EXAMPLE-GUID')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the device pool ARN by using the list-device-pools CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example deletes a specific device pool.'), ('id', 'deletedevicepool-example-1470866975494'), ('title', 'To delete a device pool')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteProject', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example deletes a specific project.'), ('id', 'deleteproject-example-1470867374212'), ('title', 'To delete a project')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRemoteAccessSession', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:session:EXAMPLE-GUID-123-456')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the remote access session ARN by using the list-remote-access-sessions CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example deletes a specific remote access session.'), ('id', 'to-delete-a-specific-remote-access-session-1470971431677'), ('title', 'To delete a specific remote access session')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRun', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:EXAMPLE-GUID-123-456')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the run ARN by using the list-runs CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example deletes a specific test run.'), ('id', 'deleterun-example-1470867905129'), ('title', 'To delete a run')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteUpload', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:upload:EXAMPLE-GUID-123-456')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the upload ARN by using the list-uploads CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example deletes a specific upload.'), ('id', 'deleteupload-example-1470868363942'), ('title', 'To delete a specific upload')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetAccountSettings', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('accountSettings', OrderedDict([('awsAccountNumber', '123456789101'), ('unmeteredDevices', OrderedDict([('ANDROID', 1), ('IOS', 2)]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns information about your Device Farm account settings.'), ('id', 'to-get-information-about-account-settings-1472567568189'), ('title', 'To get information about account settings')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetDevice', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2::device:123EXAMPLE')])), ('output', OrderedDict([('device', OrderedDict([('name', 'LG G2 (Sprint)'), ('arn', 'arn:aws:devicefarm:us-west-2::device:A0E6E6E1059E45918208DF75B2B7EF6C'), ('cpu', OrderedDict([('architecture', 'armeabi-v7a'), ('clock', 2265.6), ('frequency', 'MHz')])), ('formFactor', 'PHONE'), ('heapSize', 256000000), ('image', '75B2B7EF6C12345EXAMPLE'), ('manufacturer', 'LG'), ('memory', 16000000000), ('model', 'G2 (Sprint)'), ('os', '4.2.2'), ('platform', 'ANDROID'), ('resolution', OrderedDict([('height', 1920), ('width', 1080)]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns information about a specific device.'), ('id', 'getdevice-example-1470870602173'), ('title', 'To get information about a device')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetDevicePool', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('devicePool', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can obtain the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about a specific device pool, given a project ARN.'), ('id', 'getdevicepool-example-1470870873136'), ('title', 'To get information about a device pool')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetDevicePoolCompatibility', OrderedDict([('input', OrderedDict([('appArn', 'arn:aws:devicefarm:us-west-2::app:123-456-EXAMPLE-GUID'), ('devicePoolArn', 'arn:aws:devicefarm:us-west-2::devicepool:123-456-EXAMPLE-GUID'), ('testType', 'APPIUM_PYTHON')])), ('output', OrderedDict([('compatibleDevices', []), ('incompatibleDevices', [])])), ('comments', OrderedDict([('input', OrderedDict([('devicePoolArn', 'You can get the device pool ARN by using the list-device-pools CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about the compatibility of a specific device pool, given its ARN.'), ('id', 'getdevicepoolcompatibility-example-1470925003466'), ('title', 'To get information about the compatibility of a device pool')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetJob', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2::job:123-456-EXAMPLE-GUID')])), ('output', OrderedDict([('job', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the job ARN by using the list-jobs CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about a specific job.'), ('id', 'getjob-example-1470928294268'), ('title', 'To get information about a job')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetOfferingStatus', OrderedDict([('input', OrderedDict([('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE=')])), ('output', OrderedDict([('current', OrderedDict([('D68B3C05-1BA6-4360-BC69-12345EXAMPLE', OrderedDict([('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 1)]))])), ('nextPeriod', OrderedDict([('D68B3C05-1BA6-4360-BC69-12345EXAMPLE', OrderedDict([('effectiveOn', '1472688000'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 1)]))]))])), ('comments', OrderedDict([('input', OrderedDict([('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about Device Farm offerings available to your account.'), ('id', 'to-get-status-information-about-device-offerings-1472568124402'), ('title', 'To get status information about device offerings')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetProject', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:5e01a8c7-c861-4c0a-b1d5-12345EXAMPLE')])), ('output', OrderedDict([('project', OrderedDict([('name', 'My Project'), ('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:5e01a8c7-c861-4c0a-b1d5-12345EXAMPLE'), ('created', '1472660939.152')]))])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example gets information about a specific project.'), ('id', 'to-get-a-project-1470975038449'), ('title', 'To get information about a project')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRemoteAccessSession', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:session:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('remoteAccessSession', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the remote access session ARN by using the list-remote-access-sessions CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example gets a specific remote access session.'), ('id', 'to-get-a-remote-access-session-1471014119414'), ('title', 'To get a remote access session')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRun', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/0fcac17b-6122-44d7-ae5a-12345EXAMPLE')])), ('output', OrderedDict([('run', OrderedDict([('name', 'My Test Run'), ('type', 'BUILTIN_EXPLORER'), ('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/0fcac17b-6122-44d7-ae5a-12345EXAMPLE'), ('billingMethod', 'METERED'), ('completedJobs', 0), ('counters', OrderedDict([('errored', 0), ('failed', 0), ('passed', 0), ('skipped', 0), ('stopped', 0), ('total', 0), ('warned', 0)])), ('created', '1472667509.852'), ('deviceMinutes', OrderedDict([('metered', 0.0), ('total', 0.0), ('unmetered', 0.0)])), ('platform', 'ANDROID'), ('result', 'PENDING'), ('status', 'RUNNING'), ('totalJobs', 3)]))])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the run ARN by using the list-runs CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example gets information about a specific test run.'), ('id', 'to-get-a-test-run-1471015895657'), ('title', 'To get information about a test run')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSuite', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:suite:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('suite', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the suite ARN by using the list-suites CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example gets information about a specific test suite.'), ('id', 'to-get-information-about-a-test-suite-1471016525008'), ('title', 'To get information about a test suite')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetTest', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:test:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('test', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the test ARN by using the list-tests CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example gets information about a specific test.'), ('id', 'to-get-information-about-a-specific-test-1471025744238'), ('title', 'To get information about a specific test')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetUpload', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:upload:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('upload', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the test ARN by using the list-uploads CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example gets information about a specific upload.'), ('id', 'to-get-information-about-a-specific-upload-1471025996221'), ('title', 'To get information about a specific upload')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('InstallToRemoteAccessSession', OrderedDict([('input', OrderedDict([('appArn', 'arn:aws:devicefarm:us-west-2:123456789101:app:EXAMPLE-GUID-123-456'), ('remoteAccessSessionArn', 'arn:aws:devicefarm:us-west-2:123456789101:session:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('appUpload', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('remoteAccessSessionArn', 'You can get the remote access session ARN by using the list-remote-access-sessions CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example installs a specific app to a device in a specific remote access session.'), ('id', 'to-install-to-a-remote-access-session-1471634453818'), ('title', 'To install to a remote access session')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListArtifacts', OrderedDict([('input', OrderedDict([('type', 'SCREENSHOT'), ('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:EXAMPLE-GUID-123-456')])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'Can also be used to list artifacts for a Job, Suite, or Test ARN.')])), ('output', OrderedDict())])), ('description', 'The following example lists screenshot artifacts for a specific run.'), ('id', 'to-list-artifacts-for-a-resource-1471635409527'), ('title', 'To list artifacts for a resource')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListDevicePools', OrderedDict([('input', OrderedDict([('type', 'PRIVATE'), ('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('devicePools', [OrderedDict([('name', 'Top Devices'), ('arn', 'arn:aws:devicefarm:us-west-2::devicepool:082d10e5-d7d7-48a5-ba5c-12345EXAMPLE'), ('description', 'Top devices'), ('rules', [OrderedDict([('value', '["arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE"]'), ('attribute', 'ARN'), ('operator', 'IN')])])]), OrderedDict([('name', 'My Android Device Pool'), ('arn', 'arn:aws:devicefarm:us-west-2:123456789101:devicepool:5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/bf96e75a-28f6-4e61-b6a7-12345EXAMPLE'), ('description', 'Samsung Galaxy Android devices'), ('rules', [OrderedDict([('value', '["arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE","arn:aws:devicefarm:us-west-2::device:123456789EXAMPLE"]'), ('attribute', 'ARN'), ('operator', 'IN')])])])])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about the private device pools in a specific project.'), ('id', 'to-get-information-about-device-pools-1471635745170'), ('title', 'To get information about device pools')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListDevices', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the project ARN by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about the available devices in a specific project.'), ('id', 'to-get-information-about-devices-1471641699344'), ('title', 'To get information about devices')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListJobs', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456')])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the project ARN by using the list-jobs CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about jobs in a specific project.'), ('id', 'to-get-information-about-jobs-1471642228071'), ('title', 'To get information about jobs')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListOfferingTransactions', OrderedDict([('input', OrderedDict([('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE=')])), ('output', OrderedDict([('offeringTransactions', [OrderedDict([('cost', OrderedDict([('amount', 0), ('currencyCode', 'USD')])), ('createdOn', '1470021420'), ('offeringStatus', OrderedDict([('type', 'RENEW'), ('effectiveOn', '1472688000'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 0)])), ('transactionId', '03728003-d1ea-4851-abd6-12345EXAMPLE')]), OrderedDict([('cost', OrderedDict([('amount', 250), ('currencyCode', 'USD')])), ('createdOn', '1470021420'), ('offeringStatus', OrderedDict([('type', 'PURCHASE'), ('effectiveOn', '1470021420'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 1)])), ('transactionId', '56820b6e-06bd-473a-8ff8-12345EXAMPLE')]), OrderedDict([('cost', OrderedDict([('amount', 175), ('currencyCode', 'USD')])), ('createdOn', '1465538520'), ('offeringStatus', OrderedDict([('type', 'PURCHASE'), ('effectiveOn', '1465538520'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Unmetered Device Slot'), ('id', '8980F81C-00D7-469D-8EC6-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 1)])), ('transactionId', '953ae2c6-d760-4a04-9597-12345EXAMPLE')]), OrderedDict([('cost', OrderedDict([('amount', 8.07), ('currencyCode', 'USD')])), ('createdOn', '1459344300'), ('offeringStatus', OrderedDict([('type', 'PURCHASE'), ('effectiveOn', '1459344300'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'iOS Unmetered Device Slot'), ('id', 'A53D4D73-A6F6-4B82-A0B0-12345EXAMPLE'), ('platform', 'IOS')])), ('quantity', 1)])), ('transactionId', '2baf9021-ae3e-47f5-ab52-12345EXAMPLE')])])])), ('comments', OrderedDict([('input', OrderedDict([('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about Device Farm offering transactions.'), ('id', 'to-get-information-about-device-offering-transactions-1472561712315'), ('title', 'To get information about device offering transactions')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListOfferings', OrderedDict([('input', OrderedDict([('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE=')])), ('output', OrderedDict([('offerings', [OrderedDict([('type', 'RECURRING'), ('description', 'iOS Unmetered Device Slot'), ('id', 'A53D4D73-A6F6-4B82-A0B0-12345EXAMPLE'), ('platform', 'IOS'), ('recurringCharges', [OrderedDict([('cost', OrderedDict([('amount', 250), ('currencyCode', 'USD')])), ('frequency', 'MONTHLY')])])]), OrderedDict([('type', 'RECURRING'), ('description', 'Android Unmetered Device Slot'), ('id', '8980F81C-00D7-469D-8EC6-12345EXAMPLE'), ('platform', 'ANDROID'), ('recurringCharges', [OrderedDict([('cost', OrderedDict([('amount', 250), ('currencyCode', 'USD')])), ('frequency', 'MONTHLY')])])]), OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID'), ('recurringCharges', [OrderedDict([('cost', OrderedDict([('amount', 250), ('currencyCode', 'USD')])), ('frequency', 'MONTHLY')])])]), OrderedDict([('type', 'RECURRING'), ('description', 'iOS Remote Access Unmetered Device Slot'), ('id', '552B4DAD-A6C9-45C4-94FB-12345EXAMPLE'), ('platform', 'IOS'), ('recurringCharges', [OrderedDict([('cost', OrderedDict([('amount', 250), ('currencyCode', 'USD')])), ('frequency', 'MONTHLY')])])])])])), ('comments', OrderedDict([('input', OrderedDict([('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about available device offerings.'), ('id', 'to-get-information-about-device-offerings-1472562810999'), ('title', 'To get information about device offerings')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListProjects', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:7ad300ed-8183-41a7-bf94-12345EXAMPLE'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('projects', [OrderedDict([('name', 'My Test Project'), ('arn', 'arn:aws:devicefarm:us-west-2:183774035805:project:7ad300ed-8183-41a7-bf94-12345EXAMPLE'), ('created', '1453163262.105')]), OrderedDict([('name', 'Hello World'), ('arn', 'arn:aws:devicefarm:us-west-2:183774035805:project:d6b087d9-56db-4e44-b9ec-12345EXAMPLE'), ('created', '1470350112.439')])])])), ('comments', OrderedDict([('input', OrderedDict([('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about the specified project in Device Farm.'), ('id', 'to-get-information-about-a-device-farm-project-1472564014388'), ('title', 'To get information about a Device Farm project')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListRemoteAccessSessions', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:session:EXAMPLE-GUID-123-456'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE=')])), ('output', OrderedDict([('remoteAccessSessions', [])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the session by using the list-sessions CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about a specific Device Farm remote access session.'), ('id', 'to-get-information-about-a-remote-access-session-1472581144803'), ('title', 'To get information about a remote access session')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListRuns', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/0fcac17b-6122-44d7-ae5a-12345EXAMPLE'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('runs', [OrderedDict([('name', 'My Test Run'), ('type', 'BUILTIN_EXPLORER'), ('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:5e01a8c7-c861-4c0a-b1d5-5ec6e6c6dd23/0fcac17b-6122-44d7-ae5a-12345EXAMPLE'), ('billingMethod', 'METERED'), ('completedJobs', 0), ('counters', OrderedDict([('errored', 0), ('failed', 0), ('passed', 0), ('skipped', 0), ('stopped', 0), ('total', 0), ('warned', 0)])), ('created', '1472667509.852'), ('deviceMinutes', OrderedDict([('metered', 0.0), ('total', 0.0), ('unmetered', 0.0)])), ('platform', 'ANDROID'), ('result', 'PENDING'), ('status', 'RUNNING'), ('totalJobs', 3)])])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the run by using the list-runs CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about a specific test run.'), ('id', 'to-get-information-about-test-runs-1472582711069'), ('title', 'To get information about a test run')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSamples', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('samples', [])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about samples, given a specific Device Farm project.'), ('id', 'to-get-information-about-samples-1472582847534'), ('title', 'To get information about samples')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSuites', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('suites', [])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about suites, given a specific Device Farm project.'), ('id', 'to-get-information-about-suites-1472583038218'), ('title', 'To get information about suites')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTests', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('tests', [])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about tests, given a specific Device Farm project.'), ('id', 'to-get-information-about-tests-1472617372212'), ('title', 'To get information about tests')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListUniqueProblems', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('uniqueProblems', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about unique problems, given a specific Device Farm project.'), ('id', 'to-get-information-about-unique-problems-1472617781008'), ('title', 'To get information about unique problems')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListUploads', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('nextToken', 'RW5DdDJkMWYwZjM2MzM2VHVpOHJIUXlDUXlhc2QzRGViYnc9SEXAMPLE')])), ('output', OrderedDict([('uploads', [])])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.'), ('nextToken', 'A dynamically generated value, used for paginating results.')])), ('output', OrderedDict())])), ('description', 'The following example returns information about uploads, given a specific Device Farm project.'), ('id', 'to-get-information-about-uploads-1472617943090'), ('title', 'To get information about uploads')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PurchaseOffering', OrderedDict([('input', OrderedDict([('offeringId', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('quantity', 1)])), ('output', OrderedDict([('offeringTransaction', OrderedDict([('cost', OrderedDict([('amount', 8.07), ('currencyCode', 'USD')])), ('createdOn', '1472648340'), ('offeringStatus', OrderedDict([('type', 'PURCHASE'), ('effectiveOn', '1472648340'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 1)])), ('transactionId', 'd30614ed-1b03-404c-9893-12345EXAMPLE')]))])), ('comments', OrderedDict([('input', OrderedDict([('offeringId', 'You can get the offering ID by using the list-offerings CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example purchases a specific device slot offering.'), ('id', 'to-purchase-a-device-slot-offering-1472648146343'), ('title', 'To purchase a device slot offering')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RenewOffering', OrderedDict([('input', OrderedDict([('offeringId', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('quantity', 1)])), ('output', OrderedDict([('offeringTransaction', OrderedDict([('cost', OrderedDict([('amount', 250), ('currencyCode', 'USD')])), ('createdOn', '1472648880'), ('offeringStatus', OrderedDict([('type', 'RENEW'), ('effectiveOn', '1472688000'), ('offering', OrderedDict([('type', 'RECURRING'), ('description', 'Android Remote Access Unmetered Device Slot'), ('id', 'D68B3C05-1BA6-4360-BC69-12345EXAMPLE'), ('platform', 'ANDROID')])), ('quantity', 1)])), ('transactionId', 'e90f1405-8c35-4561-be43-12345EXAMPLE')]))])), ('comments', OrderedDict([('input', OrderedDict([('offeringId', 'You can get the offering ID by using the list-offerings CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example renews a specific device slot offering.'), ('id', 'to-renew-a-device-slot-offering-1472648899785'), ('title', 'To renew a device slot offering')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ScheduleRun', OrderedDict([('input', OrderedDict([('name', 'MyRun'), ('devicePoolArn', 'arn:aws:devicefarm:us-west-2:123456789101:pool:EXAMPLE-GUID-123-456'), ('projectArn', 'arn:aws:devicefarm:us-west-2:123456789101:project:EXAMPLE-GUID-123-456'), ('test', OrderedDict([('type', 'APPIUM_JAVA_JUNIT'), ('testPackageArn', 'arn:aws:devicefarm:us-west-2:123456789101:test:EXAMPLE-GUID-123-456')]))])), ('output', OrderedDict([('run', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('devicePoolArn', 'You can get the Amazon Resource Name (ARN) of the device pool by using the list-pools CLI command.'), ('projectArn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.'), ('testPackageArn', 'You can get the Amazon Resource Name (ARN) of the test package by using the list-tests CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example schedules a test run named MyRun.'), ('id', 'to-schedule-a-test-run-1472652429636'), ('title', 'To schedule a test run')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('StopRun', OrderedDict([('input', OrderedDict([('arn', 'arn:aws:devicefarm:us-west-2:123456789101:run:EXAMPLE-GUID-123-456')])), ('output', OrderedDict([('run', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the test run by using the list-runs CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example stops a specific test run.'), ('id', 'to-stop-a-test-run-1472653770340'), ('title', 'To stop a test run')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateDevicePool', OrderedDict([('input', OrderedDict([('name', 'NewName'), ('arn', 'arn:aws:devicefarm:us-west-2::devicepool:082d10e5-d7d7-48a5-ba5c-12345EXAMPLE'), ('description', 'NewDescription'), ('rules', [OrderedDict([('value', 'True'), ('attribute', 'REMOTE_ACCESS_ENABLED'), ('operator', 'EQUALS')])])])), ('output', OrderedDict([('devicePool', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the device pool by using the list-pools CLI command.')])), ('output', OrderedDict([('devicePool', 'Note: you cannot update curated device pools.')]))])), ('description', 'The following example updates the specified device pool with a new name and description. It also enables remote access of devices in the device pool.'), ('id', 'to-update-a-device-pool-1472653887677'), ('title', 'To update a device pool')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateProject', OrderedDict([('input', OrderedDict([('name', 'NewName'), ('arn', 'arn:aws:devicefarm:us-west-2:183774035805:project:8f75187d-101e-4625-accc-12345EXAMPLE')])), ('output', OrderedDict([('project', OrderedDict([('name', 'NewName'), ('arn', 'arn:aws:devicefarm:us-west-2:183774035805:project:8f75187d-101e-4625-accc-12345EXAMPLE'), ('created', '1448400709.927')]))])), ('comments', OrderedDict([('input', OrderedDict([('arn', 'You can get the Amazon Resource Name (ARN) of the project by using the list-projects CLI command.')])), ('output', OrderedDict())])), ('description', 'The following example updates the specified project with a new name.'), ('id', 'to-update-a-device-pool-1472653887677'), ('title', 'To update a device pool')]), <botocore.model.ServiceModel object at 0x7f89fa0ee748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('BatchGetItem', OrderedDict([('input', OrderedDict([('RequestItems', OrderedDict([('Music', OrderedDict([('Keys', [OrderedDict([('Artist', OrderedDict([('S', 'No One You Know')])), ('SongTitle', OrderedDict([('S', 'Call Me Today')]))]), OrderedDict([('Artist', OrderedDict([('S', 'Acme Band')])), ('SongTitle', OrderedDict([('S', 'Happy Day')]))]), OrderedDict([('Artist', OrderedDict([('S', 'No One You Know')])), ('SongTitle', OrderedDict([('S', 'Scared of My Shadow')]))])]), ('ProjectionExpression', 'AlbumTitle')]))]))])), ('output', OrderedDict([('Responses', OrderedDict([('Music', [OrderedDict([('AlbumTitle', OrderedDict([('S', 'Somewhat Famous')]))]), OrderedDict([('AlbumTitle', OrderedDict([('S', 'Blue Sky Blues')]))]), OrderedDict([('AlbumTitle', OrderedDict([('S', 'Louder Than Ever')]))])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example reads multiple items from the Music table using a batch of three GetItem requests.  Only the AlbumTitle attribute is returned.'), ('id', 'to-retrieve-multiple-items-from-a-table-1476118438992'), ('title', 'To retrieve multiple items from a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('BatchWriteItem', OrderedDict([('input', OrderedDict([('RequestItems', OrderedDict([('Music', [OrderedDict([('PutRequest', OrderedDict([('Item', OrderedDict([('AlbumTitle', OrderedDict([('S', 'Somewhat Famous')])), ('Artist', OrderedDict([('S', 'No One You Know')])), ('SongTitle', OrderedDict([('S', 'Call Me Today')]))]))]))]), OrderedDict([('PutRequest', OrderedDict([('Item', OrderedDict([('AlbumTitle', OrderedDict([('S', 'Songs About Life')])), ('Artist', OrderedDict([('S', 'Acme Band')])), ('SongTitle', OrderedDict([('S', 'Happy Day')]))]))]))]), OrderedDict([('PutRequest', OrderedDict([('Item', OrderedDict([('AlbumTitle', OrderedDict([('S', 'Blue Sky Blues')])), ('Artist', OrderedDict([('S', 'No One You Know')])), ('SongTitle', OrderedDict([('S', 'Scared of My Shadow')]))]))]))])])]))])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds three new items to the Music table using a batch of three PutItem requests.'), ('id', 'to-add-multiple-items-to-a-table-1476118519747'), ('title', 'To add multiple items to a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateTable', OrderedDict([('input', OrderedDict([('AttributeDefinitions', [OrderedDict([('AttributeName', 'Artist'), ('AttributeType', 'S')]), OrderedDict([('AttributeName', 'SongTitle'), ('AttributeType', 'S')])]), ('KeySchema', [OrderedDict([('AttributeName', 'Artist'), ('KeyType', 'HASH')]), OrderedDict([('AttributeName', 'SongTitle'), ('KeyType', 'RANGE')])]), ('ProvisionedThroughput', OrderedDict([('ReadCapacityUnits', 5), ('WriteCapacityUnits', 5)])), ('TableName', 'Music')])), ('output', OrderedDict([('TableDescription', OrderedDict([('AttributeDefinitions', [OrderedDict([('AttributeName', 'Artist'), ('AttributeType', 'S')]), OrderedDict([('AttributeName', 'SongTitle'), ('AttributeType', 'S')])]), ('CreationDateTime', '1421866952.062'), ('ItemCount', 0), ('KeySchema', [OrderedDict([('AttributeName', 'Artist'), ('KeyType', 'HASH')]), OrderedDict([('AttributeName', 'SongTitle'), ('KeyType', 'RANGE')])]), ('ProvisionedThroughput', OrderedDict([('ReadCapacityUnits', 5), ('WriteCapacityUnits', 5)])), ('TableName', 'Music'), ('TableSizeBytes', 0), ('TableStatus', 'CREATING')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a table named Music.'), ('id', 'to-create-a-table-1476116291743'), ('title', 'To create a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteItem', OrderedDict([('input', OrderedDict([('Key', OrderedDict([('Artist', OrderedDict([('S', 'No One You Know')])), ('SongTitle', OrderedDict([('S', 'Scared of My Shadow')]))])), ('TableName', 'Music')])), ('output', OrderedDict([('ConsumedCapacity', OrderedDict([('CapacityUnits', 1), ('TableName', 'Music')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes an item from the Music table.'), ('id', 'to-delete-an-item-1475884573758'), ('title', 'To delete an item')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTable', OrderedDict([('input', OrderedDict([('TableName', 'Music')])), ('output', OrderedDict([('TableDescription', OrderedDict([('ItemCount', 0), ('ProvisionedThroughput', OrderedDict([('NumberOfDecreasesToday', 1), ('ReadCapacityUnits', 5), ('WriteCapacityUnits', 5)])), ('TableName', 'Music'), ('TableSizeBytes', 0), ('TableStatus', 'DELETING')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the Music table.'), ('id', 'to-delete-a-table-1475884368755'), ('title', 'To delete a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLimits', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('AccountMaxReadCapacityUnits', 20000), ('AccountMaxWriteCapacityUnits', 20000), ('TableMaxReadCapacityUnits', 10000), ('TableMaxWriteCapacityUnits', 10000)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the maximum read and write capacity units per table, and for the AWS account, in the current AWS region.'), ('id', 'to-determine-capacity-limits-per-table-and-account-in-the-current-aws-region-1475884162064'), ('title', 'To determine capacity limits per table and account, in the current AWS region')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTable', OrderedDict([('input', OrderedDict([('TableName', 'Music')])), ('output', OrderedDict([('Table', OrderedDict([('AttributeDefinitions', [OrderedDict([('AttributeName', 'Artist'), ('AttributeType', 'S')]), OrderedDict([('AttributeName', 'SongTitle'), ('AttributeType', 'S')])]), ('CreationDateTime', '1421866952.062'), ('ItemCount', 0), ('KeySchema', [OrderedDict([('AttributeName', 'Artist'), ('KeyType', 'HASH')]), OrderedDict([('AttributeName', 'SongTitle'), ('KeyType', 'RANGE')])]), ('ProvisionedThroughput', OrderedDict([('NumberOfDecreasesToday', 1), ('ReadCapacityUnits', 5), ('WriteCapacityUnits', 5)])), ('TableName', 'Music'), ('TableSizeBytes', 0), ('TableStatus', 'ACTIVE')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the Music table.'), ('id', 'to-describe-a-table-1475884440502'), ('title', 'To describe a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetItem', OrderedDict([('input', OrderedDict([('Key', OrderedDict([('Artist', OrderedDict([('S', 'Acme Band')])), ('SongTitle', OrderedDict([('S', 'Happy Day')]))])), ('TableName', 'Music')])), ('output', OrderedDict([('Item', OrderedDict([('AlbumTitle', OrderedDict([('S', 'Songs About Life')])), ('Artist', OrderedDict([('S', 'Acme Band')])), ('SongTitle', OrderedDict([('S', 'Happy Day')]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example retrieves an item from the Music table. The table has a partition key and a sort key (Artist and SongTitle), so you must specify both of these attributes.'), ('id', 'to-read-an-item-from-a-table-1475884258350'), ('title', 'To read an item from a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTables', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('TableNames', ['Forum', 'ProductCatalog', 'Reply', 'Thread'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all of the tables associated with the current AWS account and endpoint.'), ('id', 'to-list-tables-1475884741238'), ('title', 'To list tables')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutItem', OrderedDict([('input', OrderedDict([('Item', OrderedDict([('AlbumTitle', OrderedDict([('S', 'Somewhat Famous')])), ('Artist', OrderedDict([('S', 'No One You Know')])), ('SongTitle', OrderedDict([('S', 'Call Me Today')]))])), ('ReturnConsumedCapacity', 'TOTAL'), ('TableName', 'Music')])), ('output', OrderedDict([('ConsumedCapacity', OrderedDict([('CapacityUnits', 1), ('TableName', 'Music')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds a new item to the Music table.'), ('id', 'to-add-an-item-to-a-table-1476116191110'), ('title', 'To add an item to a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('Query', OrderedDict([('input', OrderedDict([('ExpressionAttributeValues', OrderedDict([(':v1', OrderedDict([('S', 'No One You Know')]))])), ('KeyConditionExpression', 'Artist = :v1'), ('ProjectionExpression', 'SongTitle'), ('TableName', 'Music')])), ('output', OrderedDict([('ConsumedCapacity', OrderedDict()), ('Count', 2), ('Items', [OrderedDict([('SongTitle', OrderedDict([('S', 'Call Me Today')]))])]), ('ScannedCount', 2)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example queries items in the Music table. The table has a partition key and sort key (Artist and SongTitle), but this query only specifies the partition key value. It returns song titles by the artist named "No One You Know".'), ('id', 'to-query-an-item-1475883874631'), ('title', 'To query an item')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('Scan', OrderedDict([('input', OrderedDict([('ExpressionAttributeNames', OrderedDict([('AT', 'AlbumTitle'), ('ST', 'SongTitle')])), ('ExpressionAttributeValues', OrderedDict([(':a', OrderedDict([('S', 'No One You Know')]))])), ('FilterExpression', 'Artist = :a'), ('ProjectionExpression', '#ST, #AT'), ('TableName', 'Music')])), ('output', OrderedDict([('ConsumedCapacity', OrderedDict()), ('Count', 2), ('Items', [OrderedDict([('AlbumTitle', OrderedDict([('S', 'Somewhat Famous')])), ('SongTitle', OrderedDict([('S', 'Call Me Today')]))]), OrderedDict([('AlbumTitle', OrderedDict([('S', 'Blue Sky Blues')])), ('SongTitle', OrderedDict([('S', 'Scared of My Shadow')]))])]), ('ScannedCount', 3)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example scans the entire Music table, and then narrows the results to songs by the artist "No One You Know". For each item, only the album title and song title are returned.'), ('id', 'to-scan-a-table-1475883652470'), ('title', 'To scan a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateItem', OrderedDict([('input', OrderedDict([('ExpressionAttributeNames', OrderedDict([('#AT', 'AlbumTitle'), ('#Y', 'Year')])), ('ExpressionAttributeValues', OrderedDict([(':t', OrderedDict([('S', 'Louder Than Ever')])), (':y', OrderedDict([('N', '2015')]))])), ('Key', OrderedDict([('Artist', OrderedDict([('S', 'Acme Band')])), ('SongTitle', OrderedDict([('S', 'Happy Day')]))])), ('ReturnValues', 'ALL_NEW'), ('TableName', 'Music'), ('UpdateExpression', 'SET #Y = :y, #AT = :t')])), ('output', OrderedDict([('Attributes', OrderedDict([('AlbumTitle', OrderedDict([('S', 'Songs About Life')])), ('Artist', OrderedDict([('S', 'Acme Band')])), ('SongTitle', OrderedDict([('S', 'Happy Day')]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example updates an item in the Music table. It adds a new attribute (Year) and modifies the AlbumTitle attribute.  All of the attributes in the item, as they appear after the update, are returned in the response.'), ('id', 'to-update-an-item-in-a-table-1476118250055'), ('title', 'To update an item in a table')]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateTable', OrderedDict([('input', OrderedDict([('ProvisionedThroughput', OrderedDict([('ReadCapacityUnits', 10), ('WriteCapacityUnits', 10)])), ('TableName', 'MusicCollection')])), ('output', OrderedDict([('TableDescription', OrderedDict([('AttributeDefinitions', [OrderedDict([('AttributeName', 'Artist'), ('AttributeType', 'S')]), OrderedDict([('AttributeName', 'SongTitle'), ('AttributeType', 'S')])]), ('CreationDateTime', '1421866952.062'), ('ItemCount', 0), ('KeySchema', [OrderedDict([('AttributeName', 'Artist'), ('KeyType', 'HASH')]), OrderedDict([('AttributeName', 'SongTitle'), ('KeyType', 'RANGE')])]), ('ProvisionedThroughput', OrderedDict([('LastIncreaseDateTime', '1421874759.194'), ('NumberOfDecreasesToday', 1), ('ReadCapacityUnits', 1), ('WriteCapacityUnits', 1)])), ('TableName', 'MusicCollection'), ('TableSizeBytes', 0), ('TableStatus', 'UPDATING')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example increases the provisioned read and write capacity on the Music table.'), ('id', 'to-modify-a-tables-provisioned-throughput-1476118076147'), ('title', "To modify a table's provisioned throughput")]), <botocore.model.ServiceModel object at 0x7f8a024c22e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeStream', OrderedDict([('input', OrderedDict([('StreamArn', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252')])), ('output', OrderedDict([('StreamDescription', OrderedDict([('CreationRequestDateTime', 'Wed May 20 13:51:10 PDT 2015'), ('KeySchema', [OrderedDict([('AttributeName', 'ForumName'), ('KeyType', 'HASH')]), OrderedDict([('AttributeName', 'Subject'), ('KeyType', 'RANGE')])]), ('Shards', [OrderedDict([('SequenceNumberRange', OrderedDict([('EndingSequenceNumber', '20500000000000000910398'), ('StartingSequenceNumber', '20500000000000000910398')])), ('ShardId', 'shardId-00000001414562045508-2bac9cd2')]), OrderedDict([('ParentShardId', 'shardId-00000001414562045508-2bac9cd2'), ('SequenceNumberRange', OrderedDict([('EndingSequenceNumber', '820400000000000001192334'), ('StartingSequenceNumber', '820400000000000001192334')])), ('ShardId', 'shardId-00000001414576573621-f55eea83')]), OrderedDict([('ParentShardId', 'shardId-00000001414576573621-f55eea83'), ('SequenceNumberRange', OrderedDict([('EndingSequenceNumber', '1683700000000000001135967'), ('StartingSequenceNumber', '1683700000000000001135967')])), ('ShardId', 'shardId-00000001414592258131-674fd923')]), OrderedDict([('ParentShardId', 'shardId-00000001414592258131-674fd923'), ('SequenceNumberRange', OrderedDict([('StartingSequenceNumber', '2574600000000000000935255')])), ('ShardId', 'shardId-00000001414608446368-3a1afbaf')])]), ('StreamArn', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252'), ('StreamLabel', '2015-05-20T20:51:10.252'), ('StreamStatus', 'ENABLED'), ('StreamViewType', 'NEW_AND_OLD_IMAGES'), ('TableName', 'Forum')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example describes a stream with a given stream ARN.'), ('id', 'to-describe-a-stream-with-a-given-stream-arn-1473457835200'), ('title', 'To describe a stream with a given stream ARN')]), <botocore.model.ServiceModel object at 0x7f89ff437438>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRecords', OrderedDict([('input', OrderedDict([('ShardIterator', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252|1|AAAAAAAAAAEvJp6D+zaQ...  <remaining characters omitted> ...')])), ('output', OrderedDict([('NextShardIterator', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252|1|AAAAAAAAAAGQBYshYDEe ... <remaining characters omitted> ...'), ('Records', [OrderedDict([('awsRegion', 'us-west-2'), ('dynamodb', OrderedDict([('ApproximateCreationDateTime', '1.46480646E9'), ('Keys', OrderedDict([('ForumName', OrderedDict([('S', 'DynamoDB')])), ('Subject', OrderedDict([('S', 'DynamoDB Thread 3')]))])), ('SequenceNumber', '300000000000000499659'), ('SizeBytes', 41), ('StreamViewType', 'KEYS_ONLY')])), ('eventID', 'e2fd9c34eff2d779b297b26f5fef4206'), ('eventName', 'INSERT'), ('eventSource', 'aws:dynamodb'), ('eventVersion', '1.0')]), OrderedDict([('awsRegion', 'us-west-2'), ('dynamodb', OrderedDict([('ApproximateCreationDateTime', '1.46480527E9'), ('Keys', OrderedDict([('ForumName', OrderedDict([('S', 'DynamoDB')])), ('Subject', OrderedDict([('S', 'DynamoDB Thread 1')]))])), ('SequenceNumber', '400000000000000499660'), ('SizeBytes', 41), ('StreamViewType', 'KEYS_ONLY')])), ('eventID', '4b25bd0da9a181a155114127e4837252'), ('eventName', 'MODIFY'), ('eventSource', 'aws:dynamodb'), ('eventVersion', '1.0')]), OrderedDict([('awsRegion', 'us-west-2'), ('dynamodb', OrderedDict([('ApproximateCreationDateTime', '1.46480646E9'), ('Keys', OrderedDict([('ForumName', OrderedDict([('S', 'DynamoDB')])), ('Subject', OrderedDict([('S', 'DynamoDB Thread 2')]))])), ('SequenceNumber', '500000000000000499661'), ('SizeBytes', 41), ('StreamViewType', 'KEYS_ONLY')])), ('eventID', '740280c73a3df7842edab3548a1b08ad'), ('eventName', 'REMOVE'), ('eventSource', 'aws:dynamodb'), ('eventVersion', '1.0')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example retrieves all the stream records from a shard.'), ('id', 'to-retrieve-all-the-stream-records-from-a-shard-1473707781419'), ('title', 'To retrieve all the stream records from a shard')]), <botocore.model.ServiceModel object at 0x7f89ff437438>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetShardIterator', OrderedDict([('input', OrderedDict([('ShardId', '00000001414576573621-f55eea83'), ('ShardIteratorType', 'TRIM_HORIZON'), ('StreamArn', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252')])), ('output', OrderedDict([('ShardIterator', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252|1|AAAAAAAAAAEvJp6D+zaQ...  <remaining characters omitted> ...')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns a shard iterator for the provided stream ARN and shard ID.'), ('id', 'to-obtain-a-shard-iterator-for-the-provided-stream-arn-and-shard-id-1473459941476'), ('title', 'To obtain a shard iterator for the provided stream ARN and shard ID')]), <botocore.model.ServiceModel object at 0x7f89ff437438>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListStreams', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Streams', [OrderedDict([('StreamArn', 'arn:aws:dynamodb:us-wesst-2:111122223333:table/Forum/stream/2015-05-20T20:51:10.252'), ('StreamLabel', '2015-05-20T20:51:10.252'), ('TableName', 'Forum')]), OrderedDict([('StreamArn', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-20T20:50:02.714'), ('StreamLabel', '2015-05-20T20:50:02.714'), ('TableName', 'Forum')]), OrderedDict([('StreamArn', 'arn:aws:dynamodb:us-west-2:111122223333:table/Forum/stream/2015-05-19T23:03:50.641'), ('StreamLabel', '2015-05-19T23:03:50.641'), ('TableName', 'Forum')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example lists all of the stream ARNs.'), ('id', 'to-list-all-of-the-stream-arns--1473459534285'), ('title', 'To list all of the stream ARNs ')]), <botocore.model.ServiceModel object at 0x7f89ff437438>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AllocateAddress', OrderedDict([('input', OrderedDict([('Domain', 'vpc')])), ('output', OrderedDict([('AllocationId', 'eipalloc-64d5890a'), ('Domain', 'vpc'), ('PublicIp', '203.0.113.0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example allocates an Elastic IP address to use with an instance in a VPC.'), ('id', 'ec2-allocate-address-1'), ('title', 'To allocate an Elastic IP address for EC2-VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AllocateAddress', OrderedDict([('output', OrderedDict([('Domain', 'standard'), ('PublicIp', '198.51.100.0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example allocates an Elastic IP address to use with an instance in EC2-Classic.'), ('id', 'ec2-allocate-address-2'), ('title', 'To allocate an Elastic IP address for EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssignPrivateIpAddresses', OrderedDict([('input', OrderedDict([('NetworkInterfaceId', 'eni-e5aa89a3'), ('PrivateIpAddresses', ['10.0.0.82'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example assigns the specified secondary private IP address to the specified network interface.'), ('id', 'ec2-assign-private-ip-addresses-1'), ('title', 'To assign a specific secondary private IP address to an interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssignPrivateIpAddresses', OrderedDict([('input', OrderedDict([('NetworkInterfaceId', 'eni-e5aa89a3'), ('SecondaryPrivateIpAddressCount', 2)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example assigns two secondary private IP addresses to the specified network interface. Amazon EC2 automatically assigns these IP addresses from the available IP addresses in the CIDR block range of the subnet the network interface is associated with.'), ('id', 'ec2-assign-private-ip-addresses-2'), ('title', 'To assign secondary private IP addresses that Amazon EC2 selects to an interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssociateAddress', OrderedDict([('input', OrderedDict([('AllocationId', 'eipalloc-64d5890a'), ('InstanceId', 'i-0b263919b6498b123')])), ('output', OrderedDict([('AssociationId', 'eipassoc-2bebb745')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified Elastic IP address with the specified instance in a VPC.'), ('id', 'ec2-associate-address-1'), ('title', 'To associate an Elastic IP address in EC2-VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssociateAddress', OrderedDict([('input', OrderedDict([('AllocationId', 'eipalloc-64d5890a'), ('NetworkInterfaceId', 'eni-1a2b3c4d')])), ('output', OrderedDict([('AssociationId', 'eipassoc-2bebb745')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified Elastic IP address with the specified network interface.'), ('id', 'ec2-associate-address-2'), ('title', 'To associate an Elastic IP address with a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssociateAddress', OrderedDict([('input', OrderedDict([('InstanceId', 'i-07ffe74c7330ebf53'), ('PublicIp', '198.51.100.0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates an Elastic IP address with an instance in EC2-Classic.'), ('id', 'ec2-associate-address-3'), ('title', 'To associate an Elastic IP address in EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssociateDhcpOptions', OrderedDict([('input', OrderedDict([('DhcpOptionsId', 'dopt-d9070ebb'), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified DHCP options set with the specified VPC.'), ('id', 'ec2-associate-dhcp-options-1'), ('title', 'To associate a DHCP options set with a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssociateDhcpOptions', OrderedDict([('input', OrderedDict([('DhcpOptionsId', 'default'), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the default DHCP options set with the specified VPC.'), ('id', 'ec2-associate-dhcp-options-2'), ('title', 'To associate the default DHCP options set with a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssociateRouteTable', OrderedDict([('input', OrderedDict([('RouteTableId', 'rtb-22574640'), ('SubnetId', 'subnet-9d4a7b6')])), ('output', OrderedDict([('AssociationId', 'rtbassoc-781d0d1a')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified route table with the specified subnet.'), ('id', 'ec2-associate-route-table-1'), ('title', 'To associate a route table with a subnet')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachInternetGateway', OrderedDict([('input', OrderedDict([('InternetGatewayId', 'igw-c0a643a9'), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example attaches the specified Internet gateway to the specified VPC.'), ('id', 'ec2-attach-internet-gateway-1'), ('title', 'To attach an Internet gateway to a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachNetworkInterface', OrderedDict([('input', OrderedDict([('DeviceIndex', 1), ('InstanceId', 'i-1234567890abcdef0'), ('NetworkInterfaceId', 'eni-e5aa89a3')])), ('output', OrderedDict([('AttachmentId', 'eni-attach-66c4350a')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example attaches the specified network interface to the specified instance.'), ('id', 'ec2-attach-network-interface-1'), ('title', 'To attach a network interface to an instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachVolume', OrderedDict([('input', OrderedDict([('Device', '/dev/sdf'), ('InstanceId', 'i-01474ef662b89480'), ('VolumeId', 'vol-1234567890abcdef0')])), ('output', OrderedDict([('AttachTime', '2016-08-29T18:52:32.724Z'), ('Device', '/dev/sdf'), ('InstanceId', 'i-01474ef662b89480'), ('State', 'attaching'), ('VolumeId', 'vol-1234567890abcdef0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example attaches a volume (``vol-1234567890abcdef0``) to an instance (``i-01474ef662b89480``) as ``/dev/sdf``.'), ('id', 'to-attach-a-volume-to-an-instance-1472499213109'), ('title', 'To attach a volume to an instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelSpotFleetRequests', OrderedDict([('input', OrderedDict([('SpotFleetRequestIds', ['sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE']), ('TerminateInstances', True)])), ('output', OrderedDict([('SuccessfulFleetRequests', [OrderedDict([('CurrentSpotFleetRequestState', 'cancelled_running'), ('PreviousSpotFleetRequestState', 'active'), ('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example cancels the specified Spot fleet request and terminates its associated Spot Instances.'), ('id', 'ec2-cancel-spot-fleet-requests-1'), ('title', 'To cancel a Spot fleet request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelSpotFleetRequests', OrderedDict([('input', OrderedDict([('SpotFleetRequestIds', ['sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE']), ('TerminateInstances', False)])), ('output', OrderedDict([('SuccessfulFleetRequests', [OrderedDict([('CurrentSpotFleetRequestState', 'cancelled_terminating'), ('PreviousSpotFleetRequestState', 'active'), ('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example cancels the specified Spot fleet request without terminating its associated Spot Instances.'), ('id', 'ec2-cancel-spot-fleet-requests-2'), ('title', 'To cancel a Spot fleet request without terminating its Spot Instances')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelSpotInstanceRequests', OrderedDict([('input', OrderedDict([('SpotInstanceRequestIds', ['sir-08b93456'])])), ('output', OrderedDict([('CancelledSpotInstanceRequests', [OrderedDict([('SpotInstanceRequestId', 'sir-08b93456'), ('State', 'cancelled')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example cancels a Spot Instance request.'), ('id', 'ec2-cancel-spot-instance-requests-1'), ('title', 'To cancel Spot Instance requests')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ConfirmProductInstance', OrderedDict([('input', OrderedDict([('InstanceId', 'i-1234567890abcdef0'), ('ProductCode', '774F4FF8')])), ('output', OrderedDict([('OwnerId', '123456789012')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example determines whether the specified product code is associated with the specified instance.'), ('id', 'to-confirm-the-product-instance-1472712108494'), ('title', 'To confirm the product instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CopySnapshot', OrderedDict([('input', OrderedDict([('Description', 'This is my copied snapshot.'), ('DestinationRegion', 'us-east-1'), ('SourceRegion', 'us-west-2'), ('SourceSnapshotId', 'snap-066877671789bd71b')])), ('output', OrderedDict([('SnapshotId', 'snap-066877671789bd71b')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example copies a snapshot with the snapshot ID of ``snap-066877671789bd71b`` from the ``us-west-2`` region to the ``us-east-1`` region and adds a short description to identify the snapshot.'), ('id', 'to-copy-a-snapshot-1472502259774'), ('title', 'To copy a snapshot')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateCustomerGateway', OrderedDict([('input', OrderedDict([('BgpAsn', 65534), ('PublicIp', '12.1.2.3'), ('Type', 'ipsec.1')])), ('output', OrderedDict([('CustomerGateway', OrderedDict([('BgpAsn', '65534'), ('CustomerGatewayId', 'cgw-0e11f167'), ('IpAddress', '12.1.2.3'), ('State', 'available'), ('Type', 'ipsec.1')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a customer gateway with the specified IP address for its outside interface.'), ('id', 'ec2-create-customer-gateway-1'), ('title', 'To create a customer gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDhcpOptions', OrderedDict([('input', OrderedDict([('DhcpConfigurations', [OrderedDict([('Key', 'domain-name-servers'), ('Values', ['10.2.5.1', '10.2.5.2'])])])])), ('output', OrderedDict([('DhcpOptions', OrderedDict([('DhcpConfigurations', [OrderedDict([('Key', 'domain-name-servers'), ('Values', [OrderedDict([('Value', '10.2.5.2')]), OrderedDict([('Value', '10.2.5.1')])])])]), ('DhcpOptionsId', 'dopt-d9070ebb')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DHCP options set.'), ('id', 'ec2-create-dhcp-options-1'), ('title', 'To create a DHCP options set')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateInternetGateway', OrderedDict([('output', OrderedDict([('InternetGateway', OrderedDict([('Attachments', []), ('InternetGatewayId', 'igw-c0a643a9'), ('Tags', [])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an Internet gateway.'), ('id', 'ec2-create-internet-gateway-1'), ('title', 'To create an Internet gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateKeyPair', OrderedDict([('input', OrderedDict([('KeyName', 'my-key-pair')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a key pair named my-key-pair.'), ('id', 'ec2-create-key-pair-1'), ('title', 'To create a key pair')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateNatGateway', OrderedDict([('input', OrderedDict([('AllocationId', 'eipalloc-37fc1a52'), ('SubnetId', 'subnet-1a2b3c4d')])), ('output', OrderedDict([('NatGateway', OrderedDict([('CreateTime', '2015-12-17T12:45:26.732Z'), ('NatGatewayAddresses', [OrderedDict([('AllocationId', 'eipalloc-37fc1a52')])]), ('NatGatewayId', 'nat-08d48af2a8e83edfd'), ('State', 'pending'), ('SubnetId', 'subnet-1a2b3c4d'), ('VpcId', 'vpc-1122aabb')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a NAT gateway in subnet subnet-1a2b3c4d and associates an Elastic IP address with the allocation ID eipalloc-37fc1a52 with the NAT gateway.'), ('id', 'ec2-create-nat-gateway-1'), ('title', 'To create a NAT gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateNetworkAcl', OrderedDict([('input', OrderedDict([('VpcId', 'vpc-a01106c2')])), ('output', OrderedDict([('NetworkAcl', OrderedDict([('Associations', []), ('Entries', [OrderedDict([('CidrBlock', '0.0.0.0/0'), ('Egress', True), ('Protocol', '-1'), ('RuleAction', 'deny'), ('RuleNumber', 32767)]), OrderedDict([('CidrBlock', '0.0.0.0/0'), ('Egress', False), ('Protocol', '-1'), ('RuleAction', 'deny'), ('RuleNumber', 32767)])]), ('IsDefault', False), ('NetworkAclId', 'acl-5fb85d36'), ('Tags', []), ('VpcId', 'vpc-a01106c2')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a network ACL for the specified VPC.'), ('id', 'ec2-create-network-acl-1'), ('title', 'To create a network ACL')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateNetworkAclEntry', OrderedDict([('input', OrderedDict([('CidrBlock', '0.0.0.0/0'), ('Egress', False), ('NetworkAclId', 'acl-5fb85d36'), ('PortRange', OrderedDict([('From', 53), ('To', 53)])), ('Protocol', 'udp'), ('RuleAction', 'allow'), ('RuleNumber', 100)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an entry for the specified network ACL. The rule allows ingress traffic from anywhere (0.0.0.0/0) on UDP port 53 (DNS) into any associated subnet.'), ('id', 'ec2-create-network-acl-entry-1'), ('title', 'To create a network ACL entry')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateNetworkInterface', OrderedDict([('input', OrderedDict([('Description', 'my network interface'), ('Groups', ['sg-903004f8']), ('PrivateIpAddress', '10.0.2.17'), ('SubnetId', 'subnet-9d4a7b6c')])), ('output', OrderedDict([('NetworkInterface', OrderedDict([('AvailabilityZone', 'us-east-1d'), ('Description', 'my network interface'), ('Groups', [OrderedDict([('GroupId', 'sg-903004f8'), ('GroupName', 'default')])]), ('MacAddress', '02:1a:80:41:52:9c'), ('NetworkInterfaceId', 'eni-e5aa89a3'), ('OwnerId', '123456789012'), ('PrivateIpAddress', '10.0.2.17'), ('PrivateIpAddresses', [OrderedDict([('Primary', True), ('PrivateIpAddress', '10.0.2.17')])]), ('RequesterManaged', False), ('SourceDestCheck', True), ('Status', 'pending'), ('SubnetId', 'subnet-9d4a7b6c'), ('TagSet', []), ('VpcId', 'vpc-a01106c2')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a network interface for the specified subnet.'), ('id', 'ec2-create-network-interface-1'), ('title', 'To create a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreatePlacementGroup', OrderedDict([('input', OrderedDict([('GroupName', 'my-cluster'), ('Strategy', 'cluster')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a placement group with the specified name.'), ('id', 'to-create-a-placement-group-1472712245768'), ('title', 'To create a placement group')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRoute', OrderedDict([('input', OrderedDict([('DestinationCidrBlock', '0.0.0.0/0'), ('GatewayId', 'igw-c0a643a9'), ('RouteTableId', 'rtb-22574640')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a route for the specified route table. The route matches all traffic (0.0.0.0/0) and routes it to the specified Internet gateway.'), ('id', 'ec2-create-route-1'), ('title', 'To create a route')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRouteTable', OrderedDict([('input', OrderedDict([('VpcId', 'vpc-a01106c2')])), ('output', OrderedDict([('RouteTable', OrderedDict([('Associations', []), ('PropagatingVgws', []), ('RouteTableId', 'rtb-22574640'), ('Routes', [OrderedDict([('DestinationCidrBlock', '10.0.0.0/16'), ('GatewayId', 'local'), ('State', 'active')])]), ('Tags', []), ('VpcId', 'vpc-a01106c2')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a route table for the specified VPC.'), ('id', 'ec2-create-route-table-1'), ('title', 'To create a route table')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSnapshot', OrderedDict([('input', OrderedDict([('Description', 'This is my root volume snapshot.'), ('VolumeId', 'vol-1234567890abcdef0')])), ('output', OrderedDict([('Description', 'This is my root volume snapshot.'), ('OwnerId', '012345678910'), ('SnapshotId', 'snap-066877671789bd71b'), ('StartTime', '2014-02-28T21:06:01.000Z'), ('State', 'pending'), ('Tags', []), ('VolumeId', 'vol-1234567890abcdef0'), ('VolumeSize', 8)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a snapshot of the volume with a volume ID of ``vol-1234567890abcdef0`` and a short description to identify the snapshot.'), ('id', 'to-create-a-snapshot-1472502529790'), ('title', 'To create a snapshot')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSpotDatafeedSubscription', OrderedDict([('input', OrderedDict([('Bucket', 'my-s3-bucket'), ('Prefix', 'spotdata')])), ('output', OrderedDict([('SpotDatafeedSubscription', OrderedDict([('Bucket', 'my-s3-bucket'), ('OwnerId', '123456789012'), ('Prefix', 'spotdata'), ('State', 'Active')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a Spot Instance data feed for your AWS account.'), ('id', 'ec2-create-spot-datafeed-subscription-1'), ('title', 'To create a Spot Instance datafeed')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSubnet', OrderedDict([('input', OrderedDict([('CidrBlock', '10.0.1.0/24'), ('VpcId', 'vpc-a01106c2')])), ('output', OrderedDict([('Subnet', OrderedDict([('AvailabilityZone', 'us-west-2c'), ('AvailableIpAddressCount', 251), ('CidrBlock', '10.0.1.0/24'), ('State', 'pending'), ('SubnetId', 'subnet-9d4a7b6c'), ('VpcId', 'vpc-a01106c2')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a subnet in the specified VPC with the specified CIDR block. We recommend that you let us select an Availability Zone for you.'), ('id', 'ec2-create-subnet-1'), ('title', 'To create a subnet')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateTags', OrderedDict([('input', OrderedDict([('Resources', ['ami-78a54011']), ('Tags', [OrderedDict([('Key', 'Stack'), ('Value', 'production')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the tag Stack=production to the specified image, or overwrites an existing tag for the AMI where the tag key is Stack.'), ('id', 'ec2-create-tags-1'), ('title', 'To add a tag to a resource')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateVolume', OrderedDict([('input', OrderedDict([('AvailabilityZone', 'us-east-1a'), ('Size', 80), ('VolumeType', 'gp2')])), ('output', OrderedDict([('AvailabilityZone', 'us-east-1a'), ('CreateTime', '2016-08-29T18:52:32.724Z'), ('Encrypted', False), ('Iops', 240), ('Size', 80), ('SnapshotId', ''), ('State', 'creating'), ('VolumeId', 'vol-6b60b7c7'), ('VolumeType', 'gp2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an 80 GiB General Purpose (SSD) volume in the Availability Zone ``us-east-1a``.'), ('id', 'to-create-a-new-volume-1472496724296'), ('title', 'To create a new volume')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateVolume', OrderedDict([('input', OrderedDict([('AvailabilityZone', 'us-east-1a'), ('Iops', 1000), ('SnapshotId', 'snap-066877671789bd71b'), ('VolumeType', 'io1')])), ('output', OrderedDict([('Attachments', []), ('AvailabilityZone', 'us-east-1a'), ('CreateTime', '2016-08-29T18:52:32.724Z'), ('Iops', 1000), ('Size', 500), ('SnapshotId', 'snap-066877671789bd71b'), ('State', 'creating'), ('Tags', []), ('VolumeId', 'vol-1234567890abcdef0'), ('VolumeType', 'io1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a new Provisioned IOPS (SSD) volume with 1000 provisioned IOPS from a snapshot in the Availability Zone ``us-east-1a``.'), ('id', 'to-create-a-new-provisioned-iops-ssd-volume-from-a-snapshot-1472498975176'), ('title', 'To create a new Provisioned IOPS (SSD) volume from a snapshot')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateVpc', OrderedDict([('input', OrderedDict([('CidrBlock', '10.0.0.0/16')])), ('output', OrderedDict([('Vpc', OrderedDict([('CidrBlock', '10.0.0.0/16'), ('DhcpOptionsId', 'dopt-7a8b9c2d'), ('InstanceTenancy', 'default'), ('State', 'pending'), ('VpcId', 'vpc-a01106c2')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a VPC with the specified CIDR block.'), ('id', 'ec2-create-vpc-1'), ('title', 'To create a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteCustomerGateway', OrderedDict([('input', OrderedDict([('CustomerGatewayId', 'cgw-0e11f167')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified customer gateway.'), ('id', 'ec2-delete-customer-gateway-1'), ('title', 'To delete a customer gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDhcpOptions', OrderedDict([('input', OrderedDict([('DhcpOptionsId', 'dopt-d9070ebb')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DHCP options set.'), ('id', 'ec2-delete-dhcp-options-1'), ('title', 'To delete a DHCP options set')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteInternetGateway', OrderedDict([('input', OrderedDict([('InternetGatewayId', 'igw-c0a643a9')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified Internet gateway.'), ('id', 'ec2-delete-internet-gateway-1'), ('title', 'To delete an Internet gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteKeyPair', OrderedDict([('input', OrderedDict([('KeyName', 'my-key-pair')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified key pair.'), ('id', 'ec2-delete-key-pair-1'), ('title', 'To delete a key pair')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteNatGateway', OrderedDict([('input', OrderedDict([('NatGatewayId', 'nat-04ae55e711cec5680')])), ('output', OrderedDict([('NatGatewayId', 'nat-04ae55e711cec5680')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified NAT gateway.'), ('id', 'ec2-delete-nat-gateway-1'), ('title', 'To delete a NAT gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteNetworkAcl', OrderedDict([('input', OrderedDict([('NetworkAclId', 'acl-5fb85d36')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified network ACL.'), ('id', 'ec2-delete-network-acl-1'), ('title', 'To delete a network ACL')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteNetworkAclEntry', OrderedDict([('input', OrderedDict([('Egress', True), ('NetworkAclId', 'acl-5fb85d36'), ('RuleNumber', 100)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes ingress rule number 100 from the specified network ACL.'), ('id', 'ec2-delete-network-acl-entry-1'), ('title', 'To delete a network ACL entry')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteNetworkInterface', OrderedDict([('input', OrderedDict([('NetworkInterfaceId', 'eni-e5aa89a3')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified network interface.'), ('id', 'ec2-delete-network-interface-1'), ('title', 'To delete a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeletePlacementGroup', OrderedDict([('input', OrderedDict([('GroupName', 'my-cluster')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified placement group.\n'), ('id', 'to-delete-a-placement-group-1472712349959'), ('title', 'To delete a placement group')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRoute', OrderedDict([('input', OrderedDict([('DestinationCidrBlock', '0.0.0.0/0'), ('RouteTableId', 'rtb-22574640')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified route from the specified route table.'), ('id', 'ec2-delete-route-1'), ('title', 'To delete a route')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRouteTable', OrderedDict([('input', OrderedDict([('RouteTableId', 'rtb-22574640')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified route table.'), ('id', 'ec2-delete-route-table-1'), ('title', 'To delete a route table')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSnapshot', OrderedDict([('input', OrderedDict([('SnapshotId', 'snap-1234567890abcdef0')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes a snapshot with the snapshot ID of ``snap-1234567890abcdef0``. If the command succeeds, no output is returned.'), ('id', 'to-delete-a-snapshot-1472503042567'), ('title', 'To delete a snapshot')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSpotDatafeedSubscription', OrderedDict([('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes a Spot data feed subscription for the account.'), ('id', 'ec2-delete-spot-datafeed-subscription-1'), ('title', 'To cancel a Spot Instance data feed subscription')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSubnet', OrderedDict([('input', OrderedDict([('SubnetId', 'subnet-9d4a7b6c')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified subnet.'), ('id', 'ec2-delete-subnet-1'), ('title', 'To delete a subnet')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTags', OrderedDict([('input', OrderedDict([('Resources', ['ami-78a54011']), ('Tags', [OrderedDict([('Key', 'Stack'), ('Value', 'test')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the tag Stack=test from the specified image.'), ('id', 'ec2-delete-tags-1'), ('title', 'To delete a tag from a resource')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVolume', OrderedDict([('input', OrderedDict([('VolumeId', 'vol-049df61146c4d7901')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes an available volume with the volume ID of ``vol-049df61146c4d7901``. If the command succeeds, no output is returned.'), ('id', 'to-delete-a-volume-1472503111160'), ('title', 'To delete a volume')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVpc', OrderedDict([('input', OrderedDict([('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified VPC.'), ('id', 'ec2-delete-vpc-1'), ('title', 'To delete a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAccountAttributes', OrderedDict([('input', OrderedDict([('AttributeNames', ['supported-platforms'])])), ('output', OrderedDict([('AccountAttributes', [OrderedDict([('AttributeName', 'supported-platforms'), ('AttributeValues', [OrderedDict([('AttributeValue', 'EC2')]), OrderedDict([('AttributeValue', 'VPC')])])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the supported-platforms attribute for your AWS account.'), ('id', 'ec2-describe-account-attributes-1'), ('title', 'To describe a single attribute for your AWS account')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAccountAttributes', OrderedDict([('output', OrderedDict([('AccountAttributes', [OrderedDict([('AttributeName', 'supported-platforms'), ('AttributeValues', [OrderedDict([('AttributeValue', 'EC2')]), OrderedDict([('AttributeValue', 'VPC')])])]), OrderedDict([('AttributeName', 'vpc-max-security-groups-per-interface'), ('AttributeValues', [OrderedDict([('AttributeValue', '5')])])]), OrderedDict([('AttributeName', 'max-elastic-ips'), ('AttributeValues', [OrderedDict([('AttributeValue', '5')])])]), OrderedDict([('AttributeName', 'max-instances'), ('AttributeValues', [OrderedDict([('AttributeValue', '20')])])]), OrderedDict([('AttributeName', 'vpc-max-elastic-ips'), ('AttributeValues', [OrderedDict([('AttributeValue', '5')])])]), OrderedDict([('AttributeName', 'default-vpc'), ('AttributeValues', [OrderedDict([('AttributeValue', 'none')])])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the attributes for your AWS account.'), ('id', 'ec2-describe-account-attributes-2'), ('title', 'To describe all attributes for your AWS account')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAddresses', OrderedDict([('output', OrderedDict([('Addresses', [OrderedDict([('Domain', 'standard'), ('InstanceId', 'i-1234567890abcdef0'), ('PublicIp', '198.51.100.0')]), OrderedDict([('AllocationId', 'eipalloc-12345678'), ('AssociationId', 'eipassoc-12345678'), ('Domain', 'vpc'), ('InstanceId', 'i-1234567890abcdef0'), ('NetworkInterfaceId', 'eni-12345678'), ('NetworkInterfaceOwnerId', '123456789012'), ('PrivateIpAddress', '10.0.1.241'), ('PublicIp', '203.0.113.0')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes your Elastic IP addresses.'), ('id', 'ec2-describe-addresses-1'), ('title', 'To describe your Elastic IP addresses')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAddresses', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'domain'), ('Values', ['vpc'])])])])), ('output', OrderedDict([('Addresses', [OrderedDict([('AllocationId', 'eipalloc-12345678'), ('AssociationId', 'eipassoc-12345678'), ('Domain', 'vpc'), ('InstanceId', 'i-1234567890abcdef0'), ('NetworkInterfaceId', 'eni-12345678'), ('NetworkInterfaceOwnerId', '123456789012'), ('PrivateIpAddress', '10.0.1.241'), ('PublicIp', '203.0.113.0')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes your Elastic IP addresses for use with instances in a VPC.'), ('id', 'ec2-describe-addresses-2'), ('title', 'To describe your Elastic IP addresses for EC2-VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAddresses', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'domain'), ('Values', ['standard'])])])])), ('output', OrderedDict([('Addresses', [OrderedDict([('Domain', 'standard'), ('InstanceId', 'i-1234567890abcdef0'), ('PublicIp', '198.51.100.0')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes your Elastic IP addresses for use with instances in EC2-Classic.'), ('id', 'ec2-describe-addresses-3'), ('title', 'To describe your Elastic IP addresses for EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAvailabilityZones', OrderedDict([('output', OrderedDict([('AvailabilityZones', [OrderedDict([('Messages', []), ('RegionName', 'us-east-1'), ('State', 'available'), ('ZoneName', 'us-east-1b')]), OrderedDict([('Messages', []), ('RegionName', 'us-east-1'), ('State', 'available'), ('ZoneName', 'us-east-1c')]), OrderedDict([('Messages', []), ('RegionName', 'us-east-1'), ('State', 'available'), ('ZoneName', 'us-east-1d')]), OrderedDict([('Messages', []), ('RegionName', 'us-east-1'), ('State', 'available'), ('ZoneName', 'us-east-1e')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the Availability Zones that are available to you. The response includes Availability Zones only for the current region.'), ('id', 'ec2-describe-availability-zones-1'), ('title', 'To describe your Availability Zones')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeCustomerGateways', OrderedDict([('input', OrderedDict([('CustomerGatewayIds', ['cgw-0e11f167'])])), ('output', OrderedDict([('CustomerGateways', [OrderedDict([('BgpAsn', '65534'), ('CustomerGatewayId', 'cgw-0e11f167'), ('IpAddress', '12.1.2.3'), ('State', 'available'), ('Type', 'ipsec.1')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified customer gateway.'), ('id', 'ec2-describe-customer-gateways-1'), ('title', 'To describe a customer gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDhcpOptions', OrderedDict([('input', OrderedDict([('DhcpOptionsIds', ['dopt-d9070ebb'])])), ('output', OrderedDict([('DhcpOptions', [OrderedDict([('DhcpConfigurations', [OrderedDict([('Key', 'domain-name-servers'), ('Values', [OrderedDict([('Value', '10.2.5.2')]), OrderedDict([('Value', '10.2.5.1')])])])]), ('DhcpOptionsId', 'dopt-d9070ebb')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified DHCP options set.'), ('id', 'ec2-describe-dhcp-options-1'), ('title', 'To describe a DHCP options set')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeInstanceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'instanceType'), ('InstanceId', 'i-1234567890abcdef0')])), ('output', OrderedDict([('InstanceId', 'i-1234567890abcdef0'), ('InstanceType', OrderedDict([('Value', 't1.micro')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the instance type of the specified instance.\n'), ('id', 'to-describe-the-instance-type-1472712432132'), ('title', 'To describe the instance type')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeInstanceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'disableApiTermination'), ('InstanceId', 'i-1234567890abcdef0')])), ('output', OrderedDict([('DisableApiTermination', OrderedDict([('Value', 'false')])), ('InstanceId', 'i-1234567890abcdef0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the ``disableApiTermination`` attribute of the specified instance.\n'), ('id', 'to-describe-the-disableapitermination-attribute-1472712533466'), ('title', 'To describe the disableApiTermination attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeInstanceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'blockDeviceMapping'), ('InstanceId', 'i-1234567890abcdef0')])), ('output', OrderedDict([('BlockDeviceMappings', [OrderedDict([('DeviceName', '/dev/sda1'), ('Ebs', OrderedDict([('AttachTime', '2013-05-17T22:42:34.000Z'), ('DeleteOnTermination', True), ('Status', 'attached'), ('VolumeId', 'vol-049df61146c4d7901')]))]), OrderedDict([('DeviceName', '/dev/sdf'), ('Ebs', OrderedDict([('AttachTime', '2013-09-10T23:07:00.000Z'), ('DeleteOnTermination', False), ('Status', 'attached'), ('VolumeId', 'vol-049df61146c4d7901')]))])]), ('InstanceId', 'i-1234567890abcdef0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the ``blockDeviceMapping`` attribute of the specified instance.\n'), ('id', 'to-describe-the-block-device-mapping-for-an-instance-1472712645423'), ('title', 'To describe the block device mapping for an instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeInternetGateways', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'attachment.vpc-id'), ('Values', ['vpc-a01106c2'])])])])), ('output', OrderedDict([('InternetGateways', [OrderedDict([('Attachments', [OrderedDict([('State', 'available'), ('VpcId', 'vpc-a01106c2')])]), ('InternetGatewayId', 'igw-c0a643a9'), ('Tags', [])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the Internet gateway for the specified VPC.'), ('id', 'ec2-describe-internet-gateways-1'), ('title', 'To describe the Internet gateway for a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeKeyPairs', OrderedDict([('input', OrderedDict([('KeyNames', ['my-key-pair'])])), ('output', OrderedDict([('KeyPairs', [OrderedDict([('KeyFingerprint', '1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f'), ('KeyName', 'my-key-pair')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example displays the fingerprint for the specified key.'), ('id', 'ec2-describe-key-pairs-1'), ('title', 'To display a key pair')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeMovingAddresses', OrderedDict([('output', OrderedDict([('MovingAddressStatuses', [OrderedDict([('MoveStatus', 'MovingToVpc'), ('PublicIp', '198.51.100.0')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes all of your moving Elastic IP addresses.'), ('id', 'ec2-describe-moving-addresses-1'), ('title', 'To describe your moving addresses')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNatGateways', OrderedDict([('input', OrderedDict([('Filter', [OrderedDict([('Name', 'vpc-id'), ('Values', ['vpc-1a2b3c4d'])])])])), ('output', OrderedDict([('NatGateways', [OrderedDict([('CreateTime', '2015-12-01T12:26:55.983Z'), ('NatGatewayAddresses', [OrderedDict([('AllocationId', 'eipalloc-89c620ec'), ('NetworkInterfaceId', 'eni-9dec76cd'), ('PrivateIp', '10.0.0.149'), ('PublicIp', '198.11.222.333')])]), ('NatGatewayId', 'nat-05dba92075d71c408'), ('State', 'available'), ('SubnetId', 'subnet-847e4dc2'), ('VpcId', 'vpc-1a2b3c4d')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the NAT gateway for the specified VPC.'), ('id', 'ec2-describe-nat-gateways-1'), ('title', 'To describe a NAT gateway')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNetworkAcls', OrderedDict([('input', OrderedDict([('NetworkAclIds', ['acl-5fb85d36'])])), ('output', OrderedDict([('NetworkAcls', [OrderedDict([('Associations', [OrderedDict([('NetworkAclAssociationId', 'aclassoc-66ea5f0b'), ('NetworkAclId', 'acl-9aeb5ef7'), ('SubnetId', 'subnet-65ea5f08')])]), ('Entries', [OrderedDict([('CidrBlock', '0.0.0.0/0'), ('Egress', True), ('Protocol', '-1'), ('RuleAction', 'deny'), ('RuleNumber', 32767)]), OrderedDict([('CidrBlock', '0.0.0.0/0'), ('Egress', False), ('Protocol', '-1'), ('RuleAction', 'deny'), ('RuleNumber', 32767)])]), ('IsDefault', False), ('NetworkAclId', 'acl-5fb85d36'), ('Tags', []), ('VpcId', 'vpc-a01106c2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified network ACL.'), ('id', 'ec2-'), ('title', 'To describe a network ACL')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'attachment'), ('NetworkInterfaceId', 'eni-686ea200')])), ('output', OrderedDict([('Attachment', OrderedDict([('AttachTime', '2015-05-21T20:02:20.000Z'), ('AttachmentId', 'eni-attach-43348162'), ('DeleteOnTermination', True), ('DeviceIndex', 0), ('InstanceId', 'i-1234567890abcdef0'), ('InstanceOwnerId', '123456789012'), ('Status', 'attached')])), ('NetworkInterfaceId', 'eni-686ea200')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the attachment attribute of the specified network interface.'), ('id', 'ec2-describe-network-interface-attribute-1'), ('title', 'To describe the attachment attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'description'), ('NetworkInterfaceId', 'eni-686ea200')])), ('output', OrderedDict([('Description', OrderedDict([('Value', 'My description')])), ('NetworkInterfaceId', 'eni-686ea200')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the description attribute of the specified network interface.'), ('id', 'ec2-describe-network-interface-attribute-2'), ('title', 'To describe the description attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'groupSet'), ('NetworkInterfaceId', 'eni-686ea200')])), ('output', OrderedDict([('Groups', [OrderedDict([('GroupId', 'sg-903004f8'), ('GroupName', 'my-security-group')])]), ('NetworkInterfaceId', 'eni-686ea200')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the groupSet attribute of the specified network interface.'), ('id', 'ec2-describe-network-interface-attribute-3'), ('title', 'To describe the groupSet attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'sourceDestCheck'), ('NetworkInterfaceId', 'eni-686ea200')])), ('output', OrderedDict([('NetworkInterfaceId', 'eni-686ea200'), ('SourceDestCheck', OrderedDict([('Value', True)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the sourceDestCheck attribute of the specified network interface.'), ('id', 'ec2-describe-network-interface-attribute-4'), ('title', 'To describe the sourceDestCheck attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeNetworkInterfaces', OrderedDict([('input', OrderedDict([('NetworkInterfaceIds', ['eni-e5aa89a3'])])), ('output', OrderedDict([('NetworkInterfaces', [OrderedDict([('Association', OrderedDict([('AssociationId', 'eipassoc-0fbb766a'), ('IpOwnerId', '123456789012'), ('PublicDnsName', 'ec2-203-0-113-12.compute-1.amazonaws.com'), ('PublicIp', '203.0.113.12')])), ('Attachment', OrderedDict([('AttachTime', '2013-11-30T23:36:42.000Z'), ('AttachmentId', 'eni-attach-66c4350a'), ('DeleteOnTermination', False), ('DeviceIndex', 1), ('InstanceId', 'i-1234567890abcdef0'), ('InstanceOwnerId', '123456789012'), ('Status', 'attached')])), ('AvailabilityZone', 'us-east-1d'), ('Description', 'my network interface'), ('Groups', [OrderedDict([('GroupId', 'sg-8637d3e3'), ('GroupName', 'default')])]), ('MacAddress', '02:2f:8f:b0:cf:75'), ('NetworkInterfaceId', 'eni-e5aa89a3'), ('OwnerId', '123456789012'), ('PrivateDnsName', 'ip-10-0-1-17.ec2.internal'), ('PrivateIpAddress', '10.0.1.17'), ('PrivateIpAddresses', [OrderedDict([('Association', OrderedDict([('AssociationId', 'eipassoc-0fbb766a'), ('IpOwnerId', '123456789012'), ('PublicDnsName', 'ec2-203-0-113-12.compute-1.amazonaws.com'), ('PublicIp', '203.0.113.12')])), ('Primary', True), ('PrivateDnsName', 'ip-10-0-1-17.ec2.internal'), ('PrivateIpAddress', '10.0.1.17')])]), ('RequesterManaged', False), ('SourceDestCheck', True), ('Status', 'in-use'), ('SubnetId', 'subnet-b61f49f0'), ('TagSet', []), ('VpcId', 'vpc-a01106c2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', ''), ('id', 'ec2-describe-network-interfaces-1'), ('title', 'To describe a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeRegions', OrderedDict([('output', OrderedDict([('Regions', [OrderedDict([('Endpoint', 'ec2.ap-south-1.amazonaws.com'), ('RegionName', 'ap-south-1')]), OrderedDict([('Endpoint', 'ec2.eu-west-1.amazonaws.com'), ('RegionName', 'eu-west-1')]), OrderedDict([('Endpoint', 'ec2.ap-southeast-1.amazonaws.com'), ('RegionName', 'ap-southeast-1')]), OrderedDict([('Endpoint', 'ec2.ap-southeast-2.amazonaws.com'), ('RegionName', 'ap-southeast-2')]), OrderedDict([('Endpoint', 'ec2.eu-central-1.amazonaws.com'), ('RegionName', 'eu-central-1')]), OrderedDict([('Endpoint', 'ec2.ap-northeast-2.amazonaws.com'), ('RegionName', 'ap-northeast-2')]), OrderedDict([('Endpoint', 'ec2.ap-northeast-1.amazonaws.com'), ('RegionName', 'ap-northeast-1')]), OrderedDict([('Endpoint', 'ec2.us-east-1.amazonaws.com'), ('RegionName', 'us-east-1')]), OrderedDict([('Endpoint', 'ec2.sa-east-1.amazonaws.com'), ('RegionName', 'sa-east-1')]), OrderedDict([('Endpoint', 'ec2.us-west-1.amazonaws.com'), ('RegionName', 'us-west-1')]), OrderedDict([('Endpoint', 'ec2.us-west-2.amazonaws.com'), ('RegionName', 'us-west-2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes all the regions that are available to you.'), ('id', 'ec2-describe-regions-1'), ('title', 'To describe your regions')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeRouteTables', OrderedDict([('input', OrderedDict([('RouteTableIds', ['rtb-1f382e7d'])])), ('output', OrderedDict([('RouteTables', [OrderedDict([('Associations', [OrderedDict([('Main', True), ('RouteTableAssociationId', 'rtbassoc-d8ccddba'), ('RouteTableId', 'rtb-1f382e7d')])]), ('PropagatingVgws', []), ('RouteTableId', 'rtb-1f382e7d'), ('Routes', [OrderedDict([('DestinationCidrBlock', '10.0.0.0/16'), ('GatewayId', 'local'), ('State', 'active')])]), ('Tags', []), ('VpcId', 'vpc-a01106c2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified route table.'), ('id', 'ec2-describe-route-tables-1'), ('title', 'To describe a route table')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScheduledInstanceAvailability', OrderedDict([('input', OrderedDict([('FirstSlotStartTimeRange', OrderedDict([('EarliestTime', '2016-01-31T00:00:00Z'), ('LatestTime', '2016-01-31T04:00:00Z')])), ('Recurrence', OrderedDict([('Frequency', 'Weekly'), ('Interval', 1), ('OccurrenceDays', [1])]))])), ('output', OrderedDict([('ScheduledInstanceAvailabilitySet', [OrderedDict([('AvailabilityZone', 'us-west-2b'), ('AvailableInstanceCount', 20), ('FirstSlotStartTime', '2016-01-31T00:00:00Z'), ('HourlyPrice', '0.095'), ('InstanceType', 'c4.large'), ('MaxTermDurationInDays', 366), ('MinTermDurationInDays', 366), ('NetworkPlatform', 'EC2-VPC'), ('Platform', 'Linux/UNIX'), ('PurchaseToken', 'eyJ2IjoiMSIsInMiOjEsImMiOi...'), ('Recurrence', OrderedDict([('Frequency', 'Weekly'), ('Interval', 1), ('OccurrenceDaySet', [1]), ('OccurrenceRelativeToEnd', False)])), ('SlotDurationInHours', 23), ('TotalScheduledInstanceHours', 1219)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes a schedule that occurs every week on Sunday, starting on the specified date. Note that the output contains a single schedule as an example.'), ('id', 'ec2-describe-scheduled-instance-availability-1'), ('title', 'To describe an available schedule')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeScheduledInstances', OrderedDict([('input', OrderedDict([('ScheduledInstanceIds', ['sci-1234-1234-1234-1234-123456789012'])])), ('output', OrderedDict([('ScheduledInstanceSet', [OrderedDict([('AvailabilityZone', 'us-west-2b'), ('CreateDate', '2016-01-25T21:43:38.612Z'), ('HourlyPrice', '0.095'), ('InstanceCount', 1), ('InstanceType', 'c4.large'), ('NetworkPlatform', 'EC2-VPC'), ('NextSlotStartTime', '2016-01-31T09:00:00Z'), ('Platform', 'Linux/UNIX'), ('Recurrence', OrderedDict([('Frequency', 'Weekly'), ('Interval', 1), ('OccurrenceDaySet', [1]), ('OccurrenceRelativeToEnd', False), ('OccurrenceUnit', '')])), ('ScheduledInstanceId', 'sci-1234-1234-1234-1234-123456789012'), ('SlotDurationInHours', 32), ('TermEndDate', '2017-01-31T09:00:00Z'), ('TermStartDate', '2016-01-31T09:00:00Z'), ('TotalScheduledInstanceHours', 1696)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified Scheduled Instance.'), ('id', 'ec2-describe-scheduled-instances-1'), ('title', 'To describe your Scheduled Instances')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSnapshotAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'createVolumePermission'), ('SnapshotId', 'snap-066877671789bd71b')])), ('output', OrderedDict([('CreateVolumePermissions', []), ('SnapshotId', 'snap-066877671789bd71b')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the ``createVolumePermission`` attribute on a snapshot with the snapshot ID of ``snap-066877671789bd71b``.'), ('id', 'to-describe-snapshot-attributes-1472503199736'), ('title', 'To describe snapshot attributes')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSnapshots', OrderedDict([('input', OrderedDict([('SnapshotIds', ['snap-1234567890abcdef0'])])), ('output', OrderedDict([('NextToken', ''), ('Snapshots', [OrderedDict([('Description', 'This is my snapshot.'), ('OwnerId', '012345678910'), ('Progress', '100%'), ('SnapshotId', 'snap-1234567890abcdef0'), ('StartTime', '2014-02-28T21:28:32.000Z'), ('State', 'completed'), ('VolumeId', 'vol-049df61146c4d7901'), ('VolumeSize', 8)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes a snapshot with the snapshot ID of ``snap-1234567890abcdef0``.'), ('id', 'to-describe-a-snapshot-1472503807850'), ('title', 'To describe a snapshot')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSnapshots', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'status'), ('Values', ['pending'])])]), ('OwnerIds', ['012345678910'])])), ('output', OrderedDict([('NextToken', ''), ('Snapshots', [OrderedDict([('Description', 'This is my copied snapshot.'), ('OwnerId', '012345678910'), ('Progress', '87%'), ('SnapshotId', 'snap-066877671789bd71b'), ('StartTime', '2014-02-28T21:37:27.000Z'), ('State', 'pending'), ('VolumeId', 'vol-1234567890abcdef0'), ('VolumeSize', 8)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes all snapshots owned by the ID 012345678910 that are in the ``pending`` status.'), ('id', 'to-describe-snapshots-using-filters-1472503929793'), ('title', 'To describe snapshots using filters')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSpotDatafeedSubscription', OrderedDict([('output', OrderedDict([('SpotDatafeedSubscription', OrderedDict([('Bucket', 'my-s3-bucket'), ('OwnerId', '123456789012'), ('Prefix', 'spotdata'), ('State', 'Active')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the Spot Instance datafeed subscription for your AWS account.'), ('id', 'ec2-describe-spot-datafeed-subscription-1'), ('title', 'To describe the datafeed for your AWS account')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSpotFleetInstances', OrderedDict([('input', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])), ('output', OrderedDict([('ActiveInstances', [OrderedDict([('InstanceId', 'i-1234567890abcdef0'), ('InstanceType', 'm3.medium'), ('SpotInstanceRequestId', 'sir-08b93456')])]), ('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists the Spot Instances associated with the specified Spot fleet.'), ('id', 'ec2-describe-spot-fleet-instances-1'), ('title', 'To describe the Spot Instances associated with a Spot fleet')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSpotFleetRequestHistory', OrderedDict([('input', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE'), ('StartTime', '2015-05-26T00:00:00Z')])), ('output', OrderedDict([('HistoryRecords', [OrderedDict([('EventInformation', OrderedDict([('EventSubType', 'submitted')])), ('EventType', 'fleetRequestChange'), ('Timestamp', '2015-05-26T23:17:20.697Z')]), OrderedDict([('EventInformation', OrderedDict([('EventSubType', 'active')])), ('EventType', 'fleetRequestChange'), ('Timestamp', '2015-05-26T23:17:20.873Z')]), OrderedDict([('EventInformation', OrderedDict([('EventSubType', 'launched'), ('InstanceId', 'i-1234567890abcdef0')])), ('EventType', 'instanceChange'), ('Timestamp', '2015-05-26T23:21:21.712Z')]), OrderedDict([('EventInformation', OrderedDict([('EventSubType', 'launched'), ('InstanceId', 'i-1234567890abcdef1')])), ('EventType', 'instanceChange'), ('Timestamp', '2015-05-26T23:21:21.816Z')])]), ('NextToken', 'CpHNsscimcV5oH7bSbub03CI2Qms5+ypNpNm+53MNlR0YcXAkp0xFlfKf91yVxSExmbtma3awYxMFzNA663ZskT0AHtJ6TCb2Z8bQC2EnZgyELbymtWPfpZ1ZbauVg+P+TfGlWxWWB/Vr5dk5d4LfdgA/DRAHUrYgxzrEXAMPLE='), ('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE'), ('StartTime', '2015-05-26T00:00:00Z')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example returns the history for the specified Spot fleet starting at the specified time.'), ('id', 'ec2-describe-spot-fleet-request-history-1'), ('title', 'To describe Spot fleet history')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSpotFleetRequests', OrderedDict([('input', OrderedDict([('SpotFleetRequestIds', ['sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE'])])), ('output', OrderedDict([('SpotFleetRequestConfigs', [OrderedDict([('SpotFleetRequestConfig', OrderedDict([('IamFleetRole', 'arn:aws:iam::123456789012:role/my-spot-fleet-role'), ('LaunchSpecifications', [OrderedDict([('EbsOptimized', False), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'cc2.8xlarge'), ('NetworkInterfaces', [OrderedDict([('AssociatePublicIpAddress', True), ('DeleteOnTermination', False), ('DeviceIndex', 0), ('SecondaryPrivateIpAddressCount', 0), ('SubnetId', 'subnet-a61dafcf')])])]), OrderedDict([('EbsOptimized', False), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'r3.8xlarge'), ('NetworkInterfaces', [OrderedDict([('AssociatePublicIpAddress', True), ('DeleteOnTermination', False), ('DeviceIndex', 0), ('SecondaryPrivateIpAddressCount', 0), ('SubnetId', 'subnet-a61dafcf')])])])]), ('SpotPrice', '0.05'), ('TargetCapacity', 20)])), ('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE'), ('SpotFleetRequestState', 'active')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified Spot fleet request.'), ('id', 'ec2-describe-spot-fleet-requests-1'), ('title', 'To describe a Spot fleet request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSpotInstanceRequests', OrderedDict([('input', OrderedDict([('SpotInstanceRequestIds', ['sir-08b93456'])])), ('output', OrderedDict([('SpotInstanceRequests', [OrderedDict([('CreateTime', '2014-04-30T18:14:55.000Z'), ('InstanceId', 'i-1234567890abcdef0'), ('LaunchSpecification', OrderedDict([('BlockDeviceMappings', [OrderedDict([('DeviceName', '/dev/sda1'), ('Ebs', OrderedDict([('DeleteOnTermination', True), ('VolumeSize', 8), ('VolumeType', 'standard')]))])]), ('EbsOptimized', False), ('ImageId', 'ami-7aba833f'), ('InstanceType', 'm1.small'), ('KeyName', 'my-key-pair'), ('SecurityGroups', [OrderedDict([('GroupId', 'sg-e38f24a7'), ('GroupName', 'my-security-group')])])])), ('LaunchedAvailabilityZone', 'us-west-1b'), ('ProductDescription', 'Linux/UNIX'), ('SpotInstanceRequestId', 'sir-08b93456'), ('SpotPrice', '0.010000'), ('State', 'active'), ('Status', OrderedDict([('Code', 'fulfilled'), ('Message', 'Your Spot request is fulfilled.'), ('UpdateTime', '2014-04-30T18:16:21.000Z')])), ('Type', 'one-time')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified Spot Instance request.'), ('id', 'ec2-describe-spot-instance-requests-1'), ('title', 'To describe a Spot Instance request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSpotPriceHistory', OrderedDict([('input', OrderedDict([('EndTime', '2014-01-06T08:09:10'), ('InstanceTypes', ['m1.xlarge']), ('ProductDescriptions', ['Linux/UNIX (Amazon VPC)']), ('StartTime', '2014-01-06T07:08:09')])), ('output', OrderedDict([('SpotPriceHistory', [OrderedDict([('AvailabilityZone', 'us-west-1a'), ('InstanceType', 'm1.xlarge'), ('ProductDescription', 'Linux/UNIX (Amazon VPC)'), ('SpotPrice', '0.080000'), ('Timestamp', '2014-01-06T04:32:53.000Z')]), OrderedDict([('AvailabilityZone', 'us-west-1c'), ('InstanceType', 'm1.xlarge'), ('ProductDescription', 'Linux/UNIX (Amazon VPC)'), ('SpotPrice', '0.080000'), ('Timestamp', '2014-01-05T11:28:26.000Z')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example returns the Spot Price history for m1.xlarge, Linux/UNIX (Amazon VPC) instances for a particular day in January.'), ('id', 'ec2-describe-spot-price-history-1'), ('title', 'To describe Spot price history for Linux/UNIX (Amazon VPC)')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSubnets', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'vpc-id'), ('Values', ['vpc-a01106c2'])])])])), ('output', OrderedDict([('Subnets', [OrderedDict([('AvailabilityZone', 'us-east-1c'), ('AvailableIpAddressCount', 251), ('CidrBlock', '10.0.1.0/24'), ('DefaultForAz', False), ('MapPublicIpOnLaunch', False), ('State', 'available'), ('SubnetId', 'subnet-9d4a7b6c'), ('VpcId', 'vpc-a01106c2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the subnets for the specified VPC.'), ('id', 'ec2-describe-subnets-1'), ('title', 'To describe the subnets for a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTags', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'resource-id'), ('Values', ['i-1234567890abcdef8'])])])])), ('output', OrderedDict([('Tags', [OrderedDict([('Key', 'Stack'), ('ResourceId', 'i-1234567890abcdef8'), ('ResourceType', 'instance'), ('Value', 'test')]), OrderedDict([('Key', 'Name'), ('ResourceId', 'i-1234567890abcdef8'), ('ResourceType', 'instance'), ('Value', 'Beta Server')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the tags for the specified instance.'), ('id', 'ec2-describe-tags-1'), ('title', 'To describe the tags for a single resource')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVolumeAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'autoEnableIO'), ('VolumeId', 'vol-049df61146c4d7901')])), ('output', OrderedDict([('AutoEnableIO', OrderedDict([('Value', False)])), ('VolumeId', 'vol-049df61146c4d7901')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the ``autoEnableIo`` attribute of the volume with the ID ``vol-049df61146c4d7901``.'), ('id', 'to-describe-a-volume-attribute-1472505773492'), ('title', 'To describe a volume attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVolumeStatus', OrderedDict([('input', OrderedDict([('VolumeIds', ['vol-1234567890abcdef0'])])), ('output', OrderedDict([('VolumeStatuses', [OrderedDict([('Actions', []), ('AvailabilityZone', 'us-east-1a'), ('Events', []), ('VolumeId', 'vol-1234567890abcdef0'), ('VolumeStatus', OrderedDict([('Details', [OrderedDict([('Name', 'io-enabled'), ('Status', 'passed')]), OrderedDict([('Name', 'io-performance'), ('Status', 'not-applicable')])]), ('Status', 'ok')]))])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the status for the volume ``vol-1234567890abcdef0``.'), ('id', 'to-describe-the-status-of-a-single-volume-1472507016193'), ('title', 'To describe the status of a single volume')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVolumeStatus', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'volume-status.status'), ('Values', ['impaired'])])])])), ('output', OrderedDict([('VolumeStatuses', [])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the status for all volumes that are impaired. In this example output, there are no impaired volumes.'), ('id', 'to-describe-the-status-of-impaired-volumes-1472507239821'), ('title', 'To describe the status of impaired volumes')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVolumes', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('NextToken', ''), ('Volumes', [OrderedDict([('Attachments', [OrderedDict([('AttachTime', '2013-12-18T22:35:00.000Z'), ('DeleteOnTermination', True), ('Device', '/dev/sda1'), ('InstanceId', 'i-1234567890abcdef0'), ('State', 'attached'), ('VolumeId', 'vol-049df61146c4d7901')])]), ('AvailabilityZone', 'us-east-1a'), ('CreateTime', '2013-12-18T22:35:00.084Z'), ('Size', 8), ('SnapshotId', 'snap-1234567890abcdef0'), ('State', 'in-use'), ('VolumeId', 'vol-049df61146c4d7901'), ('VolumeType', 'standard')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes all of your volumes in the default region.'), ('id', 'to-describe-all-volumes-1472506358883'), ('title', 'To describe all volumes')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVolumes', OrderedDict([('input', OrderedDict([('Filters', [OrderedDict([('Name', 'attachment.instance-id'), ('Values', ['i-1234567890abcdef0'])]), OrderedDict([('Name', 'attachment.delete-on-termination'), ('Values', ['true'])])])])), ('output', OrderedDict([('Volumes', [OrderedDict([('Attachments', [OrderedDict([('AttachTime', '2013-12-18T22:35:00.000Z'), ('DeleteOnTermination', True), ('Device', '/dev/sda1'), ('InstanceId', 'i-1234567890abcdef0'), ('State', 'attached'), ('VolumeId', 'vol-049df61146c4d7901')])]), ('AvailabilityZone', 'us-east-1a'), ('CreateTime', '2013-12-18T22:35:00.084Z'), ('Size', 8), ('SnapshotId', 'snap-1234567890abcdef0'), ('State', 'in-use'), ('VolumeId', 'vol-049df61146c4d7901'), ('VolumeType', 'standard')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes all volumes that are both attached to the instance with the ID i-1234567890abcdef0 and set to delete when the instance terminates.'), ('id', 'to-describe-volumes-that-are-attached-to-a-specific-instance-1472506613578'), ('title', 'To describe volumes that are attached to a specific instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVpcAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'enableDnsSupport'), ('VpcId', 'vpc-a01106c2')])), ('output', OrderedDict([('EnableDnsSupport', OrderedDict([('Value', True)])), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the enableDnsSupport attribute. This attribute indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.'), ('id', 'ec2-describe-vpc-attribute-1'), ('title', 'To describe the enableDnsSupport attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVpcAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'enableDnsHostnames'), ('VpcId', 'vpc-a01106c2')])), ('output', OrderedDict([('EnableDnsHostnames', OrderedDict([('Value', True)])), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the enableDnsHostnames attribute. This attribute indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.'), ('id', 'ec2-describe-vpc-attribute-2'), ('title', 'To describe the enableDnsHostnames attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVpcs', OrderedDict([('input', OrderedDict([('VpcIds', ['vpc-a01106c2'])])), ('output', OrderedDict([('Vpcs', [OrderedDict([('CidrBlock', '10.0.0.0/16'), ('DhcpOptionsId', 'dopt-7a8b9c2d'), ('InstanceTenancy', 'default'), ('IsDefault', False), ('State', 'available'), ('Tags', [OrderedDict([('Key', 'Name'), ('Value', 'MyVPC')])]), ('VpcId', 'vpc-a01106c2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified VPC.'), ('id', 'ec2-describe-vpcs-1'), ('title', 'To describe a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachInternetGateway', OrderedDict([('input', OrderedDict([('InternetGatewayId', 'igw-c0a643a9'), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the specified Internet gateway from the specified VPC.'), ('id', 'ec2-detach-internet-gateway-1'), ('title', 'To detach an Internet gateway from a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachNetworkInterface', OrderedDict([('input', OrderedDict([('AttachmentId', 'eni-attach-66c4350a')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the specified network interface from its attached instance.'), ('id', 'ec2-detach-network-interface-1'), ('title', 'To detach a network interface from an instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachVolume', OrderedDict([('input', OrderedDict([('VolumeId', 'vol-1234567890abcdef0')])), ('output', OrderedDict([('AttachTime', '2014-02-27T19:23:06.000Z'), ('Device', '/dev/sdb'), ('InstanceId', 'i-1234567890abcdef0'), ('State', 'detaching'), ('VolumeId', 'vol-049df61146c4d7901')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the volume (``vol-049df61146c4d7901``) from the instance it is attached to.'), ('id', 'to-detach-a-volume-from-an-instance-1472507977694'), ('title', 'To detach a volume from an instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisableVgwRoutePropagation', OrderedDict([('input', OrderedDict([('GatewayId', 'vgw-9a4cacf3'), ('RouteTableId', 'rtb-22574640')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disables the specified virtual private gateway from propagating static routes to the specified route table.'), ('id', 'ec2-disable-vgw-route-propagation-1'), ('title', 'To disable route propagation')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisassociateAddress', OrderedDict([('input', OrderedDict([('AssociationId', 'eipassoc-2bebb745')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disassociates an Elastic IP address from an instance in a VPC.'), ('id', 'ec2-disassociate-address-1'), ('title', 'To disassociate an Elastic IP address in EC2-VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisassociateAddress', OrderedDict([('input', OrderedDict([('PublicIp', '198.51.100.0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disassociates an Elastic IP address from an instance in EC2-Classic.'), ('id', 'ec2-disassociate-address-2'), ('title', 'To disassociate an Elastic IP addresses in EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisassociateRouteTable', OrderedDict([('input', OrderedDict([('AssociationId', 'rtbassoc-781d0d1a')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example disassociates the specified route table from its associated subnet.'), ('id', 'ec2-disassociate-route-table-1'), ('title', 'To disassociate a route table')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnableVgwRoutePropagation', OrderedDict([('input', OrderedDict([('GatewayId', 'vgw-9a4cacf3'), ('RouteTableId', 'rtb-22574640')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables the specified virtual private gateway to propagate static routes to the specified route table.'), ('id', 'ec2-enable-vgw-route-propagation-1'), ('title', 'To enable route propagation')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnableVolumeIO', OrderedDict([('input', OrderedDict([('VolumeId', 'vol-1234567890abcdef0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables I/O on volume ``vol-1234567890abcdef0``.'), ('id', 'to-enable-io-for-a-volume-1472508114867'), ('title', 'To enable I/O for a volume')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Attachment', OrderedDict([('AttachmentId', 'eni-attach-43348162'), ('DeleteOnTermination', False)])), ('NetworkInterfaceId', 'eni-686ea200')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies the attachment attribute of the specified network interface.'), ('id', 'ec2-modify-network-interface-attribute-1'), ('title', 'To modify the attachment attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Description', OrderedDict([('Value', 'My description')])), ('NetworkInterfaceId', 'eni-686ea200')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies the description attribute of the specified network interface.'), ('id', 'ec2-modify-network-interface-attribute-2'), ('title', 'To modify the description attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('Groups', ['sg-903004f8', 'sg-1a2b3c4d']), ('NetworkInterfaceId', 'eni-686ea200')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example command modifies the groupSet attribute of the specified network interface.'), ('id', 'ec2-modify-network-interface-attribute-3'), ('title', 'To modify the groupSet attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyNetworkInterfaceAttribute', OrderedDict([('input', OrderedDict([('NetworkInterfaceId', 'eni-686ea200'), ('SourceDestCheck', OrderedDict([('Value', False)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example command modifies the sourceDestCheck attribute of the specified network interface.'), ('id', 'ec2-modify-network-interface-attribute-4'), ('title', 'To modify the sourceDestCheck attribute of a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifySnapshotAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'createVolumePermission'), ('OperationType', 'remove'), ('SnapshotId', 'snap-1234567890abcdef0'), ('UserIds', ['123456789012'])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies snapshot ``snap-1234567890abcdef0`` to remove the create volume permission for a user with the account ID ``123456789012``. If the command succeeds, no output is returned.'), ('id', 'to-modify-a-snapshot-attribute-1472508385907'), ('title', 'To modify a snapshot attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifySnapshotAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'createVolumePermission'), ('GroupNames', ['all']), ('OperationType', 'add'), ('SnapshotId', 'snap-1234567890abcdef0')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example makes the snapshot ``snap-1234567890abcdef0`` public.'), ('id', 'to-make-a-snapshot-public-1472508470529'), ('title', 'To make a snapshot public')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifySpotFleetRequest', OrderedDict([('input', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE'), ('TargetCapacity', 20)])), ('output', OrderedDict([('Return', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example increases the target capacity of the specified Spot fleet request.'), ('id', 'ec2-modify-spot-fleet-request-1'), ('title', 'To increase the target capacity of a Spot fleet request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifySpotFleetRequest', OrderedDict([('input', OrderedDict([('ExcessCapacityTerminationPolicy', 'NoTermination '), ('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE'), ('TargetCapacity', 10)])), ('output', OrderedDict([('Return', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example decreases the target capacity of the specified Spot fleet request without terminating any Spot Instances as a result.'), ('id', 'ec2-modify-spot-fleet-request-2'), ('title', 'To decrease the target capacity of a Spot fleet request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifySubnetAttribute', OrderedDict([('input', OrderedDict([('MapPublicIpOnLaunch', OrderedDict([('Value', True)])), ('SubnetId', 'subnet-1a2b3c4d')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies the specified subnet so that all instances launched into this subnet are assigned a public IP address.'), ('id', 'ec2-modify-subnet-attribute-1'), ('title', "To change a subnet's public IP addressing behavior")]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyVolumeAttribute', OrderedDict([('input', OrderedDict([('AutoEnableIO', OrderedDict([('Value', True)])), ('DryRun', True), ('VolumeId', 'vol-1234567890abcdef0')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example sets the ``autoEnableIo`` attribute of the volume with the ID ``vol-1234567890abcdef0`` to ``true``. If the command succeeds, no output is returned.'), ('id', 'to-modify-a-volume-attribute-1472508596749'), ('title', 'To modify a volume attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyVpcAttribute', OrderedDict([('input', OrderedDict([('EnableDnsSupport', OrderedDict([('Value', False)])), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies the enableDnsSupport attribute. This attribute indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for instances in the VPC to their corresponding IP addresses; otherwise, it does not.'), ('id', 'ec2-modify-vpc-attribute-1'), ('title', 'To modify the enableDnsSupport attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyVpcAttribute', OrderedDict([('input', OrderedDict([('EnableDnsHostnames', OrderedDict([('Value', False)])), ('VpcId', 'vpc-a01106c2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies the enableDnsHostnames attribute. This attribute indicates whether instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.'), ('id', 'ec2-modify-vpc-attribute-2'), ('title', 'To modify the enableDnsHostnames attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('MoveAddressToVpc', OrderedDict([('input', OrderedDict([('PublicIp', '54.123.4.56')])), ('output', OrderedDict([('Status', 'MoveInProgress')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example moves the specified Elastic IP address to the EC2-VPC platform.'), ('id', 'ec2-move-address-to-vpc-1'), ('title', 'To move an address to EC2-VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PurchaseScheduledInstances', OrderedDict([('input', OrderedDict([('PurchaseRequests', [OrderedDict([('InstanceCount', 1), ('PurchaseToken', 'eyJ2IjoiMSIsInMiOjEsImMiOi...')])])])), ('output', OrderedDict([('ScheduledInstanceSet', [OrderedDict([('AvailabilityZone', 'us-west-2b'), ('CreateDate', '2016-01-25T21:43:38.612Z'), ('HourlyPrice', '0.095'), ('InstanceCount', 1), ('InstanceType', 'c4.large'), ('NetworkPlatform', 'EC2-VPC'), ('NextSlotStartTime', '2016-01-31T09:00:00Z'), ('Platform', 'Linux/UNIX'), ('Recurrence', OrderedDict([('Frequency', 'Weekly'), ('Interval', 1), ('OccurrenceDaySet', [1]), ('OccurrenceRelativeToEnd', False), ('OccurrenceUnit', '')])), ('ScheduledInstanceId', 'sci-1234-1234-1234-1234-123456789012'), ('SlotDurationInHours', 32), ('TermEndDate', '2017-01-31T09:00:00Z'), ('TermStartDate', '2016-01-31T09:00:00Z'), ('TotalScheduledInstanceHours', 1696)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example purchases a Scheduled Instance.'), ('id', 'ec2-purchase-scheduled-instances-1'), ('title', 'To purchase a Scheduled Instance')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReleaseAddress', OrderedDict([('input', OrderedDict([('AllocationId', 'eipalloc-64d5890a')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example releases an Elastic IP address for use with instances in a VPC.'), ('id', 'ec2-release-address-1'), ('title', 'To release an Elastic IP address for EC2-VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReleaseAddress', OrderedDict([('input', OrderedDict([('PublicIp', '198.51.100.0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example releases an Elastic IP address for use with instances in EC2-Classic.'), ('id', 'ec2-release-address-2'), ('title', 'To release an Elastic IP addresses for EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReplaceNetworkAclAssociation', OrderedDict([('input', OrderedDict([('AssociationId', 'aclassoc-e5b95c8c'), ('NetworkAclId', 'acl-5fb85d36')])), ('output', OrderedDict([('NewAssociationId', 'aclassoc-3999875b')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified network ACL with the subnet for the specified network ACL association.'), ('id', 'ec2-replace-network-acl-association-1'), ('title', 'To replace the network ACL associated with a subnet')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReplaceNetworkAclEntry', OrderedDict([('input', OrderedDict([('CidrBlock', '203.0.113.12/24'), ('Egress', False), ('NetworkAclId', 'acl-5fb85d36'), ('PortRange', OrderedDict([('From', 53), ('To', 53)])), ('Protocol', 'udp'), ('RuleAction', 'allow'), ('RuleNumber', 100)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example replaces an entry for the specified network ACL. The new rule 100 allows ingress traffic from 203.0.113.12/24 on UDP port 53 (DNS) into any associated subnet.'), ('id', 'ec2-replace-network-acl-entry-1'), ('title', 'To replace a network ACL entry')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReplaceRoute', OrderedDict([('input', OrderedDict([('DestinationCidrBlock', '10.0.0.0/16'), ('GatewayId', 'vgw-9a4cacf3'), ('RouteTableId', 'rtb-22574640')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example replaces the specified route in the specified table table. The new route matches the specified CIDR and sends the traffic to the specified virtual private gateway.'), ('id', 'ec2-replace-route-1'), ('title', 'To replace a route')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReplaceRouteTableAssociation', OrderedDict([('input', OrderedDict([('AssociationId', 'rtbassoc-781d0d1a'), ('RouteTableId', 'rtb-22574640')])), ('output', OrderedDict([('NewAssociationId', 'rtbassoc-3a1f0f58')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified route table with the subnet for the specified route table association.'), ('id', 'ec2-replace-route-table-association-1'), ('title', 'To replace the route table associated with a subnet')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestSpotFleet', OrderedDict([('input', OrderedDict([('SpotFleetRequestConfig', OrderedDict([('IamFleetRole', 'arn:aws:iam::123456789012:role/my-spot-fleet-role'), ('LaunchSpecifications', [OrderedDict([('IamInstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::123456789012:instance-profile/my-iam-role')])), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'm3.medium'), ('KeyName', 'my-key-pair'), ('SecurityGroups', [OrderedDict([('GroupId', 'sg-1a2b3c4d')])]), ('SubnetId', 'subnet-1a2b3c4d, subnet-3c4d5e6f')])]), ('SpotPrice', '0.04'), ('TargetCapacity', 2)]))])), ('output', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This example creates a Spot fleet request with two launch specifications that differ only by subnet. The Spot fleet launches the instances in the specified subnet with the lowest price. If the instances are launched in a default VPC, they receive a public IP address by default. If the instances are launched in a nondefault VPC, they do not receive a public IP address by default. Note that you can't specify different subnets from the same Availability Zone in a Spot fleet request."), ('id', 'ec2-request-spot-fleet-1'), ('title', 'To request a Spot fleet in the subnet with the lowest price')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestSpotFleet', OrderedDict([('input', OrderedDict([('SpotFleetRequestConfig', OrderedDict([('IamFleetRole', 'arn:aws:iam::123456789012:role/my-spot-fleet-role'), ('LaunchSpecifications', [OrderedDict([('IamInstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::123456789012:instance-profile/my-iam-role')])), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'm3.medium'), ('KeyName', 'my-key-pair'), ('Placement', OrderedDict([('AvailabilityZone', 'us-west-2a, us-west-2b')])), ('SecurityGroups', [OrderedDict([('GroupId', 'sg-1a2b3c4d')])])])]), ('SpotPrice', '0.04'), ('TargetCapacity', 2)]))])), ('output', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a Spot fleet request with two launch specifications that differ only by Availability Zone. The Spot fleet launches the instances in the specified Availability Zone with the lowest price. If your account supports EC2-VPC only, Amazon EC2 launches the Spot instances in the default subnet of the Availability Zone. If your account supports EC2-Classic, Amazon EC2 launches the instances in EC2-Classic in the Availability Zone.'), ('id', 'ec2-request-spot-fleet-2'), ('title', 'To request a Spot fleet in the Availability Zone with the lowest price')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestSpotFleet', OrderedDict([('input', OrderedDict([('SpotFleetRequestConfig', OrderedDict([('IamFleetRole', 'arn:aws:iam::123456789012:role/my-spot-fleet-role'), ('LaunchSpecifications', [OrderedDict([('IamInstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::880185128111:instance-profile/my-iam-role')])), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'm3.medium'), ('KeyName', 'my-key-pair'), ('NetworkInterfaces', [OrderedDict([('AssociatePublicIpAddress', True), ('DeviceIndex', 0), ('Groups', ['sg-1a2b3c4d']), ('SubnetId', 'subnet-1a2b3c4d')])])])]), ('SpotPrice', '0.04'), ('TargetCapacity', 2)]))])), ('output', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example assigns public addresses to instances launched in a nondefault VPC. Note that when you specify a network interface, you must include the subnet ID and security group ID using the network interface.'), ('id', 'ec2-request-spot-fleet-3'), ('title', 'To launch Spot instances in a subnet and assign them public IP addresses')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestSpotFleet', OrderedDict([('input', OrderedDict([('SpotFleetRequestConfig', OrderedDict([('AllocationStrategy', 'diversified'), ('IamFleetRole', 'arn:aws:iam::123456789012:role/my-spot-fleet-role'), ('LaunchSpecifications', [OrderedDict([('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'c4.2xlarge'), ('SubnetId', 'subnet-1a2b3c4d')]), OrderedDict([('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'm3.2xlarge'), ('SubnetId', 'subnet-1a2b3c4d')]), OrderedDict([('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'r3.2xlarge'), ('SubnetId', 'subnet-1a2b3c4d')])]), ('SpotPrice', '0.70'), ('TargetCapacity', 30)]))])), ('output', OrderedDict([('SpotFleetRequestId', 'sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a Spot fleet request that launches 30 instances using the diversified allocation strategy. The launch specifications differ by instance type. The Spot fleet distributes the instances across the launch specifications such that there are 10 instances of each type.'), ('id', 'ec2-request-spot-fleet-4'), ('title', 'To request a Spot fleet using the diversified allocation strategy')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestSpotInstances', OrderedDict([('input', OrderedDict([('InstanceCount', 5), ('LaunchSpecification', OrderedDict([('IamInstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::123456789012:instance-profile/my-iam-role')])), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'm3.medium'), ('KeyName', 'my-key-pair'), ('Placement', OrderedDict([('AvailabilityZone', 'us-west-2a')])), ('SecurityGroupIds', ['sg-1a2b3c4d'])])), ('SpotPrice', '0.03'), ('Type', 'one-time')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a one-time Spot Instance request for five instances in the specified Availability Zone. If your account supports EC2-VPC only, Amazon EC2 launches the instances in the default subnet of the specified Availability Zone. If your account supports EC2-Classic, Amazon EC2 launches the instances in EC2-Classic in the specified Availability Zone.'), ('id', 'ec2-request-spot-instances-1'), ('title', 'To create a one-time Spot Instance request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestSpotInstances', OrderedDict([('input', OrderedDict([('InstanceCount', 5), ('LaunchSpecification', OrderedDict([('IamInstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::123456789012:instance-profile/my-iam-role')])), ('ImageId', 'ami-1a2b3c4d'), ('InstanceType', 'm3.medium'), ('SecurityGroupIds', ['sg-1a2b3c4d']), ('SubnetId', 'subnet-1a2b3c4d')])), ('SpotPrice', '0.050'), ('Type', 'one-time')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example command creates a one-time Spot Instance request for five instances in the specified subnet. Amazon EC2 launches the instances in the specified subnet. If the VPC is a nondefault VPC, the instances do not receive a public IP address by default.'), ('id', 'ec2-request-spot-instances-2'), ('title', 'To create a one-time Spot Instance request')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ResetSnapshotAttribute', OrderedDict([('input', OrderedDict([('Attribute', 'createVolumePermission'), ('SnapshotId', 'snap-1234567890abcdef0')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example resets the create volume permissions for snapshot ``snap-1234567890abcdef0``. If the command succeeds, no output is returned.'), ('id', 'to-reset-a-snapshot-attribute-1472508825735'), ('title', 'To reset a snapshot attribute')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RestoreAddressToClassic', OrderedDict([('input', OrderedDict([('PublicIp', '198.51.100.0')])), ('output', OrderedDict([('PublicIp', '198.51.100.0'), ('Status', 'MoveInProgress')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example restores the specified Elastic IP address to the EC2-Classic platform.'), ('id', 'ec2-restore-address-to-classic-1'), ('title', 'To restore an address to EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RunScheduledInstances', OrderedDict([('input', OrderedDict([('InstanceCount', 1), ('LaunchSpecification', OrderedDict([('IamInstanceProfile', OrderedDict([('Name', 'my-iam-role')])), ('ImageId', 'ami-12345678'), ('InstanceType', 'c4.large'), ('KeyName', 'my-key-pair'), ('NetworkInterfaces', [OrderedDict([('AssociatePublicIpAddress', True), ('DeviceIndex', 0), ('Groups', ['sg-12345678']), ('SubnetId', 'subnet-12345678')])])])), ('ScheduledInstanceId', 'sci-1234-1234-1234-1234-123456789012')])), ('output', OrderedDict([('InstanceIdSet', ['i-1234567890abcdef0'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example launches the specified Scheduled Instance in a VPC.'), ('id', 'ec2-run-scheduled-instances-1'), ('title', 'To launch a Scheduled Instance in a VPC')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RunScheduledInstances', OrderedDict([('input', OrderedDict([('InstanceCount', 1), ('LaunchSpecification', OrderedDict([('IamInstanceProfile', OrderedDict([('Name', 'my-iam-role')])), ('ImageId', 'ami-12345678'), ('InstanceType', 'c4.large'), ('KeyName', 'my-key-pair'), ('Placement', OrderedDict([('AvailabilityZone', 'us-west-2b')])), ('SecurityGroupIds', ['sg-12345678'])])), ('ScheduledInstanceId', 'sci-1234-1234-1234-1234-123456789012')])), ('output', OrderedDict([('InstanceIdSet', ['i-1234567890abcdef0'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example launches the specified Scheduled Instance in EC2-Classic.'), ('id', 'ec2-run-scheduled-instances-2'), ('title', 'To launch a Scheduled Instance in EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UnassignPrivateIpAddresses', OrderedDict([('input', OrderedDict([('NetworkInterfaceId', 'eni-e5aa89a3'), ('PrivateIpAddresses', ['10.0.0.82'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example unassigns the specified private IP address from the specified network interface.'), ('id', 'ec2-unassign-private-ip-addresses-1'), ('title', 'To unassign a secondary private IP address from a network interface')]), <botocore.model.ServiceModel object at 0x7f8a03b92fd0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('BatchDeleteImage', OrderedDict([('input', OrderedDict([('imageIds', [OrderedDict([('imageTag', 'precise')])]), ('repositoryName', 'ubuntu')])), ('output', OrderedDict([('failures', []), ('imageIds', [OrderedDict([('imageDigest', 'sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f'), ('imageTag', 'precise')])])])), ('comments', OrderedDict()), ('description', 'This example deletes images with the tags precise and trusty in a repository called ubuntu in the default registry for an account.'), ('id', 'batchdeleteimages-example-1470860541707'), ('title', 'To delete multiple images')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('BatchGetImage', OrderedDict([('input', OrderedDict([('imageIds', [OrderedDict([('imageTag', 'precise')])]), ('repositoryName', 'ubuntu')])), ('output', OrderedDict([('failures', []), ('images', [OrderedDict([('imageId', OrderedDict([('imageDigest', 'sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a'), ('imageTag', 'precise')])), ('imageManifest', '{\n "schemaVersion": 1,\n "name": "ubuntu",\n "tag": "precise",\n...'), ('registryId', '244698725403'), ('repositoryName', 'ubuntu')])])])), ('comments', OrderedDict([('output', OrderedDict([('imageManifest', 'In this example, the imageManifest in the output JSON has been truncated.')]))])), ('description', 'This example obtains information for an image with a specified image digest ID from the repository named ubuntu in the current account.'), ('id', 'batchgetimage-example-1470862771437'), ('title', 'To obtain multiple images in a single request')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRepository', OrderedDict([('input', OrderedDict([('repositoryName', 'project-a/nginx-web-app')])), ('output', OrderedDict([('repository', OrderedDict([('registryId', '012345678901'), ('repositoryArn', 'arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app'), ('repositoryName', 'project-a/nginx-web-app')]))])), ('comments', OrderedDict([('output', OrderedDict([('imageManifest', 'In this example, the imageManifest in the output JSON has been truncated.')]))])), ('description', 'This example creates a repository called nginx-web-app inside the project-a namespace in the default registry for an account.'), ('id', 'createrepository-example-1470863688724'), ('title', 'To create a new repository')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRepository', OrderedDict([('input', OrderedDict([('force', True), ('repositoryName', 'ubuntu')])), ('output', OrderedDict([('repository', OrderedDict([('registryId', '012345678901'), ('repositoryArn', 'arn:aws:ecr:us-west-2:012345678901:repository/ubuntu'), ('repositoryName', 'ubuntu')]))])), ('comments', OrderedDict([('output', OrderedDict([('imageManifest', 'In this example, the imageManifest in the output JSON has been truncated.')]))])), ('description', 'This example force deletes a repository named ubuntu in the default registry for an account. The force parameter is required if the repository contains images.'), ('id', 'deleterepository-example-1470863805703'), ('title', 'To force delete a repository')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRepositoryPolicy', OrderedDict([('input', OrderedDict([('repositoryName', 'ubuntu')])), ('output', OrderedDict([('policyText', '{ ... }'), ('registryId', '012345678901'), ('repositoryName', 'ubuntu')])), ('comments', OrderedDict()), ('description', 'This example deletes the policy associated with the repository named ubuntu in the current account.'), ('id', 'deleterepositorypolicy-example-1470866943748'), ('title', 'To delete the policy associated with a repository')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeRepositories', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('repositories', [OrderedDict([('registryId', '012345678910'), ('repositoryArn', 'arn:aws:ecr:us-west-2:012345678910:repository/ubuntu'), ('repositoryName', 'ubuntu')]), OrderedDict([('registryId', '012345678910'), ('repositoryArn', 'arn:aws:ecr:us-west-2:012345678910:repository/test'), ('repositoryName', 'test')])])])), ('comments', OrderedDict([('output', OrderedDict())])), ('description', 'The following example obtains a list and description of all repositories in the default registry to which the current user has access.'), ('id', 'describe-repositories-1470856017467'), ('title', 'To describe all repositories in the current account')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetAuthorizationToken', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('authorizationData', [OrderedDict([('authorizationToken', 'QVdTOkN...'), ('expiresAt', '1470951892.432'), ('proxyEndpoint', 'https://012345678901.dkr.ecr.us-west-2.amazonaws.com')])])])), ('comments', OrderedDict()), ('description', 'This example gets an authorization token for your default registry.'), ('id', 'getauthorizationtoken-example-1470867047084'), ('title', 'To obtain an authorization token')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRepositoryPolicy', OrderedDict([('input', OrderedDict([('repositoryName', 'ubuntu')])), ('output', OrderedDict([('policyText', '{\n  "Version" : "2008-10-17",\n  "Statement" : [ {\n    "Sid" : "new statement",\n    "Effect" : "Allow",\n    "Principal" : {\n     "AWS" : "arn:aws:iam::012345678901:role/CodeDeployDemo"\n    },\n"Action" : [ "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability" ]\n } ]\n}'), ('registryId', '012345678901'), ('repositoryName', 'ubuntu')])), ('comments', OrderedDict()), ('description', 'This example obtains the repository policy for the repository named ubuntu.'), ('id', 'getrepositorypolicy-example-1470867669211'), ('title', 'To get the current policy for a repository')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListImages', OrderedDict([('input', OrderedDict([('repositoryName', 'ubuntu')])), ('output', OrderedDict([('imageIds', [OrderedDict([('imageDigest', 'sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a'), ('imageTag', 'precise')])])])), ('comments', OrderedDict()), ('description', 'This example lists all of the images in the repository named ubuntu in the default registry in the current account. '), ('id', 'listimages-example-1470868161594'), ('title', 'To list all images in a repository')]), <botocore.model.ServiceModel object at 0x7f89fa2fa748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateCluster', OrderedDict([('input', OrderedDict([('clusterName', 'my_cluster')])), ('output', OrderedDict([('cluster', OrderedDict([('activeServicesCount', 0), ('clusterArn', 'arn:aws:ecs:us-east-1:012345678910:cluster/my_cluster'), ('clusterName', 'my_cluster'), ('pendingTasksCount', 0), ('registeredContainerInstancesCount', 0), ('runningTasksCount', 0), ('status', 'ACTIVE')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a cluster in your default region.'), ('id', 'to-create-a-new-cluster-1472514079365'), ('title', 'To create a new cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateService', OrderedDict([('input', OrderedDict([('desiredCount', 10), ('serviceName', 'ecs-simple-service'), ('taskDefinition', 'hello_world')])), ('output', OrderedDict([('service', OrderedDict([('clusterArn', 'arn:aws:ecs:us-east-1:012345678910:cluster/default'), ('createdAt', '2016-08-29T16:13:47.298Z'), ('deploymentConfiguration', OrderedDict([('maximumPercent', 200), ('minimumHealthyPercent', 100)])), ('deployments', [OrderedDict([('createdAt', '2016-08-29T16:13:47.298Z'), ('desiredCount', 10), ('id', 'ecs-svc/9223370564342348388'), ('pendingCount', 0), ('runningCount', 0), ('status', 'PRIMARY'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6'), ('updatedAt', '2016-08-29T16:13:47.298Z')]), OrderedDict([('createdAt', '2016-08-29T15:52:44.481Z'), ('desiredCount', 0), ('id', 'ecs-svc/9223370564343611322'), ('pendingCount', 0), ('runningCount', 0), ('status', 'ACTIVE'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6'), ('updatedAt', '2016-08-29T16:11:38.941Z')])]), ('desiredCount', 10), ('events', []), ('loadBalancers', []), ('pendingCount', 0), ('runningCount', 0), ('serviceArn', 'arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service'), ('serviceName', 'ecs-simple-service'), ('status', 'ACTIVE'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a service in your default region called ``ecs-simple-service``. The service uses the ``hello_world`` task definition and it maintains 10 copies of that task.'), ('id', 'to-create-a-new-service-1472512584282'), ('title', 'To create a new service')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateService', OrderedDict([('input', OrderedDict([('desiredCount', 10), ('loadBalancers', [OrderedDict([('containerName', 'simple-app'), ('containerPort', 80), ('loadBalancerName', 'EC2Contai-EcsElast-15DCDAURT3ZO2')])]), ('role', 'ecsServiceRole'), ('serviceName', 'ecs-simple-service-elb'), ('taskDefinition', 'console-sample-app-static')])), ('output', OrderedDict([('service', OrderedDict([('clusterArn', 'arn:aws:ecs:us-east-1:012345678910:cluster/default'), ('createdAt', '2016-08-29T16:02:54.884Z'), ('deploymentConfiguration', OrderedDict([('maximumPercent', 200), ('minimumHealthyPercent', 100)])), ('deployments', [OrderedDict([('createdAt', '2016-08-29T16:02:54.884Z'), ('desiredCount', 10), ('id', 'ecs-svc/9223370564343000923'), ('pendingCount', 0), ('runningCount', 0), ('status', 'PRIMARY'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/console-sample-app-static:6'), ('updatedAt', '2016-08-29T16:02:54.884Z')])]), ('desiredCount', 10), ('events', []), ('loadBalancers', [OrderedDict([('containerName', 'simple-app'), ('containerPort', 80), ('loadBalancerName', 'EC2Contai-EcsElast-15DCDAURT3ZO2')])]), ('pendingCount', 0), ('roleArn', 'arn:aws:iam::012345678910:role/ecsServiceRole'), ('runningCount', 0), ('serviceArn', 'arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service-elb'), ('serviceName', 'ecs-simple-service-elb'), ('status', 'ACTIVE'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/console-sample-app-static:6')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a service in your default region called ``ecs-simple-service-elb``. The service uses the ``ecs-demo`` task definition and it maintains 10 copies of that task. You must reference an existing load balancer in the same region by its name.'), ('id', 'to-create-a-new-service-behind-a-load-balancer-1472512484823'), ('title', 'To create a new service behind a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteCluster', OrderedDict([('input', OrderedDict([('cluster', 'my_cluster')])), ('output', OrderedDict([('cluster', OrderedDict([('activeServicesCount', 0), ('clusterArn', 'arn:aws:ecs:us-east-1:012345678910:cluster/my_cluster'), ('clusterName', 'my_cluster'), ('pendingTasksCount', 0), ('registeredContainerInstancesCount', 0), ('runningTasksCount', 0), ('status', 'INACTIVE')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes an empty cluster in your default region.'), ('id', 'to-delete-an-empty-cluster-1472512705352'), ('title', 'To delete an empty cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteService', OrderedDict([('input', OrderedDict([('service', 'my-http-service')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the my-http-service service. The service must have a desired count and running count of 0 before you can delete it.'), ('id', 'e8183e38-f86e-4390-b811-f74f30a6007d'), ('title', 'To delete a service')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeregisterContainerInstance', OrderedDict([('input', OrderedDict([('cluster', 'default'), ('containerInstance', 'container_instance_UUID'), ('force', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deregisters a container instance from the specified cluster in your default region. If there are still tasks running on the container instance, you must either stop those tasks before deregistering, or use the force option.'), ('id', 'bf624927-cf64-4f4b-8b7e-c024a4e682f6'), ('title', 'To deregister a container instance from a cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeClusters', OrderedDict([('input', OrderedDict([('clusters', ['default'])])), ('output', OrderedDict([('clusters', [OrderedDict([('clusterArn', 'arn:aws:ecs:us-east-1:aws_account_id:cluster/default'), ('clusterName', 'default'), ('status', 'ACTIVE')])]), ('failures', [])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example provides a description of the specified cluster in your default region.'), ('id', 'ba88d100-9672-4231-80da-a4bd210bf728'), ('title', 'To describe a cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeContainerInstances', OrderedDict([('input', OrderedDict([('cluster', 'default'), ('containerInstances', ['f2756532-8f13-4d53-87c9-aed50dc94cd7'])])), ('output', OrderedDict([('containerInstances', [OrderedDict([('agentConnected', True), ('containerInstanceArn', 'arn:aws:ecs:us-east-1:012345678910:container-instance/f2756532-8f13-4d53-87c9-aed50dc94cd7'), ('ec2InstanceId', 'i-807f3249'), ('pendingTasksCount', 0), ('registeredResources', [OrderedDict([('name', 'CPU'), ('type', 'INTEGER'), ('doubleValue', 0.0), ('integerValue', 2048), ('longValue', 0)]), OrderedDict([('name', 'MEMORY'), ('type', 'INTEGER'), ('doubleValue', 0.0), ('integerValue', 3768), ('longValue', 0)]), OrderedDict([('name', 'PORTS'), ('type', 'STRINGSET'), ('doubleValue', 0.0), ('integerValue', 0), ('longValue', 0), ('stringSetValue', ['2376', '22', '51678', '2375'])])]), ('remainingResources', [OrderedDict([('name', 'CPU'), ('type', 'INTEGER'), ('doubleValue', 0.0), ('integerValue', 1948), ('longValue', 0)]), OrderedDict([('name', 'MEMORY'), ('type', 'INTEGER'), ('doubleValue', 0.0), ('integerValue', 3668), ('longValue', 0)]), OrderedDict([('name', 'PORTS'), ('type', 'STRINGSET'), ('doubleValue', 0.0), ('integerValue', 0), ('longValue', 0), ('stringSetValue', ['2376', '22', '80', '51678', '2375'])])]), ('runningTasksCount', 1), ('status', 'ACTIVE')])]), ('failures', [])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example provides a description of the specified container instance in your default region, using the container instance UUID as an identifier.'), ('id', 'c8f439de-eb27-4269-8ca7-2c0a7ba75ab0'), ('title', 'To describe container instance')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeServices', OrderedDict([('input', OrderedDict([('services', ['ecs-simple-service'])])), ('output', OrderedDict([('failures', []), ('services', [OrderedDict([('clusterArn', 'arn:aws:ecs:us-east-1:012345678910:cluster/default'), ('createdAt', '2016-08-29T16:25:52.130Z'), ('deploymentConfiguration', OrderedDict([('maximumPercent', 200), ('minimumHealthyPercent', 100)])), ('deployments', [OrderedDict([('createdAt', '2016-08-29T16:25:52.130Z'), ('desiredCount', 1), ('id', 'ecs-svc/9223370564341623665'), ('pendingCount', 0), ('runningCount', 0), ('status', 'PRIMARY'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6'), ('updatedAt', '2016-08-29T16:25:52.130Z')])]), ('desiredCount', 1), ('events', [OrderedDict([('createdAt', '2016-08-29T16:25:58.520Z'), ('id', '38c285e5-d335-4b68-8b15-e46dedc8e88d'), ('message', '(service ecs-simple-service) was unable to place a task because no container instance met all of its requirements. The closest matching (container-instance 3f4de1c5-ffdd-4954-af7e-75b4be0c8841) is already using a port required by your task. For more information, see the Troubleshooting section of the Amazon ECS Developer Guide.')])]), ('loadBalancers', []), ('pendingCount', 0), ('runningCount', 0), ('serviceArn', 'arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service'), ('serviceName', 'ecs-simple-service'), ('status', 'ACTIVE'), ('taskDefinition', 'arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('services[0].events[0].message', 'In this example, there is a service event that shows unavailable cluster resources.')]))])), ('description', 'This example provides descriptive information about the service named ``ecs-simple-service``.'), ('id', 'to-describe-a-service-1472513256350'), ('title', 'To describe a service')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTaskDefinition', OrderedDict([('input', OrderedDict([('taskDefinition', 'hello_world:8')])), ('output', OrderedDict([('taskDefinition', OrderedDict([('containerDefinitions', [OrderedDict([('name', 'wordpress'), ('cpu', 10), ('environment', []), ('essential', True), ('image', 'wordpress'), ('links', ['mysql']), ('memory', 500), ('mountPoints', []), ('portMappings', [OrderedDict([('containerPort', 80), ('hostPort', 80)])]), ('volumesFrom', [])]), OrderedDict([('name', 'mysql'), ('cpu', 10), ('environment', [OrderedDict([('name', 'MYSQL_ROOT_PASSWORD'), ('value', 'password')])]), ('essential', True), ('image', 'mysql'), ('memory', 500), ('mountPoints', []), ('portMappings', []), ('volumesFrom', [])])]), ('family', 'hello_world'), ('revision', 8), ('taskDefinitionArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/hello_world:8'), ('volumes', [])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example provides a description of the specified task definition.'), ('id', '4c21eeb1-f1da-4a08-8c44-297fc8d0ea88'), ('title', 'To describe a task definition')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTasks', OrderedDict([('input', OrderedDict([('tasks', ['c5cba4eb-5dad-405e-96db-71ef8eefe6a8'])])), ('output', OrderedDict([('failures', []), ('tasks', [OrderedDict([('clusterArn', 'arn:aws:ecs:<region>:<aws_account_id>:cluster/default'), ('containerInstanceArn', 'arn:aws:ecs:<region>:<aws_account_id>:container-instance/18f9eda5-27d7-4c19-b133-45adc516e8fb'), ('containers', [OrderedDict([('name', 'ecs-demo'), ('containerArn', 'arn:aws:ecs:<region>:<aws_account_id>:container/7c01765b-c588-45b3-8290-4ba38bd6c5a6'), ('lastStatus', 'RUNNING'), ('networkBindings', [OrderedDict([('bindIP', '0.0.0.0'), ('containerPort', 80), ('hostPort', 80)])]), ('taskArn', 'arn:aws:ecs:<region>:<aws_account_id>:task/c5cba4eb-5dad-405e-96db-71ef8eefe6a8')])]), ('desiredStatus', 'RUNNING'), ('lastStatus', 'RUNNING'), ('overrides', OrderedDict([('containerOverrides', [OrderedDict([('name', 'ecs-demo')])])])), ('startedBy', 'ecs-svc/9223370608528463088'), ('taskArn', 'arn:aws:ecs:<region>:<aws_account_id>:task/c5cba4eb-5dad-405e-96db-71ef8eefe6a8'), ('taskDefinitionArn', 'arn:aws:ecs:<region>:<aws_account_id>:task-definition/amazon-ecs-sample:1')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example provides a description of the specified task, using the task UUID as an identifier.'), ('id', 'a90b0cde-f965-4946-b55e-cfd8cc54e827'), ('title', 'To describe a task')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListClusters', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('clusterArns', ['arn:aws:ecs:us-east-1:<aws_account_id>:cluster/test', 'arn:aws:ecs:us-east-1:<aws_account_id>:cluster/default'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all of your available clusters in your default region.'), ('id', 'e337d059-134f-4125-ba8e-4f499139facf'), ('title', 'To list your available clusters')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListContainerInstances', OrderedDict([('input', OrderedDict([('cluster', 'default')])), ('output', OrderedDict([('containerInstanceArns', ['arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/f6bbb147-5370-4ace-8c73-c7181ded911f', 'arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/ffe3d344-77e2-476c-a4d0-bf560ad50acb'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all of your available container instances in the specified cluster in your default region.'), ('id', '62a82a94-713c-4e18-8420-1d2b2ba9d484'), ('title', 'To list your available container instances in a cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListServices', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('serviceArns', ['arn:aws:ecs:us-east-1:012345678910:service/my-http-service'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists the services running in the default cluster for an account.'), ('id', '1d9a8037-4e0e-4234-a528-609656809a3a'), ('title', 'To list the services in a cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTaskDefinitionFamilies', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('families', ['node-js-app', 'web-timer', 'hpcc', 'hpcc-c4-8xlarge'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all of your registered task definition families.'), ('id', 'b5c89769-1d94-4ca2-a79e-8069103c7f75'), ('title', 'To list your registered task definition families')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTaskDefinitionFamilies', OrderedDict([('input', OrderedDict([('familyPrefix', 'hpcc')])), ('output', OrderedDict([('families', ['hpcc', 'hpcc-c4-8xlarge'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists the task definition revisions that start with "hpcc".'), ('id', '8a4cf9a6-42c1-4fe3-852d-99ac8968e11b'), ('title', 'To filter your registered task definition families')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTaskDefinitions', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('taskDefinitionArns', ['arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep300:2', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:1', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:3', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:4', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:5', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:6'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all of your registered task definitions.'), ('id', 'b381ebaf-7eba-4d60-b99b-7f6ae49d3d60'), ('title', 'To list your registered task definitions')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTaskDefinitions', OrderedDict([('input', OrderedDict([('familyPrefix', 'wordpress')])), ('output', OrderedDict([('taskDefinitionArns', ['arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:3', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:4', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:5', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:6'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists the task definition revisions of a specified family.'), ('id', '734e7afd-753a-4bc2-85d0-badddce10910'), ('title', 'To list the registered task definitions in a family')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTasks', OrderedDict([('input', OrderedDict([('cluster', 'default')])), ('output', OrderedDict([('taskArns', ['arn:aws:ecs:us-east-1:012345678910:task/0cc43cdb-3bee-4407-9c26-c0e6ea5bee84', 'arn:aws:ecs:us-east-1:012345678910:task/6b809ef6-c67e-4467-921f-ee261c15a0a1'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all of the tasks in a cluster.'), ('id', '9a6ec707-1a77-45d0-b2eb-516b5dd9e924'), ('title', 'To list the tasks in a cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTasks', OrderedDict([('input', OrderedDict([('cluster', 'default'), ('containerInstance', 'f6bbb147-5370-4ace-8c73-c7181ded911f')])), ('output', OrderedDict([('taskArns', ['arn:aws:ecs:us-east-1:012345678910:task/0cc43cdb-3bee-4407-9c26-c0e6ea5bee84'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists the tasks of a specified container instance. Specifying a ``containerInstance`` value limits  the  results  to  tasks  that belong to that container instance.'), ('id', '024bf3b7-9cbb-44e3-848f-9d074e1fecce'), ('title', 'To list the tasks on a particular container instance')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterTaskDefinition', OrderedDict([('input', OrderedDict([('containerDefinitions', [OrderedDict([('name', 'sleep'), ('command', ['sleep', '360']), ('cpu', 10), ('essential', True), ('image', 'busybox'), ('memory', 10)])]), ('family', 'sleep360'), ('taskRoleArn', ''), ('volumes', [])])), ('output', OrderedDict([('taskDefinition', OrderedDict([('containerDefinitions', [OrderedDict([('name', 'sleep'), ('command', ['sleep', '360']), ('cpu', 10), ('environment', []), ('essential', True), ('image', 'busybox'), ('memory', 10), ('mountPoints', []), ('portMappings', []), ('volumesFrom', [])])]), ('family', 'sleep360'), ('revision', 1), ('taskDefinitionArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:19'), ('volumes', [])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example registers a task definition to the specified family.'), ('id', 'to-register-a-task-definition-1470764550877'), ('title', 'To register a task definition')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RunTask', OrderedDict([('input', OrderedDict([('cluster', 'default'), ('taskDefinition', 'sleep360:1')])), ('output', OrderedDict([('tasks', [OrderedDict([('containerInstanceArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/ffe3d344-77e2-476c-a4d0-bf560ad50acb'), ('containers', [OrderedDict([('name', 'sleep'), ('containerArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:container/58591c8e-be29-4ddf-95aa-ee459d4c59fd'), ('lastStatus', 'PENDING'), ('taskArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:task/a9f21ea7-c9f5-44b1-b8e6-b31f50ed33c0')])]), ('desiredStatus', 'RUNNING'), ('lastStatus', 'PENDING'), ('overrides', OrderedDict([('containerOverrides', [OrderedDict([('name', 'sleep')])])])), ('taskArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:task/a9f21ea7-c9f5-44b1-b8e6-b31f50ed33c0'), ('taskDefinitionArn', 'arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:1')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example runs the specified task definition on your default cluster.'), ('id', '6f238c83-a133-42cd-ab3d-abeca0560445'), ('title', 'To run a task on your default cluster')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateService', OrderedDict([('input', OrderedDict([('service', 'my-http-service'), ('taskDefinition', 'amazon-ecs-sample')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example updates the my-http-service service to use the amazon-ecs-sample task definition.'), ('id', 'cc9e8900-0cc2-44d2-8491-64d1d3d37887'), ('title', 'To change the task definition used in a service')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateService', OrderedDict([('input', OrderedDict([('desiredCount', 10), ('service', 'my-http-service')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example updates the desired count of the my-http-service service to 10.'), ('id', '9581d6c5-02e3-4140-8cc1-5a4301586633'), ('title', 'To change the number of tasks in a service')]), <botocore.model.ServiceModel object at 0x7f8a00c713c8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateFileSystem', OrderedDict([('input', OrderedDict([('CreationToken', 'tokenstring'), ('PerformanceMode', 'generalPurpose')])), ('output', OrderedDict([('CreationTime', '1481841524.0'), ('CreationToken', 'tokenstring'), ('FileSystemId', 'fs-01234567'), ('LifeCycleState', 'creating'), ('NumberOfMountTargets', 0), ('OwnerId', '012345678912'), ('PerformanceMode', 'generalPurpose'), ('SizeInBytes', OrderedDict([('Value', 0)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation creates a new file system with the default generalpurpose performance mode.'), ('id', 'to-create-a-new-file-system-1481840798547'), ('title', 'To create a new file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateMountTarget', OrderedDict([('input', OrderedDict([('FileSystemId', 'fs-01234567'), ('SubnetId', 'subnet-1234abcd')])), ('output', OrderedDict([('FileSystemId', 'fs-01234567'), ('IpAddress', '192.0.0.2'), ('LifeCycleState', 'creating'), ('MountTargetId', 'fsmt-12340abc'), ('NetworkInterfaceId', 'eni-cedf6789'), ('OwnerId', '012345678912'), ('SubnetId', 'subnet-1234abcd')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation creates a new mount target for an EFS file system.'), ('id', 'to-create-a-new-mount-target-1481842289329'), ('title', 'To create a new mount target')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateTags', OrderedDict([('input', OrderedDict([('FileSystemId', 'fs-01234567'), ('Tags', [OrderedDict([('Key', 'Name'), ('Value', 'MyFileSystem')])])])), ('comments', OrderedDict()), ('description', 'This operation creates a new tag for an EFS file system.'), ('id', 'to-create-a-new-tag-1481843409357'), ('title', 'To create a new tag')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteFileSystem', OrderedDict([('input', OrderedDict([('FileSystemId', 'fs-01234567')])), ('comments', OrderedDict()), ('description', 'This operation deletes an EFS file system.'), ('id', 'to-delete-a-file-system-1481847318348'), ('title', 'To delete a file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteMountTarget', OrderedDict([('input', OrderedDict([('MountTargetId', 'fsmt-12340abc')])), ('comments', OrderedDict()), ('description', 'This operation deletes a mount target.'), ('id', 'to-delete-a-mount-target-1481847635607'), ('title', 'To delete a mount target')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTags', OrderedDict([('input', OrderedDict([('FileSystemId', 'fs-01234567'), ('TagKeys', ['Name'])])), ('comments', OrderedDict()), ('description', 'This operation deletes tags for an EFS file system.'), ('id', 'to-delete-tags-for-an-efs-file-system-1481848189061'), ('title', 'To delete tags for an EFS file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeFileSystems', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('FileSystems', [OrderedDict([('CreationTime', '1481841524.0'), ('CreationToken', 'tokenstring'), ('FileSystemId', 'fs-01234567'), ('LifeCycleState', 'available'), ('Name', 'MyFileSystem'), ('NumberOfMountTargets', 1), ('OwnerId', '012345678912'), ('PerformanceMode', 'generalPurpose'), ('SizeInBytes', OrderedDict([('Value', 6144)]))])])])), ('comments', OrderedDict()), ('description', 'This operation describes all of the EFS file systems in an account.'), ('id', 'to-describe-an-efs-file-system-1481848448460'), ('title', 'To describe an EFS file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeMountTargetSecurityGroups', OrderedDict([('input', OrderedDict([('MountTargetId', 'fsmt-12340abc')])), ('output', OrderedDict([('SecurityGroups', ['sg-fghi4567'])])), ('comments', OrderedDict()), ('description', "This operation describes all of the security groups for a file system's mount target."), ('id', 'to-describe-the-security-groups-for-a-mount-target-1481849317823'), ('title', 'To describe the security groups for a mount target')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeMountTargets', OrderedDict([('input', OrderedDict([('FileSystemId', 'fs-01234567')])), ('output', OrderedDict([('MountTargets', [OrderedDict([('FileSystemId', 'fs-01234567'), ('IpAddress', '192.0.0.2'), ('LifeCycleState', 'available'), ('MountTargetId', 'fsmt-12340abc'), ('NetworkInterfaceId', 'eni-cedf6789'), ('OwnerId', '012345678912'), ('SubnetId', 'subnet-1234abcd')])])])), ('comments', OrderedDict()), ('description', "This operation describes all of a file system's mount targets."), ('id', 'to-describe-the-mount-targets-for-a-file-system-1481849958584'), ('title', 'To describe the mount targets for a file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTags', OrderedDict([('input', OrderedDict([('FileSystemId', 'fs-01234567')])), ('output', OrderedDict([('Tags', [OrderedDict([('Key', 'Name'), ('Value', 'MyFileSystem')])])])), ('comments', OrderedDict()), ('description', "This operation describes all of a file system's tags."), ('id', 'to-describe-the-tags-for-a-file-system-1481850497090'), ('title', 'To describe the tags for a file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyMountTargetSecurityGroups', OrderedDict([('input', OrderedDict([('MountTargetId', 'fsmt-12340abc'), ('SecurityGroups', ['sg-abcd1234'])])), ('comments', OrderedDict()), ('description', 'This operation modifies the security groups associated with a mount target for a file system.'), ('id', 'to-modify-the-security-groups-associated-with-a-mount-target-for-a-file-system-1481850772562'), ('title', 'To modify the security groups associated with a mount target for a file system')]), <botocore.model.ServiceModel object at 0x7f89fd499518>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AbortEnvironmentUpdate', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following code aborts a running application version deployment for an environment named my-env:'), ('id', 'to-abort-a-deployment-1456267848227'), ('title', 'To abort a deployment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CheckDNSAvailability', OrderedDict([('input', OrderedDict([('CNAMEPrefix', 'my-cname')])), ('output', OrderedDict([('Available', True), ('FullyQualifiedCNAME', 'my-cname.us-west-2.elasticbeanstalk.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation checks the availability of the subdomain my-cname:'), ('id', 'to-check-the-availability-of-a-cname-1456268589537'), ('title', 'To check the availability of a CNAME')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateApplication', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('Description', 'my application')])), ('output', OrderedDict([('Application', OrderedDict([('ApplicationName', 'my-app'), ('ConfigurationTemplates', []), ('DateCreated', '2015-02-12T18:32:21.181Z'), ('DateUpdated', '2015-02-12T18:32:21.181Z'), ('Description', 'my application')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation creates a new application named my-app:'), ('id', 'to-create-a-new-application-1456268895683'), ('title', 'To create a new application')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateApplicationVersion', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('AutoCreateApplication', True), ('Description', 'my-app-v1'), ('Process', True), ('SourceBundle', OrderedDict([('S3Bucket', 'my-bucket'), ('S3Key', 'sample.war')])), ('VersionLabel', 'v1')])), ('output', OrderedDict([('ApplicationVersion', OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-02-03T23:01:25.412Z'), ('DateUpdated', '2015-02-03T23:01:25.412Z'), ('Description', 'my-app-v1'), ('SourceBundle', OrderedDict([('S3Bucket', 'my-bucket'), ('S3Key', 'sample.war')])), ('VersionLabel', 'v1')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation creates a new version (v1) of an application named my-app:'), ('id', 'to-create-a-new-application-1456268895683'), ('title', 'To create a new application')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateConfigurationTemplate', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentId', 'e-rpqsewtp2j'), ('TemplateName', 'my-app-v1')])), ('output', OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-08-12T18:40:39Z'), ('DateUpdated', '2015-08-12T18:40:39Z'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('TemplateName', 'my-app-v1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation creates a configuration template named my-app-v1 from the settings applied to an environment with the id e-rpqsewtp2j:'), ('id', 'to-create-a-configuration-template-1456269283586'), ('title', 'To create a configuration template')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateEnvironment', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('CNAMEPrefix', 'my-app'), ('EnvironmentName', 'my-env'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('VersionLabel', 'v1')])), ('output', OrderedDict([('ApplicationName', 'my-app'), ('CNAME', 'my-app.elasticbeanstalk.com'), ('DateCreated', '2015-02-03T23:04:54.479Z'), ('DateUpdated', '2015-02-03T23:04:54.479Z'), ('EnvironmentId', 'e-izqpassy4h'), ('EnvironmentName', 'my-env'), ('Health', 'Grey'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('Status', 'Launching'), ('Tier', OrderedDict([('Name', 'WebServer'), ('Type', 'Standard'), ('Version', ' ')])), ('VersionLabel', 'v1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation creates a new environment for version v1 of a java application named my-app:'), ('id', 'to-create-a-new-environment-for-an-application-1456269380396'), ('title', 'To create a new environment for an application')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateStorageLocation', OrderedDict([('output', OrderedDict([('S3Bucket', 'elasticbeanstalk-us-west-2-0123456789012')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation creates a new environment for version v1 of a java application named my-app:'), ('id', 'to-create-a-new-environment-for-an-application-1456269380396'), ('title', 'To create a new environment for an application')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteApplication', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation deletes an application named my-app:'), ('id', 'to-delete-an-application-1456269699366'), ('title', 'To delete an application')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteApplicationVersion', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('DeleteSourceBundle', True), ('VersionLabel', '22a0-stage-150819_182129')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation deletes an application version named 22a0-stage-150819_182129 for an application named my-app:'), ('id', 'to-delete-an-application-version-1456269792956'), ('title', 'To delete an application version')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteConfigurationTemplate', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('TemplateName', 'my-template')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation deletes a configuration template named my-template for an application named my-app:'), ('id', 'to-delete-a-configuration-template-1456269836701'), ('title', 'To delete a configuration template')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteEnvironmentConfiguration', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation deletes a draft configuration for an environment named my-env:'), ('id', 'to-delete-a-draft-configuration-1456269886654'), ('title', 'To delete a draft configuration')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeApplicationVersions', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('VersionLabels', ['v2'])])), ('output', OrderedDict([('ApplicationVersions', [OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-07-23T01:32:26.079Z'), ('DateUpdated', '2015-07-23T01:32:26.079Z'), ('Description', 'update cover page'), ('SourceBundle', OrderedDict([('S3Bucket', 'elasticbeanstalk-us-west-2-015321684451'), ('S3Key', 'my-app/5026-stage-150723_224258.war')])), ('VersionLabel', 'v2')]), OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-07-23T22:26:10.816Z'), ('DateUpdated', '2015-07-23T22:26:10.816Z'), ('Description', 'initial version'), ('SourceBundle', OrderedDict([('S3Bucket', 'elasticbeanstalk-us-west-2-015321684451'), ('S3Key', 'my-app/5026-stage-150723_222618.war')])), ('VersionLabel', 'v1')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves information about an application version labeled v2:'), ('id', 'to-view-information-about-an-application-version-1456269947428'), ('title', 'To view information about an application version')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeApplications', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Applications', [OrderedDict([('ApplicationName', 'ruby'), ('ConfigurationTemplates', []), ('DateCreated', '2015-08-13T21:05:44.376Z'), ('DateUpdated', '2015-08-13T21:05:44.376Z'), ('Versions', ['Sample Application'])]), OrderedDict([('ApplicationName', 'pythonsample'), ('ConfigurationTemplates', []), ('DateCreated', '2015-08-13T19:05:43.637Z'), ('DateUpdated', '2015-08-13T19:05:43.637Z'), ('Description', 'Application created from the EB CLI using "eb init"'), ('Versions', ['Sample Application'])]), OrderedDict([('ApplicationName', 'nodejs-example'), ('ConfigurationTemplates', []), ('DateCreated', '2015-08-06T17:50:02.486Z'), ('DateUpdated', '2015-08-06T17:50:02.486Z'), ('Versions', ['add elasticache', 'First Release'])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves information about applications in the current region:'), ('id', 'to-view-a-list-of-applications-1456270027373'), ('title', 'To view a list of applications')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeConfigurationOptions', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env')])), ('output', OrderedDict([('Options', [OrderedDict([('ChangeSeverity', 'NoInterruption'), ('DefaultValue', '30'), ('MaxValue', 300), ('MinValue', 5), ('Name', 'Interval'), ('Namespace', 'aws:elb:healthcheck'), ('UserDefined', False), ('ValueType', 'Scalar')]), OrderedDict([('ChangeSeverity', 'NoInterruption'), ('DefaultValue', '2000000'), ('MinValue', 0), ('Name', 'LowerThreshold'), ('Namespace', 'aws:autoscaling:trigger'), ('UserDefined', False), ('ValueType', 'Scalar')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves descriptions of all available configuration options for an environment named my-env:'), ('id', 'to-view-configuration-options-for-an-environment-1456276763917'), ('title', 'To view configuration options for an environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeConfigurationSettings', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env')])), ('output', OrderedDict([('ConfigurationSettings', [OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-08-13T19:16:25Z'), ('DateUpdated', '2015-08-13T23:30:07Z'), ('DeploymentStatus', 'deployed'), ('Description', 'Environment created from the EB CLI using "eb create"'), ('EnvironmentName', 'my-env'), ('OptionSettings', [OrderedDict([('Namespace', 'aws:autoscaling:asg'), ('OptionName', 'Availability Zones'), ('ResourceName', 'AWSEBAutoScalingGroup'), ('Value', 'Any')]), OrderedDict([('Namespace', 'aws:autoscaling:asg'), ('OptionName', 'Cooldown'), ('ResourceName', 'AWSEBAutoScalingGroup'), ('Value', '360')]), OrderedDict([('Namespace', 'aws:elb:policies'), ('OptionName', 'ConnectionDrainingTimeout'), ('ResourceName', 'AWSEBLoadBalancer'), ('Value', '20')]), OrderedDict([('Namespace', 'aws:elb:policies'), ('OptionName', 'ConnectionSettingIdleTimeout'), ('ResourceName', 'AWSEBLoadBalancer'), ('Value', '60')])]), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('abbreviated', 'Output is abbreviated')]))])), ('description', 'The following operation retrieves configuration settings for an environment named my-env:'), ('id', 'to-view-configurations-settings-for-an-environment-1456276924537'), ('title', 'To view configurations settings for an environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEnvironmentHealth', OrderedDict([('input', OrderedDict([('AttributeNames', ['All']), ('EnvironmentName', 'my-env')])), ('output', OrderedDict([('ApplicationMetrics', OrderedDict([('Duration', 10), ('Latency', OrderedDict([('P10', 0.001), ('P50', 0.001), ('P75', 0.002), ('P85', 0.003), ('P90', 0.003), ('P95', 0.004), ('P99', 0.004), ('P999', 0.004)])), ('RequestCount', 45), ('StatusCodes', OrderedDict([('Status2xx', 45), ('Status3xx', 0), ('Status4xx', 0), ('Status5xx', 0)]))])), ('Causes', []), ('Color', 'Green'), ('EnvironmentName', 'my-env'), ('HealthStatus', 'Ok'), ('InstancesHealth', OrderedDict([('Degraded', 0), ('Info', 0), ('NoData', 0), ('Ok', 1), ('Pending', 0), ('Severe', 0), ('Unknown', 0), ('Warning', 0)])), ('RefreshedAt', '2015-08-20T21:09:18Z')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves overall health information for an environment named my-env:'), ('id', 'to-view-environment-health-1456277109510'), ('title', 'To view environment health')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEnvironmentResources', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env')])), ('output', OrderedDict([('EnvironmentResources', OrderedDict([('AutoScalingGroups', [OrderedDict([('Name', 'awseb-e-qu3fyyjyjs-stack-AWSEBAutoScalingGroup-QSB2ZO88SXZT')])]), ('EnvironmentName', 'my-env'), ('Instances', [OrderedDict([('Id', 'i-0c91c786')])]), ('LaunchConfigurations', [OrderedDict([('Name', 'awseb-e-qu3fyyjyjs-stack-AWSEBAutoScalingLaunchConfiguration-1UUVQIBC96TQ2')])]), ('LoadBalancers', [OrderedDict([('Name', 'awseb-e-q-AWSEBLoa-1EEPZ0K98BIF0')])]), ('Queues', []), ('Triggers', [])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves information about resources in an environment named my-env:'), ('id', 'to-view-information-about-the-aws-resources-in-your-environment-1456277206232'), ('title', 'To view information about the AWS resources in your environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEnvironments', OrderedDict([('input', OrderedDict([('EnvironmentNames', ['my-env'])])), ('output', OrderedDict([('Environments', [OrderedDict([('AbortableOperationInProgress', False), ('ApplicationName', 'my-app'), ('CNAME', 'my-env.elasticbeanstalk.com'), ('DateCreated', '2015-08-07T20:48:49.599Z'), ('DateUpdated', '2015-08-12T18:16:55.019Z'), ('EndpointURL', 'awseb-e-w-AWSEBLoa-1483140XB0Q4L-109QXY8121.us-west-2.elb.amazonaws.com'), ('EnvironmentId', 'e-rpqsewtp2j'), ('EnvironmentName', 'my-env'), ('Health', 'Green'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('Status', 'Ready'), ('Tier', OrderedDict([('Name', 'WebServer'), ('Type', 'Standard'), ('Version', ' ')])), ('VersionLabel', '7f58-stage-150812_025409')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves information about an environment named my-env:'), ('id', 'to-view-information-about-an-environment-1456277288662'), ('title', 'To view information about an environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEvents', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env')])), ('output', OrderedDict([('Events', [OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env'), ('EventDate', '2015-08-20T07:06:53.535Z'), ('Message', 'Environment health has transitioned from Info to Ok.'), ('Severity', 'INFO')]), OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env'), ('EventDate', '2015-08-20T07:06:02.049Z'), ('Message', 'Environment update completed successfully.'), ('RequestId', 'b7f3960b-4709-11e5-ba1e-07e16200da41'), ('Severity', 'INFO')]), OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env'), ('EventDate', '2015-08-13T19:16:27.561Z'), ('Message', 'Using elasticbeanstalk-us-west-2-012445113685 as Amazon S3 storage bucket for environment data.'), ('RequestId', 'ca8dfbf6-41ef-11e5-988b-651aa638f46b'), ('Severity', 'INFO')]), OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env'), ('EventDate', '2015-08-13T19:16:26.581Z'), ('Message', 'createEnvironment is starting.'), ('RequestId', 'cdfba8f6-41ef-11e5-988b-65638f41aa6b'), ('Severity', 'INFO')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves events for an environment named my-env:'), ('id', 'to-view-events-for-an-environment-1456277367589'), ('title', 'To view events for an environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeInstancesHealth', OrderedDict([('input', OrderedDict([('AttributeNames', ['All']), ('EnvironmentName', 'my-env')])), ('output', OrderedDict([('InstanceHealthList', [OrderedDict([('ApplicationMetrics', OrderedDict([('Duration', 10), ('Latency', OrderedDict([('P10', 0), ('P50', 0.001), ('P75', 0.002), ('P85', 0.003), ('P90', 0.004), ('P95', 0.005), ('P99', 0.006), ('P999', 0.006)])), ('RequestCount', 48), ('StatusCodes', OrderedDict([('Status2xx', 47), ('Status3xx', 0), ('Status4xx', 1), ('Status5xx', 0)]))])), ('Causes', []), ('Color', 'Green'), ('HealthStatus', 'Ok'), ('InstanceId', 'i-08691cc7'), ('LaunchedAt', '2015-08-13T19:17:09Z'), ('System', OrderedDict([('CPUUtilization', OrderedDict([('IOWait', 0.2), ('IRQ', 0), ('Idle', 97.8), ('Nice', 0.1), ('SoftIRQ', 0.1), ('System', 0.3), ('User', 1.5)])), ('LoadAverage', [0, 0.02, 0.05])]))])]), ('RefreshedAt', '2015-08-20T21:09:08Z')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves health information for instances in an environment named my-env:'), ('id', 'to-view-environment-health-1456277424757'), ('title', 'To view environment health')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAvailableSolutionStacks', OrderedDict([('output', OrderedDict([('SolutionStackDetails', [OrderedDict([('PermittedFileTypes', ['zip']), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Node.js')])]), ('SolutionStacks', ['64bit Amazon Linux 2015.03 v2.0.0 running Node.js', '64bit Amazon Linux 2015.03 v2.0.0 running PHP 5.6', '64bit Amazon Linux 2015.03 v2.0.0 running PHP 5.5', '64bit Amazon Linux 2015.03 v2.0.0 running PHP 5.4', '64bit Amazon Linux 2015.03 v2.0.0 running Python 3.4', '64bit Amazon Linux 2015.03 v2.0.0 running Python 2.7', '64bit Amazon Linux 2015.03 v2.0.0 running Python', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 2.2 (Puma)', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 2.2 (Passenger Standalone)', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 2.1 (Puma)', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 2.1 (Passenger Standalone)', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 2.0 (Puma)', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 2.0 (Passenger Standalone)', '64bit Amazon Linux 2015.03 v2.0.0 running Ruby 1.9.3', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 7 Java 7', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 7 Java 6', '64bit Windows Server Core 2012 R2 running IIS 8.5', '64bit Windows Server 2012 R2 running IIS 8.5', '64bit Windows Server 2012 running IIS 8', '64bit Windows Server 2008 R2 running IIS 7.5', '64bit Amazon Linux 2015.03 v2.0.0 running Docker 1.6.2', '64bit Amazon Linux 2015.03 v2.0.0 running Multi-container Docker 1.6.2 (Generic)', '64bit Debian jessie v2.0.0 running GlassFish 4.1 Java 8 (Preconfigured - Docker)', '64bit Debian jessie v2.0.0 running GlassFish 4.0 Java 7 (Preconfigured - Docker)', '64bit Debian jessie v2.0.0 running Go 1.4 (Preconfigured - Docker)', '64bit Debian jessie v2.0.0 running Go 1.3 (Preconfigured - Docker)', '64bit Debian jessie v2.0.0 running Python 3.4 (Preconfigured - Docker)'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation lists solution stacks for all currently available platform configurations and any that you have used in the past:'), ('id', 'to-view-solution-stacks-1456277504811'), ('title', 'To view solution stacks')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RebuildEnvironment', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation terminates and recreates the resources in an environment named my-env:'), ('id', 'to-rebuild-an-environment-1456277600918'), ('title', 'To rebuild an environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RequestEnvironmentInfo', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env'), ('InfoType', 'tail')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation requests logs from an environment named my-env:'), ('id', 'to-request-tailed-logs-1456277657045'), ('title', 'To request tailed logs')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RestartAppServer', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation restarts application servers on all instances in an environment named my-env:'), ('id', 'to-restart-application-servers-1456277739302'), ('title', 'To restart application servers')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RetrieveEnvironmentInfo', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env'), ('InfoType', 'tail')])), ('output', OrderedDict([('EnvironmentInfo', [OrderedDict([('Ec2InstanceId', 'i-09c1c867'), ('InfoType', 'tail'), ('Message', 'https://elasticbeanstalk-us-west-2-0123456789012.s3.amazonaws.com/resources/environments/logs/tail/e-fyqyju3yjs/i-09c1c867/TailLogs-1440109397703.out?AWSAccessKeyId=AKGPT4J56IAJ2EUBL5CQ&Expires=1440195891&Signature=n%2BEalOV6A2HIOx4Rcfb7LT16bBM%3D'), ('SampleTimestamp', '2015-08-20T22:23:17.703Z')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation retrieves a link to logs from an environment named my-env:'), ('id', 'to-retrieve-tailed-logs-1456277792734'), ('title', 'To retrieve tailed logs')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SwapEnvironmentCNAMEs', OrderedDict([('input', OrderedDict([('DestinationEnvironmentName', 'my-env-green'), ('SourceEnvironmentName', 'my-env-blue')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation swaps the assigned subdomains of two environments:'), ('id', 'to-swap-environment-cnames-1456277839438'), ('title', 'To swap environment CNAMES')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('TerminateEnvironment', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env')])), ('output', OrderedDict([('AbortableOperationInProgress', False), ('ApplicationName', 'my-app'), ('CNAME', 'my-env.elasticbeanstalk.com'), ('DateCreated', '2015-08-12T18:52:53.622Z'), ('DateUpdated', '2015-08-12T19:05:54.744Z'), ('EndpointURL', 'awseb-e-f-AWSEBLoa-1I9XUMP4-8492WNUP202574.us-west-2.elb.amazonaws.com'), ('EnvironmentId', 'e-fh2eravpns'), ('EnvironmentName', 'my-env'), ('Health', 'Grey'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('Status', 'Terminating'), ('Tier', OrderedDict([('Name', 'WebServer'), ('Type', 'Standard'), ('Version', ' ')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation terminates an Elastic Beanstalk environment named my-env:'), ('id', 'to-terminate-an-environment-1456277888556'), ('title', 'To terminate an environment')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateApplication', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('Description', 'my Elastic Beanstalk application')])), ('output', OrderedDict([('Application', OrderedDict([('ApplicationName', 'my-app'), ('ConfigurationTemplates', []), ('DateCreated', '2015-08-13T19:15:50.449Z'), ('DateUpdated', '2015-08-20T22:34:56.195Z'), ('Description', 'my Elastic Beanstalk application'), ('Versions', ['2fba-stage-150819_234450', 'bf07-stage-150820_214945', '93f8', 'fd7c-stage-150820_000431', '22a0-stage-150819_185942'])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation updates the description of an application named my-app:'), ('id', 'to-change-an-applications-description-1456277957075'), ('title', "To change an application's description")]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateApplicationVersion', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('Description', 'new description'), ('VersionLabel', '22a0-stage-150819_185942')])), ('output', OrderedDict([('ApplicationVersion', OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-08-19T18:59:17.646Z'), ('DateUpdated', '2015-08-20T22:53:28.871Z'), ('Description', 'new description'), ('SourceBundle', OrderedDict([('S3Bucket', 'elasticbeanstalk-us-west-2-0123456789012'), ('S3Key', 'my-app/22a0-stage-150819_185942.war')])), ('VersionLabel', '22a0-stage-150819_185942')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation updates the description of an application version named 22a0-stage-150819_185942:'), ('id', 'to-change-an-application-versions-description-1456278019237'), ('title', "To change an application version's description")]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateConfigurationTemplate', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('OptionsToRemove', [OrderedDict([('Namespace', 'aws:elasticbeanstalk:healthreporting:system'), ('OptionName', 'ConfigDocument')])]), ('TemplateName', 'my-template')])), ('output', OrderedDict([('ApplicationName', 'my-app'), ('DateCreated', '2015-08-20T22:39:31Z'), ('DateUpdated', '2015-08-20T22:43:11Z'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('TemplateName', 'my-template')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation removes the configured CloudWatch custom health metrics configuration ConfigDocument from a saved configuration template named my-template:'), ('id', 'to-update-a-configuration-template-1456278075300'), ('title', 'To update a configuration template')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateEnvironment', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env'), ('VersionLabel', 'v2')])), ('output', OrderedDict([('ApplicationName', 'my-app'), ('CNAME', 'my-env.elasticbeanstalk.com'), ('DateCreated', '2015-02-03T23:04:54.453Z'), ('DateUpdated', '2015-02-03T23:12:29.119Z'), ('EndpointURL', 'awseb-e-i-AWSEBLoa-1RDLX6TC9VUAO-0123456789.us-west-2.elb.amazonaws.com'), ('EnvironmentId', 'e-szqipays4h'), ('EnvironmentName', 'my-env'), ('Health', 'Grey'), ('SolutionStackName', '64bit Amazon Linux running Tomcat 7'), ('Status', 'Updating'), ('Tier', OrderedDict([('Name', 'WebServer'), ('Type', 'Standard'), ('Version', ' ')])), ('VersionLabel', 'v2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation updates an environment named "my-env" to version "v2" of the application to which it belongs:'), ('id', 'to-update-an-environment-to-a-new-version-1456278210718'), ('title', 'To update an environment to a new version')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateEnvironment', OrderedDict([('input', OrderedDict([('EnvironmentName', 'my-env'), ('OptionSettings', [OrderedDict([('Namespace', 'aws:elb:healthcheck'), ('OptionName', 'Interval'), ('Value', '15')]), OrderedDict([('Namespace', 'aws:elb:healthcheck'), ('OptionName', 'Timeout'), ('Value', '8')]), OrderedDict([('Namespace', 'aws:elb:healthcheck'), ('OptionName', 'HealthyThreshold'), ('Value', '2')]), OrderedDict([('Namespace', 'aws:elb:healthcheck'), ('OptionName', 'UnhealthyThreshold'), ('Value', '3')])])])), ('output', OrderedDict([('AbortableOperationInProgress', True), ('ApplicationName', 'my-app'), ('CNAME', 'my-env.elasticbeanstalk.com'), ('DateCreated', '2015-08-07T20:48:49.599Z'), ('DateUpdated', '2015-08-12T18:15:23.804Z'), ('EndpointURL', 'awseb-e-w-AWSEBLoa-14XB83101Q4L-104QXY80921.sa-east-1.elb.amazonaws.com'), ('EnvironmentId', 'e-wtp2rpqsej'), ('EnvironmentName', 'my-env'), ('Health', 'Grey'), ('SolutionStackName', '64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8'), ('Status', 'Updating'), ('Tier', OrderedDict([('Name', 'WebServer'), ('Type', 'Standard'), ('Version', ' ')])), ('VersionLabel', '7f58-stage-150812_025409')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation configures several options in the aws:elb:loadbalancer namespace:'), ('id', 'to-configure-option-settings-1456278286349'), ('title', 'To configure option settings')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ValidateConfigurationSettings', OrderedDict([('input', OrderedDict([('ApplicationName', 'my-app'), ('EnvironmentName', 'my-env'), ('OptionSettings', [OrderedDict([('Namespace', 'aws:elasticbeanstalk:healthreporting:system'), ('OptionName', 'ConfigDocument'), ('Value', '{"CloudWatchMetrics": {"Environment": {"ApplicationLatencyP99.9": null,"InstancesSevere": 60,"ApplicationLatencyP90": 60,"ApplicationLatencyP99": null,"ApplicationLatencyP95": 60,"InstancesUnknown": 60,"ApplicationLatencyP85": 60,"InstancesInfo": null,"ApplicationRequests2xx": null,"InstancesDegraded": null,"InstancesWarning": 60,"ApplicationLatencyP50": 60,"ApplicationRequestsTotal": null,"InstancesNoData": null,"InstancesPending": 60,"ApplicationLatencyP10": null,"ApplicationRequests5xx": null,"ApplicationLatencyP75": null,"InstancesOk": 60,"ApplicationRequests3xx": null,"ApplicationRequests4xx": null},"Instance": {"ApplicationLatencyP99.9": null,"ApplicationLatencyP90": 60,"ApplicationLatencyP99": null,"ApplicationLatencyP95": null,"ApplicationLatencyP85": null,"CPUUser": 60,"ApplicationRequests2xx": null,"CPUIdle": null,"ApplicationLatencyP50": null,"ApplicationRequestsTotal": 60,"RootFilesystemUtil": null,"LoadAverage1min": null,"CPUIrq": null,"CPUNice": 60,"CPUIowait": 60,"ApplicationLatencyP10": null,"LoadAverage5min": null,"ApplicationRequests5xx": null,"ApplicationLatencyP75": 60,"CPUSystem": 60,"ApplicationRequests3xx": 60,"ApplicationRequests4xx": null,"InstanceHealth": null,"CPUSoftirq": 60}},"Version": 1}')])])])), ('output', OrderedDict([('Messages', [])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation validates a CloudWatch custom metrics config document:'), ('id', 'to-validate-configuration-settings-1456278393654'), ('title', 'To validate configuration settings')]), <botocore.model.ServiceModel object at 0x7f89fbfc5828>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddTags', OrderedDict([('input', OrderedDict([('LoadBalancerNames', ['my-load-balancer']), ('Tags', [OrderedDict([('Key', 'project'), ('Value', 'lima')]), OrderedDict([('Key', 'department'), ('Value', 'digital-media')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds two tags to the specified load balancer.'), ('id', 'elb-add-tags-1'), ('title', 'To add tags to a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ApplySecurityGroupsToLoadBalancer', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('SecurityGroups', ['sg-fc448899'])])), ('output', OrderedDict([('SecurityGroups', ['sg-fc448899'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates a security group with the specified load balancer in a VPC.'), ('id', 'elb-apply-security-groups-to-load-balancer-1'), ('title', 'To associate a security group with a load balancer in a VPC')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachLoadBalancerToSubnets', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('Subnets', ['subnet-0ecac448'])])), ('output', OrderedDict([('Subnets', ['subnet-15aaab61', 'subnet-0ecac448'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified subnet to the set of configured subnets for the specified load balancer.'), ('id', 'elb-attach-load-balancer-to-subnets-1'), ('title', 'To attach subnets to a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ConfigureHealthCheck', OrderedDict([('input', OrderedDict([('HealthCheck', OrderedDict([('HealthyThreshold', 2), ('Interval', 30), ('Target', 'HTTP:80/png'), ('Timeout', 3), ('UnhealthyThreshold', 2)])), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('HealthCheck', OrderedDict([('HealthyThreshold', 2), ('Interval', 30), ('Target', 'HTTP:80/png'), ('Timeout', 3), ('UnhealthyThreshold', 2)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example specifies the health check settings used to evaluate the health of your backend EC2 instances.'), ('id', 'elb-configure-health-check-1'), ('title', 'To specify the health check settings for your backend EC2 instances')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAppCookieStickinessPolicy', OrderedDict([('input', OrderedDict([('CookieName', 'my-app-cookie'), ('LoadBalancerName', 'my-load-balancer'), ('PolicyName', 'my-app-cookie-policy')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example generates a stickiness policy that follows the sticky session lifetimes of the application-generated cookie.'), ('id', 'elb-create-app-cookie-stickiness-policy-1'), ('title', 'To generate a stickiness policy for your load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLBCookieStickinessPolicy', OrderedDict([('input', OrderedDict([('CookieExpirationPeriod', 60), ('LoadBalancerName', 'my-load-balancer'), ('PolicyName', 'my-duration-cookie-policy')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example generates a stickiness policy with sticky session lifetimes controlled by the specified expiration period.'), ('id', 'elb-create-lb-cookie-stickiness-policy-1'), ('title', 'To generate a duration-based stickiness policy for your load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')])]), ('LoadBalancerName', 'my-load-balancer'), ('SecurityGroups', ['sg-a61988c3']), ('Subnets', ['subnet-15aaab61'])])), ('output', OrderedDict([('DNSName', 'my-load-balancer-1234567890.us-west-2.elb.amazonaws.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a load balancer with an HTTP listener in a VPC.'), ('id', 'elb-create-load-balancer-1'), ('title', 'To create an HTTP load balancer in a VPC')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('AvailabilityZones', ['us-west-2a']), ('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')])]), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('DNSName', 'my-load-balancer-123456789.us-west-2.elb.amazonaws.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a load balancer with an HTTP listener in EC2-Classic.'), ('id', 'elb-create-load-balancer-2'), ('title', 'To create an HTTP load balancer in EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')]), OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 443), ('Protocol', 'HTTPS'), ('SSLCertificateId', 'arn:aws:iam::123456789012:server-certificate/my-server-cert')])]), ('LoadBalancerName', 'my-load-balancer'), ('SecurityGroups', ['sg-a61988c3']), ('Subnets', ['subnet-15aaab61'])])), ('output', OrderedDict([('DNSName', 'my-load-balancer-1234567890.us-west-2.elb.amazonaws.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a load balancer with an HTTPS listener in a VPC.'), ('id', 'elb-create-load-balancer-3'), ('title', 'To create an HTTPS load balancer in a VPC')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('AvailabilityZones', ['us-west-2a']), ('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')]), OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 443), ('Protocol', 'HTTPS'), ('SSLCertificateId', 'arn:aws:iam::123456789012:server-certificate/my-server-cert')])]), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('DNSName', 'my-load-balancer-123456789.us-west-2.elb.amazonaws.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a load balancer with an HTTPS listener in EC2-Classic.'), ('id', 'elb-create-load-balancer-4'), ('title', 'To create an HTTPS load balancer in EC2-Classic')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')])]), ('LoadBalancerName', 'my-load-balancer'), ('Scheme', 'internal'), ('SecurityGroups', ['sg-a61988c3']), ('Subnets', ['subnet-15aaab61'])])), ('output', OrderedDict([('DNSName', 'internal-my-load-balancer-123456789.us-west-2.elb.amazonaws.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an internal load balancer with an HTTP listener in a VPC.'), ('id', 'elb-create-load-balancer-5'), ('title', 'To create an internal load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancerListeners', OrderedDict([('input', OrderedDict([('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')])]), ('LoadBalancerName', 'my-load-balancer')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a listener for your load balancer at port 80 using the HTTP protocol.'), ('id', 'elb-create-load-balancer-listeners-1'), ('title', 'To create an HTTP listener for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancerListeners', OrderedDict([('input', OrderedDict([('Listeners', [OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 443), ('Protocol', 'HTTPS'), ('SSLCertificateId', 'arn:aws:iam::123456789012:server-certificate/my-server-cert')])]), ('LoadBalancerName', 'my-load-balancer')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a listener for your load balancer at port 443 using the HTTPS protocol.'), ('id', 'elb-create-load-balancer-listeners-2'), ('title', 'To create an HTTPS listener for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancerPolicy', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('PolicyAttributes', [OrderedDict([('AttributeName', 'ProxyProtocol'), ('AttributeValue', 'true')])]), ('PolicyName', 'my-ProxyProtocol-policy'), ('PolicyTypeName', 'ProxyProtocolPolicyType')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a policy that enables Proxy Protocol on the specified load balancer.'), ('id', 'elb-create-load-balancer-policy-1'), ('title', 'To create a policy that enables Proxy Protocol on a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancerPolicy', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('PolicyAttributes', [OrderedDict([('AttributeName', 'PublicKey'), ('AttributeValue', 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwAYUjnfyEyXr1pxjhFWBpMlggUcqoi3kl+dS74kj//c6x7ROtusUaeQCTgIUkayttRDWchuqo1pHC1u+n5xxXnBBe2ejbb2WRsKIQ5rXEeixsjFpFsojpSQKkzhVGI6mJVZBJDVKSHmswnwLBdofLhzvllpovBPTHe+o4haAWvDBALJU0pkSI1FecPHcs2hwxf14zHoXy1e2k36A64nXW43wtfx5qcVSIxtCEOjnYRg7RPvybaGfQ+v6Iaxb/+7J5kEvZhTFQId+bSiJImF1FSUT1W1xwzBZPUbcUkkXDj45vC2s3Z8E+Lk7a3uZhvsQHLZnrfuWjBWGWvZ/MhZYgEXAMPLE')])]), ('PolicyName', 'my-PublicKey-policy'), ('PolicyTypeName', 'PublicKeyPolicyType')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a public key policy.'), ('id', 'elb-create-load-balancer-policy-2'), ('title', 'To create a public key policy')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancerPolicy', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('PolicyAttributes', [OrderedDict([('AttributeName', 'PublicKeyPolicyName'), ('AttributeValue', 'my-PublicKey-policy')])]), ('PolicyName', 'my-authentication-policy'), ('PolicyTypeName', 'BackendServerAuthenticationPolicyType')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a backend server authentication policy that enables authentication on your backend instance using a public key policy.'), ('id', 'elb-create-load-balancer-policy-3'), ('title', 'To create a backend server authentication policy')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLoadBalancer', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified load balancer.'), ('id', 'elb-delete-load-balancer-1'), ('title', 'To delete a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLoadBalancerListeners', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('LoadBalancerPorts', [80])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the listener for the specified port from the specified load balancer.'), ('id', 'elb-delete-load-balancer-listeners-1'), ('title', 'To delete a listener from your load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLoadBalancerPolicy', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('PolicyName', 'my-duration-cookie-policy')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified policy from the specified load balancer. The policy must not be enabled on any listener.'), ('id', 'elb-delete-load-balancer-policy-1'), ('title', 'To delete a policy from your load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeregisterInstancesFromLoadBalancer', OrderedDict([('input', OrderedDict([('Instances', [OrderedDict([('InstanceId', 'i-d6f6fae3')])]), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('Instances', [OrderedDict([('InstanceId', 'i-207d9717')]), OrderedDict([('InstanceId', 'i-afefb49b')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deregisters the specified instance from the specified load balancer.'), ('id', 'elb-deregister-instances-from-load-balancer-1'), ('title', 'To deregister instances from a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeInstanceHealth', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('InstanceStates', [OrderedDict([('Description', 'N/A'), ('InstanceId', 'i-207d9717'), ('ReasonCode', 'N/A'), ('State', 'InService')]), OrderedDict([('Description', 'N/A'), ('InstanceId', 'i-afefb49b'), ('ReasonCode', 'N/A'), ('State', 'InService')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the health of the instances for the specified load balancer.'), ('id', 'elb-describe-instance-health-1'), ('title', 'To describe the health of the instances for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('LoadBalancerAttributes', OrderedDict([('AccessLog', OrderedDict([('Enabled', False)])), ('ConnectionDraining', OrderedDict([('Enabled', False), ('Timeout', 300)])), ('ConnectionSettings', OrderedDict([('IdleTimeout', 60)])), ('CrossZoneLoadBalancing', OrderedDict([('Enabled', False)]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the attributes of the specified load balancer.'), ('id', 'elb-describe-load-balancer-attributes-1'), ('title', 'To describe the attributes of a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancerPolicies', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('PolicyNames', ['my-authentication-policy'])])), ('output', OrderedDict([('PolicyDescriptions', [OrderedDict([('PolicyAttributeDescriptions', [OrderedDict([('AttributeName', 'PublicKeyPolicyName'), ('AttributeValue', 'my-PublicKey-policy')])]), ('PolicyName', 'my-authentication-policy'), ('PolicyTypeName', 'BackendServerAuthenticationPolicyType')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified policy associated with the specified load balancer.'), ('id', 'elb-describe-load-balancer-policies-1'), ('title', 'To describe a policy associated with a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancerPolicyTypes', OrderedDict([('input', OrderedDict([('PolicyTypeNames', ['ProxyProtocolPolicyType'])])), ('output', OrderedDict([('PolicyTypeDescriptions', [OrderedDict([('Description', 'Policy that controls whether to include the IP address and port of the originating request for TCP messages. This policy operates on TCP listeners only.'), ('PolicyAttributeTypeDescriptions', [OrderedDict([('AttributeName', 'ProxyProtocol'), ('AttributeType', 'Boolean'), ('Cardinality', 'ONE')])]), ('PolicyTypeName', 'ProxyProtocolPolicyType')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified load balancer policy type.'), ('id', 'elb-describe-load-balancer-policy-types-1'), ('title', 'To describe a load balancer policy type defined by Elastic Load Balancing')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancers', OrderedDict([('input', OrderedDict([('LoadBalancerNames', ['my-load-balancer'])])), ('output', OrderedDict([('LoadBalancerDescriptions', [OrderedDict([('AvailabilityZones', ['us-west-2a']), ('BackendServerDescriptions', [OrderedDict([('InstancePort', 80), ('PolicyNames', ['my-ProxyProtocol-policy'])])]), ('CanonicalHostedZoneName', 'my-load-balancer-1234567890.us-west-2.elb.amazonaws.com'), ('CanonicalHostedZoneNameID', 'Z3DZXE0EXAMPLE'), ('CreatedTime', '2015-03-19T03:24:02.650Z'), ('DNSName', 'my-load-balancer-1234567890.us-west-2.elb.amazonaws.com'), ('HealthCheck', OrderedDict([('HealthyThreshold', 2), ('Interval', 30), ('Target', 'HTTP:80/png'), ('Timeout', 3), ('UnhealthyThreshold', 2)])), ('Instances', [OrderedDict([('InstanceId', 'i-207d9717')]), OrderedDict([('InstanceId', 'i-afefb49b')])]), ('ListenerDescriptions', [OrderedDict([('Listener', OrderedDict([('InstancePort', 80), ('InstanceProtocol', 'HTTP'), ('LoadBalancerPort', 80), ('Protocol', 'HTTP')])), ('PolicyNames', [])]), OrderedDict([('Listener', OrderedDict([('InstancePort', 443), ('InstanceProtocol', 'HTTPS'), ('LoadBalancerPort', 443), ('Protocol', 'HTTPS'), ('SSLCertificateId', 'arn:aws:iam::123456789012:server-certificate/my-server-cert')])), ('PolicyNames', ['ELBSecurityPolicy-2015-03'])])]), ('LoadBalancerName', 'my-load-balancer'), ('Policies', OrderedDict([('AppCookieStickinessPolicies', []), ('LBCookieStickinessPolicies', [OrderedDict([('CookieExpirationPeriod', 60), ('PolicyName', 'my-duration-cookie-policy')])]), ('OtherPolicies', ['my-PublicKey-policy', 'my-authentication-policy', 'my-SSLNegotiation-policy', 'my-ProxyProtocol-policy', 'ELBSecurityPolicy-2015-03'])])), ('Scheme', 'internet-facing'), ('SecurityGroups', ['sg-a61988c3']), ('SourceSecurityGroup', OrderedDict([('GroupName', 'my-elb-sg'), ('OwnerAlias', '123456789012')])), ('Subnets', ['subnet-15aaab61']), ('VPCId', 'vpc-a01106c2')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified load balancer.'), ('id', 'elb-describe-load-balancers-1'), ('title', 'To describe one of your load balancers')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTags', OrderedDict([('input', OrderedDict([('LoadBalancerNames', ['my-load-balancer'])])), ('output', OrderedDict([('TagDescriptions', [OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('Tags', [OrderedDict([('Key', 'project'), ('Value', 'lima')]), OrderedDict([('Key', 'department'), ('Value', 'digital-media')])])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the tags for the specified load balancer.'), ('id', 'elb-describe-tags-1'), ('title', 'To describe the tags for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetachLoadBalancerFromSubnets', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('Subnets', ['subnet-0ecac448'])])), ('output', OrderedDict([('Subnets', ['subnet-15aaab61'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example detaches the specified load balancer from the specified subnet.'), ('id', 'elb-detach-load-balancer-from-subnets-1'), ('title', 'To detach a load balancer from a subnet')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisableAvailabilityZonesForLoadBalancer', OrderedDict([('input', OrderedDict([('AvailabilityZones', ['us-west-2a']), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('AvailabilityZones', ['us-west-2b'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example removes the specified Availability Zone from the set of Availability Zones for the specified load balancer.'), ('id', 'elb-disable-availability-zones-for-load-balancer-1'), ('title', 'To disable an Availability Zone for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnableAvailabilityZonesForLoadBalancer', OrderedDict([('input', OrderedDict([('AvailabilityZones', ['us-west-2b']), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('AvailabilityZones', ['us-west-2a', 'us-west-2b'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified Availability Zone to the specified load balancer.'), ('id', 'elb-enable-availability-zones-for-load-balancer-1'), ('title', 'To enable an Availability Zone for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('LoadBalancerAttributes', OrderedDict([('CrossZoneLoadBalancing', OrderedDict([('Enabled', True)]))])), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('LoadBalancerAttributes', OrderedDict([('CrossZoneLoadBalancing', OrderedDict([('Enabled', True)]))])), ('LoadBalancerName', 'my-load-balancer')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables cross-zone load balancing for the specified load balancer.'), ('id', 'elb-modify-load-balancer-attributes-1'), ('title', 'To enable cross-zone load balancing')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('LoadBalancerAttributes', OrderedDict([('ConnectionDraining', OrderedDict([('Enabled', True), ('Timeout', 300)]))])), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('LoadBalancerAttributes', OrderedDict([('ConnectionDraining', OrderedDict([('Enabled', True), ('Timeout', 300)]))])), ('LoadBalancerName', 'my-load-balancer')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables connection draining for the specified load balancer.'), ('id', 'elb-modify-load-balancer-attributes-2'), ('title', 'To enable connection draining')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterInstancesWithLoadBalancer', OrderedDict([('input', OrderedDict([('Instances', [OrderedDict([('InstanceId', 'i-d6f6fae3')])]), ('LoadBalancerName', 'my-load-balancer')])), ('output', OrderedDict([('Instances', [OrderedDict([('InstanceId', 'i-d6f6fae3')]), OrderedDict([('InstanceId', 'i-207d9717')]), OrderedDict([('InstanceId', 'i-afefb49b')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example registers the specified instance with the specified load balancer.'), ('id', 'elb-register-instances-with-load-balancer-1'), ('title', 'To register instances with a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveTags', OrderedDict([('input', OrderedDict([('LoadBalancerNames', ['my-load-balancer']), ('Tags', [OrderedDict([('Key', 'project')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example removes the specified tag from the specified load balancer.'), ('id', 'elb-remove-tags-1'), ('title', 'To remove tags from a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetLoadBalancerListenerSSLCertificate', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('LoadBalancerPort', 443), ('SSLCertificateId', 'arn:aws:iam::123456789012:server-certificate/new-server-cert')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example replaces the existing SSL certificate for the specified HTTPS listener.'), ('id', 'elb-set-load-balancer-listener-ssl-certificate-1'), ('title', 'To update the SSL certificate for an HTTPS listener')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetLoadBalancerPoliciesForBackendServer', OrderedDict([('input', OrderedDict([('InstancePort', 80), ('LoadBalancerName', 'my-load-balancer'), ('PolicyNames', ['my-ProxyProtocol-policy'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example replaces the policies that are currently associated with the specified port.'), ('id', 'elb-set-load-balancer-policies-for-backend-server-1'), ('title', 'To replace the policies associated with a port for a backend instance')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetLoadBalancerPoliciesOfListener', OrderedDict([('input', OrderedDict([('LoadBalancerName', 'my-load-balancer'), ('LoadBalancerPort', 80), ('PolicyNames', ['my-SSLNegotiation-policy'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example replaces the policies that are currently associated with the specified listener.'), ('id', 'elb-set-load-balancer-policies-of-listener-1'), ('title', 'To replace the policies associated with a listener')]), <botocore.model.ServiceModel object at 0x7f8a0004b208>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddTags', OrderedDict([('input', OrderedDict([('ResourceArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188']), ('Tags', [OrderedDict([('Key', 'project'), ('Value', 'lima')]), OrderedDict([('Key', 'department'), ('Value', 'digital-media')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified tags to the specified load balancer.'), ('id', 'elbv2-add-tags-1'), ('title', 'To add tags to a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateListener', OrderedDict([('input', OrderedDict([('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 80), ('Protocol', 'HTTP')])), ('output', OrderedDict([('Listeners', [OrderedDict([('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 80), ('Protocol', 'HTTP')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an HTTP listener for the specified load balancer that forwards requests to the specified target group.'), ('id', 'elbv2-create-listener-1'), ('title', 'To create an HTTP listener')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateListener', OrderedDict([('input', OrderedDict([('Certificates', [OrderedDict([('CertificateArn', 'arn:aws:iam::123456789012:server-certificate/my-server-cert')])]), ('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 443), ('Protocol', 'HTTPS'), ('SslPolicy', 'ELBSecurityPolicy-2015-05')])), ('output', OrderedDict([('Listeners', [OrderedDict([('Certificates', [OrderedDict([('CertificateArn', 'arn:aws:iam::123456789012:server-certificate/my-server-cert')])]), ('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 443), ('Protocol', 'HTTPS'), ('SslPolicy', 'ELBSecurityPolicy-2015-05')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an HTTPS listener for the specified load balancer that forwards requests to the specified target group. Note that you must specify an SSL certificate for an HTTPS listener. You can create and manage certificates using AWS Certificate Manager (ACM). Alternatively, you can create a certificate using SSL/TLS tools, get the certificate signed by a certificate authority (CA), and upload the certificate to AWS Identity and Access Management (IAM).'), ('id', 'elbv2-create-listener-2'), ('title', 'To create an HTTPS listener')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('Name', 'my-load-balancer'), ('Subnets', ['subnet-b7d581c0', 'subnet-8360a9e7'])])), ('output', OrderedDict([('LoadBalancers', [OrderedDict([('AvailabilityZones', [OrderedDict([('SubnetId', 'subnet-8360a9e7'), ('ZoneName', 'us-west-2a')]), OrderedDict([('SubnetId', 'subnet-b7d581c0'), ('ZoneName', 'us-west-2b')])]), ('CanonicalHostedZoneId', 'Z2P70J7EXAMPLE'), ('CreatedTime', '2016-03-25T21:26:12.920Z'), ('DNSName', 'my-load-balancer-424835706.us-west-2.elb.amazonaws.com'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('LoadBalancerName', 'my-load-balancer'), ('Scheme', 'internet-facing'), ('SecurityGroups', ['sg-5943793c']), ('State', OrderedDict([('Code', 'provisioning')])), ('Type', 'application'), ('VpcId', 'vpc-3ac0fb5f')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an Internet-facing load balancer and enables the Availability Zones for the specified subnets.'), ('id', 'elbv2-create-load-balancer-1'), ('title', 'To create an Internet-facing load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoadBalancer', OrderedDict([('input', OrderedDict([('Name', 'my-internal-load-balancer'), ('Scheme', 'internal'), ('SecurityGroups', []), ('Subnets', ['subnet-b7d581c0', 'subnet-8360a9e7'])])), ('output', OrderedDict([('LoadBalancers', [OrderedDict([('AvailabilityZones', [OrderedDict([('SubnetId', 'subnet-8360a9e7'), ('ZoneName', 'us-west-2a')]), OrderedDict([('SubnetId', 'subnet-b7d581c0'), ('ZoneName', 'us-west-2b')])]), ('CanonicalHostedZoneId', 'Z2P70J7EXAMPLE'), ('CreatedTime', '2016-03-25T21:29:48.850Z'), ('DNSName', 'internal-my-internal-load-balancer-1529930873.us-west-2.elb.amazonaws.com'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-internal-load-balancer/5b49b8d4303115c2'), ('LoadBalancerName', 'my-internal-load-balancer'), ('Scheme', 'internal'), ('SecurityGroups', ['sg-5943793c']), ('State', OrderedDict([('Code', 'provisioning')])), ('Type', 'application'), ('VpcId', 'vpc-3ac0fb5f')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an internal load balancer and enables the Availability Zones for the specified subnets.'), ('id', 'elbv2-create-load-balancer-2'), ('title', 'To create an internal load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRule', OrderedDict([('input', OrderedDict([('Actions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('Conditions', [OrderedDict([('Field', 'path-pattern'), ('Values', ['/img/*'])])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'), ('Priority', 10)])), ('output', OrderedDict([('Rules', [OrderedDict([('Actions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('Conditions', [OrderedDict([('Field', 'path-pattern'), ('Values', ['/img/*'])])]), ('IsDefault', False), ('Priority', '10'), ('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a rule that forwards requests to the specified target group if the URL contains the specified pattern (for example, /img/*).'), ('id', 'elbv2-create-rule-1'), ('title', 'To create a rule')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateTargetGroup', OrderedDict([('input', OrderedDict([('Name', 'my-targets'), ('Port', 80), ('Protocol', 'HTTP'), ('VpcId', 'vpc-3ac0fb5f')])), ('output', OrderedDict([('TargetGroups', [OrderedDict([('HealthCheckIntervalSeconds', 30), ('HealthCheckPath', '/'), ('HealthCheckPort', 'traffic-port'), ('HealthCheckProtocol', 'HTTP'), ('HealthCheckTimeoutSeconds', 5), ('HealthyThresholdCount', 5), ('Matcher', OrderedDict([('HttpCode', '200')])), ('Port', 80), ('Protocol', 'HTTP'), ('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('TargetGroupName', 'my-targets'), ('UnhealthyThresholdCount', 2), ('VpcId', 'vpc-3ac0fb5f')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a target group that you can use to route traffic to targets using HTTP on port 80. This target group uses the default health check configuration.'), ('id', 'elbv2-create-target-group-1'), ('title', 'To create a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteListener', OrderedDict([('input', OrderedDict([('ListenerArn', 'arn:aws:elasticloadbalancing:ua-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified listener.'), ('id', 'elbv2-delete-listener-1'), ('title', 'To delete a listener')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLoadBalancer', OrderedDict([('input', OrderedDict([('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified load balancer.'), ('id', 'elbv2-delete-load-balancer-1'), ('title', 'To delete a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRule', OrderedDict([('input', OrderedDict([('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/1291d13826f405c3')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified rule.'), ('id', 'elbv2-delete-rule-1'), ('title', 'To delete a rule')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTargetGroup', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified target group.'), ('id', 'elbv2-delete-target-group-1'), ('title', 'To delete a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeregisterTargets', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Targets', [OrderedDict([('Id', 'i-0f76fade')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deregisters the specified instance from the specified target group.'), ('id', 'elbv2-deregister-targets-1'), ('title', 'To deregister a target from a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeListeners', OrderedDict([('input', OrderedDict([('ListenerArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'])])), ('output', OrderedDict([('Listeners', [OrderedDict([('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 80), ('Protocol', 'HTTP')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified listener.'), ('id', 'elbv2-describe-listeners-1'), ('title', 'To describe a listener')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188')])), ('output', OrderedDict([('Attributes', [OrderedDict([('Key', 'access_logs.s3.enabled'), ('Value', 'false')]), OrderedDict([('Key', 'idle_timeout.timeout_seconds'), ('Value', '60')]), OrderedDict([('Key', 'access_logs.s3.prefix'), ('Value', '')]), OrderedDict([('Key', 'deletion_protection.enabled'), ('Value', 'false')]), OrderedDict([('Key', 'access_logs.s3.bucket'), ('Value', '')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the attributes of the specified load balancer.'), ('id', 'elbv2-describe-load-balancer-attributes-1'), ('title', 'To describe load balancer attributes')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeLoadBalancers', OrderedDict([('input', OrderedDict([('LoadBalancerArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'])])), ('output', OrderedDict([('LoadBalancers', [OrderedDict([('AvailabilityZones', [OrderedDict([('SubnetId', 'subnet-8360a9e7'), ('ZoneName', 'us-west-2a')]), OrderedDict([('SubnetId', 'subnet-b7d581c0'), ('ZoneName', 'us-west-2b')])]), ('CanonicalHostedZoneId', 'Z2P70J7EXAMPLE'), ('CreatedTime', '2016-03-25T21:26:12.920Z'), ('DNSName', 'my-load-balancer-424835706.us-west-2.elb.amazonaws.com'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('LoadBalancerName', 'my-load-balancer'), ('Scheme', 'internet-facing'), ('SecurityGroups', ['sg-5943793c']), ('State', OrderedDict([('Code', 'active')])), ('Type', 'application'), ('VpcId', 'vpc-3ac0fb5f')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified load balancer.'), ('id', 'elbv2-describe-load-balancers-1'), ('title', 'To describe a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeRules', OrderedDict([('input', OrderedDict([('RuleArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee'])])), ('output', OrderedDict([('Rules', [OrderedDict([('Actions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('Conditions', [OrderedDict([('Field', 'path-pattern'), ('Values', ['/img/*'])])]), ('IsDefault', False), ('Priority', '10'), ('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified rule.'), ('id', 'elbv2-describe-rules-1'), ('title', 'To describe a rule')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSSLPolicies', OrderedDict([('input', OrderedDict([('Names', ['ELBSecurityPolicy-2015-05'])])), ('output', OrderedDict([('SslPolicies', [OrderedDict([('Ciphers', [OrderedDict([('Name', 'ECDHE-ECDSA-AES128-GCM-SHA256'), ('Priority', 1)]), OrderedDict([('Name', 'ECDHE-RSA-AES128-GCM-SHA256'), ('Priority', 2)]), OrderedDict([('Name', 'ECDHE-ECDSA-AES128-SHA256'), ('Priority', 3)]), OrderedDict([('Name', 'ECDHE-RSA-AES128-SHA256'), ('Priority', 4)]), OrderedDict([('Name', 'ECDHE-ECDSA-AES128-SHA'), ('Priority', 5)]), OrderedDict([('Name', 'ECDHE-RSA-AES128-SHA'), ('Priority', 6)]), OrderedDict([('Name', 'DHE-RSA-AES128-SHA'), ('Priority', 7)]), OrderedDict([('Name', 'ECDHE-ECDSA-AES256-GCM-SHA384'), ('Priority', 8)]), OrderedDict([('Name', 'ECDHE-RSA-AES256-GCM-SHA384'), ('Priority', 9)]), OrderedDict([('Name', 'ECDHE-ECDSA-AES256-SHA384'), ('Priority', 10)]), OrderedDict([('Name', 'ECDHE-RSA-AES256-SHA384'), ('Priority', 11)]), OrderedDict([('Name', 'ECDHE-RSA-AES256-SHA'), ('Priority', 12)]), OrderedDict([('Name', 'ECDHE-ECDSA-AES256-SHA'), ('Priority', 13)]), OrderedDict([('Name', 'AES128-GCM-SHA256'), ('Priority', 14)]), OrderedDict([('Name', 'AES128-SHA256'), ('Priority', 15)]), OrderedDict([('Name', 'AES128-SHA'), ('Priority', 16)]), OrderedDict([('Name', 'AES256-GCM-SHA384'), ('Priority', 17)]), OrderedDict([('Name', 'AES256-SHA256'), ('Priority', 18)]), OrderedDict([('Name', 'AES256-SHA'), ('Priority', 19)])]), ('Name', 'ELBSecurityPolicy-2015-05'), ('SslProtocols', ['TLSv1', 'TLSv1.1', 'TLSv1.2'])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified policy used for SSL negotiation.'), ('id', 'elbv2-describe-ssl-policies-1'), ('title', 'To describe a policy used for SSL negotiation')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTags', OrderedDict([('input', OrderedDict([('ResourceArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'])])), ('output', OrderedDict([('TagDescriptions', [OrderedDict([('ResourceArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Tags', [OrderedDict([('Key', 'project'), ('Value', 'lima')]), OrderedDict([('Key', 'department'), ('Value', 'digital-media')])])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the tags assigned to the specified load balancer.'), ('id', 'elbv2-describe-tags-1'), ('title', 'To describe the tags assigned to a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTargetGroupAttributes', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067')])), ('output', OrderedDict([('Attributes', [OrderedDict([('Key', 'stickiness.enabled'), ('Value', 'false')]), OrderedDict([('Key', 'deregistration_delay.timeout_seconds'), ('Value', '300')]), OrderedDict([('Key', 'stickiness.type'), ('Value', 'lb_cookie')]), OrderedDict([('Key', 'stickiness.lb_cookie.duration_seconds'), ('Value', '86400')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the attributes of the specified target group.'), ('id', 'elbv2-describe-target-group-attributes-1'), ('title', 'To describe target group attributes')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTargetGroups', OrderedDict([('input', OrderedDict([('TargetGroupArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'])])), ('output', OrderedDict([('TargetGroups', [OrderedDict([('HealthCheckIntervalSeconds', 30), ('HealthCheckPath', '/'), ('HealthCheckPort', 'traffic-port'), ('HealthCheckProtocol', 'HTTP'), ('HealthCheckTimeoutSeconds', 5), ('HealthyThresholdCount', 5), ('LoadBalancerArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188']), ('Matcher', OrderedDict([('HttpCode', '200')])), ('Port', 80), ('Protocol', 'HTTP'), ('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('TargetGroupName', 'my-targets'), ('UnhealthyThresholdCount', 2), ('VpcId', 'vpc-3ac0fb5f')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the specified target group.'), ('id', 'elbv2-describe-target-groups-1'), ('title', 'To describe a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTargetHealth', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067')])), ('output', OrderedDict([('TargetHealthDescriptions', [OrderedDict([('Target', OrderedDict([('Id', 'i-0f76fade'), ('Port', 80)])), ('TargetHealth', OrderedDict([('Description', 'Given target group is not configured to receive traffic from ELB'), ('Reason', 'Target.NotInUse'), ('State', 'unused')]))]), OrderedDict([('HealthCheckPort', '80'), ('Target', OrderedDict([('Id', 'i-0f76fade'), ('Port', 80)])), ('TargetHealth', OrderedDict([('State', 'healthy')]))])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This example describes the health of the targets for the specified target group. One target is healthy but the other is not specified in an action, so it can't receive traffic from the load balancer."), ('id', 'elbv2-describe-target-health-1'), ('title', 'To describe the health of the targets for a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTargetHealth', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Targets', [OrderedDict([('Id', 'i-0f76fade'), ('Port', 80)])])])), ('output', OrderedDict([('TargetHealthDescriptions', [OrderedDict([('HealthCheckPort', '80'), ('Target', OrderedDict([('Id', 'i-0f76fade'), ('Port', 80)])), ('TargetHealth', OrderedDict([('State', 'healthy')]))])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example describes the health of the specified target. This target is healthy.'), ('id', 'elbv2-describe-target-health-2'), ('title', 'To describe the health of a target')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyListener', OrderedDict([('input', OrderedDict([('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-new-targets/2453ed029918f21f'), ('Type', 'forward')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2')])), ('output', OrderedDict([('Listeners', [OrderedDict([('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-new-targets/2453ed029918f21f'), ('Type', 'forward')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 80), ('Protocol', 'HTTP')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the default action for the specified listener.'), ('id', 'elbv2-modify-listener-1'), ('title', 'To change the default action for a listener')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyListener', OrderedDict([('input', OrderedDict([('Certificates', [OrderedDict([('CertificateArn', 'arn:aws:iam::123456789012:server-certificate/my-new-server-cert')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/0467ef3c8400ae65')])), ('output', OrderedDict([('Listeners', [OrderedDict([('Certificates', [OrderedDict([('CertificateArn', 'arn:aws:iam::123456789012:server-certificate/my-new-server-cert')])]), ('DefaultActions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('ListenerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/0467ef3c8400ae65'), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Port', 443), ('Protocol', 'HTTPS'), ('SslPolicy', 'ELBSecurityPolicy-2015-05')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the server certificate for the specified HTTPS listener.'), ('id', 'elbv2-modify-listener-2'), ('title', 'To change the server certificate')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('Attributes', [OrderedDict([('Key', 'deletion_protection.enabled'), ('Value', 'true')])]), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188')])), ('output', OrderedDict([('Attributes', [OrderedDict([('Key', 'deletion_protection.enabled'), ('Value', 'true')]), OrderedDict([('Key', 'access_logs.s3.enabled'), ('Value', 'false')]), OrderedDict([('Key', 'idle_timeout.timeout_seconds'), ('Value', '60')]), OrderedDict([('Key', 'access_logs.s3.prefix'), ('Value', '')]), OrderedDict([('Key', 'access_logs.s3.bucket'), ('Value', '')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables deletion protection for the specified load balancer.'), ('id', 'elbv2-modify-load-balancer-attributes-1'), ('title', 'To enable deletion protection')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('Attributes', [OrderedDict([('Key', 'idle_timeout.timeout_seconds'), ('Value', '30')])]), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188')])), ('output', OrderedDict([('Attributes', [OrderedDict([('Key', 'idle_timeout.timeout_seconds'), ('Value', '30')]), OrderedDict([('Key', 'access_logs.s3.enabled'), ('Value', 'false')]), OrderedDict([('Key', 'access_logs.s3.prefix'), ('Value', '')]), OrderedDict([('Key', 'deletion_protection.enabled'), ('Value', 'true')]), OrderedDict([('Key', 'access_logs.s3.bucket'), ('Value', '')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the idle timeout value for the specified load balancer.'), ('id', 'elbv2-modify-load-balancer-attributes-2'), ('title', 'To change the idle timeout')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyLoadBalancerAttributes', OrderedDict([('input', OrderedDict([('Attributes', [OrderedDict([('Key', 'access_logs.s3.enabled'), ('Value', 'true')]), OrderedDict([('Key', 'access_logs.s3.bucket'), ('Value', 'my-loadbalancer-logs')]), OrderedDict([('Key', 'access_logs.s3.prefix'), ('Value', 'myapp')])]), ('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188')])), ('output', OrderedDict([('Attributes', [OrderedDict([('Key', 'access_logs.s3.enabled'), ('Value', 'true')]), OrderedDict([('Key', 'access_logs.s3.bucket'), ('Value', 'my-load-balancer-logs')]), OrderedDict([('Key', 'access_logs.s3.prefix'), ('Value', 'myapp')]), OrderedDict([('Key', 'idle_timeout.timeout_seconds'), ('Value', '60')]), OrderedDict([('Key', 'deletion_protection.enabled'), ('Value', 'false')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables access logs for the specified load balancer. Note that the S3 bucket must exist in the same region as the load balancer and must have a policy attached that grants access to the Elastic Load Balancing service.'), ('id', 'elbv2-modify-load-balancer-attributes-3'), ('title', 'To enable access logs')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyRule', OrderedDict([('input', OrderedDict([('Conditions', [OrderedDict([('Field', 'path-pattern'), ('Values', ['/images/*'])])]), ('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee')])), ('output', OrderedDict([('Rules', [OrderedDict([('Actions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('Conditions', [OrderedDict([('Field', 'path-pattern'), ('Values', ['/images/*'])])]), ('IsDefault', False), ('Priority', '10'), ('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example modifies the condition for the specified rule.'), ('id', 'elbv2-modify-rule-1'), ('title', 'To modify a rule')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyTargetGroup', OrderedDict([('input', OrderedDict([('HealthCheckPort', '443'), ('HealthCheckProtocol', 'HTTPS'), ('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-https-targets/2453ed029918f21f')])), ('output', OrderedDict([('TargetGroups', [OrderedDict([('HealthCheckIntervalSeconds', 30), ('HealthCheckPort', '443'), ('HealthCheckProtocol', 'HTTPS'), ('HealthCheckTimeoutSeconds', 5), ('HealthyThresholdCount', 5), ('LoadBalancerArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188']), ('Matcher', OrderedDict([('HttpCode', '200')])), ('Port', 443), ('Protocol', 'HTTPS'), ('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-https-targets/2453ed029918f21f'), ('TargetGroupName', 'my-https-targets'), ('UnhealthyThresholdCount', 2), ('VpcId', 'vpc-3ac0fb5f')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the configuration of the health checks used to evaluate the health of the targets for the specified target group.'), ('id', 'elbv2-modify-target-group-1'), ('title', 'To modify the health check configuration for a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyTargetGroupAttributes', OrderedDict([('input', OrderedDict([('Attributes', [OrderedDict([('Key', 'deregistration_delay.timeout_seconds'), ('Value', '600')])]), ('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067')])), ('output', OrderedDict([('Attributes', [OrderedDict([('Key', 'stickiness.enabled'), ('Value', 'false')]), OrderedDict([('Key', 'deregistration_delay.timeout_seconds'), ('Value', '600')]), OrderedDict([('Key', 'stickiness.type'), ('Value', 'lb_cookie')]), OrderedDict([('Key', 'stickiness.lb_cookie.duration_seconds'), ('Value', '86400')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example sets the deregistration delay timeout to the specified value for the specified target group.'), ('id', 'elbv2-modify-target-group-attributes-1'), ('title', 'To modify the deregistration delay timeout')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterTargets', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Targets', [OrderedDict([('Id', 'i-80c8dd94')]), OrderedDict([('Id', 'i-ceddcd4d')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example registers the specified instances with the specified target group.'), ('id', 'elbv2-register-targets-1'), ('title', 'To register targets with a target group')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterTargets', OrderedDict([('input', OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-new-targets/3bb63f11dfb0faf9'), ('Targets', [OrderedDict([('Id', 'i-80c8dd94'), ('Port', 80)]), OrderedDict([('Id', 'i-80c8dd94'), ('Port', 766)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example registers the specified instance with the specified target group using multiple ports. This enables you to register ECS containers on the same instance as targets in the target group.'), ('id', 'elbv2-register-targets-2'), ('title', 'To register targets with a target group using port overrides')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveTags', OrderedDict([('input', OrderedDict([('ResourceArns', ['arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188']), ('TagKeys', ['project', 'department'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example removes the specified tags from the specified load balancer.'), ('id', 'elbv2-remove-tags-1'), ('title', 'To remove tags from a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetRulePriorities', OrderedDict([('input', OrderedDict([('RulePriorities', [OrderedDict([('Priority', 5), ('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/1291d13826f405c3')])])])), ('output', OrderedDict([('Rules', [OrderedDict([('Actions', [OrderedDict([('TargetGroupArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'), ('Type', 'forward')])]), ('Conditions', [OrderedDict([('Field', 'path-pattern'), ('Values', ['/img/*'])])]), ('IsDefault', False), ('Priority', '5'), ('RuleArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/1291d13826f405c3')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example sets the priority of the specified rule.'), ('id', 'elbv2-set-rule-priorities-1'), ('title', 'To set the rule priority')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetSecurityGroups', OrderedDict([('input', OrderedDict([('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('SecurityGroups', ['sg-5943793c'])])), ('output', OrderedDict([('SecurityGroupIds', ['sg-5943793c'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example associates the specified security group with the specified load balancer.'), ('id', 'elbv2-set-security-groups-1'), ('title', 'To associate a security group with a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetSubnets', OrderedDict([('input', OrderedDict([('LoadBalancerArn', 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'), ('Subnets', ['subnet-8360a9e7', 'subnet-b7d581c0'])])), ('output', OrderedDict([('AvailabilityZones', [OrderedDict([('SubnetId', 'subnet-8360a9e7'), ('ZoneName', 'us-west-2a')]), OrderedDict([('SubnetId', 'subnet-b7d581c0'), ('ZoneName', 'us-west-2b')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example enables the Availability Zones for the specified subnets for the specified load balancer.'), ('id', 'elbv2-set-subnets-1'), ('title', 'To enable Availability Zones for a load balancer')]), <botocore.model.ServiceModel object at 0x7f8a03659470>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AbortMultipartUpload', OrderedDict([('input', OrderedDict([('accountId', '-'), ('uploadId', '19gaRezEXAMPLES6Ry5YYdqthHOC_kGRCT03L9yetr220UmPtBYKk-OssZtLqyFu7sY1_lR7vgFuJV6NtcV5zpsJ'), ('vaultName', 'my-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example deletes an in-progress multipart upload to a vault named my-vault:'), ('id', 'f3d907f6-e71c-420c-8f71-502346a2c48a'), ('title', 'To abort a multipart upload identified by the upload ID')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AbortVaultLock', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example aborts the vault locking process if the vault lock is not in the Locked state for the vault named examplevault.'), ('id', 'to-abort-a-vault-lock-1481839357947'), ('title', 'To abort a vault lock')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddTagsToVault', OrderedDict([('input', OrderedDict([('Tags', OrderedDict([('examplekey1', 'examplevalue1'), ('examplekey2', 'examplevalue2')])), ('accountId', '-'), ('vaultName', 'my-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example adds two tags to a my-vault.'), ('id', 'add-tags-to-vault-post-tags-add-1481663457694'), ('title', 'To add tags to a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CompleteMultipartUpload', OrderedDict([('input', OrderedDict([('accountId', '-'), ('archiveSize', '3145728'), ('checksum', '9628195fcdbcbbe76cdde456d4646fa7de5f219fb39823836d81f0cc0e18aa67'), ('uploadId', '19gaRezEXAMPLES6Ry5YYdqthHOC_kGRCT03L9yetr220UmPtBYKk-OssZtLqyFu7sY1_lR7vgFuJV6NtcV5zpsJ'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('archiveId', 'NkbByEejwEggmBz2fTHgJrg0XBoDfjP4q6iu87-TjhqG6eGoOY9Z8i1_AUyUsuhPAdTqLHy8pTl5nfCFJmDl2yEZONi5L26Omw12vcs01MNGntHEQL8MBfGlqrEXAMPLEArchiveId'), ('checksum', '9628195fcdbcbbe76cdde456d4646fa7de5f219fb39823836d81f0cc0e18aa67'), ('location', '/111122223333/vaults/my-vault/archives/NkbByEejwEggmBz2fTHgJrg0XBoDfjP4q6iu87-TjhqG6eGoOY9Z8i1_AUyUsuhPAdTqLHy8pTl5nfCFJmDl2yEZONi5L26Omw12vcs01MNGntHEQL8MBfGlqrEXAMPLEArchiveId')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example completes a multipart upload for a 3 MiB archive.'), ('id', '272aa0b8-e44c-4a64-add2-ad905a37984d'), ('title', 'To complete a multipart upload')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CompleteVaultLock', OrderedDict([('input', OrderedDict([('accountId', '-'), ('lockId', 'AE863rKkWZU53SLW5be4DUcW'), ('vaultName', 'example-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example completes the vault locking process by transitioning the vault lock from the InProgress state to the Locked state.'), ('id', 'to-complete-a-vault-lock-1481839721312'), ('title', 'To complete a vault lock')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateVault', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('location', '/111122223333/vaults/my-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a new vault named my-vault.'), ('id', '1dc0313d-ace1-4e6c-9d13-1ec7813b14b7'), ('title', 'To create a new vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteArchive', OrderedDict([('input', OrderedDict([('accountId', '-'), ('archiveId', 'NkbByEejwEggmBz2fTHgJrg0XBoDfjP4q6iu87-TjhqG6eGoOY9Z8i1_AUyUsuhPAdTqLHy8pTl5nfCFJmDl2yEZONi5L26Omw12vcs01MNGntHEQL8MBfGlqrEXAMPLEArchiveId'), ('vaultName', 'examplevault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example deletes the archive specified by the archive ID.'), ('id', 'delete-archive-1481667809463'), ('title', 'To delete an archive')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVault', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'my-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example deletes a vault named my-vault:'), ('id', '7f7f000b-4bdb-40d2-91e6-7c902f60f60f'), ('title', 'To delete a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVaultAccessPolicy', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example deletes the access policy associated with the vault named examplevault.'), ('id', 'to-delete-the-vault-access-policy-1481840424677'), ('title', 'To delete the vault access policy')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVaultNotifications', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example deletes the notification configuration set for the vault named examplevault.'), ('id', 'to-delete-the-notification-configuration-set-for-a-vault-1481840646090'), ('title', 'To delete the notification configuration set for a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeJob', OrderedDict([('input', OrderedDict([('accountId', '-'), ('jobId', 'zbxcm3Z_3z5UkoroF7SuZKrxgGoDc3RloGduS7Eg-RO47Yc6FxsdGBgf_Q2DK5Ejh18CnTS5XW4_XqlNHS61dsO4Cn'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('Action', 'InventoryRetrieval'), ('Completed', False), ('CreationDate', '2015-07-17T20:23:41.616Z'), ('InventoryRetrievalParameters', OrderedDict([('Format', 'JSON')])), ('JobId', 'zbxcm3Z_3z5UkoroF7SuZKrxgGoDc3RloGduS7Eg-RO47Yc6FxsdGBgf_Q2DK5Ejh18CnTS5XW4_XqlNHS61dsO4CnMW'), ('StatusCode', 'InProgress'), ('VaultARN', 'arn:aws:glacier:us-west-2:0123456789012:vaults/my-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example returns information about the previously initiated job specified by the job ID.'), ('id', 'to-get-information-about-a-job-you-previously-initiated-1481840928592'), ('title', 'To get information about a previously initiated job')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVault', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('CreationDate', '2016-09-23T19:27:18.665Z'), ('NumberOfArchives', 0), ('SizeInBytes', 0), ('VaultARN', 'arn:aws:glacier:us-west-2:111122223333:vaults/my-vault'), ('VaultName', 'my-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example retrieves data about a vault named my-vault.'), ('id', '3c1c6e9d-f5a2-427a-aa6a-f439eacfc05f'), ('title', 'To retrieve information about a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetDataRetrievalPolicy', OrderedDict([('input', OrderedDict([('accountId', '-')])), ('output', OrderedDict([('Policy', OrderedDict([('Rules', [OrderedDict([('BytesPerHour', 10737418240), ('Strategy', 'BytesPerHour')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example returns the current data retrieval policy for the account.'), ('id', 'to-get-the-current-data-retrieval-policy-for-the-account-1481851580439'), ('title', 'To get the current data retrieval policy for an account')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetJobOutput', OrderedDict([('input', OrderedDict([('accountId', '-'), ('jobId', 'zbxcm3Z_3z5UkoroF7SuZKrxgGoDc3RloGduS7Eg-RO47Yc6FxsdGBgf_Q2DK5Ejh18CnTS5XW4_XqlNHS61dsO4CnMW'), ('range', ''), ('vaultName', 'my-vaul')])), ('output', OrderedDict([('acceptRanges', 'bytes'), ('body', 'inventory-data'), ('contentType', 'application/json'), ('status', 200)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example downloads the output of a previously initiated inventory retrieval job that is identified by the job ID.'), ('id', 'to-get-the-output-of-a-previously-initiated-job-1481848550859'), ('title', 'To get the output of a previously initiated job')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetVaultAccessPolicy', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'example-vault')])), ('output', OrderedDict([('policy', OrderedDict([('Policy', '{"Version":"2012-10-17","Statement":[{"Sid":"Define-owner-access-rights","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::999999999999:root"},"Action":"glacier:DeleteArchive","Resource":"arn:aws:glacier:us-west-2:999999999999:vaults/examplevault"}]}')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example retrieves the access-policy set on the vault named example-vault.'), ('id', 'to--get-the-access-policy-set-on-the-vault-1481936004590'), ('title', 'To  get the access-policy set on the vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetVaultLock', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault')])), ('output', OrderedDict([('CreationDate', 'exampledate'), ('ExpirationDate', 'exampledate'), ('Policy', '{"Version":"2012-10-17","Statement":[{"Sid":"Define-vault-lock","Effect":"Deny","Principal":{"AWS":"arn:aws:iam::999999999999:root"},"Action":"glacier:DeleteArchive","Resource":"arn:aws:glacier:us-west-2:999999999999:vaults/examplevault","Condition":{"NumericLessThanEquals":{"glacier:ArchiveAgeinDays":"365"}}}]}'), ('State', 'InProgress')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example retrieves the attributes from the lock-policy subresource set on the vault named examplevault.'), ('id', 'to-retrieve-vault-lock-policy-related-attributes-that-are-set-on-a-vault-1481851363097'), ('title', 'To retrieve vault lock-policy related attributes that are set on a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetVaultNotifications', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('vaultNotificationConfig', OrderedDict([('Events', ['InventoryRetrievalCompleted', 'ArchiveRetrievalCompleted']), ('SNSTopic', 'arn:aws:sns:us-west-2:0123456789012:my-vault')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example retrieves the notification-configuration for the vault named my-vault.'), ('id', 'to-get-the-notification-configuration-for-the-specified-vault-1481918746677'), ('title', 'To get the notification-configuration for the specified vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('InitiateJob', OrderedDict([('input', OrderedDict([('accountId', '-'), ('jobParameters', OrderedDict([('Description', 'My inventory job'), ('Format', 'CSV'), ('SNSTopic', 'arn:aws:sns:us-west-2:111111111111:Glacier-InventoryRetrieval-topic-Example'), ('Type', 'inventory-retrieval')])), ('vaultName', 'examplevault')])), ('output', OrderedDict([('jobId', ' HkF9p6o7yjhFx-K3CGl6fuSm6VzW9T7esGQfco8nUXVYwS0jlb5gq1JZ55yHgt5vP54ZShjoQzQVVh7vEXAMPLEjobID'), ('location', '/111122223333/vaults/examplevault/jobs/HkF9p6o7yjhFx-K3CGl6fuSm6VzW9T7esGQfco8nUXVYwS0jlb5gq1JZ55yHgt5vP54ZShjoQzQVVh7vEXAMPLEjobID')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example initiates an inventory-retrieval job for the vault named examplevault.'), ('id', 'to-initiate-an-inventory-retrieval-job-1482186883826'), ('title', 'To initiate an inventory-retrieval job')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('InitiateMultipartUpload', OrderedDict([('input', OrderedDict([('accountId', '-'), ('partSize', '1048576'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('location', '/111122223333/vaults/my-vault/multipart-uploads/19gaRezEXAMPLES6Ry5YYdqthHOC_kGRCT03L9yetr220UmPtBYKk-OssZtLqyFu7sY1_lR7vgFuJV6NtcV5zpsJ'), ('uploadId', '19gaRezEXAMPLES6Ry5YYdqthHOC_kGRCT03L9yetr220UmPtBYKk-OssZtLqyFu7sY1_lR7vgFuJV6NtcV5zpsJ')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example initiates a multipart upload to a vault named my-vault with a part size of 1 MiB (1024 x 1024 bytes) per file.'), ('id', '72f2db19-3d93-4c74-b2ed-38703baacf49'), ('title', 'To initiate a multipart upload')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('InitiateVaultLock', OrderedDict([('input', OrderedDict([('accountId', '-'), ('policy', OrderedDict([('Policy', '{"Version":"2012-10-17","Statement":[{"Sid":"Define-vault-lock","Effect":"Deny","Principal":{"AWS":"arn:aws:iam::999999999999:root"},"Action":"glacier:DeleteArchive","Resource":"arn:aws:glacier:us-west-2:999999999999:vaults/examplevault","Condition":{"NumericLessThanEquals":{"glacier:ArchiveAgeinDays":"365"}}}]}')])), ('vaultName', 'my-vault')])), ('output', OrderedDict([('lockId', 'AE863rKkWZU53SLW5be4DUcW')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example initiates the vault locking process for the vault named my-vault.'), ('id', 'to-initiate-the-vault-locking-process-1481919693394'), ('title', 'To initiate the vault locking process')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListJobs', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'my-vault')])), ('output', OrderedDict([('JobList', [OrderedDict([('Action', 'ArchiveRetrieval'), ('ArchiveId', 'kKB7ymWJVpPSwhGP6ycSOAekp9ZYe_--zM_mw6k76ZFGEIWQX-ybtRDvc2VkPSDtfKmQrj0IRQLSGsNuDp-AJVlu2ccmDSyDUmZwKbwbpAdGATGDiB3hHO0bjbGehXTcApVud_wyDw'), ('ArchiveSHA256TreeHash', '9628195fcdbcbbe76cdde932d4646fa7de5f219fb39823836d81f0cc0e18aa67'), ('ArchiveSizeInBytes', 3145728), ('Completed', False), ('CreationDate', '2015-07-17T21:16:13.840Z'), ('JobDescription', 'Retrieve archive on 2015-07-17'), ('JobId', 'l7IL5-EkXyEY9Ws95fClzIbk2O5uLYaFdAYOi-azsX_Z8V6NH4yERHzars8wTKYQMX6nBDI9cMNHzyZJO59-8N9aHWav'), ('RetrievalByteRange', '0-3145727'), ('SHA256TreeHash', '9628195fcdbcbbe76cdde932d4646fa7de5f219fb39823836d81f0cc0e18aa67'), ('SNSTopic', 'arn:aws:sns:us-west-2:0123456789012:my-vault'), ('StatusCode', 'InProgress'), ('VaultARN', 'arn:aws:glacier:us-west-2:0123456789012:vaults/my-vault')]), OrderedDict([('Action', 'InventoryRetrieval'), ('Completed', False), ('CreationDate', '2015-07-17T20:23:41.616Z'), ('InventoryRetrievalParameters', OrderedDict([('Format', 'JSON')])), ('JobId', 'zbxcm3Z_3z5UkoroF7SuZKrxgGoDc3RloGduS7Eg-RO47Yc6FxsdGBgf_Q2DK5Ejh18CnTS5XW4_XqlNHS61dsO4CnMW'), ('StatusCode', 'InProgress'), ('VaultARN', 'arn:aws:glacier:us-west-2:0123456789012:vaults/my-vault')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example lists jobs for the vault named my-vault.'), ('id', 'to-list-jobs-for-a-vault-1481920530537'), ('title', 'To list jobs for a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListMultipartUploads', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault')])), ('output', OrderedDict([('Marker', 'null'), ('UploadsList', [OrderedDict([('ArchiveDescription', 'archive 1'), ('CreationDate', '2012-03-19T23:20:59.130Z'), ('MultipartUploadId', 'xsQdFIRsfJr20CW2AbZBKpRZAFTZSJIMtL2hYf8mvp8dM0m4RUzlaqoEye6g3h3ecqB_zqwB7zLDMeSWhwo65re4C4Ev'), ('PartSizeInBytes', 4194304), ('VaultARN', 'arn:aws:glacier:us-west-2:012345678901:vaults/examplevault')]), OrderedDict([('ArchiveDescription', 'archive 2'), ('CreationDate', '2012-04-01T15:00:00.000Z'), ('MultipartUploadId', 'nPyGOnyFcx67qqX7E-0tSGiRi88hHMOwOxR-_jNyM6RjVMFfV29lFqZ3rNsSaWBugg6OP92pRtufeHdQH7ClIpSF6uJc'), ('PartSizeInBytes', 4194304), ('VaultARN', 'arn:aws:glacier:us-west-2:012345678901:vaults/examplevault')]), OrderedDict([('ArchiveDescription', 'archive 3'), ('CreationDate', '2012-03-20T17:03:43.221Z'), ('MultipartUploadId', 'qt-RBst_7yO8gVIonIBsAxr2t-db0pE4s8MNeGjKjGdNpuU-cdSAcqG62guwV9r5jh5mLyFPzFEitTpNE7iQfHiu1XoV'), ('PartSizeInBytes', 4194304), ('VaultARN', 'arn:aws:glacier:us-west-2:012345678901:vaults/examplevault')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example lists all the in-progress multipart uploads for the vault named examplevault.'), ('id', 'to-list-all-the-in-progress-multipart-uploads-for-a-vault-1481935250590'), ('title', 'To list all the in-progress multipart uploads for a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListParts', OrderedDict([('input', OrderedDict([('accountId', '-'), ('uploadId', 'OW2fM5iVylEpFEMM9_HpKowRapC3vn5sSL39_396UW9zLFUWVrnRHaPjUJddQ5OxSHVXjYtrN47NBZ-khxOjyEXAMPLE'), ('vaultName', 'examplevault')])), ('output', OrderedDict([('ArchiveDescription', 'archive description'), ('CreationDate', '2012-03-20T17:03:43.221Z'), ('Marker', 'null'), ('MultipartUploadId', 'OW2fM5iVylEpFEMM9_HpKowRapC3vn5sSL39_396UW9zLFUWVrnRHaPjUJddQ5OxSHVXjYtrN47NBZ-khxOjyEXAMPLE'), ('PartSizeInBytes', 4194304), ('Parts', [OrderedDict([('RangeInBytes', '0-4194303'), ('SHA256TreeHash', '01d34dabf7be316472c93b1ef80721f5d4')]), OrderedDict([('RangeInBytes', '4194304-8388607'), ('SHA256TreeHash', '0195875365afda349fc21c84c099987164')])]), ('VaultARN', 'arn:aws:glacier:us-west-2:012345678901:vaults/demo1-vault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example lists all the parts of a multipart upload.'), ('id', 'to-list-the-parts-of-an-archive-that-have-been-uploaded-in-a-multipart-upload-1481921767590'), ('title', 'To list the parts of an archive that have been uploaded in a multipart upload')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListProvisionedCapacity', OrderedDict([('input', OrderedDict([('accountId', '-')])), ('output', OrderedDict([('ProvisionedCapacityList', [OrderedDict([('CapacityId', 'zSaq7NzHFQDANTfQkDen4V7z'), ('ExpirationDate', '2016-12-12T00:00:00.000Z'), ('StartDate', '2016-11-11T20:11:51.095Z')]), OrderedDict([('CapacityId', 'yXaq7NzHFQNADTfQkDen4V7z'), ('ExpirationDate', '2017-01-15T00:00:00.000Z'), ('StartDate', '2016-12-13T20:11:51.095Z')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example lists the provisioned capacity units for an account.'), ('id', 'to-list-the-provisioned-capacity-units-for-an-account-1481923656130'), ('title', 'To list the provisioned capacity units for an account')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTagsForVault', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault')])), ('output', OrderedDict([('Tags', OrderedDict([('date', 'july2015'), ('id', '1234')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example lists all the tags attached to the vault examplevault.'), ('id', 'list-tags-for-vault-1481755839720'), ('title', 'To list the tags for a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListVaults', OrderedDict([('input', OrderedDict([('accountId', '-'), ('limit', ''), ('marker', '')])), ('output', OrderedDict([('VaultList', [OrderedDict([('CreationDate', '2015-04-06T21:23:45.708Z'), ('LastInventoryDate', '2015-04-07T00:26:19.028Z'), ('NumberOfArchives', 1), ('SizeInBytes', 3178496), ('VaultARN', 'arn:aws:glacier:us-west-2:0123456789012:vaults/my-vault'), ('VaultName', 'my-vault')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example lists all vaults owned by the specified AWS account.'), ('id', 'list-vaults-1481753006990'), ('title', "To list all vaults owned by the calling user's account")]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PurchaseProvisionedCapacity', OrderedDict([('input', OrderedDict([('accountId', '-')])), ('output', OrderedDict([('capacityId', 'zSaq7NzHFQDANTfQkDen4V7z')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example purchases provisioned capacity unit for an AWS account.'), ('id', 'to-purchases-a-provisioned-capacity-unit-for-an-aws-account-1481927446662'), ('title', 'To purchases a provisioned capacity unit for an AWS account')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveTagsFromVault', OrderedDict([('input', OrderedDict([('TagKeys', ['examplekey1', 'examplekey2']), ('accountId', '-'), ('vaultName', 'examplevault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example removes two tags from the vault named examplevault.'), ('id', 'remove-tags-from-vault-1481754998801'), ('title', 'To remove tags from a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetDataRetrievalPolicy', OrderedDict([('input', OrderedDict([('Policy', OrderedDict([('Rules', [OrderedDict([('BytesPerHour', 10737418240), ('Strategy', 'BytesPerHour')])])])), ('accountId', '-')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example sets and then enacts a data retrieval policy.'), ('id', 'to-set-and-then-enact-a-data-retrieval-policy--1481928352408'), ('title', 'To set and then enact a data retrieval policy ')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetVaultAccessPolicy', OrderedDict([('input', OrderedDict([('accountId', '-'), ('policy', OrderedDict([('Policy', '{"Version":"2012-10-17","Statement":[{"Sid":"Define-owner-access-rights","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::999999999999:root"},"Action":"glacier:DeleteArchive","Resource":"arn:aws:glacier:us-west-2:999999999999:vaults/examplevault"}]}')])), ('vaultName', 'examplevault')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example configures an access policy for the vault named examplevault.'), ('id', 'to--set-the-access-policy-on-a-vault-1482185872517'), ('title', 'To set the access-policy on a vault')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetVaultNotifications', OrderedDict([('input', OrderedDict([('accountId', '-'), ('vaultName', 'examplevault'), ('vaultNotificationConfig', OrderedDict([('Events', ['ArchiveRetrievalCompleted', 'InventoryRetrievalCompleted']), ('SNSTopic', 'arn:aws:sns:us-west-2:012345678901:mytopic')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example sets the examplevault notification configuration.'), ('id', 'to-configure-a-vault-to-post-a-message-to-an-amazon-simple-notification-service-amazon-sns-topic-when-jobs-complete-1482186397475'), ('title', 'To configure a vault to post a message to an Amazon SNS topic when jobs complete')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UploadArchive', OrderedDict([('input', OrderedDict([('accountId', '-'), ('archiveDescription', ''), ('body', 'example-data-to-upload'), ('checksum', ''), ('vaultName', 'my-vault')])), ('output', OrderedDict([('archiveId', 'kKB7ymWJVpPSwhGP6ycSOAekp9ZYe_--zM_mw6k76ZFGEIWQX-ybtRDvc2VkPSDtfKmQrj0IRQLSGsNuDp-AJVlu2ccmDSyDUmZwKbwbpAdGATGDiB3hHO0bjbGehXTcApVud_wyDw'), ('checksum', '969fb39823836d81f0cc028195fcdbcbbe76cdde932d4646fa7de5f21e18aa67'), ('location', '/0123456789012/vaults/my-vault/archives/kKB7ymWJVpPSwhGP6ycSOAekp9ZYe_--zM_mw6k76ZFGEIWQX-ybtRDvc2VkPSDtfKmQrj0IRQLSGsNuDp-AJVlu2ccmDSyDUmZwKbwbpAdGATGDiB3hHO0bjbGehXTcApVud_wyDw')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example adds an archive to a vault.'), ('id', 'upload-archive-1481668510494'), ('title', 'To upload an archive')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UploadMultipartPart', OrderedDict([('input', OrderedDict([('accountId', '-'), ('body', 'part1'), ('checksum', 'c06f7cd4baacb087002a99a5f48bf953'), ('range', 'bytes 0-1048575/*'), ('uploadId', '19gaRezEXAMPLES6Ry5YYdqthHOC_kGRCT03L9yetr220UmPtBYKk-OssZtLqyFu7sY1_lR7vgFuJV6NtcV5zpsJ'), ('vaultName', 'examplevault')])), ('output', OrderedDict([('checksum', 'c06f7cd4baacb087002a99a5f48bf953')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The example uploads the first 1 MiB (1024 x 1024 bytes) part of an archive.'), ('id', 'to-upload-the-first-part-of-an-archive-1481835899519'), ('title', 'To upload the first part of an archive')]), <botocore.model.ServiceModel object at 0x7f89fb0cb048>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddClientIDToOpenIDConnectProvider', OrderedDict([('input', OrderedDict([('ClientID', 'my-application-ID'), ('OpenIDConnectProviderArn', 'arn:aws:iam::123456789012:oidc-provider/server.example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following add-client-id-to-open-id-connect-provider command adds the client ID my-application-ID to the OIDC provider named server.example.com:'), ('id', '028e91f4-e2a6-4d59-9e3b-4965a3fb19be'), ('title', 'To add a client ID (audience) to an Open-ID Connect (OIDC) provider')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddRoleToInstanceProfile', OrderedDict([('input', OrderedDict([('InstanceProfileName', 'Webserver'), ('RoleName', 'S3Access')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command adds the role named S3Access to the instance profile named Webserver:'), ('id', 'c107fac3-edb6-4827-8a71-8863ec91c81f'), ('title', 'To add a role to an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddUserToGroup', OrderedDict([('input', OrderedDict([('GroupName', 'Admins'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command adds an IAM user named Bob to the IAM group named Admins:'), ('id', '619c7e6b-09f8-4036-857b-51a6ea5027ca'), ('title', 'To add a user to an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachGroupPolicy', OrderedDict([('input', OrderedDict([('GroupName', 'Finance'), ('PolicyArn', 'arn:aws:iam::aws:policy/ReadOnlyAccess')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command attaches the AWS managed policy named ReadOnlyAccess to the IAM group named Finance.'), ('id', '87551489-86f0-45db-9889-759936778f2b'), ('title', 'To attach a managed policy to an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachRolePolicy', OrderedDict([('input', OrderedDict([('PolicyArn', 'arn:aws:iam::aws:policy/ReadOnlyAccess'), ('RoleName', 'ReadOnlyRole')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command attaches the AWS managed policy named ReadOnlyAccess to the IAM role named ReadOnlyRole.'), ('id', '3e1b8c7c-99c8-4fc4-a20c-131fe3f22c7e'), ('title', 'To attach a managed policy to an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AttachUserPolicy', OrderedDict([('input', OrderedDict([('PolicyArn', 'arn:aws:iam::aws:policy/AdministratorAccess'), ('UserName', 'Alice')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command attaches the AWS managed policy named AdministratorAccess to the IAM user named Alice.'), ('id', '1372ebd8-9475-4b1a-a479-23b6fd4b8b3e'), ('title', 'To attach a managed policy to an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ChangePassword', OrderedDict([('input', OrderedDict([('NewPassword', ']35d/{pB9Fo9wJ'), ('OldPassword', '3s0K_;xh4~8XXI')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command changes the password for the current IAM user.'), ('id', '3a80c66f-bffb-46df-947c-1e8fa583b470'), ('title', 'To change the password for your IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAccessKey', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('output', OrderedDict([('AccessKey', OrderedDict([('AccessKeyId', 'AKIAIOSFODNN7EXAMPLE'), ('CreateDate', '2015-03-09T18:39:23.411Z'), ('SecretAccessKey', 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY'), ('Status', 'Active'), ('UserName', 'Bob')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command creates an access key (access key ID and secret access key) for the IAM user named Bob.'), ('id', '1fbb3211-4cf2-41db-8c20-ba58d9f5802d'), ('title', 'To create an access key for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAccountAlias', OrderedDict([('input', OrderedDict([('AccountAlias', 'examplecorp')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command associates the alias examplecorp to your AWS account.'), ('id', '5adaf6fb-94fc-4ca2-b825-2fbc2062add1'), ('title', 'To create an account alias')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateGroup', OrderedDict([('input', OrderedDict([('GroupName', 'Admins')])), ('output', OrderedDict([('Group', OrderedDict([('Arn', 'arn:aws:iam::123456789012:group/Admins'), ('CreateDate', '2015-03-09T20:30:24.940Z'), ('GroupId', 'AIDGPMS9RO4H3FEXAMPLE'), ('GroupName', 'Admins'), ('Path', '/')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command creates an IAM group named Admins.'), ('id', 'd5da2a90-5e69-4ef7-8ae8-4c33dc21fd21'), ('title', 'To create an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateInstanceProfile', OrderedDict([('input', OrderedDict([('InstanceProfileName', 'Webserver')])), ('output', OrderedDict([('InstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::123456789012:instance-profile/Webserver'), ('CreateDate', '2015-03-09T20:33:19.626Z'), ('InstanceProfileId', 'AIPAJMBYC7DLSPEXAMPLE'), ('InstanceProfileName', 'Webserver'), ('Path', '/'), ('Roles', [])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command creates an instance profile named Webserver that is ready to have a role attached and then be associated with an EC2 instance.'), ('id', '5d84e6ae-5921-4e39-8454-10232cd9ff9a'), ('title', 'To create an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateLoginProfile', OrderedDict([('input', OrderedDict([('Password', 'h]6EszR}vJ*m'), ('PasswordResetRequired', True), ('UserName', 'Bob')])), ('output', OrderedDict([('LoginProfile', OrderedDict([('CreateDate', '2015-03-10T20:55:40.274Z'), ('PasswordResetRequired', True), ('UserName', 'Bob')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "The following command changes IAM user Bob's password and sets the flag that required Bob to change the password the next time he signs in."), ('id', 'c63795bc-3444-40b3-89df-83c474ef88be'), ('title', 'To create an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateOpenIDConnectProvider', OrderedDict([('input', OrderedDict([('ClientIDList', ['my-application-id']), ('ThumbprintList', ['3768084dfb3d2b68b7897bf5f565da8efEXAMPLE']), ('Url', 'https://server.example.com')])), ('output', OrderedDict([('OpenIDConnectProviderArn', 'arn:aws:iam::123456789012:oidc-provider/server.example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example defines a new OIDC provider in IAM with a client ID of my-application-id and pointing at the server with a URL of https://server.example.com.'), ('id', '4e4a6bff-cc97-4406-922e-0ab4a82cdb63'), ('title', 'To create an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRole', OrderedDict([('input', OrderedDict([('AssumeRolePolicyDocument', '<URL-encoded-JSON>'), ('Path', '/'), ('RoleName', 'Test-Role')])), ('output', OrderedDict([('Role', OrderedDict([('Arn', 'arn:aws:iam::123456789012:role/Test-Role'), ('AssumeRolePolicyDocument', '<URL-encoded-JSON>'), ('CreateDate', '2013-06-07T20:43:32.821Z'), ('Path', '/'), ('RoleId', 'AKIAIOSFODNN7EXAMPLE'), ('RoleName', 'Test-Role')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command creates a role named Test-Role and attaches a trust policy to it that is provided as a URL-encoded JSON string.'), ('id', 'eaaa4b5f-51f1-4f73-b0d3-30127040eff8'), ('title', 'To create an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateUser', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('output', OrderedDict([('User', OrderedDict([('Arn', 'arn:aws:iam::123456789012:user/Bob'), ('CreateDate', '2013-06-08T03:20:41.270Z'), ('Path', '/'), ('UserId', 'AKIAIOSFODNN7EXAMPLE'), ('UserName', 'Bob')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following create-user command creates an IAM user named Bob in the current account.'), ('id', 'eb15f90b-e5f5-4af8-a594-e4e82b181a62'), ('title', 'To create an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAccessKey', OrderedDict([('input', OrderedDict([('AccessKeyId', 'AKIDPMS9RO4H3FEXAMPLE'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command deletes one access key (access key ID and secret access key) assigned to the IAM user named Bob.'), ('id', '61a785a7-d30a-415a-ae18-ab9236e56871'), ('title', 'To delete an access key for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAccountAlias', OrderedDict([('input', OrderedDict([('AccountAlias', 'mycompany')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the alias mycompany from the current AWS account:'), ('id', '7abeca65-04a8-4500-a890-47f1092bf766'), ('title', 'To delete an account alias')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAccountPasswordPolicy', OrderedDict([('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the password policy from the current AWS account:'), ('id', '9ddf755e-495c-49bc-ae3b-ea6cc9b8ebcf'), ('title', 'To delete the current account password policy')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteGroupPolicy', OrderedDict([('input', OrderedDict([('GroupName', 'Admins'), ('PolicyName', 'ExamplePolicy')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command deletes the policy named ExamplePolicy from the group named Admins:'), ('id', 'e683f2bd-98a4-4fe0-bb66-33169c692d4a'), ('title', 'To delete a policy from an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteInstanceProfile', OrderedDict([('input', OrderedDict([('InstanceProfileName', 'ExampleInstanceProfile')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command deletes the instance profile named ExampleInstanceProfile'), ('id', '12d74fb8-3433-49db-8171-a1fc764e354d'), ('title', 'To delete an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLoginProfile', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command deletes the password for the IAM user named Bob.'), ('id', '1fe57059-fc73-42e2-b992-517b7d573b5c'), ('title', 'To delete a password for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRole', OrderedDict([('input', OrderedDict([('RoleName', 'Test-Role')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the role named Test-Role.'), ('id', '053cdf74-9bda-44b8-bdbb-140fd5a32603'), ('title', 'To delete an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRolePolicy', OrderedDict([('input', OrderedDict([('PolicyName', 'ExamplePolicy'), ('RoleName', 'Test-Role')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the policy named ExamplePolicy from the role named Test-Role.'), ('id', '9c667336-fde3-462c-b8f3-950800821e27'), ('title', 'To remove a policy from an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSigningCertificate', OrderedDict([('input', OrderedDict([('CertificateId', 'TA7SMP42TDN5Z26OBPJE7EXAMPLE'), ('UserName', 'Anika')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command deletes the specified signing certificate for the IAM user named Anika.'), ('id', 'e3357586-ba9c-4070-b35b-d1a899b71987'), ('title', 'To delete a signing certificate for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteUser', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the IAM user named Bob from the current account.'), ('id', 'a13dc3f9-59fe-42d9-abbb-fb98b204fdf0'), ('title', 'To delete an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteUserPolicy', OrderedDict([('input', OrderedDict([('PolicyName', 'ExamplePolicy'), ('UserName', 'Juan')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following delete-user-policy command removes the specified policy from the IAM user named Juan:'), ('id', '34f07ddc-9bc1-4f52-bc59-cd0a3ccd06c8'), ('title', 'To remove a policy from an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVirtualMFADevice', OrderedDict([('input', OrderedDict([('SerialNumber', 'arn:aws:iam::123456789012:mfa/ExampleName')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following delete-virtual-mfa-device command removes the specified MFA device from the current AWS account.'), ('id', '2933b08b-dbe7-4b89-b8c1-fdf75feea1ee'), ('title', 'To remove a virtual MFA device')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetAccountPasswordPolicy', OrderedDict([('output', OrderedDict([('PasswordPolicy', OrderedDict([('AllowUsersToChangePassword', False), ('ExpirePasswords', False), ('HardExpiry', False), ('MaxPasswordAge', 90), ('MinimumPasswordLength', 8), ('PasswordReusePrevention', 12), ('RequireLowercaseCharacters', False), ('RequireNumbers', True), ('RequireSymbols', True), ('RequireUppercaseCharacters', False)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command displays details about the password policy for the current AWS account.'), ('id', '5e4598c7-c425-431f-8af1-19073b3c4a5f'), ('title', 'To see the current account password policy')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetAccountSummary', OrderedDict([('output', OrderedDict([('SummaryMap', OrderedDict([('AccessKeysPerUserQuota', 2), ('AccountAccessKeysPresent', 1), ('AccountMFAEnabled', 0), ('AccountSigningCertificatesPresent', 0), ('AttachedPoliciesPerGroupQuota', 10), ('AttachedPoliciesPerRoleQuota', 10), ('AttachedPoliciesPerUserQuota', 10), ('GroupPolicySizeQuota', 5120), ('Groups', 15), ('GroupsPerUserQuota', 10), ('GroupsQuota', 100), ('MFADevices', 6), ('MFADevicesInUse', 3), ('Policies', 8), ('PoliciesQuota', 1000), ('PolicySizeQuota', 5120), ('PolicyVersionsInUse', 22), ('PolicyVersionsInUseQuota', 10000), ('ServerCertificates', 1), ('ServerCertificatesQuota', 20), ('SigningCertificatesPerUserQuota', 2), ('UserPolicySizeQuota', 2048), ('Users', 27), ('UsersQuota', 5000), ('VersionsPerPolicyQuota', 5)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command returns information about the IAM entity quotas and usage in the current AWS account.'), ('id', '9d8447af-f344-45de-8219-2cebc3cce7f2'), ('title', 'To get information about IAM entity quotas and usage in the current account')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetInstanceProfile', OrderedDict([('input', OrderedDict([('InstanceProfileName', 'ExampleInstanceProfile')])), ('output', OrderedDict([('InstanceProfile', OrderedDict([('Arn', 'arn:aws:iam::336924118301:instance-profile/ExampleInstanceProfile'), ('CreateDate', '2013-06-12T23:52:02Z'), ('InstanceProfileId', 'AID2MAB8DPLSRHEXAMPLE'), ('InstanceProfileName', 'ExampleInstanceProfile'), ('Path', '/'), ('Roles', [OrderedDict([('Arn', 'arn:aws:iam::336924118301:role/Test-Role'), ('AssumeRolePolicyDocument', '<URL-encoded-JSON>'), ('CreateDate', '2013-01-09T06:33:26Z'), ('Path', '/'), ('RoleId', 'AIDGPMS9RO4H3FEXAMPLE'), ('RoleName', 'Test-Role')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command gets information about the instance profile named ExampleInstanceProfile.'), ('id', '463b9ba5-18cc-4608-9ccb-5a7c6b6e5fe7'), ('title', 'To get information about an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetLoginProfile', OrderedDict([('input', OrderedDict([('UserName', 'Anika')])), ('output', OrderedDict([('LoginProfile', OrderedDict([('CreateDate', '2012-09-21T23:03:39Z'), ('UserName', 'Anika')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command gets information about the password for the IAM user named Anika.'), ('id', 'd6b580cc-909f-4925-9caa-d425cbc1ad47'), ('title', 'To get password information for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRole', OrderedDict([('input', OrderedDict([('RoleName', 'Test-Role')])), ('output', OrderedDict([('Role', OrderedDict([('Arn', 'arn:aws:iam::123456789012:role/Test-Role'), ('AssumeRolePolicyDocument', '<URL-encoded-JSON>'), ('CreateDate', '2013-04-18T05:01:58Z'), ('Path', '/'), ('RoleId', 'AIDIODR4TAW7CSEXAMPLE'), ('RoleName', 'Test-Role')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command gets information about the role named Test-Role.'), ('id', '5b7d03a6-340c-472d-aa77-56425950d8b0'), ('title', 'To get information about an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetUser', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('output', OrderedDict([('User', OrderedDict([('Arn', 'arn:aws:iam::123456789012:user/Bob'), ('CreateDate', '2012-09-21T23:03:13Z'), ('Path', '/'), ('UserId', 'AKIAIOSFODNN7EXAMPLE'), ('UserName', 'Bob')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command gets information about the IAM user named Bob.'), ('id', 'ede000a1-9e4c-40db-bd0a-d4f95e41a6ab'), ('title', 'To get information about an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAccessKeys', OrderedDict([('input', OrderedDict([('UserName', 'Alice')])), ('output', OrderedDict([('AccessKeyMetadata', [OrderedDict([('AccessKeyId', 'AKIA111111111EXAMPLE'), ('CreateDate', '2016-12-01T22:19:58Z'), ('Status', 'Active'), ('UserName', 'Alice')]), OrderedDict([('AccessKeyId', 'AKIA222222222EXAMPLE'), ('CreateDate', '2016-12-01T22:20:01Z'), ('Status', 'Active'), ('UserName', 'Alice')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the access keys IDs for the IAM user named Alice.'), ('id', '15571463-ebea-411a-a021-1c76bd2a3625'), ('title', 'To list the access key IDs for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAccountAliases', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('AccountAliases', ['exmaple-corporation'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the aliases for the current account.'), ('id', 'e27b457a-16f9-4e05-a006-3df7b3472741'), ('title', 'To list account aliases')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListGroupPolicies', OrderedDict([('input', OrderedDict([('GroupName', 'Admins')])), ('output', OrderedDict([('PolicyNames', ['AdminRoot', 'KeyPolicy'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the names of in-line policies that are embedded in the IAM group named Admins.'), ('id', '02de5095-2410-4d3a-ac1b-cc40234af68f'), ('title', 'To list the in-line policies for an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListGroups', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Groups', [OrderedDict([('Arn', 'arn:aws:iam::123456789012:group/Admins'), ('CreateDate', '2016-12-15T21:40:08.121Z'), ('GroupId', 'AGPA1111111111EXAMPLE'), ('GroupName', 'Admins'), ('Path', '/division_abc/subdivision_xyz/')]), OrderedDict([('Arn', 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/engineering/Test'), ('CreateDate', '2016-11-30T14:10:01.156Z'), ('GroupId', 'AGP22222222222EXAMPLE'), ('GroupName', 'Test'), ('Path', '/division_abc/subdivision_xyz/product_1234/engineering/')]), OrderedDict([('Arn', 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/Managers'), ('CreateDate', '2016-06-12T20:14:52.032Z'), ('GroupId', 'AGPI3333333333EXAMPLE'), ('GroupName', 'Managers'), ('Path', '/division_abc/subdivision_xyz/product_1234/')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the IAM groups in the current account:'), ('id', 'b3ab1380-2a21-42fb-8e85-503f65512c66'), ('title', 'To list the IAM groups for the current account')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListGroupsForUser', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('output', OrderedDict([('Groups', [OrderedDict([('Arn', 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/engineering/Test'), ('CreateDate', '2016-11-30T14:10:01.156Z'), ('GroupId', 'AGP2111111111EXAMPLE'), ('GroupName', 'Test'), ('Path', '/division_abc/subdivision_xyz/product_1234/engineering/')]), OrderedDict([('Arn', 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/Managers'), ('CreateDate', '2016-06-12T20:14:52.032Z'), ('GroupId', 'AGPI222222222SEXAMPLE'), ('GroupName', 'Managers'), ('Path', '/division_abc/subdivision_xyz/product_1234/')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command displays the groups that the IAM user named Bob belongs to.'), ('id', '278ec2ee-fc28-4136-83fb-433af0ae46a2'), ('title', 'To list the groups that an IAM user belongs to')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSigningCertificates', OrderedDict([('input', OrderedDict([('UserName', 'Bob')])), ('output', OrderedDict([('Certificates', [OrderedDict([('CertificateBody', '-----BEGIN CERTIFICATE-----<certificate-body>-----END CERTIFICATE-----'), ('CertificateId', 'TA7SMP42TDN5Z26OBPJE7EXAMPLE'), ('Status', 'Active'), ('UploadDate', '2013-06-06T21:40:08Z'), ('UserName', 'Bob')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the signing certificates for the IAM user named Bob.'), ('id', 'b4c10256-4fc9-457e-b3fd-4a110d4d73dc'), ('title', 'To list the signing certificates for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListUsers', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Users', [OrderedDict([('Arn', 'arn:aws:iam::123456789012:user/division_abc/subdivision_xyz/engineering/Juan'), ('CreateDate', '2012-09-05T19:38:48Z'), ('PasswordLastUsed', '2016-09-08T21:47:36Z'), ('Path', '/division_abc/subdivision_xyz/engineering/'), ('UserId', 'AID2MAB8DPLSRHEXAMPLE'), ('UserName', 'Juan')]), OrderedDict([('Arn', 'arn:aws:iam::123456789012:user/division_abc/subdivision_xyz/engineering/Anika'), ('CreateDate', '2014-04-09T15:43:45Z'), ('PasswordLastUsed', '2016-09-24T16:18:07Z'), ('Path', '/division_abc/subdivision_xyz/engineering/'), ('UserId', 'AIDIODR4TAW7CSEXAMPLE'), ('UserName', 'Anika')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the IAM users in the current account.'), ('id', '9edfbd73-03d8-4d8a-9a79-76c85e8c8298'), ('title', 'To list IAM users')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListVirtualMFADevices', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('VirtualMFADevices', [OrderedDict([('SerialNumber', 'arn:aws:iam::123456789012:mfa/ExampleMFADevice')]), OrderedDict([('SerialNumber', 'arn:aws:iam::123456789012:mfa/Juan')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command lists the virtual MFA devices that have been configured for the current account.'), ('id', '54f9ac18-5100-4070-bec4-fe5f612710d5'), ('title', 'To list virtual MFA devices')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutGroupPolicy', OrderedDict([('input', OrderedDict([('GroupName', 'Admins'), ('PolicyDocument', '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"*","Resource":"*"}}'), ('PolicyName', 'AllPerms')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command adds a policy named AllPerms to the IAM group named Admins.'), ('id', '4bc17418-758f-4d0f-ab0c-4d00265fec2e'), ('title', 'To add a policy to a group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutRolePolicy', OrderedDict([('input', OrderedDict([('PolicyDocument', '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"s3:*","Resource":"*"}}'), ('PolicyName', 'S3AccessPolicy'), ('RoleName', 'S3Access')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command adds a permissions policy to the role named Test-Role.'), ('id', 'de62fd00-46c7-4601-9e0d-71d5fbb11ecb'), ('title', 'To attach a permissions policy to an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutUserPolicy', OrderedDict([('input', OrderedDict([('PolicyDocument', '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"*","Resource":"*"}}'), ('PolicyName', 'AllAccessPolicy'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command attaches a policy to the IAM user named Bob.'), ('id', '2551ffc6-3576-4d39-823f-30b60bffc2c7'), ('title', 'To attach a policy to an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveRoleFromInstanceProfile', OrderedDict([('input', OrderedDict([('InstanceProfileName', 'ExampleInstanceProfile'), ('RoleName', 'Test-Role')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the role named Test-Role from the instance profile named ExampleInstanceProfile.'), ('id', '6d9f46f1-9f4a-4873-b403-51a85c5c627c'), ('title', 'To remove a role from an instance profile')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveUserFromGroup', OrderedDict([('input', OrderedDict([('GroupName', 'Admins'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command removes the user named Bob from the IAM group named Admins.'), ('id', 'fb54d5b4-0caf-41d8-af0e-10a84413f174'), ('title', 'To remove a user from an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAccessKey', OrderedDict([('input', OrderedDict([('AccessKeyId', 'AKIAIOSFODNN7EXAMPLE'), ('Status', 'Inactive'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command deactivates the specified access key (access key ID and secret access key) for the IAM user named Bob.'), ('id', '02b556fd-e673-49b7-ab6b-f2f9035967d0'), ('title', 'To activate or deactivate an access key for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAccountPasswordPolicy', OrderedDict([('input', OrderedDict([('MinimumPasswordLength', 8), ('RequireNumbers', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command sets the password policy to require a minimum length of eight characters and to require one or more numbers in the password:'), ('id', 'c263a1af-37dc-4423-8dba-9790284ef5e0'), ('title', 'To set or change the current account password policy')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAssumeRolePolicy', OrderedDict([('input', OrderedDict([('PolicyDocument', '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":["ec2.amazonaws.com"]},"Action":["sts:AssumeRole"]}]}'), ('RoleName', 'S3AccessForEC2Instances')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command updates the role trust policy for the role named Test-Role:'), ('id', 'c9150063-d953-4e99-9576-9685872006c6'), ('title', 'To update the trust policy for an IAM role')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateGroup', OrderedDict([('input', OrderedDict([('GroupName', 'Test'), ('NewGroupName', 'Test-1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command changes the name of the IAM group Test to Test-1.'), ('id', 'f0cf1662-91ae-4278-a80e-7db54256ccba'), ('title', 'To rename an IAM group')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateLoginProfile', OrderedDict([('input', OrderedDict([('Password', 'SomeKindOfPassword123!@#'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command creates or changes the password for the IAM user named Bob.'), ('id', '036d9498-ecdb-4ed6-a8d8-366c383d1487'), ('title', 'To change the password for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateSigningCertificate', OrderedDict([('input', OrderedDict([('CertificateId', 'TA7SMP42TDN5Z26OBPJE7EXAMPLE'), ('Status', 'Inactive'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command changes the status of a signing certificate for a user named Bob to Inactive.'), ('id', '829aee7b-efc5-4b3b-84a5-7f899b38018d'), ('title', 'To change the active status of a signing certificate for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateUser', OrderedDict([('input', OrderedDict([('NewUserName', 'Robert'), ('UserName', 'Bob')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "The following command changes the name of the IAM user Bob to Robert. It does not change the user's path."), ('id', '275d53ed-347a-44e6-b7d0-a96276154352'), ('title', "To change an IAM user's name")]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UploadServerCertificate', OrderedDict([('input', OrderedDict([('CertificateBody', '-----BEGIN CERTIFICATE-----<a very long certificate text string>-----END CERTIFICATE-----'), ('Path', '/company/servercerts/'), ('PrivateKey', '-----BEGIN DSA PRIVATE KEY-----<a very long private key string>-----END DSA PRIVATE KEY-----'), ('ServerCertificateName', 'ProdServerCert')])), ('output', OrderedDict([('ServerCertificateMetadata', OrderedDict([('Arn', 'arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert'), ('Expiration', '2012-05-08T01:02:03.004Z'), ('Path', '/company/servercerts/'), ('ServerCertificateId', 'ASCA1111111111EXAMPLE'), ('ServerCertificateName', 'ProdServerCert'), ('UploadDate', '2010-05-08T01:02:03.004Z')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following upload-server-certificate command uploads a server certificate to your AWS account:'), ('id', '06eab6d1-ebf2-4bd9-839d-f7508b9a38b6'), ('title', 'To upload a server certificate to your AWS account')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UploadSigningCertificate', OrderedDict([('input', OrderedDict([('CertificateBody', '-----BEGIN CERTIFICATE-----<certificate-body>-----END CERTIFICATE-----'), ('UserName', 'Bob')])), ('output', OrderedDict([('Certificate', OrderedDict([('CertificateBody', '-----BEGIN CERTIFICATE-----<certificate-body>-----END CERTIFICATE-----'), ('CertificateId', 'ID123456789012345EXAMPLE'), ('Status', 'Active'), ('UploadDate', '2015-06-06T21:40:08.121Z'), ('UserName', 'Bob')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following command uploads a signing certificate for the IAM user named Bob.'), ('id', 'e67489b6-7b73-4e30-9ed3-9a9e0231e458'), ('title', 'To upload a signing certificate for an IAM user')]), <botocore.model.ServiceModel object at 0x7f8a017534a8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddAttributesToFindings', OrderedDict([('input', OrderedDict([('attributes', [OrderedDict([('key', 'Example'), ('value', 'example')])]), ('findingArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-8l1VIE0D/run/0-Z02cjjug/finding/0-T8yM9mEU'])])), ('output', OrderedDict([('failedItems', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Assigns attributes (key and value pairs) to the findings that are specified by the ARNs of the findings.'), ('id', 'add-attributes-to-findings-1481063856401'), ('title', 'Add attributes to findings')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAssessmentTarget', OrderedDict([('input', OrderedDict([('assessmentTargetName', 'ExampleAssessmentTarget'), ('resourceGroupArn', 'arn:aws:inspector:us-west-2:123456789012:resourcegroup/0-AB6DMKnv')])), ('output', OrderedDict([('assessmentTargetArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates a new assessment target using the ARN of the resource group that is generated by CreateResourceGroup. You can create up to 50 assessment targets per AWS account. You can run up to 500 concurrent agents per AWS account.'), ('id', 'create-assessment-target-1481063953657'), ('title', 'Create assessment target')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAssessmentTemplate', OrderedDict([('input', OrderedDict([('assessmentTargetArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX'), ('assessmentTemplateName', 'ExampleAssessmentTemplate'), ('durationInSeconds', 180), ('rulesPackageArns', ['arn:aws:inspector:us-west-2:758058086616:rulespackage/0-11B9DBXp']), ('userAttributesForFindings', [OrderedDict([('key', 'Example'), ('value', 'example')])])])), ('output', OrderedDict([('assessmentTemplateArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-it5r2S4T')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates an assessment template for the assessment target that is specified by the ARN of the assessment target.'), ('id', 'create-assessment-template-1481064046719'), ('title', 'Create assessment template')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateResourceGroup', OrderedDict([('input', OrderedDict([('resourceGroupTags', [OrderedDict([('key', 'Name'), ('value', 'example')])])])), ('output', OrderedDict([('resourceGroupArn', 'arn:aws:inspector:us-west-2:123456789012:resourcegroup/0-AB6DMKnv')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates a resource group using the specified set of tags (key and value pairs) that are used to select the EC2 instances to be included in an Amazon Inspector assessment target. The created resource group is then used to create an Amazon Inspector assessment target. '), ('id', 'create-resource-group-1481064169037'), ('title', 'Create resource group')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAssessmentRun', OrderedDict([('input', OrderedDict([('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-it5r2S4T/run/0-11LMTAVe')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes the assessment run that is specified by the ARN of the assessment run.'), ('id', 'delete-assessment-run-1481064251629'), ('title', 'Delete assessment run')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAssessmentTarget', OrderedDict([('input', OrderedDict([('assessmentTargetArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes the assessment target that is specified by the ARN of the assessment target.'), ('id', 'delete-assessment-target-1481064309029'), ('title', 'Delete assessment target')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAssessmentTemplate', OrderedDict([('input', OrderedDict([('assessmentTemplateArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-it5r2S4T')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes the assessment template that is specified by the ARN of the assessment template.'), ('id', 'delete-assessment-template-1481064364074'), ('title', 'Delete assessment template')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAssessmentRuns', OrderedDict([('input', OrderedDict([('assessmentRunArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE'])])), ('output', OrderedDict([('assessmentRuns', [OrderedDict([('name', 'Run 1 for ExampleAssessmentTemplate'), ('arn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE'), ('assessmentTemplateArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw'), ('completedAt', '1458680301.4'), ('createdAt', '1458680170.035'), ('dataCollected', True), ('durationInSeconds', 3600), ('notifications', []), ('rulesPackageArns', ['arn:aws:inspector:us-west-2:758058086616:rulespackage/0-X1KXtawP']), ('startedAt', '1458680170.161'), ('state', 'COMPLETED'), ('stateChangedAt', '1458680301.4'), ('stateChanges', [OrderedDict([('state', 'CREATED'), ('stateChangedAt', '1458680170.035')]), OrderedDict([('state', 'START_DATA_COLLECTION_PENDING'), ('stateChangedAt', '1458680170.065')]), OrderedDict([('state', 'START_DATA_COLLECTION_IN_PROGRESS'), ('stateChangedAt', '1458680170.096')]), OrderedDict([('state', 'COLLECTING_DATA'), ('stateChangedAt', '1458680170.161')]), OrderedDict([('state', 'STOP_DATA_COLLECTION_PENDING'), ('stateChangedAt', '1458680239.883')]), OrderedDict([('state', 'DATA_COLLECTED'), ('stateChangedAt', '1458680299.847')]), OrderedDict([('state', 'EVALUATING_RULES'), ('stateChangedAt', '1458680300.099')]), OrderedDict([('state', 'COMPLETED'), ('stateChangedAt', '1458680301.4')])]), ('userAttributesForFindings', [])])]), ('failedItems', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the assessment runs that are specified by the ARNs of the assessment runs.'), ('id', 'describte-assessment-runs-1481064424352'), ('title', 'Describte assessment runs')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAssessmentTargets', OrderedDict([('input', OrderedDict([('assessmentTargetArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq'])])), ('output', OrderedDict([('assessmentTargets', [OrderedDict([('name', 'ExampleAssessmentTarget'), ('arn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq'), ('createdAt', '1458074191.459'), ('resourceGroupArn', 'arn:aws:inspector:us-west-2:123456789012:resourcegroup/0-PyGXopAI'), ('updatedAt', '1458074191.459')])]), ('failedItems', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the assessment targets that are specified by the ARNs of the assessment targets.'), ('id', 'describte-assessment-targets-1481064527735'), ('title', 'Describte assessment targets')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAssessmentTemplates', OrderedDict([('input', OrderedDict([('assessmentTemplateArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw'])])), ('output', OrderedDict([('assessmentTemplates', [OrderedDict([('name', 'ExampleAssessmentTemplate'), ('arn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw'), ('assessmentTargetArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq'), ('createdAt', '1458074191.844'), ('durationInSeconds', 3600), ('rulesPackageArns', ['arn:aws:inspector:us-west-2:758058086616:rulespackage/0-X1KXtawP']), ('userAttributesForFindings', [])])]), ('failedItems', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the assessment templates that are specified by the ARNs of the assessment templates.'), ('id', 'describte-assessment-templates-1481064606829'), ('title', 'Describte assessment templates')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeCrossAccountAccessRole', OrderedDict([('output', OrderedDict([('registeredAt', '1458069182.826'), ('roleArn', 'arn:aws:iam::123456789012:role/inspector'), ('valid', True)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the IAM role that enables Amazon Inspector to access your AWS account.'), ('id', 'describte-cross-account-access-role-1481064682267'), ('title', 'Describte cross account access role')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeFindings', OrderedDict([('input', OrderedDict([('findingArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE/finding/0-HwPnsDm4'])])), ('output', OrderedDict([('failedItems', OrderedDict()), ('findings', [OrderedDict([('arn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE/finding/0-HwPnsDm4'), ('assetAttributes', OrderedDict([('ipv4Addresses', []), ('schemaVersion', 1)])), ('assetType', 'ec2-instance'), ('attributes', []), ('confidence', 10), ('createdAt', '1458680301.37'), ('description', 'Amazon Inspector did not find any potential security issues during this assessment.'), ('indicatorOfCompromise', False), ('numericSeverity', 0), ('recommendation', 'No remediation needed.'), ('schemaVersion', 1), ('service', 'Inspector'), ('serviceAttributes', OrderedDict([('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE'), ('rulesPackageArn', 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-X1KXtawP'), ('schemaVersion', 1)])), ('severity', 'Informational'), ('title', 'No potential security issues found'), ('updatedAt', '1458680301.37'), ('userAttributes', [])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the findings that are specified by the ARNs of the findings.'), ('id', 'describte-findings-1481064771803'), ('title', 'Describe findings')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeResourceGroups', OrderedDict([('input', OrderedDict([('resourceGroupArns', ['arn:aws:inspector:us-west-2:123456789012:resourcegroup/0-PyGXopAI'])])), ('output', OrderedDict([('failedItems', OrderedDict()), ('resourceGroups', [OrderedDict([('arn', 'arn:aws:inspector:us-west-2:123456789012:resourcegroup/0-PyGXopAI'), ('createdAt', '1458074191.098'), ('tags', [OrderedDict([('key', 'Name'), ('value', 'example')])])])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the resource groups that are specified by the ARNs of the resource groups.'), ('id', 'describe-resource-groups-1481065787743'), ('title', 'Describe resource groups')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeRulesPackages', OrderedDict([('input', OrderedDict([('rulesPackageArns', ['arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ'])])), ('output', OrderedDict([('failedItems', OrderedDict()), ('rulesPackages', [OrderedDict([('version', '1.1'), ('name', 'Security Best Practices'), ('arn', 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ'), ('description', 'The rules in this package help determine whether your systems are configured securely.'), ('provider', 'Amazon Web Services, Inc.')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the rules packages that are specified by the ARNs of the rules packages.'), ('id', 'describe-rules-packages-1481069641979'), ('title', 'Describe rules packages')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetTelemetryMetadata', OrderedDict([('input', OrderedDict([('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE')])), ('output', OrderedDict([('telemetryMetadata', [OrderedDict([('count', 2), ('dataSize', 345), ('messageType', 'InspectorDuplicateProcess')]), OrderedDict([('count', 3), ('dataSize', 255), ('messageType', 'InspectorTimeEventMsg')]), OrderedDict([('count', 4), ('dataSize', 1082), ('messageType', 'InspectorNetworkInterface')]), OrderedDict([('count', 2), ('dataSize', 349), ('messageType', 'InspectorDnsEntry')]), OrderedDict([('count', 11), ('dataSize', 2514), ('messageType', 'InspectorDirectoryInfoMsg')]), OrderedDict([('count', 1), ('dataSize', 179), ('messageType', 'InspectorTcpV6ListeningPort')]), OrderedDict([('count', 101), ('dataSize', 10949), ('messageType', 'InspectorTerminal')]), OrderedDict([('count', 26), ('dataSize', 5916), ('messageType', 'InspectorUser')]), OrderedDict([('count', 282), ('dataSize', 32148), ('messageType', 'InspectorDynamicallyLoadedCodeModule')]), OrderedDict([('count', 18), ('dataSize', 10172), ('messageType', 'InspectorCreateProcess')]), OrderedDict([('count', 3), ('dataSize', 8001), ('messageType', 'InspectorProcessPerformance')]), OrderedDict([('count', 1), ('dataSize', 360), ('messageType', 'InspectorOperatingSystem')]), OrderedDict([('count', 6), ('dataSize', 546), ('messageType', 'InspectorStopProcess')]), OrderedDict([('count', 1), ('dataSize', 1553), ('messageType', 'InspectorInstanceMetaData')]), OrderedDict([('count', 2), ('dataSize', 434), ('messageType', 'InspectorTcpV4Connection')]), OrderedDict([('count', 474), ('dataSize', 2960322), ('messageType', 'InspectorPackageInfo')]), OrderedDict([('count', 3), ('dataSize', 2235), ('messageType', 'InspectorSystemPerformance')]), OrderedDict([('count', 105), ('dataSize', 46048), ('messageType', 'InspectorCodeModule')]), OrderedDict([('count', 1), ('dataSize', 182), ('messageType', 'InspectorUdpV6ListeningPort')]), OrderedDict([('count', 2), ('dataSize', 371), ('messageType', 'InspectorUdpV4ListeningPort')]), OrderedDict([('count', 18), ('dataSize', 8362), ('messageType', 'InspectorKernelModule')]), OrderedDict([('count', 29), ('dataSize', 48788), ('messageType', 'InspectorConfigurationInfo')]), OrderedDict([('count', 1), ('dataSize', 79), ('messageType', 'InspectorMonitoringStart')]), OrderedDict([('count', 5), ('dataSize', 0), ('messageType', 'InspectorSplitMsgBegin')]), OrderedDict([('count', 51), ('dataSize', 4593), ('messageType', 'InspectorGroup')]), OrderedDict([('count', 1), ('dataSize', 184), ('messageType', 'InspectorTcpV4ListeningPort')]), OrderedDict([('count', 1159), ('dataSize', 3146579), ('messageType', 'Total')]), OrderedDict([('count', 5), ('dataSize', 0), ('messageType', 'InspectorSplitMsgEnd')]), OrderedDict([('count', 1), ('dataSize', 612), ('messageType', 'InspectorLoadImageInProcess')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Information about the data that is collected for the specified assessment run.'), ('id', 'get-telemetry-metadata-1481066021297'), ('title', 'Get telemetry metadata')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAssessmentRunAgents', OrderedDict([('input', OrderedDict([('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE'), ('maxResults', 123)])), ('output', OrderedDict([('assessmentRunAgents', [OrderedDict([('agentHealth', 'HEALTHY'), ('agentHealthCode', 'RUNNING'), ('agentId', 'i-49113b93'), ('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE'), ('telemetryMetadata', [OrderedDict([('count', 2), ('dataSize', 345), ('messageType', 'InspectorDuplicateProcess')]), OrderedDict([('count', 3), ('dataSize', 255), ('messageType', 'InspectorTimeEventMsg')]), OrderedDict([('count', 4), ('dataSize', 1082), ('messageType', 'InspectorNetworkInterface')]), OrderedDict([('count', 2), ('dataSize', 349), ('messageType', 'InspectorDnsEntry')]), OrderedDict([('count', 11), ('dataSize', 2514), ('messageType', 'InspectorDirectoryInfoMsg')]), OrderedDict([('count', 1), ('dataSize', 179), ('messageType', 'InspectorTcpV6ListeningPort')]), OrderedDict([('count', 101), ('dataSize', 10949), ('messageType', 'InspectorTerminal')]), OrderedDict([('count', 26), ('dataSize', 5916), ('messageType', 'InspectorUser')]), OrderedDict([('count', 282), ('dataSize', 32148), ('messageType', 'InspectorDynamicallyLoadedCodeModule')]), OrderedDict([('count', 18), ('dataSize', 10172), ('messageType', 'InspectorCreateProcess')]), OrderedDict([('count', 3), ('dataSize', 8001), ('messageType', 'InspectorProcessPerformance')]), OrderedDict([('count', 1), ('dataSize', 360), ('messageType', 'InspectorOperatingSystem')]), OrderedDict([('count', 6), ('dataSize', 546), ('messageType', 'InspectorStopProcess')]), OrderedDict([('count', 1), ('dataSize', 1553), ('messageType', 'InspectorInstanceMetaData')]), OrderedDict([('count', 2), ('dataSize', 434), ('messageType', 'InspectorTcpV4Connection')]), OrderedDict([('count', 474), ('dataSize', 2960322), ('messageType', 'InspectorPackageInfo')]), OrderedDict([('count', 3), ('dataSize', 2235), ('messageType', 'InspectorSystemPerformance')]), OrderedDict([('count', 105), ('dataSize', 46048), ('messageType', 'InspectorCodeModule')]), OrderedDict([('count', 1), ('dataSize', 182), ('messageType', 'InspectorUdpV6ListeningPort')]), OrderedDict([('count', 2), ('dataSize', 371), ('messageType', 'InspectorUdpV4ListeningPort')]), OrderedDict([('count', 18), ('dataSize', 8362), ('messageType', 'InspectorKernelModule')]), OrderedDict([('count', 29), ('dataSize', 48788), ('messageType', 'InspectorConfigurationInfo')]), OrderedDict([('count', 1), ('dataSize', 79), ('messageType', 'InspectorMonitoringStart')]), OrderedDict([('count', 5), ('dataSize', 0), ('messageType', 'InspectorSplitMsgBegin')]), OrderedDict([('count', 51), ('dataSize', 4593), ('messageType', 'InspectorGroup')]), OrderedDict([('count', 1), ('dataSize', 184), ('messageType', 'InspectorTcpV4ListeningPort')]), OrderedDict([('count', 1159), ('dataSize', 3146579), ('messageType', 'Total')]), OrderedDict([('count', 5), ('dataSize', 0), ('messageType', 'InspectorSplitMsgEnd')]), OrderedDict([('count', 1), ('dataSize', 612), ('messageType', 'InspectorLoadImageInProcess')])])])]), ('nextToken', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the agents of the assessment runs that are specified by the ARNs of the assessment runs.'), ('id', 'list-assessment-run-agents-1481918140642'), ('title', 'List assessment run agents')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAssessmentRuns', OrderedDict([('input', OrderedDict([('assessmentTemplateArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw']), ('maxResults', 123)])), ('output', OrderedDict([('assessmentRunArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-v5D6fI3v']), ('nextToken', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the assessment runs that correspond to the assessment templates that are specified by the ARNs of the assessment templates.'), ('id', 'list-assessment-runs-1481066340844'), ('title', 'List assessment runs')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAssessmentTargets', OrderedDict([('input', OrderedDict([('maxResults', 123)])), ('output', OrderedDict([('assessmentTargetArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq']), ('nextToken', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the ARNs of the assessment targets within this AWS account. '), ('id', 'list-assessment-targets-1481066540849'), ('title', 'List assessment targets')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAssessmentTemplates', OrderedDict([('input', OrderedDict([('assessmentTargetArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq']), ('maxResults', 123)])), ('output', OrderedDict([('assessmentTemplateArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-Uza6ihLh']), ('nextToken', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the assessment templates that correspond to the assessment targets that are specified by the ARNs of the assessment targets.'), ('id', 'list-assessment-templates-1481066623520'), ('title', 'List assessment templates')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListEventSubscriptions', OrderedDict([('input', OrderedDict([('maxResults', 123), ('resourceArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-7sbz2Kz0')])), ('output', OrderedDict([('nextToken', '1'), ('subscriptions', [OrderedDict([('eventSubscriptions', [OrderedDict([('event', 'ASSESSMENT_RUN_COMPLETED'), ('subscribedAt', '1459455440.867')])]), ('resourceArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-7sbz2Kz0'), ('topicArn', 'arn:aws:sns:us-west-2:123456789012:exampletopic')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists all the event subscriptions for the assessment template that is specified by the ARN of the assessment template. '), ('id', 'list-event-subscriptions-1481068376945'), ('title', 'List event subscriptions')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListFindings', OrderedDict([('input', OrderedDict([('assessmentRunArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE']), ('maxResults', 123)])), ('output', OrderedDict([('findingArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-MKkpXXPE/finding/0-HwPnsDm4', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-4r1V2mAw/run/0-v5D6fI3v/finding/0-tyvmqBLy']), ('nextToken', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists findings that are generated by the assessment runs that are specified by the ARNs of the assessment runs.'), ('id', 'list-findings-1481066840611'), ('title', 'List findings')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListRulesPackages', OrderedDict([('input', OrderedDict([('maxResults', 123)])), ('output', OrderedDict([('nextToken', '1'), ('rulesPackageArns', ['arn:aws:inspector:us-west-2:758058086616:rulespackage/0-9hgA516p', 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-H5hpSawc', 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ', 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-vg5GGHSD'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists all available Amazon Inspector rules packages.'), ('id', 'list-rules-packages-1481066954883'), ('title', 'List rules packages')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTagsForResource', OrderedDict([('input', OrderedDict([('resourceArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-gcwFliYu')])), ('output', OrderedDict([('tags', [OrderedDict([('key', 'Name'), ('value', 'Example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists all tags associated with an assessment template.'), ('id', 'list-tags-for-resource-1481067025240'), ('title', 'List tags for resource')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PreviewAgents', OrderedDict([('input', OrderedDict([('maxResults', 123), ('previewAgentsArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq')])), ('output', OrderedDict([('agentPreviews', [OrderedDict([('agentId', 'i-49113b93')])]), ('nextToken', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Previews the agents installed on the EC2 instances that are part of the specified assessment target.'), ('id', 'preview-agents-1481067101888'), ('title', 'Preview agents')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RegisterCrossAccountAccessRole', OrderedDict([('input', OrderedDict([('roleArn', 'arn:aws:iam::123456789012:role/inspector')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Registers the IAM role that Amazon Inspector uses to list your EC2 instances at the start of the assessment run or when you call the PreviewAgents action.'), ('id', 'register-cross-account-access-role-1481067178301'), ('title', 'Register cross account access role')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveAttributesFromFindings', OrderedDict([('input', OrderedDict([('attributeKeys', ['key=Example,value=example']), ('findingArns', ['arn:aws:inspector:us-west-2:123456789012:target/0-0kFIPusq/template/0-8l1VIE0D/run/0-Z02cjjug/finding/0-T8yM9mEU'])])), ('output', OrderedDict([('failedItems', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Removes entire attributes (key and value pairs) from the findings that are specified by the ARNs of the findings where an attribute with the specified key exists.'), ('id', 'remove-attributes-from-findings-1481067246548'), ('title', 'Remove attributes from findings')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetTagsForResource', OrderedDict([('input', OrderedDict([('resourceArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-7sbz2Kz0'), ('tags', [OrderedDict([('key', 'Example'), ('value', 'example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Sets tags (key and value pairs) to the assessment template that is specified by the ARN of the assessment template.'), ('id', 'set-tags-for-resource-1481067329646'), ('title', 'Set tags for resource')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('StartAssessmentRun', OrderedDict([('input', OrderedDict([('assessmentRunName', 'examplerun'), ('assessmentTemplateArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-it5r2S4T')])), ('output', OrderedDict([('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-it5r2S4T/run/0-jOoroxyY')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Starts the assessment run specified by the ARN of the assessment template. For this API to function properly, you must not exceed the limit of running up to 500 concurrent agents per AWS account.'), ('id', 'start-assessment-run-1481067407484'), ('title', 'Start assessment run')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('StopAssessmentRun', OrderedDict([('input', OrderedDict([('assessmentRunArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-it5r2S4T/run/0-11LMTAVe')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Stops the assessment run that is specified by the ARN of the assessment run.'), ('id', 'stop-assessment-run-1481067502857'), ('title', 'Stop assessment run')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SubscribeToEvent', OrderedDict([('input', OrderedDict([('event', 'ASSESSMENT_RUN_COMPLETED'), ('resourceArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-7sbz2Kz0'), ('topicArn', 'arn:aws:sns:us-west-2:123456789012:exampletopic')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Enables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.'), ('id', 'subscribe-to-event-1481067686031'), ('title', 'Subscribe to event')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UnsubscribeFromEvent', OrderedDict([('input', OrderedDict([('event', 'ASSESSMENT_RUN_COMPLETED'), ('resourceArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX/template/0-7sbz2Kz0'), ('topicArn', 'arn:aws:sns:us-west-2:123456789012:exampletopic')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Disables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.'), ('id', 'unsubscribe-from-event-1481067781705'), ('title', 'Unsubscribe from event')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAssessmentTarget', OrderedDict([('input', OrderedDict([('assessmentTargetArn', 'arn:aws:inspector:us-west-2:123456789012:target/0-nvgVhaxX'), ('assessmentTargetName', 'Example'), ('resourceGroupArn', 'arn:aws:inspector:us-west-2:123456789012:resourcegroup/0-yNbgL5Pt')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Updates the assessment target that is specified by the ARN of the assessment target.'), ('id', 'update-assessment-target-1481067866692'), ('title', 'Update assessment target')]), <botocore.model.ServiceModel object at 0x7f8a03f5c9e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelKeyDeletion', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('output', OrderedDict([('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose deletion you are canceling. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')])), ('output', OrderedDict([('KeyId', 'The ARN of the CMK whose deletion you canceled.')]))])), ('description', 'The following example cancels deletion of the specified CMK.'), ('id', 'to-cancel-deletion-of-a-cmk-1477428535102'), ('title', 'To cancel deletion of a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAlias', OrderedDict([('input', OrderedDict([('AliasName', 'alias/ExampleAlias'), ('TargetKeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('AliasName', "The alias to create. Aliases must begin with 'alias/'. Do not use aliases that begin with 'alias/aws' because they are reserved for use by AWS."), ('TargetKeyId', 'The identifier of the CMK whose alias you are creating. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example creates an alias for the specified customer master key (CMK).'), ('id', 'to-create-an-alias-1477505685119'), ('title', 'To create an alias')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateGrant', OrderedDict([('input', OrderedDict([('GranteePrincipal', 'arn:aws:iam::111122223333:role/ExampleRole'), ('KeyId', 'arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Operations', ['Encrypt', 'Decrypt'])])), ('output', OrderedDict([('GrantId', '0c237476b39f8bc44e45212e08498fbe3151305030726c0590dd8d3e9f3d6a60'), ('GrantToken', 'AQpAM2RhZTk1MGMyNTk2ZmZmMzEyYWVhOWViN2I1MWM4Mzc0MWFiYjc0ZDE1ODkyNGFlNTIzODZhMzgyZjBlNGY3NiKIAgEBAgB4Pa6VDCWW__MSrqnre1HIN0Grt00ViSSuUjhqOC8OT3YAAADfMIHcBgkqhkiG9w0BBwaggc4wgcsCAQAwgcUGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMmqLyBTAegIn9XlK5AgEQgIGXZQjkBcl1dykDdqZBUQ6L1OfUivQy7JVYO2-ZJP7m6f1g8GzV47HX5phdtONAP7K_HQIflcgpkoCqd_fUnE114mSmiagWkbQ5sqAVV3ov-VeqgrvMe5ZFEWLMSluvBAqdjHEdMIkHMlhlj4ENZbzBfo9Wxk8b8SnwP4kc4gGivedzFXo-dwN8fxjjq_ZZ9JFOj2ijIbj5FyogDCN0drOfi8RORSEuCEmPvjFRMFAwcmwFkN2NPp89amA')])), ('comments', OrderedDict([('input', OrderedDict([('GranteePrincipal', 'The identity that is given permission to perform the operations specified in the grant.'), ('KeyId', 'The identifier of the CMK to which the grant applies. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.'), ('Operations', 'A list of operations that the grant allows.')])), ('output', OrderedDict([('GrantId', 'The unique identifier of the grant.'), ('GrantToken', 'The grant token.')]))])), ('description', 'The following example creates a grant that allows the specified IAM role to encrypt data with the specified customer master key (CMK).'), ('id', 'to-create-a-grant-1477972226782'), ('title', 'To create a grant')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateKey', OrderedDict([('output', OrderedDict([('KeyMetadata', OrderedDict([('AWSAccountId', '111122223333'), ('Arn', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('CreationDate', '2016-11-01T10:15:42-07:00'), ('Description', ''), ('Enabled', True), ('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('KeyState', 'Enabled'), ('KeyUsage', 'ENCRYPT_DECRYPT'), ('Origin', 'AWS_KMS')]))])), ('comments', OrderedDict([('output', OrderedDict([('KeyMetadata', 'An object that contains information about the CMK created by this operation.')]))])), ('description', 'The following example creates a CMK.'), ('id', 'to-create-a-cmk-1478028992966'), ('title', 'To create a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('Decrypt', OrderedDict([('input', OrderedDict([('CiphertextBlob', '<binary data>')])), ('output', OrderedDict([('KeyId', 'arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Plaintext', '<binary data>')])), ('comments', OrderedDict([('input', OrderedDict([('CiphertextBlob', 'The encrypted data (ciphertext).')])), ('output', OrderedDict([('KeyId', 'The Amazon Resource Name (ARN) of the CMK that was used to decrypt the data.'), ('Plaintext', 'The decrypted (plaintext) data.')]))])), ('description', 'The following example decrypts data that was encrypted with a customer master key (CMK) in AWS KMS.'), ('id', 'to-decrypt-data-1478281622886'), ('title', 'To decrypt data')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAlias', OrderedDict([('input', OrderedDict([('AliasName', 'alias/ExampleAlias')])), ('comments', OrderedDict([('input', OrderedDict([('AliasName', 'The alias to delete.')]))])), ('description', 'The following example deletes the specified alias.'), ('id', 'to-delete-an-alias-1478285209338'), ('title', 'To delete an alias')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteImportedKeyMaterial', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose imported key material you are deleting. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example deletes the imported key material from the specified customer master key (CMK).'), ('id', 'to-delete-imported-key-material-1478561674507'), ('title', 'To delete imported key material')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeKey', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('output', OrderedDict([('KeyMetadata', OrderedDict([('AWSAccountId', '111122223333'), ('Arn', 'arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('CreationDate', '2015-10-12T11:45:07-07:00'), ('Description', ''), ('Enabled', True), ('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('KeyState', 'Enabled'), ('KeyUsage', 'ENCRYPT_DECRYPT'), ('Origin', 'AWS_KMS')]))])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK that you want information about. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')])), ('output', OrderedDict([('KeyMetadata', 'An object that contains information about the specified CMK.')]))])), ('description', 'The following example returns information (metadata) about the specified CMK.'), ('id', 'to-obtain-information-about-a-cmk-1478565820907'), ('title', 'To obtain information about a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisableKey', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to disable. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example disables the specified CMK.'), ('id', 'to-disable-a-cmk-1478566583659'), ('title', 'To disable a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisableKeyRotation', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose key material will no longer be rotated. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example disables automatic annual rotation of the key material for the specified CMK.'), ('id', 'to-disable-automatic-rotation-of-key-material-1478624396092'), ('title', 'To disable automatic rotation of key material')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnableKey', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to enable. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example enables the specified CMK.'), ('id', 'to-enable-a-cmk-1478627501129'), ('title', 'To enable a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('EnableKeyRotation', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose key material will be rotated annually. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example enables automatic annual rotation of the key material for the specified CMK.'), ('id', 'to-enable-automatic-rotation-of-key-material-1478629109677'), ('title', 'To enable automatic rotation of key material')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('Encrypt', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('Plaintext', '<binary data>')])), ('output', OrderedDict([('CiphertextBlob', '<binary data>'), ('KeyId', 'arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to use for encryption. You can use the key ID or Amazon Resource Name (ARN) of the CMK, or the name or ARN of an alias that refers to the CMK.'), ('Plaintext', 'The data to encrypt.')])), ('output', OrderedDict([('CiphertextBlob', 'The encrypted data (ciphertext).'), ('KeyId', 'The ARN of the CMK that was used to encrypt the data.')]))])), ('description', 'The following example encrypts data with the specified customer master key (CMK).'), ('id', 'to-encrypt-data-1478906026012'), ('title', 'To encrypt data')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GenerateDataKey', OrderedDict([('input', OrderedDict([('KeyId', 'alias/ExampleAlias'), ('KeySpec', 'AES_256')])), ('output', OrderedDict([('CiphertextBlob', '<binary data>'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Plaintext', '<binary data>')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to use to encrypt the data key. You can use the key ID or Amazon Resource Name (ARN) of the CMK, or the name or ARN of an alias that refers to the CMK.'), ('KeySpec', 'Specifies the type of data key to return.')])), ('output', OrderedDict([('CiphertextBlob', 'The encrypted data key.'), ('KeyId', 'The ARN of the CMK that was used to encrypt the data key.'), ('Plaintext', 'The unencrypted (plaintext) data key.')]))])), ('description', 'The following example generates a 256-bit symmetric data encryption key (data key) in two formats. One is the unencrypted (plainext) data key, and the other is the data key encrypted with the specified customer master key (CMK).'), ('id', 'to-generate-a-data-key-1478912956062'), ('title', 'To generate a data key')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GenerateDataKeyWithoutPlaintext', OrderedDict([('input', OrderedDict([('KeyId', 'alias/ExampleAlias'), ('KeySpec', 'AES_256')])), ('output', OrderedDict([('CiphertextBlob', '<binary data>'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to use to encrypt the data key. You can use the key ID or Amazon Resource Name (ARN) of the CMK, or the name or ARN of an alias that refers to the CMK.'), ('KeySpec', 'Specifies the type of data key to return.')])), ('output', OrderedDict([('CiphertextBlob', 'The encrypted data key.'), ('KeyId', 'The ARN of the CMK that was used to encrypt the data key.')]))])), ('description', 'The following example generates an encrypted copy of a 256-bit symmetric data encryption key (data key). The data key is encrypted with the specified customer master key (CMK).'), ('id', 'to-generate-an-encrypted-data-key-1478914121134'), ('title', 'To generate an encrypted data key')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GenerateRandom', OrderedDict([('input', OrderedDict([('NumberOfBytes', 32)])), ('output', OrderedDict([('Plaintext', '<binary data>')])), ('comments', OrderedDict([('input', OrderedDict([('NumberOfBytes', 'The length of the random data, specified in number of bytes.')])), ('output', OrderedDict([('Plaintext', 'The random data.')]))])), ('description', 'The following example uses AWS KMS to generate 32 bytes of random data.'), ('id', 'to-generate-random-data-1479163645600'), ('title', 'To generate random data')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetKeyPolicy', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('PolicyName', 'default')])), ('output', OrderedDict([('Policy', '{\n  "Version" : "2012-10-17",\n  "Id" : "key-default-1",\n  "Statement" : [ {\n    "Sid" : "Enable IAM User Permissions",\n    "Effect" : "Allow",\n    "Principal" : {\n      "AWS" : "arn:aws:iam::111122223333:root"\n    },\n    "Action" : "kms:*",\n    "Resource" : "*"\n  } ]\n}')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose key policy you want to retrieve. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.'), ('PolicyName', 'The name of the key policy to retrieve.')])), ('output', OrderedDict([('Policy', 'The key policy document.')]))])), ('description', 'The following example retrieves the key policy for the specified customer master key (CMK).'), ('id', 'to-retrieve-a-key-policy-1479170128325'), ('title', 'To retrieve a key policy')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetKeyRotationStatus', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('output', OrderedDict([('KeyRotationEnabled', True)])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose key material rotation status you want to retrieve. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')])), ('output', OrderedDict([('KeyRotationEnabled', 'A boolean that indicates the key material rotation status. Returns true when automatic annual rotation of the key material is enabled, or false when it is not.')]))])), ('description', 'The following example retrieves the status of automatic annual rotation of the key material for the specified CMK.'), ('id', 'to-retrieve-the-rotation-status-for-a-cmk-1479172287408'), ('title', 'To retrieve the rotation status for a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetParametersForImport', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('WrappingAlgorithm', 'RSAES_OAEP_SHA_1'), ('WrappingKeySpec', 'RSA_2048')])), ('output', OrderedDict([('ImportToken', '<binary data>'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('ParametersValidTo', '2016-12-01T14:52:17-08:00'), ('PublicKey', '<binary data>')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK for which to retrieve the public key and import token. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.'), ('WrappingAlgorithm', 'The algorithm that you will use to encrypt the key material before importing it.'), ('WrappingKeySpec', 'The type of wrapping key (public key) to return in the response.')])), ('output', OrderedDict([('ImportToken', 'The import token to send with a subsequent ImportKeyMaterial request.'), ('KeyId', 'The ARN of the CMK for which you are retrieving the public key and import token. This is the same CMK specified in the request.'), ('ParametersValidTo', 'The time at which the import token and public key are no longer valid.'), ('PublicKey', 'The public key to use to encrypt the key material before importing it.')]))])), ('description', 'The following example retrieves the public key and import token for the specified CMK.'), ('id', 'to-retrieve-the-public-key-and-import-token-for-a-cmk-1480626483211'), ('title', 'To retrieve the public key and import token for a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ImportKeyMaterial', OrderedDict([('input', OrderedDict([('EncryptedKeyMaterial', '<binary data>'), ('ExpirationModel', 'KEY_MATERIAL_DOES_NOT_EXPIRE'), ('ImportToken', '<binary data>'), ('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('EncryptedKeyMaterial', 'The encrypted key material to import.'), ('ExpirationModel', 'A value that specifies whether the key material expires.'), ('ImportToken', 'The import token that you received in the response to a previous GetParametersForImport request.'), ('KeyId', 'The identifier of the CMK to import the key material into. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example imports key material into the specified CMK.'), ('id', 'to-import-key-material-into-a-cmk-1480630551969'), ('title', 'To import key material into a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAliases', OrderedDict([('output', OrderedDict([('Aliases', [OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/aws/acm'), ('AliasName', 'alias/aws/acm'), ('TargetKeyId', 'da03f6f7-d279-427a-9cae-de48d07e5b66')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/aws/ebs'), ('AliasName', 'alias/aws/ebs'), ('TargetKeyId', '25a217e7-7170-4b8c-8bf6-045ea5f70e5b')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/aws/rds'), ('AliasName', 'alias/aws/rds'), ('TargetKeyId', '7ec3104e-c3f2-4b5c-bf42-bfc4772c6685')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/aws/redshift'), ('AliasName', 'alias/aws/redshift'), ('TargetKeyId', '08f7a25a-69e2-4fb5-8f10-393db27326fa')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/aws/s3'), ('AliasName', 'alias/aws/s3'), ('TargetKeyId', 'd2b0f1a3-580d-4f79-b836-bc983be8cfa5')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/example1'), ('AliasName', 'alias/example1'), ('TargetKeyId', '4da1e216-62d0-46c5-a7c0-5f3a3d2f8046')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/example2'), ('AliasName', 'alias/example2'), ('TargetKeyId', 'f32fef59-2cc2-445b-8573-2d73328acbee')]), OrderedDict([('AliasArn', 'arn:aws:kms:us-east-2:111122223333:alias/example3'), ('AliasName', 'alias/example3'), ('TargetKeyId', '1374ef38-d34e-4d5f-b2c9-4e0daee38855')])]), ('Truncated', False)])), ('comments', OrderedDict([('output', OrderedDict([('Aliases', 'A list of aliases, including the key ID of the customer master key (CMK) that each alias refers to.'), ('Truncated', 'A boolean that indicates whether there are more items in the list. Returns true when there are more items, or false when there are not.')]))])), ('description', 'The following example lists aliases.'), ('id', 'to-list-aliases-1480729693349'), ('title', 'To list aliases')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListGrants', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('output', OrderedDict([('Grants', [OrderedDict([('CreationDate', '2016-10-25T14:37:41-07:00'), ('GrantId', '91ad875e49b04a9d1f3bdeb84d821f9db6ea95e1098813f6d47f0c65fbe2a172'), ('GranteePrincipal', 'acm.us-east-2.amazonaws.com'), ('IssuingAccount', 'arn:aws:iam::111122223333:root'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Operations', ['Encrypt', 'ReEncryptFrom', 'ReEncryptTo']), ('RetiringPrincipal', 'acm.us-east-2.amazonaws.com')]), OrderedDict([('CreationDate', '2016-10-25T14:37:41-07:00'), ('GrantId', 'a5d67d3e207a8fc1f4928749ee3e52eb0440493a8b9cf05bbfad91655b056200'), ('GranteePrincipal', 'acm.us-east-2.amazonaws.com'), ('IssuingAccount', 'arn:aws:iam::111122223333:root'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Operations', ['ReEncryptFrom', 'ReEncryptTo']), ('RetiringPrincipal', 'acm.us-east-2.amazonaws.com')]), OrderedDict([('CreationDate', '2016-10-25T14:37:41-07:00'), ('GrantId', 'c541aaf05d90cb78846a73b346fc43e65be28b7163129488c738e0c9e0628f4f'), ('GranteePrincipal', 'acm.us-east-2.amazonaws.com'), ('IssuingAccount', 'arn:aws:iam::111122223333:root'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Operations', ['Encrypt', 'ReEncryptFrom', 'ReEncryptTo']), ('RetiringPrincipal', 'acm.us-east-2.amazonaws.com')]), OrderedDict([('CreationDate', '2016-10-25T14:37:41-07:00'), ('GrantId', 'dd2052c67b4c76ee45caf1dc6a1e2d24e8dc744a51b36ae2f067dc540ce0105c'), ('GranteePrincipal', 'acm.us-east-2.amazonaws.com'), ('IssuingAccount', 'arn:aws:iam::111122223333:root'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Operations', ['Encrypt', 'ReEncryptFrom', 'ReEncryptTo']), ('RetiringPrincipal', 'acm.us-east-2.amazonaws.com')])]), ('Truncated', True)])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose grants you want to list. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')])), ('output', OrderedDict([('Grants', 'A list of grants.'), ('Truncated', 'A boolean that indicates whether there are more items in the list. Returns true when there are more items, or false when there are not.')]))])), ('description', 'The following example lists grants for the specified CMK.'), ('id', 'to-list-grants-for-a-cmk-1481067365389'), ('title', 'To list grants for a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListKeyPolicies', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('output', OrderedDict([('PolicyNames', ['default']), ('Truncated', False)])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK whose key policies you want to list. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')])), ('output', OrderedDict([('PolicyNames', 'A list of key policy names.'), ('Truncated', 'A boolean that indicates whether there are more items in the list. Returns true when there are more items, or false when there are not.')]))])), ('description', 'The following example lists key policies for the specified CMK.'), ('id', 'to-list-key-policies-for-a-cmk-1481069780998'), ('title', 'To list key policies for a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListKeys', OrderedDict([('output', OrderedDict([('Keys', [OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/0d990263-018e-4e65-a703-eff731de951e'), ('KeyId', '0d990263-018e-4e65-a703-eff731de951e')]), OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/144be297-0ae1-44ac-9c8f-93cd8c82f841'), ('KeyId', '144be297-0ae1-44ac-9c8f-93cd8c82f841')]), OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/21184251-b765-428e-b852-2c7353e72571'), ('KeyId', '21184251-b765-428e-b852-2c7353e72571')]), OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/214fe92f-5b03-4ae1-b350-db2a45dbe10c'), ('KeyId', '214fe92f-5b03-4ae1-b350-db2a45dbe10c')]), OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/339963f2-e523-49d3-af24-a0fe752aa458'), ('KeyId', '339963f2-e523-49d3-af24-a0fe752aa458')]), OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/b776a44b-df37-4438-9be4-a27494e4271a'), ('KeyId', 'b776a44b-df37-4438-9be4-a27494e4271a')]), OrderedDict([('KeyArn', 'arn:aws:kms:us-east-2:111122223333:key/deaf6c9e-cf2c-46a6-bf6d-0b6d487cffbb'), ('KeyId', 'deaf6c9e-cf2c-46a6-bf6d-0b6d487cffbb')])]), ('Truncated', False)])), ('comments', OrderedDict([('output', OrderedDict([('Keys', 'A list of CMKs, including the key ID and Amazon Resource Name (ARN) of each one.'), ('Truncated', 'A boolean that indicates whether there are more items in the list. Returns true when there are more items, or false when there are not.')]))])), ('description', 'The following example lists CMKs.'), ('id', 'to-list-cmks-1481071643069'), ('title', 'To list customer master keys (CMKs)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListRetirableGrants', OrderedDict([('input', OrderedDict([('RetiringPrincipal', 'arn:aws:iam::111122223333:role/ExampleRole')])), ('output', OrderedDict([('Grants', [OrderedDict([('CreationDate', '2016-12-07T11:09:35-08:00'), ('GrantId', '0c237476b39f8bc44e45212e08498fbe3151305030726c0590dd8d3e9f3d6a60'), ('GranteePrincipal', 'arn:aws:iam::111122223333:role/ExampleRole'), ('IssuingAccount', 'arn:aws:iam::444455556666:root'), ('KeyId', 'arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab'), ('Operations', ['Decrypt', 'Encrypt']), ('RetiringPrincipal', 'arn:aws:iam::111122223333:role/ExampleRole')])]), ('Truncated', False)])), ('comments', OrderedDict([('input', OrderedDict([('RetiringPrincipal', 'The retiring principal whose grants you want to list. Use the Amazon Resource Name (ARN) of an AWS principal such as an AWS account (root), IAM user, federated user, or assumed role user.')])), ('output', OrderedDict([('Grants', 'A list of grants that the specified principal can retire.'), ('Truncated', 'A boolean that indicates whether there are more items in the list. Returns true when there are more items, or false when there are not.')]))])), ('description', 'The following example lists the grants that the specified principal (identity) can retire.'), ('id', 'to-list-grants-that-the-specified-principal-can-retire-1481140499620'), ('title', 'To list grants that the specified principal can retire')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutKeyPolicy', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('Policy', '{\n    "Version": "2012-10-17",\n    "Id": "custom-policy-2016-12-07",\n    "Statement": [\n        {\n            "Sid": "Enable IAM User Permissions",\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::111122223333:root"\n            },\n            "Action": "kms:*",\n            "Resource": "*"\n        },\n        {\n            "Sid": "Allow access for Key Administrators",\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": [\n                    "arn:aws:iam::111122223333:user/ExampleAdminUser",\n                    "arn:aws:iam::111122223333:role/ExampleAdminRole"\n                ]\n            },\n            "Action": [\n                "kms:Create*",\n                "kms:Describe*",\n                "kms:Enable*",\n                "kms:List*",\n                "kms:Put*",\n                "kms:Update*",\n                "kms:Revoke*",\n                "kms:Disable*",\n                "kms:Get*",\n                "kms:Delete*",\n                "kms:ScheduleKeyDeletion",\n                "kms:CancelKeyDeletion"\n            ],\n            "Resource": "*"\n        },\n        {\n            "Sid": "Allow use of the key",\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::111122223333:role/ExamplePowerUserRole"\n            },\n            "Action": [\n                "kms:Encrypt",\n                "kms:Decrypt",\n                "kms:ReEncrypt*",\n                "kms:GenerateDataKey*",\n                "kms:DescribeKey"\n            ],\n            "Resource": "*"\n        },\n        {\n            "Sid": "Allow attachment of persistent resources",\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::111122223333:role/ExamplePowerUserRole"\n            },\n            "Action": [\n                "kms:CreateGrant",\n                "kms:ListGrants",\n                "kms:RevokeGrant"\n            ],\n            "Resource": "*",\n            "Condition": {\n                "Bool": {\n                    "kms:GrantIsForAWSResource": "true"\n                }\n            }\n        }\n    ]\n}\n'), ('PolicyName', 'default')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to attach the key policy to. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.'), ('Policy', 'The key policy document.'), ('PolicyName', 'The name of the key policy.')]))])), ('description', 'The following example attaches a key policy to the specified CMK.'), ('id', 'to-attach-a-key-policy-to-a-cmk-1481147345018'), ('title', 'To attach a key policy to a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReEncrypt', OrderedDict([('input', OrderedDict([('CiphertextBlob', '<binary data>'), ('DestinationKeyId', '0987dcba-09fe-87dc-65ba-ab0987654321')])), ('output', OrderedDict([('CiphertextBlob', '<binary data>'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/0987dcba-09fe-87dc-65ba-ab0987654321'), ('SourceKeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('CiphertextBlob', 'The data to reencrypt.'), ('DestinationKeyId', 'The identifier of the CMK to use to reencrypt the data. You can use the key ID or Amazon Resource Name (ARN) of the CMK, or the name or ARN of an alias that refers to the CMK.')])), ('output', OrderedDict([('CiphertextBlob', 'The reencrypted data.'), ('KeyId', 'The ARN of the CMK that was used to reencrypt the data.'), ('SourceKeyId', 'The ARN of the CMK that was used to originally encrypt the data.')]))])), ('description', 'The following example reencrypts data with the specified CMK.'), ('id', 'to-reencrypt-data-1481230358001'), ('title', 'To reencrypt data')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RetireGrant', OrderedDict([('input', OrderedDict([('GrantId', '0c237476b39f8bc44e45212e08498fbe3151305030726c0590dd8d3e9f3d6a60'), ('KeyId', 'arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('GrantId', 'The identifier of the grant to retire.'), ('KeyId', 'The Amazon Resource Name (ARN) of the customer master key (CMK) associated with the grant.')]))])), ('description', 'The following example retires a grant.'), ('id', 'to-retire-a-grant-1481327028297'), ('title', 'To retire a grant')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RevokeGrant', OrderedDict([('input', OrderedDict([('GrantId', '0c237476b39f8bc44e45212e08498fbe3151305030726c0590dd8d3e9f3d6a60'), ('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('GrantId', 'The identifier of the grant to revoke.'), ('KeyId', 'The identifier of the customer master key (CMK) associated with the grant. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example revokes a grant.'), ('id', 'to-revoke-a-grant-1481329549302'), ('title', 'To revoke a grant')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ScheduleKeyDeletion', OrderedDict([('input', OrderedDict([('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab'), ('PendingWindowInDays', 7)])), ('output', OrderedDict([('DeletionDate', '2016-12-17T16:00:00-08:00'), ('KeyId', 'arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('KeyId', 'The identifier of the CMK to schedule for deletion. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.'), ('PendingWindowInDays', 'The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the CMK.')])), ('output', OrderedDict([('DeletionDate', 'The date and time after which AWS KMS deletes the CMK.'), ('KeyId', 'The ARN of the CMK that is scheduled for deletion.')]))])), ('description', 'The following example schedules the specified CMK for deletion.'), ('id', 'to-schedule-a-cmk-for-deletion-1481331111094'), ('title', 'To schedule a customer master key (CMK) for deletion')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAlias', OrderedDict([('input', OrderedDict([('AliasName', 'alias/ExampleAlias'), ('TargetKeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('AliasName', 'The alias to update.'), ('TargetKeyId', 'The identifier of the CMK that the alias will refer to after this operation succeeds. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example updates the specified alias to refer to the specified customer master key (CMK).'), ('id', 'to-update-an-alias-1481572726920'), ('title', 'To update an alias')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateKeyDescription', OrderedDict([('input', OrderedDict([('Description', 'Example description that indicates the intended use of this CMK.'), ('KeyId', '1234abcd-12ab-34cd-56ef-1234567890ab')])), ('comments', OrderedDict([('input', OrderedDict([('Description', 'The updated description.'), ('KeyId', 'The identifier of the CMK whose description you are updating. You can use the key ID or the Amazon Resource Name (ARN) of the CMK.')]))])), ('description', 'The following example updates the description of the specified CMK.'), ('id', 'to-update-the-description-of-a-cmk-1481574808619'), ('title', 'To update the description of a customer master key (CMK)')]), <botocore.model.ServiceModel object at 0x7f8a0306b940>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddPermission', OrderedDict([('input', OrderedDict([('Action', 'lambda:InvokeFunction'), ('FunctionName', 'MyFunction'), ('Principal', 's3.amazonaws.com'), ('SourceAccount', '123456789012'), ('SourceArn', 'arn:aws:s3:::examplebucket/*'), ('StatementId', 'ID-1')])), ('output', OrderedDict([('Statement', 'ID-1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds a permission for an S3 bucket to invoke a Lambda function.'), ('id', 'add-permission-1474651469455'), ('title', 'add-permission')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateFunction', OrderedDict([('input', OrderedDict([('Code', OrderedDict()), ('Description', ''), ('FunctionName', 'MyFunction'), ('Handler', 'souce_file.handler_name'), ('MemorySize', 128), ('Publish', True), ('Role', 'arn:aws:iam::123456789012:role/service-role/role-name'), ('Runtime', 'nodejs4.3'), ('Timeout', 15), ('VpcConfig', OrderedDict())])), ('output', OrderedDict([('CodeSha256', ''), ('CodeSize', 123), ('Description', ''), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:MyFunction'), ('FunctionName', 'MyFunction'), ('Handler', 'source_file.handler_name'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/service-role/role-name'), ('Runtime', 'nodejs4.3'), ('Timeout', 123), ('Version', '1'), ('VpcConfig', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict([('Handler', 'is of the form of the name of your source file and then name of your function handler'), ('Role', 'replace with the actual arn of the execution role you created')])), ('output', OrderedDict())])), ('description', 'This example creates a Lambda function.'), ('id', 'create-function-1474653449931'), ('title', 'create-function')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteAlias', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Name', 'alias')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation deletes a Lambda function alias'), ('id', 'to-delete-a-lambda-function-alias-1481660370804'), ('title', 'To delete a Lambda function alias')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteEventSourceMapping', OrderedDict([('input', OrderedDict([('UUID', '12345kxodurf3443')])), ('output', OrderedDict([('BatchSize', 123), ('EventSourceArn', 'arn:aws:s3:::examplebucket/*'), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('LastProcessingResult', ''), ('State', ''), ('StateTransitionReason', ''), ('UUID', '12345kxodurf3443')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation deletes a Lambda function event source mapping'), ('id', 'to-delete-a-lambda-function-event-source-mapping-1481658973862'), ('title', 'To delete a Lambda function event source mapping')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteFunction', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Qualifier', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation deletes a Lambda function'), ('id', 'to-delete-a-lambda-function-1481648553696'), ('title', 'To delete a Lambda function')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetAccountSettings', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('AccountLimit', OrderedDict()), ('AccountUsage', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation retrieves a Lambda customer's account settings"), ('id', 'to-retrieves-a-lambda-customers-account-settings-1481657495274'), ('title', "To retrieves a Lambda customer's account settings")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetAlias', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Name', 'myFunctionAlias')])), ('output', OrderedDict([('AliasArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunctionAlias'), ('Description', ''), ('FunctionVersion', '1'), ('Name', 'myFunctionAlias')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation retrieves a Lambda function alias'), ('id', 'to-retrieve-a-lambda-function-alias-1481648742254'), ('title', 'To retrieve a Lambda function alias')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetEventSourceMapping', OrderedDict([('input', OrderedDict([('UUID', '123489-xxxxx-kdla8d89d7')])), ('output', OrderedDict([('BatchSize', 123), ('EventSourceArn', 'arn:aws:iam::123456789012:eventsource'), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('LastProcessingResult', ''), ('State', ''), ('StateTransitionReason', ''), ('UUID', '123489-xxxxx-kdla8d89d7')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation retrieves a Lambda function's event source mapping"), ('id', 'to-retrieve-a-lambda-functions-event-source-mapping-1481661622799'), ('title', "To retrieve a Lambda function's event source mapping")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetFunction', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Qualifier', '1')])), ('output', OrderedDict([('Code', OrderedDict([('Location', 'somelocation'), ('RepositoryType', 'S3')])), ('Configuration', OrderedDict([('CodeSha256', 'LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA='), ('CodeSize', 262), ('Description', 'A starter AWS Lambda function.'), ('Environment', OrderedDict([('Variables', OrderedDict([('S3_BUCKET', 'test')]))])), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('FunctionName', 'myFunction'), ('Handler', 'index.handler'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/lambda_basic_execution'), ('Runtime', 'nodejs4.3'), ('Timeout', 3), ('Version', '$LATEST'), ('VpcConfig', OrderedDict([('SecurityGroupIds', []), ('SubnetIds', [])]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation retrieves a Lambda function's event source mapping"), ('id', 'to-retrieve-a-lambda-functions-event-source-mapping-1481661622799'), ('title', "To retrieve a Lambda function's event source mapping")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetFunctionConfiguration', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Qualifier', '1')])), ('output', OrderedDict([('CodeSha256', 'LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA='), ('CodeSize', 123), ('DeadLetterConfig', OrderedDict()), ('Description', ''), ('Environment', OrderedDict()), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('FunctionName', 'myFunction'), ('Handler', 'index.handler'), ('KMSKeyArn', ''), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/lambda_basic_execution'), ('Runtime', 'python2.7'), ('Timeout', 123), ('Version', '1'), ('VpcConfig', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation retrieves a Lambda function's event source mapping"), ('id', 'to-retrieve-a-lambda-functions-event-source-mapping-1481661622799'), ('title', "To retrieve a Lambda function's event source mapping")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetPolicy', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Qualifier', '1')])), ('output', OrderedDict([('Policy', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation retrieves a Lambda function policy'), ('id', 'to-retrieve-a-lambda-function-policy-1481649319053'), ('title', 'To retrieve a Lambda function policy')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('Invoke', OrderedDict([('input', OrderedDict([('ClientContext', 'MyApp'), ('FunctionName', 'MyFunction'), ('InvocationType', 'Event'), ('LogType', 'Tail'), ('Payload', 'fileb://file-path/input.json'), ('Qualifier', '1')])), ('output', OrderedDict([('FunctionError', ''), ('LogResult', ''), ('Payload', '?'), ('StatusCode', 123)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation invokes a Lambda function'), ('id', 'to-invoke-a-lambda-function-1481659683915'), ('title', 'To invoke a Lambda function')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('InvokeAsync', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('InvokeArgs', 'fileb://file-path/input.json')])), ('output', OrderedDict([('Status', 123)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation invokes a Lambda function asynchronously'), ('id', 'to-invoke-a-lambda-function-asynchronously-1481649694923'), ('title', 'To invoke a Lambda function asynchronously')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListAliases', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('FunctionVersion', '1'), ('Marker', ''), ('MaxItems', 123)])), ('output', OrderedDict([('Aliases', []), ('NextMarker', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation retrieves a Lambda function's aliases"), ('id', 'to-retrieve-a-lambda-function-aliases-1481650199732'), ('title', 'To retrieve a Lambda function aliases')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListFunctions', OrderedDict([('input', OrderedDict([('Marker', ''), ('MaxItems', 123)])), ('output', OrderedDict([('Functions', []), ('NextMarker', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation retrieves a Lambda functions'), ('id', 'to-retrieve-a-list-of-lambda-functions-1481650507425'), ('title', 'To retrieve a list of Lambda functions')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListVersionsByFunction', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Marker', ''), ('MaxItems', 123)])), ('output', OrderedDict([('NextMarker', ''), ('Versions', [])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation retrieves a Lambda function versions'), ('id', 'to-retrieve-a-list-of-lambda-function-versions-1481650603750'), ('title', 'To retrieve a list of Lambda function versions')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PublishVersion', OrderedDict([('input', OrderedDict([('CodeSha256', ''), ('Description', ''), ('FunctionName', 'myFunction')])), ('output', OrderedDict([('CodeSha256', ''), ('CodeSize', 123), ('Description', ''), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction:1'), ('FunctionName', 'myFunction'), ('Handler', 'index.handler'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/lambda_basic_execution'), ('Runtime', 'python2.7'), ('Timeout', 123), ('Version', '1'), ('VpcConfig', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation publishes a version of a Lambda function'), ('id', 'to-publish-a-version-of-a-lambda-function-1481650704986'), ('title', 'To publish a version of a Lambda function')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemovePermission', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Qualifier', '1'), ('StatementId', 'role-statement-id')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation removes a Lambda function's permissions"), ('id', 'to-remove-a-lambda-functions-permissions-1481661337021'), ('title', "To remove a Lambda function's permissions")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateAlias', OrderedDict([('input', OrderedDict([('Description', ''), ('FunctionName', 'myFunction'), ('FunctionVersion', '1'), ('Name', 'functionAlias')])), ('output', OrderedDict([('AliasArn', 'arn:aws:lambda:us-west-2:123456789012:function:functionAlias'), ('Description', ''), ('FunctionVersion', '1'), ('Name', 'functionAlias')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation updates a Lambda function alias'), ('id', 'to-update-a-lambda-function-alias-1481650817950'), ('title', 'To update a Lambda function alias')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateEventSourceMapping', OrderedDict([('input', OrderedDict([('BatchSize', 123), ('Enabled', True), ('FunctionName', 'myFunction'), ('UUID', '1234xCy789012')])), ('output', OrderedDict([('BatchSize', 123), ('EventSourceArn', 'arn:aws:s3:::examplebucket/*'), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('LastProcessingResult', ''), ('State', ''), ('StateTransitionReason', ''), ('UUID', '1234xCy789012')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation updates a Lambda function event source mapping'), ('id', 'to-update-a-lambda-function-event-source-mapping-1481650907413'), ('title', 'To update a Lambda function event source mapping')]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateFunctionCode', OrderedDict([('input', OrderedDict([('FunctionName', 'myFunction'), ('Publish', True), ('S3Bucket', 'myBucket'), ('S3Key', 'myKey'), ('S3ObjectVersion', '1'), ('ZipFile', 'fileb://file-path/file.zip')])), ('output', OrderedDict([('CodeSha256', 'LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA='), ('CodeSize', 123), ('Description', ''), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('FunctionName', 'myFunction'), ('Handler', 'index.handler'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/lambda_basic_execution'), ('Runtime', 'python2.7'), ('Timeout', 123), ('Version', '1'), ('VpcConfig', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation updates a Lambda function's code"), ('id', 'to-update-a-lambda-functions-code-1481650992672'), ('title', "To update a Lambda function's code")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateFunctionConfiguration', OrderedDict([('input', OrderedDict([('Description', ''), ('FunctionName', 'myFunction'), ('Handler', 'index.handler'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/lambda_basic_execution'), ('Runtime', 'python2.7'), ('Timeout', 123), ('VpcConfig', OrderedDict())])), ('output', OrderedDict([('CodeSha256', 'LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA='), ('CodeSize', 123), ('Description', ''), ('FunctionArn', 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'), ('FunctionName', 'myFunction'), ('Handler', 'index.handler'), ('LastModified', '2016-11-21T19:49:20.006+0000'), ('MemorySize', 128), ('Role', 'arn:aws:iam::123456789012:role/lambda_basic_execution'), ('Runtime', 'python2.7'), ('Timeout', 123), ('Version', '1'), ('VpcConfig', OrderedDict())])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation updates a Lambda function's configuration"), ('id', 'to-update-a-lambda-functions-configuration-1481651096447'), ('title', "To update a Lambda function's configuration")]), <botocore.model.ServiceModel object at 0x7f89fa7239e8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteLexicon', OrderedDict([('input', OrderedDict([('Name', 'example')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes a specified pronunciation lexicon stored in an AWS Region.'), ('id', 'to-delete-a-lexicon-1481922498332'), ('title', 'To delete a lexicon')]), <botocore.model.ServiceModel object at 0x7f8a011557b8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVoices', OrderedDict([('input', OrderedDict([('LanguageCode', 'en-GB')])), ('output', OrderedDict([('Voices', [OrderedDict([('Gender', 'Female'), ('Id', 'Emma'), ('LanguageCode', 'en-GB'), ('LanguageName', 'British English'), ('Name', 'Emma')]), OrderedDict([('Gender', 'Male'), ('Id', 'Brian'), ('LanguageCode', 'en-GB'), ('LanguageName', 'British English'), ('Name', 'Brian')]), OrderedDict([('Gender', 'Female'), ('Id', 'Amy'), ('LanguageCode', 'en-GB'), ('LanguageName', 'British English'), ('Name', 'Amy')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns the list of voices that are available for use when requesting speech synthesis. Displayed languages are those within the specified language code. If no language code is specified, voices for all available languages are displayed.'), ('id', 'to-describe-available-voices-1482180557753'), ('title', 'To describe available voices')]), <botocore.model.ServiceModel object at 0x7f8a011557b8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetLexicon', OrderedDict([('input', OrderedDict([('Name', '')])), ('output', OrderedDict([('Lexicon', OrderedDict([('Content', '<?xml version="1.0" encoding="UTF-8"?>\r\n<lexicon version="1.0" \r\n      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"\r\n      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \r\n      xsi:schemaLocation="http://www.w3.org/2005/01/pronunciation-lexicon \r\n        http://www.w3.org/TR/2007/CR-pronunciation-lexicon-20071212/pls.xsd"\r\n      alphabet="ipa" \r\n      xml:lang="en-US">\r\n  <lexeme>\r\n    <grapheme>W3C</grapheme>\r\n    <alias>World Wide Web Consortium</alias>\r\n  </lexeme>\r\n</lexicon>'), ('Name', 'example')])), ('LexiconAttributes', OrderedDict([('Alphabet', 'ipa'), ('LanguageCode', 'en-US'), ('LastModified', 1478542980.117), ('LexemesCount', 1), ('LexiconArn', 'arn:aws:polly:us-east-1:123456789012:lexicon/example'), ('Size', 503)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns the content of the specified pronunciation lexicon stored in an AWS Region.'), ('id', 'to-retrieve-a-lexicon-1481912870836'), ('title', 'To retrieve a lexicon')]), <botocore.model.ServiceModel object at 0x7f8a011557b8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListLexicons', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Lexicons', [OrderedDict([('Attributes', OrderedDict([('Alphabet', 'ipa'), ('LanguageCode', 'en-US'), ('LastModified', 1478542980.117), ('LexemesCount', 1), ('LexiconArn', 'arn:aws:polly:us-east-1:123456789012:lexicon/example'), ('Size', 503)])), ('Name', 'example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a list of pronunciation lexicons stored in an AWS Region.'), ('id', 'to-list-all-lexicons-in-a-region-1481842106487'), ('title', 'To list all lexicons in a region')]), <botocore.model.ServiceModel object at 0x7f8a011557b8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutLexicon', OrderedDict([('input', OrderedDict([('Content', 'file://example.pls'), ('Name', 'W3C')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Stores a pronunciation lexicon in an AWS Region.'), ('id', 'to-save-a-lexicon-1482272584088'), ('title', 'To save a lexicon')]), <botocore.model.ServiceModel object at 0x7f8a011557b8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SynthesizeSpeech', OrderedDict([('input', OrderedDict([('LexiconNames', ['example']), ('OutputFormat', 'mp3'), ('SampleRate', '8000'), ('Text', 'All Gaul is divided into three parts'), ('TextType', 'text'), ('VoiceId', 'Joanna')])), ('output', OrderedDict([('AudioStream', 'TEXT'), ('ContentType', 'audio/mpeg'), ('RequestCharacters', 37)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Synthesizes plain text or SSML into a file of human-like speech.'), ('id', 'to-synthesize-speech-1482186064046'), ('title', 'To synthesize speech')]), <botocore.model.ServiceModel object at 0x7f8a011557b8>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddSourceIdentifierToSubscription', OrderedDict([('input', OrderedDict([('SourceIdentifier', 'mymysqlinstance'), ('SubscriptionName', 'mymysqleventsubscription')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example add a source identifier to an event notification subscription.'), ('id', 'add-source-identifier-to-subscription-93fb6a15-0a59-4577-a7b5-e12db9752c14'), ('title', 'To add a source identifier to an event notification subscription')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddTagsToResource', OrderedDict([('input', OrderedDict([('ResourceName', 'arn:aws:rds:us-east-1:992648334831:og:mymysqloptiongroup'), ('Tags', [OrderedDict([('Key', 'Staging'), ('Value', 'LocationDB')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds a tag to an option group.'), ('id', 'add-tags-to-resource-fa99ef50-228b-449d-b893-ca4d4e9768ab'), ('title', 'To add tags to a resource')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ApplyPendingMaintenanceAction', OrderedDict([('input', OrderedDict([('ApplyAction', 'system-update'), ('OptInType', 'immediate'), ('ResourceIdentifier', 'arn:aws:rds:us-east-1:992648334831:db:mymysqlinstance')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example immediately applies a pending system update to a DB instance.'), ('id', 'apply-pending-maintenance-action-2a026047-8bbb-47fc-b695-abad9f308c24'), ('title', 'To apply a pending maintenance action')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AuthorizeDBSecurityGroupIngress', OrderedDict([('input', OrderedDict([('CIDRIP', '203.0.113.5/32'), ('DBSecurityGroupName', 'mydbsecuritygroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example authorizes access to the specified security group by the specified CIDR block.'), ('id', 'authorize-db-security-group-ingress-ebf9ab91-8912-4b07-a32e-ca150668164f'), ('title', 'To authorize DB security group integress')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CopyDBClusterParameterGroup', OrderedDict([('input', OrderedDict([('SourceDBClusterParameterGroupIdentifier', 'mydbclusterparametergroup'), ('TargetDBClusterParameterGroupDescription', 'My DB cluster parameter group copy'), ('TargetDBClusterParameterGroupIdentifier', 'mydbclusterparametergroup-copy')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example copies a DB cluster parameter group.'), ('id', 'copy-db-cluster-parameter-group-6fefaffe-cde9-4dba-9f0b-d3f593572fe4'), ('title', 'To copy a DB cluster parameter group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CopyDBClusterSnapshot', OrderedDict([('input', OrderedDict([('SourceDBClusterSnapshotIdentifier', 'rds:sample-cluster-2016-09-14-10-38'), ('TargetDBClusterSnapshotIdentifier', 'cluster-snapshot-copy-1')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example copies an automated snapshot of a DB cluster to a new DB cluster snapshot.'), ('id', 'to-copy-a-db-cluster-snapshot-1473879770564'), ('title', 'To copy a DB cluster snapshot')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CopyDBParameterGroup', OrderedDict([('input', OrderedDict([('SourceDBParameterGroupIdentifier', 'mymysqlparametergroup'), ('TargetDBParameterGroupDescription', 'My MySQL parameter group copy'), ('TargetDBParameterGroupIdentifier', 'mymysqlparametergroup-copy')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example copies a DB parameter group.'), ('id', 'copy-db-parameter-group-610d4dba-2c87-467f-ae5d-edd7f8e47349'), ('title', 'To copy a DB parameter group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CopyDBSnapshot', OrderedDict([('input', OrderedDict([('SourceDBSnapshotIdentifier', 'mydbsnapshot'), ('TargetDBSnapshotIdentifier', 'mydbsnapshot-copy')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example copies a DB snapshot.'), ('id', 'copy-db-snapshot-1b2f0210-bc67-415d-9822-6eecf447dc86'), ('title', 'To copy a DB snapshot')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CopyOptionGroup', OrderedDict([('input', OrderedDict([('SourceOptionGroupIdentifier', 'mymysqloptiongroup'), ('TargetOptionGroupDescription', 'My MySQL option group copy'), ('TargetOptionGroupIdentifier', 'mymysqloptiongroup-copy')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example copies an option group.'), ('id', 'copy-option-group-8d5c01c3-8846-4e9c-a4b0-1b7237f7d0ec'), ('title', 'To copy an option group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBCluster', OrderedDict([('input', OrderedDict([('AvailabilityZones', ['us-east-1a']), ('BackupRetentionPeriod', 1), ('DBClusterIdentifier', 'mydbcluster'), ('DBClusterParameterGroupName', 'mydbclusterparametergroup'), ('DatabaseName', 'myauroradb'), ('Engine', 'aurora'), ('EngineVersion', '5.6.10a'), ('MasterUserPassword', 'mypassword'), ('MasterUsername', 'myuser'), ('Port', 3306), ('StorageEncrypted', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB cluster.'), ('id', 'create-db-cluster-423b998d-eba9-40dd-8e19-96c5b6e5f31d'), ('title', 'To create a DB cluster')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBClusterParameterGroup', OrderedDict([('input', OrderedDict([('DBClusterParameterGroupName', 'mydbclusterparametergroup'), ('DBParameterGroupFamily', 'aurora5.6'), ('Description', 'My DB cluster parameter group')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB cluster parameter group.'), ('id', 'create-db-cluster-parameter-group-8eb1c3ae-1965-4262-afe3-ee134c4430b1'), ('title', 'To create a DB cluster parameter group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBClusterSnapshot', OrderedDict([('input', OrderedDict([('DBClusterIdentifier', 'mydbcluster'), ('DBClusterSnapshotIdentifier', 'mydbclustersnapshot')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB cluster snapshot.'), ('id', 'create-db-cluster-snapshot-'), ('title', 'To create a DB cluster snapshot')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBInstance', OrderedDict([('input', OrderedDict([('AllocatedStorage', 5), ('DBInstanceClass', 'db.t2.micro'), ('DBInstanceIdentifier', 'mymysqlinstance'), ('Engine', 'MySQL'), ('MasterUserPassword', 'MyPassword'), ('MasterUsername', 'MyUser')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB instance.'), ('id', 'create-db-instance-57eb5d16-8bf8-4c84-9709-1700322b37b9'), ('title', 'To create a DB instance.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBInstanceReadReplica', OrderedDict([('input', OrderedDict([('AvailabilityZone', 'us-east-1a'), ('CopyTagsToSnapshot', True), ('DBInstanceClass', 'db.t2.micro'), ('DBInstanceIdentifier', 'mydbreadreplica'), ('PubliclyAccessible', True), ('SourceDBInstanceIdentifier', 'mymysqlinstance'), ('StorageType', 'gp2'), ('Tags', [OrderedDict([('Key', 'mydbreadreplicakey'), ('Value', 'mydbreadreplicavalue')])])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB instance read replica.'), ('id', 'create-db-instance-read-replica-81b41cd5-2871-4dae-bc59-3e264449d5fe'), ('title', 'To create a DB instance read replica.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBParameterGroup', OrderedDict([('input', OrderedDict([('DBParameterGroupFamily', 'mysql5.6'), ('DBParameterGroupName', 'mymysqlparametergroup'), ('Description', 'My MySQL parameter group')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB parameter group.'), ('id', 'create-db-parameter-group-42afcc37-12e9-4b6a-a55c-b8a141246e87'), ('title', 'To create a DB parameter group.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBSecurityGroup', OrderedDict([('input', OrderedDict([('DBSecurityGroupDescription', 'My DB security group'), ('DBSecurityGroupName', 'mydbsecuritygroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB security group.'), ('id', 'create-db-security-group-41b6786a-539e-42a5-a645-a8bc3cf99353'), ('title', 'To create a DB security group.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBSnapshot', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance'), ('DBSnapshotIdentifier', 'mydbsnapshot')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB snapshot.'), ('id', 'create-db-snapshot-e10e0e2c-9ac4-426d-9b17-6b6a3e382ce2'), ('title', 'To create a DB snapshot.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateDBSubnetGroup', OrderedDict([('input', OrderedDict([('DBSubnetGroupDescription', 'My DB subnet group'), ('DBSubnetGroupName', 'mydbsubnetgroup'), ('SubnetIds', ['subnet-1fab8a69', 'subnet-d43a468c'])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates a DB subnet group.'), ('id', 'create-db-subnet-group-c3d162c2-0ec4-4955-ba89-18967615fdb8'), ('title', 'To create a DB subnet group.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateEventSubscription', OrderedDict([('input', OrderedDict([('Enabled', True), ('EventCategories', ['availability']), ('SnsTopicArn', 'arn:aws:sns:us-east-1:992648334831:MyDemoSNSTopic'), ('SourceIds', ['mymysqlinstance']), ('SourceType', 'db-instance'), ('SubscriptionName', 'mymysqleventsubscription')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an event notification subscription.'), ('id', 'create-event-subscription-00dd0ee6-0e0f-4a38-ae83-e5f2ded5f69a'), ('title', 'To create an event notification subscription')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateOptionGroup', OrderedDict([('input', OrderedDict([('EngineName', 'MySQL'), ('MajorEngineVersion', '5.6'), ('OptionGroupDescription', 'My MySQL 5.6 option group'), ('OptionGroupName', 'mymysqloptiongroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example creates an option group.'), ('id', 'create-option-group-a7708c87-1b79-4a5e-a762-21cf8fc62b78'), ('title', 'To create an option group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBCluster', OrderedDict([('input', OrderedDict([('DBClusterIdentifier', 'mydbcluster'), ('SkipFinalSnapshot', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB cluster.'), ('id', 'delete-db-cluster-927fc2c8-6c67-4075-b1ba-75490be0f7d6'), ('title', 'To delete a DB cluster.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBClusterParameterGroup', OrderedDict([('input', OrderedDict([('DBClusterParameterGroupName', 'mydbclusterparametergroup')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB cluster parameter group.'), ('id', 'delete-db-cluster-parameter-group-364f5555-ba0a-4cc8-979c-e769098924fc'), ('title', 'To delete a DB cluster parameter group.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBClusterSnapshot', OrderedDict([('input', OrderedDict([('DBClusterSnapshotIdentifier', 'mydbclustersnapshot')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB cluster snapshot.'), ('id', 'delete-db-cluster-snapshot-c67e0d95-670e-4fb5-af90-6d9a70a91b07'), ('title', 'To delete a DB cluster snapshot.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBInstance', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance'), ('SkipFinalSnapshot', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB instance.'), ('id', 'delete-db-instance-4412e650-949c-488a-b32a-7d3038ebccc4'), ('title', 'To delete a DB instance.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBParameterGroup', OrderedDict([('input', OrderedDict([('DBParameterGroupName', 'mydbparamgroup3')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a DB parameter group.'), ('id', 'to-delete-a-db-parameter-group-1473888796509'), ('title', 'To delete a DB parameter group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBSecurityGroup', OrderedDict([('input', OrderedDict([('DBSecurityGroupName', 'mysecgroup')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a DB security group.'), ('id', 'to-delete-a-db-security-group-1473960141889'), ('title', 'To delete a DB security group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBSnapshot', OrderedDict([('input', OrderedDict([('DBSnapshotIdentifier', 'mydbsnapshot')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB snapshot.'), ('id', 'delete-db-snapshot-505d6b4e-8ced-479c-856a-c460a33fe07b'), ('title', 'To delete a DB cluster snapshot.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteDBSubnetGroup', OrderedDict([('input', OrderedDict([('DBSubnetGroupName', 'mydbsubnetgroup')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB subnetgroup.'), ('id', 'delete-db-subnet-group-4ae00375-511e-443d-a01d-4b9f552244aa'), ('title', 'To delete a DB subnet group.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteEventSubscription', OrderedDict([('input', OrderedDict([('SubscriptionName', 'myeventsubscription')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified DB event subscription.'), ('id', 'delete-db-event-subscription-d33567e3-1d5d-48ff-873f-0270453f4a75'), ('title', 'To delete a DB event subscription.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteOptionGroup', OrderedDict([('input', OrderedDict([('OptionGroupName', 'mydboptiongroup')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified option group.'), ('id', 'delete-db-option-group-578be2be-3095-431a-9ea4-9a3c3b0daef4'), ('title', 'To delete an option group.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAccountAttributes', OrderedDict([('input', OrderedDict()), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists account attributes.'), ('id', 'describe-account-attributes-683d3ff7-5524-421a-8da5-e88f1ea2222b'), ('title', 'To list account attributes')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeCertificates', OrderedDict([('input', OrderedDict([('CertificateIdentifier', 'rds-ca-2015'), ('MaxRecords', 20)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists up to 20 certificates for the specified certificate identifier.'), ('id', 'describe-certificates-9d71a70d-7908-4444-b43f-321d842c62dc'), ('title', 'To list certificates')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBClusterParameterGroups', OrderedDict([('input', OrderedDict([('DBClusterParameterGroupName', 'mydbclusterparametergroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists settings for the specified DB cluster parameter group.'), ('id', 'describe-db-cluster-parameter-groups-cf9c6e66-664e-4f57-8e29-a9080abfc013'), ('title', 'To list DB cluster parameter group settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBClusterParameters', OrderedDict([('input', OrderedDict([('DBClusterParameterGroupName', 'mydbclusterparametergroup'), ('Source', 'system')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists system parameters for the specified DB cluster parameter group.'), ('id', 'describe-db-cluster-parameters-98043c28-e489-41a7-b118-bfd96dc779a1'), ('title', 'To list DB cluster parameters')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBClusterSnapshotAttributes', OrderedDict([('input', OrderedDict([('DBClusterSnapshotIdentifier', 'mydbclustersnapshot')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists attributes for the specified DB cluster snapshot.'), ('id', 'describe-db-cluster-snapshot-attributes-6752ade3-0c7b-4b06-a8e4-b76bf4e2d3571'), ('title', 'To list DB cluster snapshot attributes')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBClusterSnapshots', OrderedDict([('input', OrderedDict([('DBClusterSnapshotIdentifier', 'mydbclustersnapshot'), ('SnapshotType', 'manual')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists settings for the specified, manually-created cluster snapshot.'), ('id', 'describe-db-cluster-snapshots-52f38af1-3431-4a51-9a6a-e6bb8c961b32'), ('title', 'To list DB cluster snapshots')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBClusters', OrderedDict([('input', OrderedDict([('DBClusterIdentifier', 'mynewdbcluster')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists settings for the specified DB cluster.'), ('id', 'describe-db-clusters-7aae8861-cb95-4b3b-9042-f62df7698635'), ('title', 'To list DB clusters')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBEngineVersions', OrderedDict([('input', OrderedDict([('DBParameterGroupFamily', 'mysql5.6'), ('DefaultOnly', True), ('Engine', 'mysql'), ('EngineVersion', '5.6'), ('ListSupportedCharacterSets', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists settings for the specified DB engine version.'), ('id', 'describe-db-engine-versions-8e698cf2-2162-425a-a854-111cdaceb52b'), ('title', 'To list DB engine version settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBInstances', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists settings for the specified DB instance.'), ('id', 'describe-db-instances-0e11a8c5-4ec3-4463-8cbf-f7254d04c4fc'), ('title', 'To list DB instance settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBLogFiles', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance'), ('FileLastWritten', 1470873600000), ('FileSize', 0), ('FilenameContains', 'error')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists matching log file names for the specified DB instance, file name pattern, last write date in POSIX time with milleseconds, and minimum file size.'), ('id', 'describe-db-log-files-5f002d8d-5c1d-44c2-b5f4-bd284c0f1285'), ('title', 'To list DB log file names')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBParameterGroups', OrderedDict([('input', OrderedDict([('DBParameterGroupName', 'mymysqlparametergroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information about the specified DB parameter group.'), ('id', 'describe-db-parameter-groups-'), ('title', 'To list information about DB parameter groups')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBParameters', OrderedDict([('input', OrderedDict([('DBParameterGroupName', 'mymysqlparametergroup'), ('MaxRecords', 20), ('Source', 'system')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for up to the first 20 system parameters for the specified DB parameter group.'), ('id', 'describe-db-parameters-09db4201-ef4f-4d97-a4b5-d71c0715b901'), ('title', 'To list information about DB parameters')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBSecurityGroups', OrderedDict([('input', OrderedDict([('DBSecurityGroupName', 'mydbsecuritygroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists settings for the specified security group.'), ('id', 'describe-db-security-groups-66fe9ea1-17dd-4275-b82e-f771cee0c849'), ('title', 'To list DB security group settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBSnapshotAttributes', OrderedDict([('input', OrderedDict([('DBSnapshotIdentifier', 'mydbsnapshot')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists attributes for the specified DB snapshot.'), ('id', 'describe-db-snapshot-attributes-1d4fb750-34f6-4e43-8b3d-b2751d796a95'), ('title', 'To list DB snapshot attributes')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBSnapshots', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance'), ('IncludePublic', False), ('IncludeShared', True), ('SnapshotType', 'manual')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all manually-created, shared snapshots for the specified DB instance.'), ('id', 'describe-db-snapshots-2c935989-a1ef-4c85-aea4-1d0f45f17f26'), ('title', 'To list DB snapshot attributes')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeDBSubnetGroups', OrderedDict([('input', OrderedDict([('DBSubnetGroupName', 'mydbsubnetgroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information about the specified DB subnet group.'), ('id', 'describe-db-subnet-groups-1d97b340-682f-4dd6-9653-8ed72a8d1221'), ('title', 'To list information about DB subnet groups')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEngineDefaultClusterParameters', OrderedDict([('input', OrderedDict([('DBParameterGroupFamily', 'aurora5.6')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists default parameters for the specified DB cluster engine.'), ('id', 'describe-engine-default-cluster-parameters-f130374a-7bee-434b-b51d-da20b6e000e0'), ('title', 'To list default parameters for a DB cluster engine')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEngineDefaultParameters', OrderedDict([('input', OrderedDict([('DBParameterGroupFamily', 'mysql5.6')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists default parameters for the specified DB engine.'), ('id', 'describe-engine-default-parameters-35d5108e-1d44-4fac-8aeb-04b8fdfface1'), ('title', 'To list default parameters for a DB engine')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEventCategories', OrderedDict([('input', OrderedDict([('SourceType', 'db-instance')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists all DB instance event categories.'), ('id', 'describe-event-categories-97bd4c77-12da-4be6-b42f-edf77771428b'), ('title', 'To list event categories.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEventSubscriptions', OrderedDict([('input', OrderedDict([('SubscriptionName', 'mymysqleventsubscription')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for the specified DB event notification subscription.'), ('id', 'describe-event-subscriptions-11184a82-e58a-4d0c-b558-f3a7489e0850'), ('title', 'To list information about DB event notification subscriptions')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeEvents', OrderedDict([('input', OrderedDict([('Duration', 10080), ('EventCategories', ['backup']), ('SourceIdentifier', 'mymysqlinstance'), ('SourceType', 'db-instance')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all backup-related events for the specified DB instance for the past 7 days (7 days * 24 hours * 60 minutes = 10,080 minutes).'), ('id', 'describe-events-3836e5ed-3913-4f76-8452-c77fcad5016b'), ('title', 'To list information about events')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeOptionGroupOptions', OrderedDict([('input', OrderedDict([('EngineName', 'mysql'), ('MajorEngineVersion', '5.6')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all option group options for the specified DB engine.'), ('id', 'describe-option-group-options-30d735a4-81f1-49e4-b3f2-5dc45d50c8ed'), ('title', 'To list information about DB option group options')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeOptionGroups', OrderedDict([('input', OrderedDict([('EngineName', 'mysql'), ('MajorEngineVersion', '5.6')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all option groups for the specified DB engine.'), ('id', 'describe-option-groups-4ef478a1-66d5-45f2-bec3-e608720418a4'), ('title', 'To list information about DB option groups')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeOrderableDBInstanceOptions', OrderedDict([('input', OrderedDict([('DBInstanceClass', 'db.t2.micro'), ('Engine', 'mysql'), ('EngineVersion', '5.6.27'), ('LicenseModel', 'general-public-license'), ('Vpc', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all orderable DB instance options for the specified DB engine, engine version, DB instance class, license model, and VPC settings.'), ('id', 'describe-orderable-db-instance-options-7444d3ed-82eb-42b9-9ed9-896b8c27a782'), ('title', 'To list information about orderable DB instance options')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribePendingMaintenanceActions', OrderedDict([('input', OrderedDict([('ResourceIdentifier', 'arn:aws:rds:us-east-1:992648334831:db:mymysqlinstance')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all pending maintenance actions for the specified DB instance.'), ('id', 'describe-pending-maintenance-actions-e6021f7e-58ae-49cc-b874-11996176835c'), ('title', 'To list information about pending maintenance actions')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeReservedDBInstances', OrderedDict([('input', OrderedDict([('DBInstanceClass', 'db.t2.micro'), ('Duration', '1y'), ('MultiAZ', False), ('OfferingType', 'No Upfront'), ('ProductDescription', 'mysql')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all reserved DB instances for the specified DB instance class, duration, product, offering type, and availability zone settings.'), ('id', 'describe-reserved-db-instances-d45adaca-2e30-407c-a0f3-aa7b98bea17f'), ('title', 'To list information about reserved DB instances')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeReservedDBInstancesOfferings', OrderedDict([('input', OrderedDict([('DBInstanceClass', 'db.t2.micro'), ('Duration', '1y'), ('MultiAZ', False), ('OfferingType', 'No Upfront'), ('ProductDescription', 'mysql')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for all reserved DB instance offerings for the specified DB instance class, duration, product, offering type, and availability zone settings.'), ('id', 'describe-reserved-db-instances-offerings-9de7d1fd-d6a6-4a72-84ae-b2ef58d47d8d'), ('title', 'To list information about reserved DB instance offerings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSourceRegions', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('SourceRegions', [OrderedDict([('Endpoint', 'https://rds.ap-northeast-1.amazonaws.com'), ('RegionName', 'ap-northeast-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.ap-northeast-2.amazonaws.com'), ('RegionName', 'ap-northeast-2'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.ap-south-1.amazonaws.com'), ('RegionName', 'ap-south-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.ap-southeast-1.amazonaws.com'), ('RegionName', 'ap-southeast-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.ap-southeast-2.amazonaws.com'), ('RegionName', 'ap-southeast-2'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.eu-central-1.amazonaws.com'), ('RegionName', 'eu-central-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.eu-west-1.amazonaws.com'), ('RegionName', 'eu-west-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.sa-east-1.amazonaws.com'), ('RegionName', 'sa-east-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.us-west-1.amazonaws.com'), ('RegionName', 'us-west-1'), ('Status', 'available')]), OrderedDict([('Endpoint', 'https://rds.us-west-2.amazonaws.com'), ('RegionName', 'us-west-2'), ('Status', 'available')])])])), ('comments', OrderedDict()), ('description', 'To list the AWS regions where a Read Replica can be created.'), ('id', 'to-describe-source-regions-1473457722410'), ('title', 'To describe source regions')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DownloadDBLogFilePortion', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance'), ('LogFileName', 'mysqlUpgrade')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information for the specified log file for the specified DB instance.'), ('id', 'download-db-log-file-portion-54a82731-a441-4fc7-a010-8eccae6fa202'), ('title', 'To list information about DB log files')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('FailoverDBCluster', OrderedDict([('input', OrderedDict([('DBClusterIdentifier', 'myaurorainstance-cluster'), ('TargetDBInstanceIdentifier', 'myaurorareplica')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example performs a failover for the specified DB cluster to the specified DB instance.'), ('id', 'failover-db-cluster-9e7f2f93-d98c-42c7-bb0e-d6c485c096d6'), ('title', 'To perform a failover for a DB cluster')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTagsForResource', OrderedDict([('input', OrderedDict([('ResourceName', 'arn:aws:rds:us-east-1:992648334831:og:mymysqloptiongroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example lists information about all tags associated with the specified DB option group.'), ('id', 'list-tags-for-resource-8401f3c2-77cd-4f90-bfd5-b523f0adcc2f'), ('title', 'To list information about tags associated with a resource')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBCluster', OrderedDict([('input', OrderedDict([('ApplyImmediately', True), ('DBClusterIdentifier', 'mydbcluster'), ('MasterUserPassword', 'mynewpassword'), ('NewDBClusterIdentifier', 'mynewdbcluster'), ('PreferredBackupWindow', '04:00-04:30'), ('PreferredMaintenanceWindow', 'Tue:05:00-Tue:05:30')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the specified settings for the specified DB cluster.'), ('id', 'modify-db-cluster-a370ee1b-768d-450a-853b-707cb1ab663d'), ('title', 'To change DB cluster settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBClusterParameterGroup', OrderedDict([('input', OrderedDict([('DBClusterParameterGroupName', 'mydbclusterparametergroup'), ('Parameters', [OrderedDict([('ApplyMethod', 'immediate'), ('ParameterName', 'time_zone'), ('ParameterValue', 'America/Phoenix')])])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example immediately changes the specified setting for the specified DB cluster parameter group.'), ('id', 'modify-db-cluster-parameter-group-f9156bc9-082a-442e-8d12-239542c1a113'), ('title', 'To change DB cluster parameter group settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBClusterSnapshotAttribute', OrderedDict([('input', OrderedDict([('AttributeName', 'restore'), ('DBClusterSnapshotIdentifier', 'manual-cluster-snapshot1'), ('ValuesToAdd', ['123451234512', '123456789012']), ('ValuesToRemove', ['all'])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example gives two AWS accounts access to a manual DB cluster snapshot and ensures that the DB cluster snapshot is private by removing the value "all".'), ('id', 'to-add-or-remove-access-to-a-manual-db-cluster-snapshot-1473889426431'), ('title', 'To add or remove access to a manual DB cluster snapshot')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBInstance', OrderedDict([('input', OrderedDict([('AllocatedStorage', 10), ('ApplyImmediately', True), ('BackupRetentionPeriod', 1), ('DBInstanceClass', 'db.t2.small'), ('DBInstanceIdentifier', 'mymysqlinstance'), ('MasterUserPassword', 'mynewpassword'), ('PreferredBackupWindow', '04:00-04:30'), ('PreferredMaintenanceWindow', 'Tue:05:00-Tue:05:30')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example immediately changes the specified settings for the specified DB instance.'), ('id', 'modify-db-instance-6979a368-6254-467b-8a8d-61103f4fcde9'), ('title', 'To change DB instance settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBParameterGroup', OrderedDict([('input', OrderedDict([('DBParameterGroupName', 'mymysqlparametergroup'), ('Parameters', [OrderedDict([('ApplyMethod', 'immediate'), ('ParameterName', 'time_zone'), ('ParameterValue', 'America/Phoenix')])])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example immediately changes the specified setting for the specified DB parameter group.'), ('id', 'modify-db-parameter-group-f3a4e52a-68e4-4b88-b559-f912d34c457a'), ('title', 'To change DB parameter group settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBSnapshotAttribute', OrderedDict([('input', OrderedDict([('AttributeName', 'restore'), ('DBSnapshotIdentifier', 'mydbsnapshot'), ('ValuesToAdd', ['all'])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example adds the specified attribute for the specified DB snapshot.'), ('id', 'modify-db-snapshot-attribute-2e66f120-2b21-4a7c-890b-4474da88bde6'), ('title', 'To change DB snapshot attributes')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyDBSubnetGroup', OrderedDict([('input', OrderedDict([('DBSubnetGroupName', 'mydbsubnetgroup'), ('SubnetIds', ['subnet-70e1975a', 'subnet-747a5c49'])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the specified setting for the specified DB subnet group.'), ('id', 'modify-db-subnet-group-e34a97d9-8fe6-4239-a4ed-ad6e73a956b0'), ('title', 'To change DB subnet group settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyEventSubscription', OrderedDict([('input', OrderedDict([('Enabled', True), ('EventCategories', ['deletion', 'low storage']), ('SourceType', 'db-instance'), ('SubscriptionName', 'mymysqleventsubscription')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example changes the specified setting for the specified event notification subscription.'), ('id', 'modify-event-subscription-405ac869-1f02-42cd-b8f4-6950a435f30e'), ('title', 'To change event notification subscription settings')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ModifyOptionGroup', OrderedDict([('input', OrderedDict([('ApplyImmediately', True), ('OptionGroupName', 'myawsuser-og02'), ('OptionsToInclude', [OrderedDict([('DBSecurityGroupMemberships', ['default']), ('OptionName', 'MEMCACHED')])])])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example adds an option to an option group.'), ('id', 'to-modify-an-option-group-1473890247875'), ('title', 'To modify an option group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PromoteReadReplica', OrderedDict([('input', OrderedDict([('BackupRetentionPeriod', 1), ('DBInstanceIdentifier', 'mydbreadreplica'), ('PreferredBackupWindow', '03:30-04:00')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example promotes the specified read replica and sets its backup retention period and preferred backup window.'), ('id', 'promote-read-replica-cc580039-c55d-4035-838a-def4a1ae4181'), ('title', 'To promote a read replica')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PurchaseReservedDBInstancesOffering', OrderedDict([('input', OrderedDict([('ReservedDBInstanceId', 'myreservationid'), ('ReservedDBInstancesOfferingId', 'fb29428a-646d-4390-850e-5fe89926e727')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example purchases a reserved DB instance offering that matches the specified settings.'), ('id', 'purchase-reserved-db-instances-offfering-f423c736-8413-429b-ba13-850fd4fa4dcd'), ('title', 'To purchase a reserved DB instance offering')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RebootDBInstance', OrderedDict([('input', OrderedDict([('DBInstanceIdentifier', 'mymysqlinstance'), ('ForceFailover', False)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example reboots the specified DB instance without forcing a failover.'), ('id', 'reboot-db-instance-b9ce8a0a-2920-451d-a1f3-01d288aa7366'), ('title', 'To reboot a DB instance')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveSourceIdentifierFromSubscription', OrderedDict([('input', OrderedDict([('SourceIdentifier', 'mymysqlinstance'), ('SubscriptionName', 'myeventsubscription')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example removes the specified source identifier from the specified DB event subscription.'), ('id', 'remove-source-identifier-from-subscription-30d25493-c19d-4cf7-b4e5-68371d0d8770'), ('title', 'To remove a source identifier from a DB event subscription')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveTagsFromResource', OrderedDict([('input', OrderedDict([('ResourceName', 'arn:aws:rds:us-east-1:992648334831:og:mydboptiongroup'), ('TagKeys', ['MyKey'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example removes the specified tag associated with the specified DB option group.'), ('id', 'remove-tags-from-resource-49f00574-38f6-4d01-ac89-d3c668449ce3'), ('title', 'To remove tags from a resource')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ResetDBClusterParameterGroup', OrderedDict([('input', OrderedDict([('DBClusterParameterGroupName', 'mydbclusterparametergroup'), ('ResetAllParameters', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example resets all parameters for the specified DB cluster parameter group to their default values.'), ('id', 'reset-db-cluster-parameter-group-b04aeaf7-7f73-49e1-9bb4-857573ea3ee4'), ('title', 'To reset the values of a DB cluster parameter group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ResetDBParameterGroup', OrderedDict([('input', OrderedDict([('DBParameterGroupName', 'mydbparametergroup'), ('ResetAllParameters', True)])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example resets all parameters for the specified DB parameter group to their default values.'), ('id', 'reset-db-parameter-group-ed2ed723-de0d-4824-8af5-3c65fa130abf'), ('title', 'To reset the values of a DB parameter group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RestoreDBClusterFromSnapshot', OrderedDict([('input', OrderedDict([('DBClusterIdentifier', 'restored-cluster1'), ('Engine', 'aurora'), ('SnapshotIdentifier', 'sample-cluster-snapshot1')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example restores an Amazon Aurora DB cluster from a DB cluster snapshot.'), ('id', 'to-restore-an-amazon-aurora-db-cluster-from-a-db-cluster-snapshot-1473958144325'), ('title', 'To restore an Amazon Aurora DB cluster from a DB cluster snapshot')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RestoreDBClusterToPointInTime', OrderedDict([('input', OrderedDict([('DBClusterIdentifier', 'sample-restored-cluster1'), ('RestoreToTime', '2016-09-13T18:45:00Z'), ('SourceDBClusterIdentifier', 'sample-cluster1')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example restores a DB cluster to a new DB cluster at a point in time from the source DB cluster.'), ('id', 'to-restore-a-db-cluster-to-a-point-in-time-1473962082214'), ('title', 'To restore a DB cluster to a point in time.')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RevokeDBSecurityGroupIngress', OrderedDict([('input', OrderedDict([('CIDRIP', '203.0.113.5/32'), ('DBSecurityGroupName', 'mydbsecuritygroup')])), ('output', OrderedDict()), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example revokes ingress for the specified CIDR block associated with the specified DB security group.'), ('id', 'revoke-db-security-group-ingress-ce5b2c1c-bd4e-4809-b04a-6d78ec448813'), ('title', 'To revoke ingress for a DB security group')]), <botocore.model.ServiceModel object at 0x7f89fc406c18>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CompareFaces', OrderedDict([('input', OrderedDict([('SimilarityThreshold', 90), ('SourceImage', OrderedDict([('S3Object', OrderedDict([('Bucket', 'mybucket'), ('Name', 'mysourceimage')]))])), ('TargetImage', OrderedDict([('S3Object', OrderedDict([('Bucket', 'mybucket'), ('Name', 'mytargetimage')]))]))])), ('output', OrderedDict([('FaceMatches', [OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.33481481671333313), ('Left', 0.31888890266418457), ('Top', 0.4933333396911621), ('Width', 0.25)])), ('Confidence', 99.9991226196289)])), ('Similarity', 100)])]), ('SourceImageFace', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.33481481671333313), ('Left', 0.31888890266418457), ('Top', 0.4933333396911621), ('Width', 0.25)])), ('Confidence', 99.9991226196289)]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation compares the largest face detected in the source image with each face detected in the target image.'), ('id', 'to-compare-two-images-1482181985581'), ('title', 'To compare two images')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateCollection', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos')])), ('output', OrderedDict([('CollectionArn', 'aws:rekognition:us-west-2:123456789012:collection/myphotos'), ('StatusCode', 200)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation creates a Rekognition collection for storing image data.'), ('id', 'to-create-a-collection-1481833313674'), ('title', 'To create a collection')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteCollection', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos')])), ('output', OrderedDict([('StatusCode', 200)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation deletes a Rekognition collection.'), ('id', 'to-delete-a-collection-1481838179973'), ('title', 'To delete a collection')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteFaces', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos'), ('FaceIds', ['ff43d742-0c13-5d16-a3e8-03d3f58e980b'])])), ('output', OrderedDict([('DeletedFaces', ['ff43d742-0c13-5d16-a3e8-03d3f58e980b'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation deletes one or more faces from a Rekognition collection.'), ('id', 'to-delete-a-face-1482182799377'), ('title', 'To delete a face')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetectFaces', OrderedDict([('input', OrderedDict([('Image', OrderedDict([('S3Object', OrderedDict([('Bucket', 'mybucket'), ('Name', 'myphoto')]))]))])), ('output', OrderedDict([('FaceDetails', [OrderedDict([('BoundingBox', OrderedDict([('Height', 0.18000000715255737), ('Left', 0.5555555820465088), ('Top', 0.33666667342185974), ('Width', 0.23999999463558197)])), ('Confidence', 100), ('Landmarks', [OrderedDict([('Type', 'EYE_LEFT'), ('X', 0.6394737362861633), ('Y', 0.40819624066352844)]), OrderedDict([('Type', 'EYE_RIGHT'), ('X', 0.7266660928726196), ('Y', 0.41039225459098816)]), OrderedDict([('Type', 'NOSE_LEFT'), ('X', 0.6912462115287781), ('Y', 0.44240960478782654)]), OrderedDict([('Type', 'MOUTH_DOWN'), ('X', 0.6306198239326477), ('Y', 0.46700039505958557)]), OrderedDict([('Type', 'MOUTH_UP'), ('X', 0.7215608954429626), ('Y', 0.47114261984825134)])]), ('Pose', OrderedDict([('Pitch', 4.050806522369385), ('Roll', 0.9950747489929199), ('Yaw', 13.693790435791016)])), ('Quality', OrderedDict([('Brightness', 37.60169982910156), ('Sharpness', 80)]))])]), ('OrientationCorrection', 'ROTATE_0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation detects faces in an image stored in an AWS S3 bucket.'), ('id', 'to-detect-faces-in-an-image-1481841782793'), ('title', 'To detect faces in an image')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DetectLabels', OrderedDict([('input', OrderedDict([('Image', OrderedDict([('S3Object', OrderedDict([('Bucket', 'mybucket'), ('Name', 'myphoto')]))])), ('MaxLabels', 123), ('MinConfidence', 70)])), ('output', OrderedDict([('Labels', [OrderedDict([('Confidence', 99.25072479248047), ('Name', 'People')]), OrderedDict([('Confidence', 99.25074005126953), ('Name', 'Person')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation detects labels in the supplied image'), ('id', 'to-detect-labels-1481834255770'), ('title', 'To detect labels')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('IndexFaces', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos'), ('DetectionAttributes', []), ('ExternalImageId', 'myphotoid'), ('Image', OrderedDict([('S3Object', OrderedDict([('Bucket', 'mybucket'), ('Name', 'myphoto')]))]))])), ('output', OrderedDict([('FaceRecords', [OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.33481481671333313), ('Left', 0.31888890266418457), ('Top', 0.4933333396911621), ('Width', 0.25)])), ('Confidence', 99.9991226196289), ('FaceId', 'ff43d742-0c13-5d16-a3e8-03d3f58e980b'), ('ImageId', '465f4e93-763e-51d0-b030-b9667a2d94b1')])), ('FaceDetail', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.33481481671333313), ('Left', 0.31888890266418457), ('Top', 0.4933333396911621), ('Width', 0.25)])), ('Confidence', 99.9991226196289), ('Landmarks', [OrderedDict([('Type', 'EYE_LEFT'), ('X', 0.3976764678955078), ('Y', 0.6248345971107483)]), OrderedDict([('Type', 'EYE_RIGHT'), ('X', 0.4810936450958252), ('Y', 0.6317117214202881)]), OrderedDict([('Type', 'NOSE_LEFT'), ('X', 0.41986238956451416), ('Y', 0.7111940383911133)]), OrderedDict([('Type', 'MOUTH_DOWN'), ('X', 0.40525302290916443), ('Y', 0.7497701048851013)]), OrderedDict([('Type', 'MOUTH_UP'), ('X', 0.4753248989582062), ('Y', 0.7558549642562866)])]), ('Pose', OrderedDict([('Pitch', -9.713645935058594), ('Roll', 4.707281112670898), ('Yaw', -24.438663482666016)])), ('Quality', OrderedDict([('Brightness', 29.23358917236328), ('Sharpness', 80)]))]))]), OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.32592591643333435), ('Left', 0.5144444704055786), ('Top', 0.15111111104488373), ('Width', 0.24444444477558136)])), ('Confidence', 99.99950408935547), ('FaceId', '8be04dba-4e58-520d-850e-9eae4af70eb2'), ('ImageId', '465f4e93-763e-51d0-b030-b9667a2d94b1')])), ('FaceDetail', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.32592591643333435), ('Left', 0.5144444704055786), ('Top', 0.15111111104488373), ('Width', 0.24444444477558136)])), ('Confidence', 99.99950408935547), ('Landmarks', [OrderedDict([('Type', 'EYE_LEFT'), ('X', 0.6006892323493958), ('Y', 0.290842205286026)]), OrderedDict([('Type', 'EYE_RIGHT'), ('X', 0.6808141469955444), ('Y', 0.29609042406082153)]), OrderedDict([('Type', 'NOSE_LEFT'), ('X', 0.6395332217216492), ('Y', 0.3522595763206482)]), OrderedDict([('Type', 'MOUTH_DOWN'), ('X', 0.5892083048820496), ('Y', 0.38689887523651123)]), OrderedDict([('Type', 'MOUTH_UP'), ('X', 0.674560010433197), ('Y', 0.394125759601593)])]), ('Pose', OrderedDict([('Pitch', -4.683138370513916), ('Roll', 2.1029529571533203), ('Yaw', 6.716655254364014)])), ('Quality', OrderedDict([('Brightness', 34.951698303222656), ('Sharpness', 160)]))]))])]), ('OrientationCorrection', 'ROTATE_0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation detects faces in an image and adds them to the specified Rekognition collection.'), ('id', 'to-add-a-face-to-a-collection-1482179542923'), ('title', 'To add a face to a collection')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListCollections', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('CollectionIds', ['myphotos'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation returns a list of Rekognition collections.'), ('id', 'to-list-the-collections-1482179199088'), ('title', 'To list the collections')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListFaces', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos'), ('MaxResults', 20)])), ('output', OrderedDict([('Faces', [OrderedDict([('BoundingBox', OrderedDict([('Height', 0.18000000715255737), ('Left', 0.5555559992790222), ('Top', 0.336667001247406), ('Width', 0.23999999463558197)])), ('Confidence', 100), ('FaceId', '1c62e8b5-69a7-5b7d-b3cd-db4338a8a7e7'), ('ImageId', '147fdf82-7a71-52cf-819b-e786c7b9746e')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.16555599868297577), ('Left', 0.30963000655174255), ('Top', 0.7066670060157776), ('Width', 0.22074100375175476)])), ('Confidence', 100), ('FaceId', '29a75abe-397b-5101-ba4f-706783b2246c'), ('ImageId', '147fdf82-7a71-52cf-819b-e786c7b9746e')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.3234420120716095), ('Left', 0.3233329951763153), ('Top', 0.5), ('Width', 0.24222199618816376)])), ('Confidence', 99.99829864501953), ('FaceId', '38271d79-7bc2-5efb-b752-398a8d575b85'), ('ImageId', 'd5631190-d039-54e4-b267-abd22c8647c5')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.03555560111999512), ('Left', 0.37388700246810913), ('Top', 0.2477779984474182), ('Width', 0.04747769981622696)])), ('Confidence', 99.99210357666016), ('FaceId', '3b01bef0-c883-5654-ba42-d5ad28b720b3'), ('ImageId', '812d9f04-86f9-54fc-9275-8d0dcbcb6784')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.05333330109715462), ('Left', 0.2937690019607544), ('Top', 0.35666701197624207), ('Width', 0.07121659815311432)])), ('Confidence', 99.99919891357422), ('FaceId', '4839a608-49d0-566c-8301-509d71b534d1'), ('ImageId', '812d9f04-86f9-54fc-9275-8d0dcbcb6784')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.3249259889125824), ('Left', 0.5155559778213501), ('Top', 0.1513350009918213), ('Width', 0.24333299696445465)])), ('Confidence', 99.99949645996094), ('FaceId', '70008e50-75e4-55d0-8e80-363fb73b3a14'), ('ImageId', 'd5631190-d039-54e4-b267-abd22c8647c5')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.03777780011296272), ('Left', 0.7002969980239868), ('Top', 0.18777799606323242), ('Width', 0.05044509842991829)])), ('Confidence', 99.92639923095703), ('FaceId', '7f5f88ed-d684-5a88-b0df-01e4a521552b'), ('ImageId', '812d9f04-86f9-54fc-9275-8d0dcbcb6784')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.05555560067296028), ('Left', 0.13946600258350372), ('Top', 0.46333301067352295), ('Width', 0.07270029932260513)])), ('Confidence', 99.99469757080078), ('FaceId', '895b4e2c-81de-5902-a4bd-d1792bda00b2'), ('ImageId', '812d9f04-86f9-54fc-9275-8d0dcbcb6784')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.3259260058403015), ('Left', 0.5144439935684204), ('Top', 0.15111100673675537), ('Width', 0.24444399774074554)])), ('Confidence', 99.99949645996094), ('FaceId', '8be04dba-4e58-520d-850e-9eae4af70eb2'), ('ImageId', '465f4e93-763e-51d0-b030-b9667a2d94b1')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.18888899683952332), ('Left', 0.3783380091190338), ('Top', 0.2355560064315796), ('Width', 0.25222599506378174)])), ('Confidence', 99.9999008178711), ('FaceId', '908544ad-edc3-59df-8faf-6a87cc256cf5'), ('ImageId', '3c731605-d772-541a-a5e7-0375dbc68a07')]), OrderedDict([('BoundingBox', OrderedDict([('Height', 0.33481499552726746), ('Left', 0.31888899207115173), ('Top', 0.49333301186561584), ('Width', 0.25)])), ('Confidence', 99.99909973144531), ('FaceId', 'ff43d742-0c13-5d16-a3e8-03d3f58e980b'), ('ImageId', '465f4e93-763e-51d0-b030-b9667a2d94b1')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation lists the faces in a Rekognition collection.'), ('id', 'to-list-the-faces-in-a-collection-1482181416530'), ('title', 'To list the faces in a collection')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SearchFaces', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos'), ('FaceId', '70008e50-75e4-55d0-8e80-363fb73b3a14'), ('FaceMatchThreshold', 90), ('MaxFaces', 10)])), ('output', OrderedDict([('FaceMatches', [OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.3259260058403015), ('Left', 0.5144439935684204), ('Top', 0.15111100673675537), ('Width', 0.24444399774074554)])), ('Confidence', 99.99949645996094), ('FaceId', '8be04dba-4e58-520d-850e-9eae4af70eb2'), ('ImageId', '465f4e93-763e-51d0-b030-b9667a2d94b1')])), ('Similarity', 99.97222137451172)]), OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.16555599868297577), ('Left', 0.30963000655174255), ('Top', 0.7066670060157776), ('Width', 0.22074100375175476)])), ('Confidence', 100), ('FaceId', '29a75abe-397b-5101-ba4f-706783b2246c'), ('ImageId', '147fdf82-7a71-52cf-819b-e786c7b9746e')])), ('Similarity', 97.04154968261719)]), OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.18888899683952332), ('Left', 0.3783380091190338), ('Top', 0.2355560064315796), ('Width', 0.25222599506378174)])), ('Confidence', 99.9999008178711), ('FaceId', '908544ad-edc3-59df-8faf-6a87cc256cf5'), ('ImageId', '3c731605-d772-541a-a5e7-0375dbc68a07')])), ('Similarity', 95.94520568847656)])]), ('SearchedFaceId', '70008e50-75e4-55d0-8e80-363fb73b3a14')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation searches for matching faces in the collection the supplied face belongs to.'), ('id', 'to-delete-a-face-1482182799377'), ('title', 'To delete a face')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SearchFacesByImage', OrderedDict([('input', OrderedDict([('CollectionId', 'myphotos'), ('FaceMatchThreshold', 95), ('Image', OrderedDict([('S3Object', OrderedDict([('Bucket', 'mybucket'), ('Name', 'myphoto')]))])), ('MaxFaces', 5)])), ('output', OrderedDict([('FaceMatches', [OrderedDict([('Face', OrderedDict([('BoundingBox', OrderedDict([('Height', 0.3234420120716095), ('Left', 0.3233329951763153), ('Top', 0.5), ('Width', 0.24222199618816376)])), ('Confidence', 99.99829864501953), ('FaceId', '38271d79-7bc2-5efb-b752-398a8d575b85'), ('ImageId', 'd5631190-d039-54e4-b267-abd22c8647c5')])), ('Similarity', 99.97036743164062)])]), ('SearchedFaceBoundingBox', OrderedDict([('Height', 0.33481481671333313), ('Left', 0.31888890266418457), ('Top', 0.4933333396911621), ('Width', 0.25)])), ('SearchedFaceConfidence', 99.9991226196289)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation searches for faces in a Rekognition collection that match the largest face in an S3 bucket stored image.'), ('id', 'to-search-for-faces-matching-a-supplied-image-1482175994491'), ('title', 'To search for faces matching a supplied image')]), <botocore.model.ServiceModel object at 0x7f89ff3f2b00>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CloneReceiptRuleSet', OrderedDict([('input', OrderedDict([('OriginalRuleSetName', 'RuleSetToClone'), ('RuleSetName', 'RuleSetToCreate')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a receipt rule set by cloning an existing one:'), ('id', 'clonereceiptruleset-1469055039770'), ('title', 'CloneReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateReceiptFilter', OrderedDict([('input', OrderedDict([('Filter', OrderedDict([('IpFilter', OrderedDict([('Cidr', '1.2.3.4/24'), ('Policy', 'Allow')])), ('Name', 'MyFilter')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a new IP address filter:'), ('id', 'createreceiptfilter-1469122681253'), ('title', 'CreateReceiptFilter')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateReceiptRule', OrderedDict([('input', OrderedDict([('After', ''), ('Rule', OrderedDict([('Actions', [OrderedDict([('S3Action', OrderedDict([('BucketName', 'MyBucket'), ('ObjectKeyPrefix', 'email')]))])]), ('Enabled', True), ('Name', 'MyRule'), ('ScanEnabled', True), ('TlsPolicy', 'Optional')])), ('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a new receipt rule:'), ('id', 'createreceiptrule-1469122946515'), ('title', 'CreateReceiptRule')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateReceiptRuleSet', OrderedDict([('input', OrderedDict([('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates an empty receipt rule set:'), ('id', 'createreceiptruleset-1469058761646'), ('title', 'CreateReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteIdentity', OrderedDict([('input', OrderedDict([('Identity', 'user@example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an identity from the list of identities that have been submitted for verification with Amazon SES:'), ('id', 'deleteidentity-1469047858906'), ('title', 'DeleteIdentity')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteIdentityPolicy', OrderedDict([('input', OrderedDict([('Identity', 'user@example.com'), ('PolicyName', 'MyPolicy')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a sending authorization policy for an identity:'), ('id', 'deleteidentitypolicy-1469055282499'), ('title', 'DeleteIdentityPolicy')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteReceiptFilter', OrderedDict([('input', OrderedDict([('FilterName', 'MyFilter')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an IP address filter:'), ('id', 'deletereceiptfilter-1469055456835'), ('title', 'DeleteReceiptFilter')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteReceiptRule', OrderedDict([('input', OrderedDict([('RuleName', 'MyRule'), ('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a receipt rule:'), ('id', 'deletereceiptrule-1469055563599'), ('title', 'DeleteReceiptRule')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteReceiptRuleSet', OrderedDict([('input', OrderedDict([('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a receipt rule set:'), ('id', 'deletereceiptruleset-1469055713690'), ('title', 'DeleteReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVerifiedEmailAddress', OrderedDict([('input', OrderedDict([('EmailAddress', 'user@example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an email address from the list of identities that have been submitted for verification with Amazon SES:'), ('id', 'deleteverifiedemailaddress-1469051086444'), ('title', 'DeleteVerifiedEmailAddress')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeActiveReceiptRuleSet', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Metadata', OrderedDict([('CreatedTimestamp', '2016-07-15T16:25:59.607Z'), ('Name', 'default-rule-set')])), ('Rules', [OrderedDict([('Actions', [OrderedDict([('S3Action', OrderedDict([('BucketName', 'MyBucket'), ('ObjectKeyPrefix', 'email')]))])]), ('Enabled', True), ('Name', 'MyRule'), ('ScanEnabled', True), ('TlsPolicy', 'Optional')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the metadata and receipt rules for the receipt rule set that is currently active:'), ('id', 'describeactivereceiptruleset-1469121611502'), ('title', 'DescribeActiveReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeReceiptRule', OrderedDict([('input', OrderedDict([('RuleName', 'MyRule'), ('RuleSetName', 'MyRuleSet')])), ('output', OrderedDict([('Rule', OrderedDict([('Actions', [OrderedDict([('S3Action', OrderedDict([('BucketName', 'MyBucket'), ('ObjectKeyPrefix', 'email')]))])]), ('Enabled', True), ('Name', 'MyRule'), ('ScanEnabled', True), ('TlsPolicy', 'Optional')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a receipt rule:'), ('id', 'describereceiptrule-1469055813118'), ('title', 'DescribeReceiptRule')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeReceiptRuleSet', OrderedDict([('input', OrderedDict([('RuleSetName', 'MyRuleSet')])), ('output', OrderedDict([('Metadata', OrderedDict([('CreatedTimestamp', '2016-07-15T16:25:59.607Z'), ('Name', 'MyRuleSet')])), ('Rules', [OrderedDict([('Actions', [OrderedDict([('S3Action', OrderedDict([('BucketName', 'MyBucket'), ('ObjectKeyPrefix', 'email')]))])]), ('Enabled', True), ('Name', 'MyRule'), ('ScanEnabled', True), ('TlsPolicy', 'Optional')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the metadata and receipt rules of a receipt rule set:'), ('id', 'describereceiptruleset-1469121240385'), ('title', 'DescribeReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIdentityDkimAttributes', OrderedDict([('input', OrderedDict([('Identities', ['example.com', 'user@example.com'])])), ('output', OrderedDict([('DkimAttributes', OrderedDict([('example.com', OrderedDict([('DkimEnabled', True), ('DkimTokens', ['EXAMPLEjcs5xoyqytjsotsijas7236gr', 'EXAMPLEjr76cvoc6mysspnioorxsn6ep', 'EXAMPLEkbmkqkhlm2lyz77ppkulerm4k']), ('DkimVerificationStatus', 'Success')])), ('user@example.com', OrderedDict([('DkimEnabled', False), ('DkimVerificationStatus', 'NotStarted')]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example retrieves the Amazon SES Easy DKIM attributes for a list of identities:'), ('id', 'getidentitydkimattributes-1469050695628'), ('title', 'GetIdentityDkimAttributes')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIdentityMailFromDomainAttributes', OrderedDict([('input', OrderedDict([('Identities', ['example.com'])])), ('output', OrderedDict([('MailFromDomainAttributes', OrderedDict([('example.com', OrderedDict([('BehaviorOnMXFailure', 'UseDefaultValue'), ('MailFromDomain', 'bounces.example.com'), ('MailFromDomainStatus', 'Success')]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the custom MAIL FROM attributes for an identity:'), ('id', 'getidentitymailfromdomainattributes-1469123114860'), ('title', 'GetIdentityMailFromDomainAttributes')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIdentityNotificationAttributes', OrderedDict([('input', OrderedDict([('Identities', ['example.com'])])), ('output', OrderedDict([('NotificationAttributes', OrderedDict([('example.com', OrderedDict([('BounceTopic', 'arn:aws:sns:us-east-1:EXAMPLE65304:ExampleTopic'), ('ForwardingEnabled', True), ('HeadersInBounceNotificationsEnabled', False), ('HeadersInComplaintNotificationsEnabled', False), ('HeadersInDeliveryNotificationsEnabled', False)]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the notification attributes for an identity:'), ('id', 'getidentitynotificationattributes-1469123466947'), ('title', 'GetIdentityNotificationAttributes')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIdentityPolicies', OrderedDict([('input', OrderedDict([('Identity', 'example.com'), ('PolicyNames', ['MyPolicy'])])), ('output', OrderedDict([('Policies', OrderedDict([('MyPolicy', '{"Version":"2008-10-17","Statement":[{"Sid":"stmt1469123904194","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::123456789012:root"},"Action":["ses:SendEmail","ses:SendRawEmail"],"Resource":"arn:aws:ses:us-east-1:EXAMPLE65304:identity/example.com"}]}')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns a sending authorization policy for an identity:'), ('id', 'getidentitypolicies-1469123949351'), ('title', 'GetIdentityPolicies')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIdentityVerificationAttributes', OrderedDict([('input', OrderedDict([('Identities', ['example.com'])])), ('output', OrderedDict([('VerificationAttributes', OrderedDict([('example.com', OrderedDict([('VerificationStatus', 'Success'), ('VerificationToken', 'EXAMPLE3VYb9EDI2nTOQRi/Tf6MI/6bD6THIGiP1MVY=')]))]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the verification status and the verification token for a domain identity:'), ('id', 'getidentityverificationattributes-1469124205897'), ('title', 'GetIdentityVerificationAttributes')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSendQuota', OrderedDict([('output', OrderedDict([('Max24HourSend', 200), ('MaxSendRate', 1), ('SentLast24Hours', 1)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the Amazon SES sending limits for an AWS account:'), ('id', 'getsendquota-1469047324508'), ('title', 'GetSendQuota')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSendStatistics', OrderedDict([('output', OrderedDict([('SendDataPoints', [OrderedDict([('Bounces', 0), ('Complaints', 0), ('DeliveryAttempts', 5), ('Rejects', 0), ('Timestamp', '2016-07-13T22:43:00Z')]), OrderedDict([('Bounces', 0), ('Complaints', 0), ('DeliveryAttempts', 3), ('Rejects', 0), ('Timestamp', '2016-07-13T23:13:00Z')]), OrderedDict([('Bounces', 0), ('Complaints', 0), ('DeliveryAttempts', 1), ('Rejects', 0), ('Timestamp', '2016-07-13T21:13:00Z')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns Amazon SES sending statistics:'), ('id', 'getsendstatistics-1469047741329'), ('title', 'GetSendStatistics')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListIdentities', OrderedDict([('input', OrderedDict([('IdentityType', 'EmailAddress'), ('MaxItems', 123), ('NextToken', '')])), ('output', OrderedDict([('Identities', ['user@example.com']), ('NextToken', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example lists the email address identities that have been submitted for verification with Amazon SES:'), ('id', 'listidentities-1469048638493'), ('title', 'ListIdentities')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListIdentityPolicies', OrderedDict([('input', OrderedDict([('Identity', 'example.com')])), ('output', OrderedDict([('PolicyNames', ['MyPolicy'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns a list of sending authorization policies that are attached to an identity:'), ('id', 'listidentitypolicies-1469124417674'), ('title', 'ListIdentityPolicies')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListReceiptFilters', OrderedDict([('output', OrderedDict([('Filters', [OrderedDict([('IpFilter', OrderedDict([('Cidr', '1.2.3.4/24'), ('Policy', 'Block')])), ('Name', 'MyFilter')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example lists the IP address filters that are associated with an AWS account:'), ('id', 'listreceiptfilters-1469120786789'), ('title', 'ListReceiptFilters')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListReceiptRuleSets', OrderedDict([('input', OrderedDict([('NextToken', '')])), ('output', OrderedDict([('NextToken', ''), ('RuleSets', [OrderedDict([('CreatedTimestamp', '2016-07-15T16:25:59.607Z'), ('Name', 'MyRuleSet')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example lists the receipt rule sets that exist under an AWS account:'), ('id', 'listreceiptrulesets-1469121037235'), ('title', 'ListReceiptRuleSets')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListVerifiedEmailAddresses', OrderedDict([('output', OrderedDict([('VerifiedEmailAddresses', ['user1@example.com', 'user2@example.com'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example lists all email addresses that have been submitted for verification with Amazon SES:'), ('id', 'listverifiedemailaddresses-1469051402570'), ('title', 'ListVerifiedEmailAddresses')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('PutIdentityPolicy', OrderedDict([('input', OrderedDict([('Identity', 'example.com'), ('Policy', '{"Version":"2008-10-17","Statement":[{"Sid":"stmt1469123904194","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::123456789012:root"},"Action":["ses:SendEmail","ses:SendRawEmail"],"Resource":"arn:aws:ses:us-east-1:EXAMPLE65304:identity/example.com"}]}'), ('PolicyName', 'MyPolicy')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example adds a sending authorization policy to an identity:'), ('id', 'putidentitypolicy-1469124560016'), ('title', 'PutIdentityPolicy')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ReorderReceiptRuleSet', OrderedDict([('input', OrderedDict([('RuleNames', ['MyRule', 'MyOtherRule']), ('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example reorders the receipt rules within a receipt rule set:'), ('id', 'reorderreceiptruleset-1469058156806'), ('title', 'ReorderReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SendEmail', OrderedDict([('input', OrderedDict([('Destination', OrderedDict([('BccAddresses', []), ('CcAddresses', ['recipient3@example.com']), ('ToAddresses', ['recipient1@example.com', 'recipient2@example.com'])])), ('Message', OrderedDict([('Body', OrderedDict([('Html', OrderedDict([('Charset', 'UTF-8'), ('Data', 'This message body contains HTML formatting. It can, for example, contain links like this one: <a class="ulink" href="http://docs.aws.amazon.com/ses/latest/DeveloperGuide" target="_blank">Amazon SES Developer Guide</a>.')])), ('Text', OrderedDict([('Charset', 'UTF-8'), ('Data', 'This is the message body in text format.')]))])), ('Subject', OrderedDict([('Charset', 'UTF-8'), ('Data', 'Test email')]))])), ('ReplyToAddresses', []), ('ReturnPath', ''), ('ReturnPathArn', ''), ('Source', 'sender@example.com'), ('SourceArn', '')])), ('output', OrderedDict([('MessageId', 'EXAMPLE78603177f-7a5433e7-8edb-42ae-af10-f0181f34d6ee-000000')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example sends a formatted email:'), ('id', 'sendemail-1469049656296'), ('title', 'SendEmail')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SendRawEmail', OrderedDict([('input', OrderedDict([('Destinations', []), ('FromArn', ''), ('RawMessage', OrderedDict([('Data', 'From: sender@example.com\\nTo: recipient@example.com\\nSubject: Test email (contains an attachment)\\nMIME-Version: 1.0\\nContent-type: Multipart/Mixed; boundary="NextPart"\\n\\n--NextPart\\nContent-Type: text/plain\\n\\nThis is the message body.\\n\\n--NextPart\\nContent-Type: text/plain;\\nContent-Disposition: attachment; filename="attachment.txt"\\n\\nThis is the text in the attachment.\\n\\n--NextPart--')])), ('ReturnPathArn', ''), ('Source', ''), ('SourceArn', '')])), ('output', OrderedDict([('MessageId', 'EXAMPLEf3f73d99b-c63fb06f-d263-41f8-a0fb-d0dc67d56c07-000000')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example sends an email with an attachment:'), ('id', 'sendrawemail-1469118548649'), ('title', 'SendRawEmail')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetActiveReceiptRuleSet', OrderedDict([('input', OrderedDict([('RuleSetName', 'RuleSetToActivate')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example sets the active receipt rule set:'), ('id', 'setactivereceiptruleset-1469058391329'), ('title', 'SetActiveReceiptRuleSet')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetIdentityDkimEnabled', OrderedDict([('input', OrderedDict([('DkimEnabled', True), ('Identity', 'user@example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example configures Amazon SES to Easy DKIM-sign the email sent from an identity:'), ('id', 'setidentitydkimenabled-1469057485202'), ('title', 'SetIdentityDkimEnabled')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetIdentityFeedbackForwardingEnabled', OrderedDict([('input', OrderedDict([('ForwardingEnabled', True), ('Identity', 'user@example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "The following example configures Amazon SES to forward an identity's bounces and complaints via email:"), ('id', 'setidentityfeedbackforwardingenabled-1469056811329'), ('title', 'SetIdentityFeedbackForwardingEnabled')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetIdentityHeadersInNotificationsEnabled', OrderedDict([('input', OrderedDict([('Enabled', True), ('Identity', 'user@example.com'), ('NotificationType', 'Bounce')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example configures Amazon SES to include the original email headers in the Amazon SNS bounce notifications for an identity:'), ('id', 'setidentityheadersinnotificationsenabled-1469057295001'), ('title', 'SetIdentityHeadersInNotificationsEnabled')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetIdentityMailFromDomain', OrderedDict([('input', OrderedDict([('BehaviorOnMXFailure', 'UseDefaultValue'), ('Identity', 'user@example.com'), ('MailFromDomain', 'bounces.example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example configures Amazon SES to use a custom MAIL FROM domain for an identity:'), ('id', 'setidentitymailfromdomain-1469057693908'), ('title', 'SetIdentityMailFromDomain')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetIdentityNotificationTopic', OrderedDict([('input', OrderedDict([('Identity', 'user@example.com'), ('NotificationType', 'Bounce'), ('SnsTopic', 'arn:aws:sns:us-west-2:111122223333:MyTopic')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example sets the Amazon SNS topic to which Amazon SES will publish bounce, complaint, and/or delivery notifications for emails sent with the specified identity as the Source:'), ('id', 'setidentitynotificationtopic-1469057854966'), ('title', 'SetIdentityNotificationTopic')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetReceiptRulePosition', OrderedDict([('input', OrderedDict([('After', 'PutRuleAfterThisRule'), ('RuleName', 'RuleToReposition'), ('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example sets the position of a receipt rule in a receipt rule set:'), ('id', 'setreceiptruleposition-1469058530550'), ('title', 'SetReceiptRulePosition')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateReceiptRule', OrderedDict([('input', OrderedDict([('Rule', OrderedDict([('Actions', [OrderedDict([('S3Action', OrderedDict([('BucketName', 'MyBucket'), ('ObjectKeyPrefix', 'email')]))])]), ('Enabled', True), ('Name', 'MyRule'), ('ScanEnabled', True), ('TlsPolicy', 'Optional')])), ('RuleSetName', 'MyRuleSet')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example updates a receipt rule to use an Amazon S3 action:'), ('id', 'updatereceiptrule-1469051756940'), ('title', 'UpdateReceiptRule')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('VerifyDomainDkim', OrderedDict([('input', OrderedDict([('Domain', 'example.com')])), ('output', OrderedDict([('DkimTokens', ['EXAMPLEq76owjnks3lnluwg65scbemvw', 'EXAMPLEi3dnsj67hstzaj673klariwx2', 'EXAMPLEwfbtcukvimehexktmdtaz6naj'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example generates DKIM tokens for a domain that has been verified with Amazon SES:'), ('id', 'verifydomaindkim-1469049503083'), ('title', 'VerifyDomainDkim')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('VerifyDomainIdentity', OrderedDict([('input', OrderedDict([('Domain', 'example.com')])), ('output', OrderedDict([('VerificationToken', 'eoEmxw+YaYhb3h3iVJHuXMJXqeu1q1/wwmvjuEXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example starts the domain verification process with Amazon SES:'), ('id', 'verifydomainidentity-1469049165936'), ('title', 'VerifyDomainIdentity')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('VerifyEmailAddress', OrderedDict([('input', OrderedDict([('EmailAddress', 'user@example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example starts the email address verification process with Amazon SES:'), ('id', 'verifyemailaddress-1469048849187'), ('title', 'VerifyEmailAddress')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('VerifyEmailIdentity', OrderedDict([('input', OrderedDict([('EmailAddress', 'user@example.com')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example starts the email address verification process with Amazon SES:'), ('id', 'verifyemailidentity-1469049068623'), ('title', 'VerifyEmailIdentity')]), <botocore.model.ServiceModel object at 0x7f8a021a3cc0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelCluster', OrderedDict([('input', OrderedDict([('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000')])), ('comments', OrderedDict()), ('description', "This operation cancels a cluster job. You can only cancel a cluster job while it's in the AwaitingQuorum status."), ('id', 'to-cancel-a-cluster-job-1482533760554'), ('title', 'To cancel a cluster job')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelJob', OrderedDict([('input', OrderedDict([('JobId', 'JID123e4567-e89b-12d3-a456-426655440000')])), ('comments', OrderedDict()), ('description', 'This operation cancels a job. You can only cancel a job before its JobState value changes to PreparingAppliance.'), ('id', 'to-cancel-a-job-for-a-snowball-device-1482534699477'), ('title', 'To cancel a job for a Snowball device')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateAddress', OrderedDict([('input', OrderedDict([('Address', OrderedDict([('City', 'Seattle'), ('Company', "My Company's Name"), ('Country', 'USA'), ('Name', 'My Name'), ('PhoneNumber', '425-555-5555'), ('PostalCode', '98101'), ('StateOrProvince', 'WA'), ('Street1', '123 Main Street')]))])), ('output', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b')])), ('comments', OrderedDict()), ('description', 'This operation creates an address for a job. Addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. If the address is invalid or unsupported, then an exception is thrown.'), ('id', 'to-create-an-address-for-a-job-1482535416294'), ('title', 'To create an address for a job')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateCluster', OrderedDict([('input', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('Description', 'MyCluster'), ('JobType', 'LOCAL_USE'), ('KmsKeyARN', 'arn:aws:kms:us-east-1:123456789012:key/abcd1234-12ab-34cd-56ef-123456123456'), ('Notification', OrderedDict([('JobStatesToNotify', []), ('NotifyAll', False)])), ('Resources', OrderedDict([('S3Resources', [OrderedDict([('BucketArn', 'arn:aws:s3:::MyBucket'), ('KeyRange', OrderedDict())])])])), ('RoleARN', 'arn:aws:iam::123456789012:role/snowball-import-S3-role'), ('ShippingOption', 'SECOND_DAY'), ('SnowballType', 'EDGE')])), ('output', OrderedDict([('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000')])), ('comments', OrderedDict()), ('description', 'Creates an empty cluster. Each cluster supports five nodes. You use the CreateJob action separately to create the jobs for each of these nodes. The cluster does not ship until these five node jobs have been created.'), ('id', 'to-create-a-cluster-1482864724077'), ('title', 'To create a cluster')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateJob', OrderedDict([('input', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('Description', 'My Job'), ('JobType', 'IMPORT'), ('KmsKeyARN', 'arn:aws:kms:us-east-1:123456789012:key/abcd1234-12ab-34cd-56ef-123456123456'), ('Notification', OrderedDict([('JobStatesToNotify', []), ('NotifyAll', False)])), ('Resources', OrderedDict([('S3Resources', [OrderedDict([('BucketArn', 'arn:aws:s3:::MyBucket'), ('KeyRange', OrderedDict())])])])), ('RoleARN', 'arn:aws:iam::123456789012:role/snowball-import-S3-role'), ('ShippingOption', 'SECOND_DAY'), ('SnowballCapacityPreference', 'T80'), ('SnowballType', 'STANDARD')])), ('output', OrderedDict([('JobId', 'JID123e4567-e89b-12d3-a456-426655440000')])), ('comments', OrderedDict()), ('description', "Creates a job to import or export data between Amazon S3 and your on-premises data center. Your AWS account must have the right trust policies and permissions in place to create a job for Snowball. If you're creating a job for a node in a cluster, you only need to provide the clusterId value; the other job attributes are inherited from the cluster."), ('id', 'to-create-a-job-1482864834886'), ('title', 'To create a job')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAddress', OrderedDict([('input', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b')])), ('output', OrderedDict([('Address', OrderedDict([('AddressId', 'ADID5643ec50-3eec-4eb3-9be6-9374c10eb51b'), ('City', 'Seattle'), ('Company', 'My Company'), ('Country', 'US'), ('Name', 'My Name'), ('PhoneNumber', '425-555-5555'), ('PostalCode', '98101'), ('StateOrProvince', 'WA'), ('Street1', '123 Main Street')]))])), ('comments', OrderedDict()), ('description', 'This operation describes an address for a job.'), ('id', 'to-describe-an-address-for-a-job-1482538608745'), ('title', 'To describe an address for a job')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeAddresses', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Addresses', [OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('City', 'Seattle'), ('Company', 'My Company'), ('Country', 'US'), ('Name', 'My Name'), ('PhoneNumber', '425-555-5555'), ('PostalCode', '98101'), ('StateOrProvince', 'WA'), ('Street1', '123 Main Street')])])])), ('comments', OrderedDict()), ('description', "This operation describes all the addresses that you've created for AWS Snowball. Calling this API in one of the US regions will return addresses from the list of all addresses associated with this account in all US regions."), ('id', 'to-describe-all-the-addresses-youve-created-for-aws-snowball-1482538936603'), ('title', "To describe all the addresses you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeCluster', OrderedDict([('input', OrderedDict([('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000')])), ('output', OrderedDict([('ClusterMetadata', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000'), ('ClusterState', 'Pending'), ('CreationDate', '1480475517.0'), ('Description', 'MyCluster'), ('JobType', 'LOCAL_USE'), ('KmsKeyARN', 'arn:aws:kms:us-east-1:123456789012:key/abcd1234-12ab-34cd-56ef-123456123456'), ('Notification', OrderedDict([('JobStatesToNotify', []), ('NotifyAll', False)])), ('Resources', OrderedDict([('S3Resources', [OrderedDict([('BucketArn', 'arn:aws:s3:::MyBucket'), ('KeyRange', OrderedDict())])])])), ('RoleARN', 'arn:aws:iam::123456789012:role/snowball-import-S3-role'), ('ShippingOption', 'SECOND_DAY')]))])), ('comments', OrderedDict()), ('description', 'Returns information about a specific cluster including shipping information, cluster status, and other important metadata.'), ('id', 'to-describe-a-cluster-1482864218396'), ('title', 'To describe a cluster')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeJob', OrderedDict([('input', OrderedDict([('JobId', 'JID123e4567-e89b-12d3-a456-426655440000')])), ('output', OrderedDict([('JobMetadata', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('CreationDate', '1475626164'), ('Description', 'My Job'), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440000'), ('JobState', 'New'), ('JobType', 'IMPORT'), ('KmsKeyARN', 'arn:aws:kms:us-east-1:123456789012:key/abcd1234-12ab-34cd-56ef-123456123456'), ('Notification', OrderedDict([('JobStatesToNotify', []), ('NotifyAll', False)])), ('Resources', OrderedDict([('S3Resources', [OrderedDict([('BucketArn', 'arn:aws:s3:::MyBucket'), ('KeyRange', OrderedDict())])])])), ('RoleARN', 'arn:aws:iam::123456789012:role/snowball-import-S3-role'), ('ShippingDetails', OrderedDict([('ShippingOption', 'SECOND_DAY')])), ('SnowballCapacityPreference', 'T80'), ('SnowballType', 'STANDARD')]))])), ('comments', OrderedDict()), ('description', "This operation describes a job you've created for AWS Snowball."), ('id', 'to-describe-a-job-youve-created-for-aws-snowball-1482539500180'), ('title', "To describe a job you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetJobManifest', OrderedDict([('input', OrderedDict([('JobId', 'JID123e4567-e89b-12d3-a456-426655440000')])), ('output', OrderedDict([('ManifestURI', 'https://awsie-frosty-manifests-prod.s3.amazonaws.com/JID123e4567-e89b-12d3-a456-426655440000_manifest.bin?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20161224T005115Z&X-Amz-SignedHeaders=...')])), ('comments', OrderedDict()), ('description', "Returns a link to an Amazon S3 presigned URL for the manifest file associated with the specified JobId value. You can access the manifest file for up to 60 minutes after this request has been made. To access the manifest file after 60 minutes have passed, you'll have to make another call to the GetJobManifest action.\n\nThe manifest is an encrypted file that you can download after your job enters the WithCustomer status. The manifest is decrypted by using the UnlockCode code value, when you pass both values to the Snowball through the Snowball client when the client is started for the first time.\n\nAs a best practice, we recommend that you don't save a copy of an UnlockCode value in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snowball associated with that job.\n\nThe credentials of a given job, including its manifest file and unlock code, expire 90 days after the job is created."), ('id', 'to-get-the-manifest-for-a-job-youve-created-for-aws-snowball-1482540389246'), ('title', "To get the manifest for a job you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetJobUnlockCode', OrderedDict([('input', OrderedDict([('JobId', 'JID123e4567-e89b-12d3-a456-426655440000')])), ('output', OrderedDict([('UnlockCode', '12345-abcde-56789-fghij-01234')])), ('comments', OrderedDict()), ('description', "Returns the UnlockCode code value for the specified job. A particular UnlockCode value can be accessed for up to 90 days after the associated job has been created.\n\nThe UnlockCode value is a 29-character code with 25 alphanumeric characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed along with the manifest to the Snowball through the Snowball client when the client is started for the first time.\n\nAs a best practice, we recommend that you don't save a copy of the UnlockCode in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snowball associated with that job."), ('id', 'to-get-the-unlock-code-for-a-job-youve-created-for-aws-snowball-1482541987286'), ('title', "To get the unlock code for a job you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSnowballUsage', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('SnowballLimit', 1), ('SnowballsInUse', 0)])), ('comments', OrderedDict()), ('description', 'Returns information about the Snowball service limit for your account, and also the number of Snowballs your account has in use.\n\nThe default service limit for the number of Snowballs that you can have at one time is 1. If you want to increase your service limit, contact AWS Support.'), ('id', 'to-see-your-snowball-service-limit-and-the-number-of-snowballs-you-have-in-use-1482863394588'), ('title', 'To see your Snowball service limit and the number of Snowballs you have in use')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListClusterJobs', OrderedDict([('input', OrderedDict([('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000')])), ('output', OrderedDict([('JobListEntries', [OrderedDict([('CreationDate', '1480475524.0'), ('Description', 'MyClustrer-node-001'), ('IsMaster', False), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440000'), ('JobState', 'New'), ('JobType', 'LOCAL_USE'), ('SnowballType', 'EDGE')]), OrderedDict([('CreationDate', '1480475525.0'), ('Description', 'MyClustrer-node-002'), ('IsMaster', False), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440001'), ('JobState', 'New'), ('JobType', 'LOCAL_USE'), ('SnowballType', 'EDGE')]), OrderedDict([('CreationDate', '1480475525.0'), ('Description', 'MyClustrer-node-003'), ('IsMaster', False), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440002'), ('JobState', 'New'), ('JobType', 'LOCAL_USE'), ('SnowballType', 'EDGE')]), OrderedDict([('CreationDate', '1480475525.0'), ('Description', 'MyClustrer-node-004'), ('IsMaster', False), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440003'), ('JobState', 'New'), ('JobType', 'LOCAL_USE'), ('SnowballType', 'EDGE')]), OrderedDict([('CreationDate', '1480475525.0'), ('Description', 'MyClustrer-node-005'), ('IsMaster', False), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440004'), ('JobState', 'New'), ('JobType', 'LOCAL_USE'), ('SnowballType', 'EDGE')])])])), ('comments', OrderedDict()), ('description', "Returns an array of JobListEntry objects of the specified length. Each JobListEntry object is for a job in the specified cluster and contains a job's state, a job's ID, and other information."), ('id', 'to-get-a-list-of-jobs-in-a-cluster-that-youve-created-for-aws-snowball-1482863105773'), ('title', "To get a list of jobs in a cluster that you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListClusters', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('ClusterListEntries', [OrderedDict([('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000'), ('ClusterState', 'Pending'), ('CreationDate', '1480475517.0'), ('Description', 'MyCluster')])])])), ('comments', OrderedDict()), ('description', "Returns an array of ClusterListEntry objects of the specified length. Each ClusterListEntry object contains a cluster's state, a cluster's ID, and other important status information."), ('id', 'to-get-a-list-of-clusters-that-youve-created-for-aws-snowball-1482862223003'), ('title', "To get a list of clusters that you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListJobs', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('JobListEntries', [OrderedDict([('CreationDate', '1460678186.0'), ('Description', 'MyJob'), ('IsMaster', False), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440000'), ('JobState', 'New'), ('JobType', 'IMPORT'), ('SnowballType', 'STANDARD')])])])), ('comments', OrderedDict()), ('description', "Returns an array of JobListEntry objects of the specified length. Each JobListEntry object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. Calling this API action in one of the US regions will return jobs from the list of all jobs associated with this account in all US regions."), ('id', 'to-get-a-list-of-jobs-that-youve-created-for-aws-snowball-1482542167627'), ('title', "To get a list of jobs that you've created for AWS Snowball")]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateCluster', OrderedDict([('input', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('ClusterId', 'CID123e4567-e89b-12d3-a456-426655440000'), ('Description', 'Updated the address to send this to image processing - RJ')])), ('comments', OrderedDict()), ('description', 'This action allows you to update certain parameters for a cluster. Once the cluster changes to a different state, usually within 60 minutes of it being created, this action is no longer available.'), ('id', 'to-update-a-cluster-1482863900595'), ('title', 'To update a cluster')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateJob', OrderedDict([('input', OrderedDict([('AddressId', 'ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b'), ('Description', 'Upgraded to Edge, shipped to Finance Dept, and requested faster shipping speed - TS.'), ('JobId', 'JID123e4567-e89b-12d3-a456-426655440000'), ('ShippingOption', 'NEXT_DAY'), ('SnowballCapacityPreference', 'T100')])), ('comments', OrderedDict()), ('description', 'This action allows you to update certain parameters for a job. Once the job changes to a different job state, usually within 60 minutes of the job being created, this action is no longer available.'), ('id', 'to-update-a-job-1482863556886'), ('title', 'To update a job')]), <botocore.model.ServiceModel object at 0x7f89fab6e748>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateQueue', OrderedDict([('input', OrderedDict([('QueueName', 'MyQueue')])), ('output', OrderedDict([('QueueUrl', 'https://queue.amazonaws.com/012345678910/MyQueue')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following operation creates an SQS queue named MyQueue.'), ('id', 'create-an-sqs-queue-1445915686197'), ('title', 'Create an SQS queue')]), <botocore.model.ServiceModel object at 0x7f89fd37eef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetQueueUrl', OrderedDict([('input', OrderedDict([('QueueName', 'MyQueue'), ('QueueOwnerAWSAccountId', '12345678910')])), ('output', OrderedDict([('QueueUrl', 'https://queue.amazonaws.com/123456789101112/MyQueue')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example retrieves the queue ARN.'), ('id', 'retrieve-queue-attributes-from-an-sqs-queue-1445915930574'), ('title', 'Retrieve queue attributes from an SQS queue')]), <botocore.model.ServiceModel object at 0x7f89fd37eef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ActivateGateway', OrderedDict([('input', OrderedDict([('ActivationKey', '29AV1-3OFV9-VVIUB-NKT0I-LRO6V'), ('GatewayName', 'My_Gateway'), ('GatewayRegion', 'us-east-1'), ('GatewayTimezone', 'GMT-12:00'), ('GatewayType', 'STORED'), ('MediumChangerType', 'AWS-Gateway-VTL'), ('TapeDriveType', 'IBM-ULT3580-TD5')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Activates the gateway you previously deployed on your host.'), ('id', 'to-activate-the-gateway-1471281611207'), ('title', 'To activate the gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddCache', OrderedDict([('input', OrderedDict([('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:03:00.0-scsi-0:0:1:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example shows a request that activates a gateway-stored volume.'), ('id', 'to-add-a-cache-1471043606854'), ('title', 'To add a cache')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddTagsToResource', OrderedDict([('input', OrderedDict([('ResourceARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B'), ('Tags', [OrderedDict([('Key', 'Dev Gatgeway Region'), ('Value', 'East Coast')])])])), ('output', OrderedDict([('ResourceARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Adds one or more tags to the specified resource.'), ('id', 'to-add-tags-to-resource-1471283689460'), ('title', 'To add tags to resource')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddUploadBuffer', OrderedDict([('input', OrderedDict([('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:03:00.0-scsi-0:0:1:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Configures one or more gateway local disks as upload buffer for a specified gateway.'), ('id', 'to-add-upload-buffer-on-local-disk-1471293902847'), ('title', 'To add upload buffer on local disk')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AddWorkingStorage', OrderedDict([('input', OrderedDict([('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:03:00.0-scsi-0:0:1:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Configures one or more gateway local disks as working storage for a gateway. (Working storage is also referred to as upload buffer.)'), ('id', 'to-add-storage-on-local-disk-1471294305401'), ('title', 'To add storage on local disk')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelArchival', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/AMZN01A2A4')])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/AMZN01A2A4')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Cancels archiving of a virtual tape to the virtual tape shelf (VTS) after the archiving process is initiated.'), ('id', 'to-cancel-virtual-tape-archiving-1471294865203'), ('title', 'To cancel virtual tape archiving')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CancelRetrieval', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/AMZN01A2A4')])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/AMZN01A2A4')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Cancels retrieval of a virtual tape from the virtual tape shelf (VTS) to a gateway after the retrieval process is initiated.'), ('id', 'to-cancel-virtual-tape-retrieval-1471295704491'), ('title', 'To cancel virtual tape retrieval')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateCachediSCSIVolume', OrderedDict([('input', OrderedDict([('ClientToken', 'cachedvol112233'), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('NetworkInterfaceId', '10.1.1.1'), ('SnapshotId', 'snap-f47b7b94'), ('TargetName', 'my-volume'), ('VolumeSizeInBytes', 536870912000)])), ('output', OrderedDict([('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates a cached volume on a specified cached gateway.'), ('id', 'to-create-a-cached-iscsi-volume-1471296661787'), ('title', 'To create a cached iSCSI volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSnapshot', OrderedDict([('input', OrderedDict([('SnapshotDescription', 'My root volume snapshot as of 10/03/2017'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('output', OrderedDict([('SnapshotId', 'snap-78e22663'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Initiates an ad-hoc snapshot of a gateway volume.'), ('id', 'to-create-a-snapshot-of-a-gateway-volume-1471301469561'), ('title', 'To create a snapshot of a gateway volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSnapshotFromVolumeRecoveryPoint', OrderedDict([('input', OrderedDict([('SnapshotDescription', 'My root volume snapshot as of 2017-06-30T10:10:10.000Z'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('output', OrderedDict([('SnapshotId', 'snap-78e22663'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'), ('VolumeRecoveryPointTime', '2017-06-30T10:10:10.000Z')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Initiates a snapshot of a gateway from a volume recovery point.'), ('id', 'to-create-a-snapshot-of-a-gateway-volume-1471301469561'), ('title', 'To create a snapshot of a gateway volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateStorediSCSIVolume', OrderedDict([('input', OrderedDict([('DiskId', 'pci-0000:03:00.0-scsi-0:0:0:0'), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('NetworkInterfaceId', '10.1.1.1'), ('PreserveExistingData', True), ('SnapshotId', 'snap-f47b7b94'), ('TargetName', 'my-volume')])), ('output', OrderedDict([('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'), ('VolumeSizeInBytes', 1099511627776)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates a stored volume on a specified stored gateway.'), ('id', 'to-create-a-stored-iscsi-volume-1471367662813'), ('title', 'To create a stored iSCSI volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateTapeWithBarcode', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('TapeBarcode', 'TEST12345'), ('TapeSizeInBytes', 107374182400)])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST12345')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates a virtual tape by using your own barcode.'), ('id', 'to-create-a-virtual-tape-using-a-barcode-1471371842452'), ('title', 'To create a virtual tape using a barcode')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateTapes', OrderedDict([('input', OrderedDict([('ClientToken', '77777'), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('NumTapesToCreate', 3), ('TapeBarcodePrefix', 'TEST'), ('TapeSizeInBytes', 107374182400)])), ('output', OrderedDict([('TapeARNs', ['arn:aws:storagegateway:us-east-1:999999999999:tape/TEST38A29D', 'arn:aws:storagegateway:us-east-1:204469490176:tape/TEST3AA29F', 'arn:aws:storagegateway:us-east-1:204469490176:tape/TEST3BA29E'])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Creates one or more virtual tapes.'), ('id', 'to-create-a-virtual-tape-1471372061659'), ('title', 'To create a virtual tape')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteBandwidthRateLimit', OrderedDict([('input', OrderedDict([('BandwidthType', 'All'), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes the bandwidth rate limits of a gateway; either the upload or download limit, or both.'), ('id', 'to-delete-bandwidth-rate-limits-of-gateway-1471373225520'), ('title', 'To delete bandwidth rate limits of gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteChapCredentials', OrderedDict([('input', OrderedDict([('InitiatorName', 'iqn.1991-05.com.microsoft:computername.domain.example.com'), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')])), ('output', OrderedDict([('InitiatorName', 'iqn.1991-05.com.microsoft:computername.domain.example.com'), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes Challenge-Handshake Authentication Protocol (CHAP) credentials for a specified iSCSI target and initiator pair.'), ('id', 'to-delete-chap-credentials-1471375025612'), ('title', 'To delete CHAP credentials')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteGateway', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation deletes the gateway, but not the gateway's VM from the host computer."), ('id', 'to-delete-a-gatgeway-1471381697333'), ('title', 'To delete a gatgeway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSnapshotSchedule', OrderedDict([('input', OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('output', OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This action enables you to delete a snapshot schedule for a volume.'), ('id', 'to-delete-a-snapshot-of-a-volume-1471382234377'), ('title', 'To delete a snapshot of a volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTape', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:204469490176:gateway/sgw-12A3456B'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:204469490176:tape/TEST05A2A0')])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:204469490176:tape/TEST05A2A0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example deletes the specified virtual tape.'), ('id', 'to-delete-a-virtual-tape-1471382444157'), ('title', 'To delete a virtual tape')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteTapeArchive', OrderedDict([('input', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:204469490176:tape/TEST05A2A0')])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:204469490176:tape/TEST05A2A0')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes the specified virtual tape from the virtual tape shelf (VTS).'), ('id', 'to-delete-a-virtual-tape-from-the-shelf-vts-1471383964329'), ('title', 'To delete a virtual tape from the shelf (VTS)')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteVolume', OrderedDict([('input', OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('output', OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Deletes the specified gateway volume that you previously created using the CreateCachediSCSIVolume or CreateStorediSCSIVolume API.'), ('id', 'to-delete-a-gateway-volume-1471384418416'), ('title', 'To delete a gateway volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeBandwidthRateLimit', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('AverageDownloadRateLimitInBitsPerSec', 204800), ('AverageUploadRateLimitInBitsPerSec', 102400), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a value for a bandwidth rate limit if set. If not set, then only the gateway ARN is returned.'), ('id', 'to-describe-the-bandwidth-rate-limits-of-a-gateway-1471384826404'), ('title', 'To describe the bandwidth rate limits of a gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeCache', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('CacheAllocatedInBytes', 2199023255552), ('CacheDirtyPercentage', 0.07), ('CacheHitPercentage', 99.68), ('CacheMissPercentage', 0.32), ('CacheUsedPercentage', 0.07), ('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:04:00.0-scsi-0:1:0:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns information about the cache of a gateway.'), ('id', 'to-describe-cache-information-1471385756036'), ('title', 'To describe cache information')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeCachediSCSIVolumes', OrderedDict([('input', OrderedDict([('VolumeARNs', ['arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'])])), ('output', OrderedDict([('CachediSCSIVolumes', [OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'), ('VolumeId', 'vol-1122AABB'), ('VolumeSizeInBytes', 1099511627776), ('VolumeStatus', 'AVAILABLE'), ('VolumeType', 'CACHED iSCSI'), ('VolumeiSCSIAttributes', OrderedDict([('ChapEnabled', True), ('LunNumber', 1), ('NetworkInterfaceId', '10.243.43.207'), ('NetworkInterfacePort', 3260), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')]))])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a description of the gateway cached iSCSI volumes specified in the request.'), ('id', 'to-describe-gateway-cached-iscsi-volumes-1471458094649'), ('title', 'To describe gateway cached iSCSI volumes')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeChapCredentials', OrderedDict([('input', OrderedDict([('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')])), ('output', OrderedDict([('ChapCredentials', [OrderedDict([('InitiatorName', 'iqn.1991-05.com.microsoft:computername.domain.example.com'), ('SecretToAuthenticateInitiator', '111111111111'), ('SecretToAuthenticateTarget', '222222222222'), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns an array of Challenge-Handshake Authentication Protocol (CHAP) credentials information for a specified iSCSI target, one for each target-initiator pair.'), ('id', 'to-describe-chap-credetnitals-for-an-iscsi-1471467462967'), ('title', 'To describe CHAP credetnitals for an iSCSI')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeGatewayInformation', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('GatewayId', 'sgw-AABB1122'), ('GatewayName', 'My_Gateway'), ('GatewayNetworkInterfaces', [OrderedDict([('Ipv4Address', '10.35.69.216')])]), ('GatewayState', 'STATE_RUNNING'), ('GatewayTimezone', 'GMT-8:00'), ('GatewayType', 'STORED'), ('LastSoftwareUpdate', '2016-01-02T16:00:00'), ('NextUpdateAvailabilityDate', '2017-01-02T16:00:00')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns metadata about a gateway such as its name, network interfaces, configured time zone, and the state (whether the gateway is running or not).'), ('id', 'to-describe-metadata-about-the-gateway-1471467849079'), ('title', 'To describe metadata about the gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeMaintenanceStartTime', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('DayOfWeek', 2), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('HourOfDay', 15), ('MinuteOfHour', 35), ('Timezone', 'GMT+7:00')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "Returns your gateway's weekly maintenance start time including the day and time of the week."), ('id', 'to-describe-gateways-maintenance-start-time-1471470727387'), ('title', "To describe gateway's maintenance start time")]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeSnapshotSchedule', OrderedDict([('input', OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('output', OrderedDict([('Description', 'sgw-AABB1122:vol-AABB1122:Schedule'), ('RecurrenceInHours', 24), ('StartAt', 6), ('Timezone', 'GMT+7:00'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Describes the snapshot schedule for the specified gateway volume including intervals at which snapshots are automatically initiated.'), ('id', 'to-describe-snapshot-schedule-for-gateway-volume-1471471139538'), ('title', 'To describe snapshot schedule for gateway volume')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeStorediSCSIVolumes', OrderedDict([('input', OrderedDict([('VolumeARNs', ['arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'])])), ('output', OrderedDict([('StorediSCSIVolumes', [OrderedDict([('PreservedExistingData', False), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'), ('VolumeDiskId', 'pci-0000:03:00.0-scsi-0:0:0:0'), ('VolumeId', 'vol-1122AABB'), ('VolumeProgress', 23.7), ('VolumeSizeInBytes', 1099511627776), ('VolumeStatus', 'BOOTSTRAPPING'), ('VolumeiSCSIAttributes', OrderedDict([('ChapEnabled', True), ('NetworkInterfaceId', '10.243.43.207'), ('NetworkInterfacePort', 3260), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')]))])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns the description of the gateway volumes specified in the request belonging to the same gateway.'), ('id', 'to-describe-the-volumes-of-a-gateway-1471472640660'), ('title', 'To describe the volumes of a gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTapeArchives', OrderedDict([('input', OrderedDict([('Limit', 123), ('Marker', '1'), ('TapeARNs', ['arn:aws:storagegateway:us-east-1:999999999999:tape/AM08A1AD', 'arn:aws:storagegateway:us-east-1:999999999999:tape/AMZN01A2A4'])])), ('output', OrderedDict([('Marker', '1'), ('TapeArchives', [OrderedDict([('CompletionTime', '2016-12-16T13:50Z'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999:tape/AM08A1AD'), ('TapeBarcode', 'AM08A1AD'), ('TapeSizeInBytes', 107374182400), ('TapeStatus', 'ARCHIVED')]), OrderedDict([('CompletionTime', '2016-12-16T13:59Z'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999:tape/AMZN01A2A4'), ('TapeBarcode', 'AMZN01A2A4'), ('TapeSizeInBytes', 429496729600), ('TapeStatus', 'ARCHIVED')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a description of specified virtual tapes in the virtual tape shelf (VTS).'), ('id', 'to-describe-virtual-tapes-in-the-vts-1471473188198'), ('title', 'To describe virtual tapes in the VTS')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTapeRecoveryPoints', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('Limit', 1), ('Marker', '1')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('Marker', '1'), ('TapeRecoveryPointInfos', [OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999:tape/AMZN01A2A4'), ('TapeRecoveryPointTime', '2016-12-16T13:50Z'), ('TapeSizeInBytes', 1471550497), ('TapeStatus', 'AVAILABLE')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a list of virtual tape recovery points that are available for the specified gateway-VTL.'), ('id', 'to-describe-virtual-tape-recovery-points-1471542042026'), ('title', 'To describe virtual tape recovery points')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeTapes', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('Limit', 2), ('Marker', '1'), ('TapeARNs', ['arn:aws:storagegateway:us-east-1:999999999999:tape/TEST04A2A1', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST05A2A0'])])), ('output', OrderedDict([('Marker', '1'), ('Tapes', [OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST04A2A1'), ('TapeBarcode', 'TEST04A2A1'), ('TapeSizeInBytes', 107374182400), ('TapeStatus', 'AVAILABLE')]), OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST05A2A0'), ('TapeBarcode', 'TEST05A2A0'), ('TapeSizeInBytes', 107374182400), ('TapeStatus', 'AVAILABLE')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a description of the specified Amazon Resource Name (ARN) of virtual tapes. If a TapeARN is not specified, returns a description of all virtual tapes.'), ('id', 'to-describe-virtual-tapes-associated-with-gateway-1471629287727'), ('title', 'To describe virtual tape(s) associated with gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeUploadBuffer', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:04:00.0-scsi-0:1:0:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('UploadBufferAllocatedInBytes', 0), ('UploadBufferUsedInBytes', 161061273600)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns information about the upload buffer of a gateway including disk IDs and the amount of upload buffer space allocated/used.'), ('id', 'to-describe-upload-buffer-of-gateway-1471631099003'), ('title', 'To describe upload buffer of gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeUploadBuffer', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:04:00.0-scsi-0:1:0:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('UploadBufferAllocatedInBytes', 161061273600), ('UploadBufferUsedInBytes', 0)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns information about the upload buffer of a gateway including disk IDs and the amount of upload buffer space allocated and used.'), ('id', 'to-describe-upload-buffer-of-a-gateway--1471904566370'), ('title', 'To describe upload buffer of a gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeVTLDevices', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('Limit', 123), ('Marker', '1'), ('VTLDeviceARNs', [])])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('Marker', '1'), ('VTLDevices', [OrderedDict([('DeviceiSCSIAttributes', OrderedDict([('ChapEnabled', False), ('NetworkInterfaceId', '10.243.43.207'), ('NetworkInterfacePort', 3260), ('TargetARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:sgw-1fad4876-mediachanger')])), ('VTLDeviceARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/device/AMZN_SGW-1FAD4876_MEDIACHANGER_00001'), ('VTLDeviceProductIdentifier', 'L700'), ('VTLDeviceType', 'Medium Changer'), ('VTLDeviceVendor', 'STK')]), OrderedDict([('DeviceiSCSIAttributes', OrderedDict([('ChapEnabled', False), ('NetworkInterfaceId', '10.243.43.209'), ('NetworkInterfacePort', 3260), ('TargetARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:sgw-1fad4876-tapedrive-01')])), ('VTLDeviceARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/device/AMZN_SGW-1FAD4876_TAPEDRIVE_00001'), ('VTLDeviceProductIdentifier', 'ULT3580-TD5'), ('VTLDeviceType', 'Tape Drive'), ('VTLDeviceVendor', 'IBM')]), OrderedDict([('DeviceiSCSIAttributes', OrderedDict([('ChapEnabled', False), ('NetworkInterfaceId', '10.243.43.209'), ('NetworkInterfacePort', 3260), ('TargetARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:sgw-1fad4876-tapedrive-02')])), ('VTLDeviceARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/device/AMZN_SGW-1FAD4876_TAPEDRIVE_00002'), ('VTLDeviceProductIdentifier', 'ULT3580-TD5'), ('VTLDeviceType', 'Tape Drive'), ('VTLDeviceVendor', 'IBM')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Returns a description of virtual tape library (VTL) devices for the specified gateway.'), ('id', 'to-describe-virtual-tape-library-vtl-devices-of-a-single-gateway-1471906071410'), ('title', 'To describe virtual tape library (VTL) devices of a single gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DescribeWorkingStorage', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('DiskIds', ['pci-0000:03:00.0-scsi-0:0:0:0', 'pci-0000:03:00.0-scsi-0:0:1:0']), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('WorkingStorageAllocatedInBytes', 2199023255552), ('WorkingStorageUsedInBytes', 789207040)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This operation is supported only for the gateway-stored volume architecture. This operation is deprecated in cached-volumes API version (20120630). Use DescribeUploadBuffer instead.'), ('id', 'to-describe-the-working-storage-of-a-gateway-depreciated-1472070842332'), ('title', 'To describe the working storage of a gateway [Depreciated]')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DisableGateway', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Disables a gateway when the gateway is no longer functioning. Use this operation for a gateway-VTL that is not reachable or not functioning.'), ('id', 'to-disable-a-gateway-when-it-is-no-longer-functioning-1472076046936'), ('title', 'To disable a gateway when it is no longer functioning')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListGateways', OrderedDict([('input', OrderedDict([('Limit', 2), ('Marker', '1')])), ('output', OrderedDict([('Gateways', [OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')]), OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-23A4567C')])]), ('Marker', '1')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists gateways owned by an AWS account in a specified region as requested. Results are sorted by gateway ARN up to a maximum of 100 gateways.'), ('id', 'to-lists-region-specific-gateways-per-aws-account-1472077860657'), ('title', 'To lists region specific gateways per AWS account')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListLocalDisks', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('Disks', [OrderedDict([('DiskAllocationType', 'CACHE_STORAGE'), ('DiskId', 'pci-0000:03:00.0-scsi-0:0:0:0'), ('DiskNode', 'SCSI(0:0)'), ('DiskPath', '/dev/sda'), ('DiskSizeInBytes', 1099511627776), ('DiskStatus', 'missing')]), OrderedDict([('DiskAllocationResource', ''), ('DiskAllocationType', 'UPLOAD_BUFFER'), ('DiskId', 'pci-0000:03:00.0-scsi-0:0:1:0'), ('DiskNode', 'SCSI(0:1)'), ('DiskPath', '/dev/sdb'), ('DiskSizeInBytes', 1099511627776), ('DiskStatus', 'present')])]), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The request returns a list of all disks, specifying which are configured as working storage, cache storage, or stored volume or not configured at all.'), ('id', 'to-list-the-gateways-local-disks-1472079564618'), ('title', "To list the gateway's local disks")]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListTagsForResource', OrderedDict([('input', OrderedDict([('Limit', 1), ('Marker', '1'), ('ResourceARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B')])), ('output', OrderedDict([('Marker', '1'), ('ResourceARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B'), ('Tags', [OrderedDict([('Key', 'Dev Gatgeway Region'), ('Value', 'East Coast')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the tags that have been added to the specified resource.'), ('id', 'to-list-tags-that-have-been-added-to-a-resource-1472080268972'), ('title', 'To list tags that have been added to a resource')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListVolumeRecoveryPoints', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('VolumeRecoveryPointInfos', [OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'), ('VolumeRecoveryPointTime', '2012-09-04T21:08:44.627Z'), ('VolumeSizeInBytes', 536870912000)])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the recovery points for a specified gateway in which all data of the volume is consistent and can be used to create a snapshot.'), ('id', 'to-list-recovery-points-for-a-gateway-1472143015088'), ('title', 'To list recovery points for a gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListVolumes', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('Limit', 2), ('Marker', '1')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('Marker', '1'), ('VolumeInfos', [OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('GatewayId', 'sgw-12A3456B'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB'), ('VolumeId', 'vol-1122AABB'), ('VolumeSizeInBytes', 107374182400), ('VolumeType', 'STORED')]), OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-13B4567C'), ('GatewayId', 'sgw-gw-13B4567C'), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-13B4567C/volume/vol-3344CCDD'), ('VolumeId', 'vol-1122AABB'), ('VolumeSizeInBytes', 107374182400), ('VolumeType', 'STORED')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the iSCSI stored volumes of a gateway. Results are sorted by volume ARN up to a maximum of 100 volumes.'), ('id', 'to-list-the-iscsi-stored-volumes-of-a-gateway-1472145723653'), ('title', 'To list the iSCSI stored volumes of a gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RemoveTagsFromResource', OrderedDict([('input', OrderedDict([('ResourceARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B'), ('TagKeys', ['Dev Gatgeway Region', 'East Coast'])])), ('output', OrderedDict([('ResourceARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-11A2222B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Lists the iSCSI stored volumes of a gateway. Removes one or more tags from the specified resource.'), ('id', 'to-remove-tags-from-a-resource-1472147210553'), ('title', 'To remove tags from a resource')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ResetCache', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-13B4567C')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-13B4567C')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Resets all cache disks that have encountered a error and makes the disks available for reconfiguration as cache storage.'), ('id', 'to-reset-cache-disks-in-error-status-1472148909807'), ('title', 'To reset cache disks in error status')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RetrieveTapeArchive', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST0AA2AF')])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST0AA2AF')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Retrieves an archived virtual tape from the virtual tape shelf (VTS) to a gateway-VTL. Virtual tapes archived in the VTS are not associated with any gateway.'), ('id', 'to-retrieve-an-archived-tape-from-the-vts-1472149812358'), ('title', 'To retrieve an archived tape from the VTS')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('RetrieveTapeRecoveryPoint', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST0AA2AF')])), ('output', OrderedDict([('TapeARN', 'arn:aws:storagegateway:us-east-1:999999999999:tape/TEST0AA2AF')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Retrieves the recovery point for the specified virtual tape.'), ('id', 'to-retrieve-the-recovery-point-of-a-virtual-tape-1472150014805'), ('title', 'To retrieve the recovery point of a virtual tape')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('SetLocalConsolePassword', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B'), ('LocalConsolePassword', 'PassWordMustBeAtLeast6Chars.')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Sets the password for your VM local console.'), ('id', 'to-set-a-password-for-your-vm-1472150202632'), ('title', 'To set a password for your VM')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ShutdownGateway', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "This operation shuts down the gateway service component running in the storage gateway's virtual machine (VM) and not the VM."), ('id', 'to-shut-down-a-gateway-service-1472150508835'), ('title', 'To shut down a gateway service')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('StartGateway', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Starts a gateway service that was previously shut down.'), ('id', 'to-start-a-gateway-service-1472150722315'), ('title', 'To start a gateway service')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateBandwidthRateLimit', OrderedDict([('input', OrderedDict([('AverageDownloadRateLimitInBitsPerSec', 102400), ('AverageUploadRateLimitInBitsPerSec', 51200), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Updates the bandwidth rate limits of a gateway. Both the upload and download bandwidth rate limit can be set, or either one of the two. If a new limit is not set, the existing rate limit remains.'), ('id', 'to-update-the-bandwidth-rate-limits-of-a-gateway-1472151016202'), ('title', 'To update the bandwidth rate limits of a gateway')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateChapCredentials', OrderedDict([('input', OrderedDict([('InitiatorName', 'iqn.1991-05.com.microsoft:computername.domain.example.com'), ('SecretToAuthenticateInitiator', '111111111111'), ('SecretToAuthenticateTarget', '222222222222'), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')])), ('output', OrderedDict([('InitiatorName', 'iqn.1991-05.com.microsoft:computername.domain.example.com'), ('TargetARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Updates the Challenge-Handshake Authentication Protocol (CHAP) credentials for a specified iSCSI target.'), ('id', 'to-update-chap-credentials-for-an-iscsi-target-1472151325795'), ('title', 'To update CHAP credentials for an iSCSI target')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateGatewayInformation', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('GatewayName', 'MyGateway2'), ('GatewayTimezone', 'GMT-12:00')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('GatewayName', '')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "Updates a gateway's metadata, which includes the gateway's name and time zone."), ('id', 'to-update-a-gateways-metadata-1472151688693'), ('title', "To update a gateway's metadata")]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateGatewaySoftwareNow', OrderedDict([('input', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Updates the gateway virtual machine (VM) software. The request immediately triggers the software update.'), ('id', 'to-update-a-gateways-vm-software-1472152020929'), ('title', "To update a gateway's VM software")]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateMaintenanceStartTime', OrderedDict([('input', OrderedDict([('DayOfWeek', 2), ('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B'), ('HourOfDay', 0), ('MinuteOfHour', 30)])), ('output', OrderedDict([('GatewayARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', "Updates a gateway's weekly maintenance start time information, including day and time of the week. The maintenance time is in your gateway's time zone."), ('id', 'to-update-a-gateways-maintenance-start-time-1472152552031'), ('title', "To update a gateway's maintenance start time")]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateSnapshotSchedule', OrderedDict([('input', OrderedDict([('Description', 'Hourly snapshot'), ('RecurrenceInHours', 1), ('StartAt', 0), ('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('output', OrderedDict([('VolumeARN', 'arn:aws:storagegateway:us-east-1:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Updates a snapshot schedule configured for a gateway volume.'), ('id', 'to-update-a-volume-snapshot-schedule-1472152757068'), ('title', 'To update a volume snapshot schedule')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateVTLDeviceType', OrderedDict([('input', OrderedDict([('DeviceType', 'Medium Changer'), ('VTLDeviceARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/device/AMZN_SGW-1FAD4876_MEDIACHANGER_00001')])), ('output', OrderedDict([('VTLDeviceARN', 'arn:aws:storagegateway:us-east-1:999999999999:gateway/sgw-12A3456B/device/AMZN_SGW-1FAD4876_MEDIACHANGER_00001')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'Updates the type of medium changer in a gateway-VTL after a gateway-VTL is activated.'), ('id', 'to-update-a-vtl-device-type-1472153012967'), ('title', 'To update a VTL device type')]), <botocore.model.ServiceModel object at 0x7f89fcb22400>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssumeRole', OrderedDict([('input', OrderedDict([('DurationSeconds', 3600), ('ExternalId', '123ABC'), ('Policy', '{"Version":"2012-10-17","Statement":[{"Sid":"Stmt1","Effect":"Allow","Action":"s3:*","Resource":"*"}]}'), ('RoleArn', 'arn:aws:iam::123456789012:role/demo'), ('RoleSessionName', 'Bob')])), ('output', OrderedDict([('AssumedRoleUser', OrderedDict([('Arn', 'arn:aws:sts::123456789012:assumed-role/demo/Bob'), ('AssumedRoleId', 'ARO123EXAMPLE123:Bob')])), ('Credentials', OrderedDict([('AccessKeyId', 'AKIAIOSFODNN7EXAMPLE'), ('Expiration', '2011-07-15T23:28:33.359Z'), ('SecretAccessKey', 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY'), ('SessionToken', 'AQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/qkPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==')])), ('PackedPolicySize', 6)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', ''), ('id', 'to-assume-a-role-1480532402212'), ('title', 'To assume a role')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('AssumeRoleWithWebIdentity', OrderedDict([('input', OrderedDict([('DurationSeconds', 3600), ('ProviderId', 'www.amazon.com'), ('RoleArn', 'arn:aws:iam::123456789012:role/FederatedWebIdentityRole'), ('RoleSessionName', 'app1'), ('WebIdentityToken', 'Atza%7CIQEBLjAsAhRFiXuWpUXuRvQ9PZL3GMFcYevydwIUFAHZwXZXXXXXXXXJnrulxKDHwy87oGKPznh0D6bEQZTSCzyoCtL_8S07pLpr0zMbn6w1lfVZKNTBdDansFBmtGnIsIapjI6xKR02Yc_2bQ8LZbUXSGm6Ry6_BG7PrtLZtj_dfCTj92xNGed-CrKqjG7nPBjNIL016GGvuS5gSvPRUxWES3VYfm1wl7WTI7jn-Pcb6M-buCgHhFOzTQxod27L9CqnOLio7N3gZAGpsp6n1-AJBOCJckcyXe2c6uD0srOJeZlKUm2eTDVMf8IehDVI0r1QOnTV6KzzAI3OY87Vd_cVMQ')])), ('output', OrderedDict([('AssumedRoleUser', OrderedDict([('Arn', 'arn:aws:sts::123456789012:assumed-role/FederatedWebIdentityRole/app1'), ('AssumedRoleId', 'AROACLKWSDQRAOEXAMPLE:app1')])), ('Audience', 'client.5498841531868486423.1548@apps.example.com'), ('Credentials', OrderedDict([('AccessKeyId', 'AKIAIOSFODNN7EXAMPLE'), ('Expiration', '2014-10-24T23:00:23Z'), ('SecretAccessKey', 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY'), ('SessionToken', 'AQoDYXdzEE0a8ANXXXXXXXXNO1ewxE5TijQyp+IEXAMPLE')])), ('PackedPolicySize', 123), ('Provider', 'www.amazon.com'), ('SubjectFromWebIdentityToken', 'amzn1.account.AF6RHO7KZU5XRVQJGXK6HEXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', ''), ('id', 'to-assume-a-role-as-an-openid-connect-federated-user-1480533445696'), ('title', 'To assume a role as an OpenID Connect-federated user')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DecodeAuthorizationMessage', OrderedDict([('input', OrderedDict([('EncodedMessage', '<encoded-message>')])), ('output', OrderedDict([('DecodedMessage', '{"allowed": "false","explicitDeny": "false","matchedStatements": "","failures": "","context": {"principal": {"id": "AIDACKCEVSQ6C2EXAMPLE","name": "Bob","arn": "arn:aws:iam::123456789012:user/Bob"},"action": "ec2:StopInstances","resource": "arn:aws:ec2:us-east-1:123456789012:instance/i-dd01c9bd","conditions": [{"item": {"key": "ec2:Tenancy","values": ["default"]},{"item": {"key": "ec2:ResourceTag/elasticbeanstalk:environment-name","values": ["Default-Environment"]}},(Additional items ...)]}}')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', ''), ('id', 'to-decode-information-about-an-authorization-status-of-a-request-1480533854499'), ('title', 'To decode information about an authorization status of a request')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetCallerIdentity', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Account', '123456789012'), ('Arn', 'arn:aws:iam::123456789012:user/Alice'), ('UserId', 'AKIAI44QH8DHBEXAMPLE')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example shows a request and response made with the credentials for a user named Alice in the AWS account 123456789012.'), ('id', 'to-get-details-about-a-calling-iam-user-1480540050376'), ('title', 'To get details about a calling IAM user')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetCallerIdentity', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Account', '123456789012'), ('Arn', 'arn:aws:sts::123456789012:assumed-role/my-role-name/my-role-session-name'), ('UserId', 'AKIAI44QH8DHBEXAMPLE:my-role-session-name')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example shows a request and response made with temporary credentials created by AssumeRole. The name of the assumed role is my-role-name, and the RoleSessionName is set to my-role-session-name.'), ('id', 'to-get-details-about-a-calling-user-federated-with-assumerole-1480540158545'), ('title', 'To get details about a calling user federated with AssumeRole')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetCallerIdentity', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('Account', '123456789012'), ('Arn', 'arn:aws:sts::123456789012:federated-user/my-federated-user-name'), ('UserId', '123456789012:my-federated-user-name')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'This example shows a request and response made with temporary credentials created by using GetFederationToken. The Name parameter is set to my-federated-user-name.'), ('id', 'to-get-details-about-a-calling-user-federated-with-getfederationtoken-1480540231316'), ('title', 'To get details about a calling user federated with GetFederationToken')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetFederationToken', OrderedDict([('input', OrderedDict([('DurationSeconds', 3600), ('Name', 'Bob'), ('Policy', '{"Version":"2012-10-17","Statement":[{"Sid":"Stmt1","Effect":"Allow","Action":"s3:*","Resource":"*"}]}')])), ('output', OrderedDict([('Credentials', OrderedDict([('AccessKeyId', 'AKIAIOSFODNN7EXAMPLE'), ('Expiration', '2011-07-15T23:28:33.359Z'), ('SecretAccessKey', 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY'), ('SessionToken', 'AQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/qkPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==')])), ('FederatedUser', OrderedDict([('Arn', 'arn:aws:sts::123456789012:federated-user/Bob'), ('FederatedUserId', '123456789012:Bob')])), ('PackedPolicySize', 6)])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', ''), ('id', 'to-get-temporary-credentials-for-a-role-by-using-getfederationtoken-1480540749900'), ('title', 'To get temporary credentials for a role by using GetFederationToken')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSessionToken', OrderedDict([('input', OrderedDict([('DurationSeconds', 3600), ('SerialNumber', 'YourMFASerialNumber'), ('TokenCode', '123456')])), ('output', OrderedDict([('Credentials', OrderedDict([('AccessKeyId', 'AKIAIOSFODNN7EXAMPLE'), ('Expiration', '2011-07-11T19:55:29.611Z'), ('SecretAccessKey', 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY'), ('SessionToken', 'AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/LTo6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3zrkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtpZ3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', ''), ('id', 'to-get-temporary-credentials-for-an-iam-user-or-an-aws-account-1480540814038'), ('title', 'To get temporary credentials for an IAM user or an AWS account')]), <botocore.model.ServiceModel object at 0x7f89ff437d68>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateIPSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MyIPSetFriendlyName')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('IPSet', OrderedDict([('IPSetDescriptors', [OrderedDict([('Type', 'IPV4'), ('Value', '192.0.2.44/32')])]), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Name', 'MyIPSetFriendlyName')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates an IP match set named MyIPSetFriendlyName.'), ('id', 'createipset-1472501003122'), ('title', 'To create an IP set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRule', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('MetricName', 'WAFByteHeaderRule'), ('Name', 'WAFByteHeaderRule')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Rule', OrderedDict([('MetricName', 'WAFByteHeaderRule'), ('Name', 'WAFByteHeaderRule'), ('Predicates', [OrderedDict([('DataId', 'MyByteMatchSetID'), ('Negated', False), ('Type', 'ByteMatch')])]), ('RuleId', 'WAFRule-1-Example')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a rule named WAFByteHeaderRule.'), ('id', 'createrule-1474072675555'), ('title', 'To create a rule')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSizeConstraintSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MySampleSizeConstraintSet')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SizeConstraintSet', OrderedDict([('Name', 'MySampleSizeConstraintSet'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SizeConstraints', [OrderedDict([('ComparisonOperator', 'GT'), ('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('Size', 0), ('TextTransformation', 'NONE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates size constraint set named MySampleSizeConstraintSet.'), ('id', 'createsizeconstraint-1474299140754'), ('title', 'To create a size constraint')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MySQLInjectionMatchSet')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SqlInjectionMatchSet', OrderedDict([('Name', 'MySQLInjectionMatchSet'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SqlInjectionMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a SQL injection match set named MySQLInjectionMatchSet.'), ('id', 'createsqlinjectionmatchset-1474492796105'), ('title', 'To create a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateWebACL', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('MetricName', 'CreateExample'), ('Name', 'CreateExample')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('WebACL', OrderedDict([('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('MetricName', 'CreateExample'), ('Name', 'CreateExample'), ('Rules', [OrderedDict([('Action', OrderedDict([('Type', 'ALLOW')])), ('Priority', 1), ('RuleId', 'WAFRule-1-Example')])]), ('WebACLId', 'example-46da-4444-5555-example')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a web ACL named CreateExample.'), ('id', 'createwebacl-1472061481310'), ('title', 'To create a web ACL')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateXssMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MySampleXssMatchSet')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('XssMatchSet', OrderedDict([('Name', 'MySampleXssMatchSet'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('XssMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates an XSS match set named MySampleXssMatchSet.'), ('id', 'createxssmatchset-1474560868500'), ('title', 'To create an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteByteMatchSet', OrderedDict([('input', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5'), ('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a byte match set with the ID exampleIDs3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletebytematchset-1473367566229'), ('title', 'To delete a byte match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteIPSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an IP match set  with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deleteipset-1472767434306'), ('title', 'To delete an IP set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRule', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('RuleId', 'WAFRule-1-Example')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a rule with the ID WAFRule-1-Example.'), ('id', 'deleterule-1474073108749'), ('title', 'To delete a rule')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSizeConstraintSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a size constraint set  with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletesizeconstraintset-1474299857905'), ('title', 'To delete a size constraint set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a SQL injection match set  with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletesqlinjectionmatchset-1474493373197'), ('title', 'To delete a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteWebACL', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('WebACLId', 'example-46da-4444-5555-example')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a web ACL with the ID example-46da-4444-5555-example.'), ('id', 'deletewebacl-1472767755931'), ('title', 'To delete a web ACL')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteXssMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an XSS match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletexssmatchset-1474561302618'), ('title', 'To delete an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetByteMatchSet', OrderedDict([('input', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ByteMatchSet', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5'), ('ByteMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Data', 'referer'), ('Type', 'HEADER')])), ('PositionalConstraint', 'CONTAINS'), ('TargetString', 'badrefer1'), ('TextTransformation', 'NONE')])]), ('Name', 'ByteMatchNameExample')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a byte match set with the ID exampleIDs3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getbytematchset-1473273311532'), ('title', 'To get a byte match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetChangeToken', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns a change token to use for a create, update or delete operation.'), ('id', 'get-change-token-example-1471635120794'), ('title', 'To get a change token')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetChangeTokenStatus', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('output', OrderedDict([('ChangeTokenStatus', 'PENDING')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the status of a change token with the ID abcd12f2-46da-4fdb-b8d5-fbd4c466928f.'), ('id', 'getchangetokenstatus-1474658417107'), ('title', 'To get the change token status')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIPSet', OrderedDict([('input', OrderedDict([('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('IPSet', OrderedDict([('IPSetDescriptors', [OrderedDict([('Type', 'IPV4'), ('Value', '192.0.2.44/32')])]), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Name', 'MyIPSetFriendlyName')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of an IP match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getipset-1474658688675'), ('title', 'To get an IP set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRule', OrderedDict([('input', OrderedDict([('RuleId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('Rule', OrderedDict([('MetricName', 'WAFByteHeaderRule'), ('Name', 'WAFByteHeaderRule'), ('Predicates', [OrderedDict([('DataId', 'MyByteMatchSetID'), ('Negated', False), ('Type', 'ByteMatch')])]), ('RuleId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a rule with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getrule-1474659238790'), ('title', 'To get a rule')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSampledRequests', OrderedDict([('input', OrderedDict([('MaxItems', 100), ('RuleId', 'WAFRule-1-Example'), ('TimeWindow', OrderedDict([('EndTime', '2016-09-27T15:50Z'), ('StartTime', '2016-09-27T15:50Z')])), ('WebAclId', 'createwebacl-1472061481310')])), ('output', OrderedDict([('PopulationSize', 50), ('SampledRequests', [OrderedDict([('Action', 'BLOCK'), ('Request', OrderedDict([('ClientIP', '192.0.2.44'), ('Country', 'US'), ('HTTPVersion', 'HTTP/1.1'), ('Headers', [OrderedDict([('Name', 'User-Agent'), ('Value', 'BadBot ')])]), ('Method', 'HEAD')])), ('Timestamp', '2016-09-27T14:55Z'), ('Weight', 1)])]), ('TimeWindow', OrderedDict([('EndTime', '2016-09-27T15:50Z'), ('StartTime', '2016-09-27T14:50Z')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns detailed information about 100 requests --a sample-- that AWS WAF randomly selects from among the first 5,000 requests that your AWS resource received between the time period 2016-09-27T15:50Z to 2016-09-27T15:50Z.'), ('id', 'getsampledrequests-1474927997195'), ('title', 'To get a sampled requests')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSizeConstraintSet', OrderedDict([('input', OrderedDict([('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('SizeConstraintSet', OrderedDict([('Name', 'MySampleSizeConstraintSet'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SizeConstraints', [OrderedDict([('ComparisonOperator', 'GT'), ('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('Size', 0), ('TextTransformation', 'NONE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a size constraint match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getsizeconstraintset-1475005422493'), ('title', 'To get a size constraint set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('SqlInjectionMatchSet', OrderedDict([('Name', 'MySQLInjectionMatchSet'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SqlInjectionMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a SQL injection match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getsqlinjectionmatchset-1475005940137'), ('title', 'To get a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetWebACL', OrderedDict([('input', OrderedDict([('WebACLId', 'createwebacl-1472061481310')])), ('output', OrderedDict([('WebACL', OrderedDict([('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('MetricName', 'CreateExample'), ('Name', 'CreateExample'), ('Rules', [OrderedDict([('Action', OrderedDict([('Type', 'ALLOW')])), ('Priority', 1), ('RuleId', 'WAFRule-1-Example')])]), ('WebACLId', 'createwebacl-1472061481310')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a web ACL with the ID createwebacl-1472061481310.'), ('id', 'getwebacl-1475006348525'), ('title', 'To get a web ACL')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetXssMatchSet', OrderedDict([('input', OrderedDict([('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('XssMatchSet', OrderedDict([('Name', 'MySampleXssMatchSet'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('XssMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of an XSS match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getxssmatchset-1475187879017'), ('title', 'To get an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListIPSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('IPSets', [OrderedDict([('IPSetId', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MyIPSetFriendlyName')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 IP match sets.'), ('id', 'listipsets-1472235676229'), ('title', 'To list IP sets')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListRules', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('Rules', [OrderedDict([('Name', 'WAFByteHeaderRule'), ('RuleId', 'WAFRule-1-Example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 rules.'), ('id', 'listrules-1475258406433'), ('title', 'To list rules')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSizeConstraintSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('SizeConstraintSets', [OrderedDict([('Name', 'MySampleSizeConstraintSet'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 size contraint match sets.'), ('id', 'listsizeconstraintsets-1474300067597'), ('title', 'To list a size constraint sets')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSqlInjectionMatchSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('SqlInjectionMatchSets', [OrderedDict([('Name', 'MySQLInjectionMatchSet'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 SQL injection match sets.'), ('id', 'listsqlinjectionmatchset-1474493560103'), ('title', 'To list SQL injection match sets')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListWebACLs', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('WebACLs', [OrderedDict([('Name', 'WebACLexample'), ('WebACLId', 'webacl-1472061481310')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 web ACLs.'), ('id', 'listwebacls-1475258732691'), ('title', 'To list Web ACLs')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListXssMatchSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('XssMatchSets', [OrderedDict([('Name', 'MySampleXssMatchSet'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 XSS match sets.'), ('id', 'listxssmatchsets-1474561481168'), ('title', 'To list XSS match sets')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateByteMatchSet', OrderedDict([('input', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5'), ('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('ByteMatchTuple', OrderedDict([('FieldToMatch', OrderedDict([('Data', 'referer'), ('Type', 'HEADER')])), ('PositionalConstraint', 'CONTAINS'), ('TargetString', 'badrefer1'), ('TextTransformation', 'NONE')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a ByteMatchTuple object (filters) in an byte match set with the ID exampleIDs3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatebytematchset-1475259074558'), ('title', 'To update a byte match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateIPSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('IPSetDescriptor', OrderedDict([('Type', 'IPV4'), ('Value', '192.0.2.44/32')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an IPSetDescriptor object in an IP match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updateipset-1475259733625'), ('title', 'To update an IP set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateRule', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('RuleId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('Predicate', OrderedDict([('DataId', 'MyByteMatchSetID'), ('Negated', False), ('Type', 'ByteMatch')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a Predicate object in a rule with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updaterule-1475260064720'), ('title', 'To update a rule')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateSizeConstraintSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('SizeConstraint', OrderedDict([('ComparisonOperator', 'GT'), ('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('Size', 0), ('TextTransformation', 'NONE')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a SizeConstraint object (filters) in a size constraint set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatesizeconstraintset-1475531697891'), ('title', 'To update a size constraint set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('SqlInjectionMatchTuple', OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a SqlInjectionMatchTuple object (filters) in a SQL injection match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatesqlinjectionmatchset-1475532094686'), ('title', 'To update a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateWebACL', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('Updates', [OrderedDict([('Action', 'DELETE'), ('ActivatedRule', OrderedDict([('Action', OrderedDict([('Type', 'ALLOW')])), ('Priority', 1), ('RuleId', 'WAFRule-1-Example')]))])]), ('WebACLId', 'webacl-1472061481310')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an ActivatedRule object in a WebACL with the ID webacl-1472061481310.'), ('id', 'updatewebacl-1475533627385'), ('title', 'To update a Web ACL')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateXssMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('XssMatchTuple', OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')]))])]), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an XssMatchTuple object (filters) in an XssMatchSet with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatexssmatchset-1475534098881'), ('title', 'To update an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a02b3e198>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateIPSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MyIPSetFriendlyName')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('IPSet', OrderedDict([('IPSetDescriptors', [OrderedDict([('Type', 'IPV4'), ('Value', '192.0.2.44/32')])]), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Name', 'MyIPSetFriendlyName')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates an IP match set named MyIPSetFriendlyName.'), ('id', 'createipset-1472501003122'), ('title', 'To create an IP set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateRule', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('MetricName', 'WAFByteHeaderRule'), ('Name', 'WAFByteHeaderRule')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Rule', OrderedDict([('MetricName', 'WAFByteHeaderRule'), ('Name', 'WAFByteHeaderRule'), ('Predicates', [OrderedDict([('DataId', 'MyByteMatchSetID'), ('Negated', False), ('Type', 'ByteMatch')])]), ('RuleId', 'WAFRule-1-Example')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a rule named WAFByteHeaderRule.'), ('id', 'createrule-1474072675555'), ('title', 'To create a rule')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSizeConstraintSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MySampleSizeConstraintSet')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SizeConstraintSet', OrderedDict([('Name', 'MySampleSizeConstraintSet'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SizeConstraints', [OrderedDict([('ComparisonOperator', 'GT'), ('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('Size', 0), ('TextTransformation', 'NONE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates size constraint set named MySampleSizeConstraintSet.'), ('id', 'createsizeconstraint-1474299140754'), ('title', 'To create a size constraint')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MySQLInjectionMatchSet')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SqlInjectionMatchSet', OrderedDict([('Name', 'MySQLInjectionMatchSet'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SqlInjectionMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a SQL injection match set named MySQLInjectionMatchSet.'), ('id', 'createsqlinjectionmatchset-1474492796105'), ('title', 'To create a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateWebACL', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('MetricName', 'CreateExample'), ('Name', 'CreateExample')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('WebACL', OrderedDict([('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('MetricName', 'CreateExample'), ('Name', 'CreateExample'), ('Rules', [OrderedDict([('Action', OrderedDict([('Type', 'ALLOW')])), ('Priority', 1), ('RuleId', 'WAFRule-1-Example')])]), ('WebACLId', 'example-46da-4444-5555-example')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates a web ACL named CreateExample.'), ('id', 'createwebacl-1472061481310'), ('title', 'To create a web ACL')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('CreateXssMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MySampleXssMatchSet')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('XssMatchSet', OrderedDict([('Name', 'MySampleXssMatchSet'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('XssMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example creates an XSS match set named MySampleXssMatchSet.'), ('id', 'createxssmatchset-1474560868500'), ('title', 'To create an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteByteMatchSet', OrderedDict([('input', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5'), ('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a byte match set with the ID exampleIDs3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletebytematchset-1473367566229'), ('title', 'To delete a byte match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteIPSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an IP match set  with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deleteipset-1472767434306'), ('title', 'To delete an IP set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteRule', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('RuleId', 'WAFRule-1-Example')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a rule with the ID WAFRule-1-Example.'), ('id', 'deleterule-1474073108749'), ('title', 'To delete a rule')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSizeConstraintSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a size constraint set  with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletesizeconstraintset-1474299857905'), ('title', 'To delete a size constraint set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a SQL injection match set  with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletesqlinjectionmatchset-1474493373197'), ('title', 'To delete a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteWebACL', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('WebACLId', 'example-46da-4444-5555-example')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a web ACL with the ID example-46da-4444-5555-example.'), ('id', 'deletewebacl-1472767755931'), ('title', 'To delete a web ACL')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('DeleteXssMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an XSS match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'deletexssmatchset-1474561302618'), ('title', 'To delete an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetByteMatchSet', OrderedDict([('input', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ByteMatchSet', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5'), ('ByteMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Data', 'referer'), ('Type', 'HEADER')])), ('PositionalConstraint', 'CONTAINS'), ('TargetString', 'badrefer1'), ('TextTransformation', 'NONE')])]), ('Name', 'ByteMatchNameExample')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a byte match set with the ID exampleIDs3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getbytematchset-1473273311532'), ('title', 'To get a byte match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetChangeToken', OrderedDict([('input', OrderedDict()), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns a change token to use for a create, update or delete operation.'), ('id', 'get-change-token-example-1471635120794'), ('title', 'To get a change token')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetChangeTokenStatus', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('output', OrderedDict([('ChangeTokenStatus', 'PENDING')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the status of a change token with the ID abcd12f2-46da-4fdb-b8d5-fbd4c466928f.'), ('id', 'getchangetokenstatus-1474658417107'), ('title', 'To get the change token status')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetIPSet', OrderedDict([('input', OrderedDict([('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('IPSet', OrderedDict([('IPSetDescriptors', [OrderedDict([('Type', 'IPV4'), ('Value', '192.0.2.44/32')])]), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Name', 'MyIPSetFriendlyName')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of an IP match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getipset-1474658688675'), ('title', 'To get an IP set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetRule', OrderedDict([('input', OrderedDict([('RuleId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('Rule', OrderedDict([('MetricName', 'WAFByteHeaderRule'), ('Name', 'WAFByteHeaderRule'), ('Predicates', [OrderedDict([('DataId', 'MyByteMatchSetID'), ('Negated', False), ('Type', 'ByteMatch')])]), ('RuleId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a rule with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getrule-1474659238790'), ('title', 'To get a rule')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSampledRequests', OrderedDict([('input', OrderedDict([('MaxItems', 100), ('RuleId', 'WAFRule-1-Example'), ('TimeWindow', OrderedDict([('EndTime', '2016-09-27T15:50Z'), ('StartTime', '2016-09-27T15:50Z')])), ('WebAclId', 'createwebacl-1472061481310')])), ('output', OrderedDict([('PopulationSize', 50), ('SampledRequests', [OrderedDict([('Action', 'BLOCK'), ('Request', OrderedDict([('ClientIP', '192.0.2.44'), ('Country', 'US'), ('HTTPVersion', 'HTTP/1.1'), ('Headers', [OrderedDict([('Name', 'User-Agent'), ('Value', 'BadBot ')])]), ('Method', 'HEAD')])), ('Timestamp', '2016-09-27T14:55Z'), ('Weight', 1)])]), ('TimeWindow', OrderedDict([('EndTime', '2016-09-27T15:50Z'), ('StartTime', '2016-09-27T14:50Z')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns detailed information about 100 requests --a sample-- that AWS WAF randomly selects from among the first 5,000 requests that your AWS resource received between the time period 2016-09-27T15:50Z to 2016-09-27T15:50Z.'), ('id', 'getsampledrequests-1474927997195'), ('title', 'To get a sampled requests')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSizeConstraintSet', OrderedDict([('input', OrderedDict([('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('SizeConstraintSet', OrderedDict([('Name', 'MySampleSizeConstraintSet'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SizeConstraints', [OrderedDict([('ComparisonOperator', 'GT'), ('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('Size', 0), ('TextTransformation', 'NONE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a size constraint match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getsizeconstraintset-1475005422493'), ('title', 'To get a size constraint set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('SqlInjectionMatchSet', OrderedDict([('Name', 'MySQLInjectionMatchSet'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('SqlInjectionMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a SQL injection match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getsqlinjectionmatchset-1475005940137'), ('title', 'To get a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetWebACL', OrderedDict([('input', OrderedDict([('WebACLId', 'createwebacl-1472061481310')])), ('output', OrderedDict([('WebACL', OrderedDict([('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('MetricName', 'CreateExample'), ('Name', 'CreateExample'), ('Rules', [OrderedDict([('Action', OrderedDict([('Type', 'ALLOW')])), ('Priority', 1), ('RuleId', 'WAFRule-1-Example')])]), ('WebACLId', 'createwebacl-1472061481310')]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of a web ACL with the ID createwebacl-1472061481310.'), ('id', 'getwebacl-1475006348525'), ('title', 'To get a web ACL')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('GetXssMatchSet', OrderedDict([('input', OrderedDict([('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('XssMatchSet', OrderedDict([('Name', 'MySampleXssMatchSet'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('XssMatchTuples', [OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')])])]))])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns the details of an XSS match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'getxssmatchset-1475187879017'), ('title', 'To get an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListIPSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('IPSets', [OrderedDict([('IPSetId', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Name', 'MyIPSetFriendlyName')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 IP match sets.'), ('id', 'listipsets-1472235676229'), ('title', 'To list IP sets')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListRules', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('Rules', [OrderedDict([('Name', 'WAFByteHeaderRule'), ('RuleId', 'WAFRule-1-Example')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 rules.'), ('id', 'listrules-1475258406433'), ('title', 'To list rules')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSizeConstraintSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('SizeConstraintSets', [OrderedDict([('Name', 'MySampleSizeConstraintSet'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 size contraint match sets.'), ('id', 'listsizeconstraintsets-1474300067597'), ('title', 'To list a size constraint sets')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListSqlInjectionMatchSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('SqlInjectionMatchSets', [OrderedDict([('Name', 'MySQLInjectionMatchSet'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 SQL injection match sets.'), ('id', 'listsqlinjectionmatchset-1474493560103'), ('title', 'To list SQL injection match sets')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListWebACLs', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('WebACLs', [OrderedDict([('Name', 'WebACLexample'), ('WebACLId', 'webacl-1472061481310')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 web ACLs.'), ('id', 'listwebacls-1475258732691'), ('title', 'To list Web ACLs')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('ListXssMatchSets', OrderedDict([('input', OrderedDict([('Limit', 100)])), ('output', OrderedDict([('XssMatchSets', [OrderedDict([('Name', 'MySampleXssMatchSet'), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])])])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example returns an array of up to 100 XSS match sets.'), ('id', 'listxssmatchsets-1474561481168'), ('title', 'To list XSS match sets')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateByteMatchSet', OrderedDict([('input', OrderedDict([('ByteMatchSetId', 'exampleIDs3t-46da-4fdb-b8d5-abc321j569j5'), ('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('ByteMatchTuple', OrderedDict([('FieldToMatch', OrderedDict([('Data', 'referer'), ('Type', 'HEADER')])), ('PositionalConstraint', 'CONTAINS'), ('TargetString', 'badrefer1'), ('TextTransformation', 'NONE')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a ByteMatchTuple object (filters) in an byte match set with the ID exampleIDs3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatebytematchset-1475259074558'), ('title', 'To update a byte match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateIPSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('IPSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('IPSetDescriptor', OrderedDict([('Type', 'IPV4'), ('Value', '192.0.2.44/32')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an IPSetDescriptor object in an IP match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updateipset-1475259733625'), ('title', 'To update an IP set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateRule', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('RuleId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('Predicate', OrderedDict([('DataId', 'MyByteMatchSetID'), ('Negated', False), ('Type', 'ByteMatch')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a Predicate object in a rule with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updaterule-1475260064720'), ('title', 'To update a rule')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateSizeConstraintSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SizeConstraintSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('SizeConstraint', OrderedDict([('ComparisonOperator', 'GT'), ('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('Size', 0), ('TextTransformation', 'NONE')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a SizeConstraint object (filters) in a size constraint set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatesizeconstraintset-1475531697891'), ('title', 'To update a size constraint set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateSqlInjectionMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('SqlInjectionMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('SqlInjectionMatchTuple', OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')]))])])])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes a SqlInjectionMatchTuple object (filters) in a SQL injection match set with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatesqlinjectionmatchset-1475532094686'), ('title', 'To update a SQL injection match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateWebACL', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('DefaultAction', OrderedDict([('Type', 'ALLOW')])), ('Updates', [OrderedDict([('Action', 'DELETE'), ('ActivatedRule', OrderedDict([('Action', OrderedDict([('Type', 'ALLOW')])), ('Priority', 1), ('RuleId', 'WAFRule-1-Example')]))])]), ('WebACLId', 'webacl-1472061481310')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an ActivatedRule object in a WebACL with the ID webacl-1472061481310.'), ('id', 'updatewebacl-1475533627385'), ('title', 'To update a Web ACL')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
tests.functional.docs.test_shared_example_config.test_lint_shared_example_configs('UpdateXssMatchSet', OrderedDict([('input', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f'), ('Updates', [OrderedDict([('Action', 'DELETE'), ('XssMatchTuple', OrderedDict([('FieldToMatch', OrderedDict([('Type', 'QUERY_STRING')])), ('TextTransformation', 'URL_DECODE')]))])]), ('XssMatchSetId', 'example1ds3t-46da-4fdb-b8d5-abc321j569j5')])), ('output', OrderedDict([('ChangeToken', 'abcd12f2-46da-4fdb-b8d5-fbd4c466928f')])), ('comments', OrderedDict([('input', OrderedDict()), ('output', OrderedDict())])), ('description', 'The following example deletes an XssMatchTuple object (filters) in an XssMatchSet with the ID example1ds3t-46da-4fdb-b8d5-abc321j569j5.'), ('id', 'updatexssmatchset-1475534098881'), ('title', 'To update an XSS match set')]), <botocore.model.ServiceModel object at 0x7f8a046aeef0>) ... ok
test_all_streaming_body_are_properly_documented (tests.functional.docs.test_streaming_body.TestStreamingBodyDocumentation) ... ok
test_create_memory_clients_in_loop (tests.functional.leak.test_resource_leaks.TestDoesNotLeakMemory) ... ok
test_create_memory_paginators_in_loop (tests.functional.leak.test_resource_leaks.TestDoesNotLeakMemory) ... ok
test_create_memory_waiters_in_loop (tests.functional.leak.test_resource_leaks.TestDoesNotLeakMemory) ... ok
test_create_single_client_memory_constant (tests.functional.leak.test_resource_leaks.TestDoesNotLeakMemory) ... ok
test_create_single_paginator_memory_constant (tests.functional.leak.test_resource_leaks.TestDoesNotLeakMemory) ... ok
test_create_single_waiter_memory_constant (tests.functional.leak.test_resource_leaks.TestDoesNotLeakMemory) ... ok
tests.functional.test_alias.test_can_use_alias(<botocore.session.Session object at 0x7f89fd5de7f0>, {'service': 'ec2', 'operation': 'describe_flow_logs', 'original_name': 'Filter', 'new_name': 'Filters', 'parameter_value': [{'Name': 'traffic-type', 'Values': ['ACCEPT']}]}) ... ok
tests.functional.test_alias.test_can_use_alias(<botocore.session.Session object at 0x7f89fd5de7f0>, {'service': 'cloudsearchdomain', 'operation': 'search', 'original_name': 'return', 'new_name': 'returnFields', 'parameter_value': '_all_fields', 'extra_args': {'query': 'foo'}}) ... ok
tests.functional.test_alias.test_can_use_alias(<botocore.session.Session object at 0x7f89fd5de7f0>, {'service': 'logs', 'operation': 'create_export_task', 'original_name': 'from', 'new_name': 'fromTime', 'parameter_value': 0, 'extra_args': {'logGroupName': 'name', 'to': 10, 'destination': 'mybucket'}}) ... ok
tests.functional.test_alias.test_can_use_original_name(<botocore.session.Session object at 0x7f8a01f0b8d0>, {'service': 'ec2', 'operation': 'describe_flow_logs', 'original_name': 'Filter', 'new_name': 'Filters', 'parameter_value': [{'Name': 'traffic-type', 'Values': ['ACCEPT']}]}, False) ... ok
tests.functional.test_alias.test_can_use_original_name(<botocore.session.Session object at 0x7f8a01f0b8d0>, {'service': 'cloudsearchdomain', 'operation': 'search', 'original_name': 'return', 'new_name': 'returnFields', 'parameter_value': '_all_fields', 'extra_args': {'query': 'foo'}}, False) ... ok
tests.functional.test_alias.test_can_use_original_name(<botocore.session.Session object at 0x7f8a01f0b8d0>, {'service': 'logs', 'operation': 'create_export_task', 'original_name': 'from', 'new_name': 'fromTime', 'parameter_value': 0, 'extra_args': {'logGroupName': 'name', 'to': 10, 'destination': 'mybucket'}}, False) ... ok
test_get_export (tests.functional.test_apigateway.TestApiGateway) ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.AutoScaling object at 0x7f89fc5fae48>, 'AutoScaling') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudFormation object at 0x7f8a0242cc88>, 'CloudFormation') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudFront object at 0x7f89fa2d57f0>, 'CloudFront') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudHSM object at 0x7f8a0242ce80>, 'CloudHSM') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudSearch object at 0x7f89fa2c1f28>, 'CloudSearch') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudSearchDomain object at 0x7f89fa2d5c88>, 'CloudSearchDomain') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudTrail object at 0x7f8a024456d8>, 'CloudTrail') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudWatch object at 0x7f89f85cdf28>, 'CloudWatch') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CodeDeploy object at 0x7f89f9924198>, 'CodeDeploy') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CognitoIdentity object at 0x7f89ff03def0>, 'CognitoIdentity') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CognitoSync object at 0x7f8a0004f400>, 'CognitoSync') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ConfigService object at 0x7f89ff03ddd8>, 'ConfigService') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.DataPipeline object at 0x7f89fc75aa20>, 'DataPipeline') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.DirectConnect object at 0x7f8a020cf358>, 'DirectConnect') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.DirectoryService object at 0x7f89ff31aa90>, 'DirectoryService') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.DynamoDB object at 0x7f89ffae49b0>, 'DynamoDB') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.EC2 object at 0x7f8a01c21be0>, 'EC2') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ECS object at 0x7f8a02ef5c50>, 'ECS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.EFS object at 0x7f8a04702f28>, 'EFS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ElastiCache object at 0x7f89fce4dd68>, 'ElastiCache') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ElasticBeanstalk object at 0x7f89fe852940>, 'ElasticBeanstalk') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ElasticTranscoder object at 0x7f89fe2979b0>, 'ElasticTranscoder') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ElasticLoadBalancing object at 0x7f89fc0d5b38>, 'ElasticLoadBalancing') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.EMR object at 0x7f89fe297320>, 'EMR') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Glacier object at 0x7f89fe5439b0>, 'Glacier') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.IAM object at 0x7f89fc3a9240>, 'IAM') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.ImportExport object at 0x7f89f9d7dda0>, 'ImportExport') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Kinesis object at 0x7f89fc30aa90>, 'Kinesis') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.KMS object at 0x7f8a013ec208>, 'KMS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Lambda object at 0x7f8a01c21cf8>, 'Lambda') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.CloudWatchLogs object at 0x7f89fb192400>, 'CloudWatchLogs') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.MachineLearning object at 0x7f89fe07e438>, 'MachineLearning') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.OpsWorks object at 0x7f89fa449d68>, 'OpsWorks') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.RDS object at 0x7f89fc226e48>, 'RDS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Redshift object at 0x7f89fdc8ab38>, 'Redshift') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Route53 object at 0x7f8a02b44cf8>, 'Route53') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Route53Domains object at 0x7f8a03ebc748>, 'Route53Domains') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.S3 object at 0x7f89f89cd588>, 'S3') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.SimpleDB object at 0x7f89fed4ccf8>, 'SimpleDB') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.SES object at 0x7f89ff081160>, 'SES') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.SNS object at 0x7f89fa42b2b0>, 'SNS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.SQS object at 0x7f89fc3b4080>, 'SQS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.SSM object at 0x7f8a0369ed30>, 'SSM') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.StorageGateway object at 0x7f8a03f7cc18>, 'StorageGateway') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.STS object at 0x7f89fce45390>, 'STS') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.Support object at 0x7f89fb6e9898>, 'Support') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.SWF object at 0x7f89f9ae0438>, 'SWF') ... ok
tests.functional.test_client_class_names.test_client_has_correct_class_name(<botocore.client.WorkSpaces object at 0x7f89fb22e3c8>, 'WorkSpaces') ... ok
test_client_has_china_partition_on_meta (tests.functional.test_client_metadata.TestClientMeta) ... ok
test_client_has_gov_partition_on_meta (tests.functional.test_client_metadata.TestClientMeta) ... ok
test_client_has_no_partition_on_meta_if_custom_region (tests.functional.test_client_metadata.TestClientMeta) ... ok
test_client_has_standard_partition_on_meta (tests.functional.test_client_metadata.TestClientMeta) ... ok
test_endpoint_url_on_meta (tests.functional.test_client_metadata.TestClientMeta) ... ok
test_region_name_on_meta (tests.functional.test_client_metadata.TestClientMeta) ... ok
test_get_template_response_documented_as_dict (tests.functional.test_cloudformation.TestCloudFormationDocs) ... ok
test_search (tests.functional.test_cloudsearchdomain.TestCloudsearchdomain) ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
tests.functional.test_cognito_idp.test_unsigned_operations ... ok
test_assume_role (tests.functional.test_credentials.TestAssumeRole) ... ok
test_container_credential_source (tests.functional.test_credentials.TestAssumeRole) ... ok
test_environment_credential_source (tests.functional.test_credentials.TestAssumeRole) ... ok
test_infinitely_recursive_assume_role (tests.functional.test_credentials.TestAssumeRole) ... ok
test_instance_metadata_credential_source (tests.functional.test_credentials.TestAssumeRole) ... ok
test_invalid_credential_source (tests.functional.test_credentials.TestAssumeRole) ... ok
test_misconfigured_source_profile (tests.functional.test_credentials.TestAssumeRole) ... ok
test_recursive_assume_role (tests.functional.test_credentials.TestAssumeRole) ... ok
test_recursive_assume_role_stops_at_static_creds (tests.functional.test_credentials.TestAssumeRole) ... ok
test_self_referential_profile (tests.functional.test_credentials.TestAssumeRole) ... ok
test_has_no_race_conditions (tests.functional.test_credentials.TestCredentialRefreshRaces) ... ok
test_no_race_for_immediate_advisory_expiration (tests.functional.test_credentials.TestCredentialRefreshRaces) ... ok
test_no_race_for_initial_refresh_of_deferred_refreshable (tests.functional.test_credentials.TestCredentialRefreshRaces) ... ok
test_credential_process (tests.functional.test_credentials.TestProcessProvider) ... ok
test_credential_process_returns_error (tests.functional.test_credentials.TestProcessProvider) ... ok
test_insert_idempotency_token (tests.functional.test_ec2.TestIdempotencyToken) ... ok
test_provided_idempotency_token (tests.functional.test_ec2.TestIdempotencyToken) ... ok
Failure: FileNotFoundError ([Errno 2] No such file or directory: '/home/srezepin/git/botocore/botocore/data/endpoints.json') ... ERROR
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'acm') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'alexaforbusiness') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'apigateway') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'application-autoscaling') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'appstream') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'appsync') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'athena') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'autoscaling') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'autoscaling-plans') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'batch') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'budgets') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ce') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloud9') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'clouddirectory') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudformation') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudfront') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudhsm') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudhsmv2') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudsearch') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudsearchdomain') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudtrail') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cloudwatch') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'codebuild') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'codecommit') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'codedeploy') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'codepipeline') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'codestar') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cognito-identity') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cognito-idp') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cognito-sync') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'comprehend') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'config') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'cur') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'datapipeline') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'dax') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'devicefarm') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'directconnect') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'discovery') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'dms') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ds') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'dynamodb') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'dynamodbstreams') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ec2') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ecr') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ecs') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'efs') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'elasticache') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'elasticbeanstalk') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'elastictranscoder') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'elb') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'elbv2') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'emr') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'es') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'events') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'firehose') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'gamelift') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'glacier') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'glue') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'greengrass') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'guardduty') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'health') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'iam') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'importexport') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'inspector') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'iot') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'iot-data') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'iot-jobs-data') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'kinesis') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'kinesis-video-archived-media') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'kinesis-video-media') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'kinesisanalytics') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'kinesisvideo') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'kms') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'lambda') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'lex-models') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'lex-runtime') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'lightsail') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'logs') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'machinelearning') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'marketplace-entitlement') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'marketplacecommerceanalytics') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mediaconvert') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'medialive') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mediapackage') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mediastore') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mediastore-data') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'meteringmarketplace') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mgh') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mobile') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mq') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'mturk') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'opsworks') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'opsworkscm') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'organizations') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'pinpoint') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'polly') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'pricing') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'rds') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'redshift') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'rekognition') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'resource-groups') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'resourcegroupstaggingapi') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'route53') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'route53domains') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 's3') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sagemaker') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sagemaker-runtime') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sdb') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'serverlessrepo') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'servicecatalog') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'servicediscovery') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ses') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'shield') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sms') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'snowball') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sns') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sqs') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'ssm') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'stepfunctions') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'storagegateway') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'sts') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'support') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'swf') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'transcribe') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'translate') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'waf') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'waf-regional') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'workdocs') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'workmail') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'workspaces') ... ok
tests.functional.test_endpoints.test_service_name_matches_endpoint_prefix(<botocore.loaders.Loader object at 0x7f89fc92f748>, 'xray') ... ok
test_does_record_api_call (tests.functional.test_history.TestRecordStatementsInjections) ... ok
test_does_record_http_request (tests.functional.test_history.TestRecordStatementsInjections) ... ok
test_does_record_http_response (tests.functional.test_history.TestRecordStatementsInjections) ... ok
test_does_record_parsed_response (tests.functional.test_history.TestRecordStatementsInjections) ... ok
test_compatible_openssl_version (tests.functional.test_iot_data.TestOpensslVersion) ... ok
test_incompatible_openssl_version (tests.functional.test_iot_data.TestOpensslVersion) ... ok
test_unsigned_payload (tests.functional.test_lex.TestLex) ... ok
test_can_override_session (tests.functional.test_loaders.TestLoaderAllowsDataPathOverride) ... ok
test_predict (tests.functional.test_machinelearning.TestMachineLearning) ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('cloudfront', 'paginators-1', '2016-11-25', '2017-03-25') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('cloudfront', 'waiters-2', '2016-11-25', '2017-03-25') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('cloudsearch', 'paginators-1', '2011-02-01', '2013-01-01') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('cloudsearch', 'waiters-2', '2011-02-01', '2013-01-01') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('ec2', 'paginators-1', '2016-09-15', '2016-11-15') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('ec2', 'waiters-2', '2016-09-15', '2016-11-15') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('elasticache', 'paginators-1', '2014-09-30', '2015-02-02') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('elasticache', 'waiters-2', '2014-09-30', '2015-02-02') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('events', 'paginators-1', '2014-02-03', '2015-10-07') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('events', 'waiters-2', '2014-02-03', '2015-10-07') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('inspector', 'paginators-1', '2015-08-18', '2016-02-16') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('inspector', 'waiters-2', '2015-08-18', '2016-02-16') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('lambda', 'paginators-1', '2014-11-11', '2015-03-31') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('lambda', 'waiters-2', '2014-11-11', '2015-03-31') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('rds', 'paginators-1', '2014-09-01', '2014-10-31') ... ok
tests.functional.test_model_completeness.test_paginators_and_waiters_are_not_lost_in_new_version('rds', 'waiters-2', '2014-09-01', '2014-10-31') ... ok
test_list_hits_aliased (tests.functional.test_mturk.TestMturk) ... ok
test_repeated_build_full_results (tests.functional.test_paginate.TestAutoscalingPagination) ... ok
test_can_specify_zero_marker (tests.functional.test_paginate.TestRDSPagination) ... ok
tests.functional.test_paginate.test_token_encoding({'foo': 'bar'},) ... ok
tests.functional.test_paginate.test_token_encoding({'foo': b'bar'},) ... ok
tests.functional.test_paginate.test_token_encoding({'foo': {'bar': b'baz'}},) ... ok
tests.functional.test_paginate.test_token_encoding({'foo': ['bar', b'baz']},) ... ok
tests.functional.test_paginate.test_token_encoding({'foo': b'\xff'},) ... ok
tests.functional.test_paginate.test_token_encoding({'foo': {'bar': b'baz', 'bin': [b'bam']}},) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCertificates', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxItems'), ('result_key', 'CertificateSummaryList')]), <botocore.model.ServiceModel object at 0x7f89f4b34940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSkills', OrderedDict([('result_key', 'SkillSummaries'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchUsers', OrderedDict([('result_key', 'Users'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTags', OrderedDict([('result_key', 'Tags'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchProfiles', OrderedDict([('result_key', 'Profiles'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchSkillGroups', OrderedDict([('result_key', 'SkillGroups'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchDevices', OrderedDict([('result_key', 'Devices'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchRooms', OrderedDict([('result_key', 'Rooms'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f4b20a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetApiKeys', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBasePathMappings', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetClientCertificates', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetDeployments', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetDomainNames', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetModels', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetResources', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetRestApis', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetUsage', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetUsagePlans', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetUsagePlanKeys', OrderedDict([('input_token', 'position'), ('output_token', 'position'), ('limit_key', 'limit'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetVpcLinks', OrderedDict([('input_token', 'position'), ('limit_key', 'limit'), ('output_token', 'position'), ('result_key', 'items')]), <botocore.model.ServiceModel object at 0x7f89f49954a8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeScalableTargets', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ScalableTargets')]), <botocore.model.ServiceModel object at 0x7f89f4951c18>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeScalingActivities', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ScalingActivities')]), <botocore.model.ServiceModel object at 0x7f89f4951c18>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeScalingPolicies', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ScalingPolicies')]), <botocore.model.ServiceModel object at 0x7f89f4951c18>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListNamedQueries', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'NamedQueryIds')]), <botocore.model.ServiceModel object at 0x7f89f47f2390>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListQueryExecutions', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'QueryExecutionIds')]), <botocore.model.ServiceModel object at 0x7f89f47f2390>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetQueryResults', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ResultSet.Rows'), ('non_aggregate_keys', ['ResultSet.ResultSetMetadata'])]), <botocore.model.ServiceModel object at 0x7f89f47f2390>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeAutoScalingGroups', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'AutoScalingGroups')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeAutoScalingInstances', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'AutoScalingInstances')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeLaunchConfigurations', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'LaunchConfigurations')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeNotificationConfigurations', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'NotificationConfigurations')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribePolicies', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'ScalingPolicies')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeScalingActivities', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'Activities')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeScheduledActions', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'ScheduledUpdateGroupActions')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTags', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'Tags')]), <botocore.model.ServiceModel object at 0x7f89f4951c88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEnvironmentMemberships', OrderedDict([('result_key', 'memberships'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f4679860>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEnvironments', OrderedDict([('result_key', 'environmentIds'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f4679860>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListObjectParentPaths', OrderedDict([('result_key', 'PathToObjectIdentifiersList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListFacetNames', OrderedDict([('result_key', 'FacetNames'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPublishedSchemaArns', OrderedDict([('result_key', 'SchemaArns'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDirectories', OrderedDict([('result_key', 'Directories'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDevelopmentSchemaArns', OrderedDict([('result_key', 'SchemaArns'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTypedLinkFacetNames', OrderedDict([('result_key', 'FacetNames'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListIndex', OrderedDict([('result_key', 'IndexAttachments'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListFacetAttributes', OrderedDict([('result_key', 'Attributes'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListObjectPolicies', OrderedDict([('result_key', 'AttachedPolicyIds'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTagsForResource', OrderedDict([('result_key', 'Tags'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAttachedIndices', OrderedDict([('result_key', 'IndexAttachments'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('LookupPolicy', OrderedDict([('result_key', 'PolicyToPathList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPolicyAttachments', OrderedDict([('result_key', 'ObjectIdentifiers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListObjectAttributes', OrderedDict([('result_key', 'Attributes'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAppliedSchemaArns', OrderedDict([('result_key', 'SchemaArns'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTypedLinkFacetAttributes', OrderedDict([('result_key', 'Attributes'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f45275f8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeStackEvents', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'StackEvents')]), <botocore.model.ServiceModel object at 0x7f89f447c2e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeStacks', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Stacks')]), <botocore.model.ServiceModel object at 0x7f89f447c2e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListStackResources', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'StackResourceSummaries')]), <botocore.model.ServiceModel object at 0x7f89f447c2e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListStacks', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'StackSummaries')]), <botocore.model.ServiceModel object at 0x7f89f447c2e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListExports', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Exports')]), <botocore.model.ServiceModel object at 0x7f89f447c2e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListImports', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Imports')]), <botocore.model.ServiceModel object at 0x7f89f447c2e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCloudFrontOriginAccessIdentities', OrderedDict([('input_token', 'Marker'), ('output_token', 'CloudFrontOriginAccessIdentityList.NextMarker'), ('limit_key', 'MaxItems'), ('more_results', 'CloudFrontOriginAccessIdentityList.IsTruncated'), ('result_key', 'CloudFrontOriginAccessIdentityList.Items')]), <botocore.model.ServiceModel object at 0x7f89f41ab0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDistributions', OrderedDict([('input_token', 'Marker'), ('output_token', 'DistributionList.NextMarker'), ('limit_key', 'MaxItems'), ('more_results', 'DistributionList.IsTruncated'), ('result_key', 'DistributionList.Items')]), <botocore.model.ServiceModel object at 0x7f89f41ab0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInvalidations', OrderedDict([('input_token', 'Marker'), ('output_token', 'InvalidationList.NextMarker'), ('limit_key', 'MaxItems'), ('more_results', 'InvalidationList.IsTruncated'), ('result_key', 'InvalidationList.Items')]), <botocore.model.ServiceModel object at 0x7f89f41ab0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListStreamingDistributions', OrderedDict([('input_token', 'Marker'), ('output_token', 'StreamingDistributionList.NextMarker'), ('limit_key', 'MaxItems'), ('more_results', 'StreamingDistributionList.IsTruncated'), ('result_key', 'StreamingDistributionList.Items')]), <botocore.model.ServiceModel object at 0x7f89f41ab0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeBackups', OrderedDict([('result_key', 'Backups'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f447cd30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusters', OrderedDict([('result_key', 'Clusters'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f447cd30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTags', OrderedDict([('result_key', 'TagList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89f447cd30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('LookupEvents', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Events')]), <botocore.model.ServiceModel object at 0x7f89f40ae860>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeAlarmHistory', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'AlarmHistoryItems')]), <botocore.model.ServiceModel object at 0x7f89f407e240>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeAlarms', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'MetricAlarms')]), <botocore.model.ServiceModel object at 0x7f89f407e240>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDashboards', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'DashboardEntries')]), <botocore.model.ServiceModel object at 0x7f89f407e240>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListMetrics', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Metrics')]), <botocore.model.ServiceModel object at 0x7f89f407e240>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListBuilds', OrderedDict([('output_token', 'nextToken'), ('input_token', 'nextToken'), ('result_key', 'ids')]), <botocore.model.ServiceModel object at 0x7f89f403ce48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListProjects', OrderedDict([('output_token', 'nextToken'), ('input_token', 'nextToken'), ('result_key', 'projects')]), <botocore.model.ServiceModel object at 0x7f89f403ce48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListBuildsForProject', OrderedDict([('output_token', 'nextToken'), ('input_token', 'nextToken'), ('result_key', 'ids')]), <botocore.model.ServiceModel object at 0x7f89f403ce48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListBranches', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'branches')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRepositories', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'repositories')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetCommentsForComparedCommit', OrderedDict([('result_key', 'commentsForComparedCommitData'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribePullRequestEvents', OrderedDict([('result_key', 'pullRequestEvents'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetCommentsForPullRequest', OrderedDict([('result_key', 'commentsForPullRequestData'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPullRequests', OrderedDict([('result_key', 'pullRequestIds'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetDifferences', OrderedDict([('result_key', 'differences'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dff7a9e8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListApplicationRevisions', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'revisions')]), <botocore.model.ServiceModel object at 0x7f89dfe53940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListApplications', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'applications')]), <botocore.model.ServiceModel object at 0x7f89dfe53940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDeploymentConfigs', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'deploymentConfigsList')]), <botocore.model.ServiceModel object at 0x7f89dfe53940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDeploymentGroups', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'deploymentGroups')]), <botocore.model.ServiceModel object at 0x7f89dfe53940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDeploymentInstances', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'instancesList')]), <botocore.model.ServiceModel object at 0x7f89dfe53940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDeployments', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'deployments')]), <botocore.model.ServiceModel object at 0x7f89dfe53940>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTopicsDetectionJobs', OrderedDict([('result_key', 'TopicsDetectionJobPropertiesList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dfb8b208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeComplianceByConfigRule', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'ComplianceByConfigRules')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeComplianceByResource', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'ComplianceByResources')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeConfigRules', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'ConfigRules')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetComplianceDetailsByConfigRule', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'EvaluationResults')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetComplianceDetailsByResource', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'EvaluationResults')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetResourceConfigHistory', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'configurationItems'), ('limit_key', 'limit')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDiscoveredResources', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'resourceIdentifiers')]), <botocore.model.ServiceModel object at 0x7f89dfb70dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReportDefinitions', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ReportDefinitions')]), <botocore.model.ServiceModel object at 0x7f89dfb13be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPipelines', OrderedDict([('input_token', 'marker'), ('output_token', 'marker'), ('more_results', 'hasMoreResults'), ('result_key', 'pipelineIdList')]), <botocore.model.ServiceModel object at 0x7f89dfae3dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeObjects', OrderedDict([('input_token', 'marker'), ('output_token', 'marker'), ('more_results', 'hasMoreResults'), ('result_key', 'pipelineObjects')]), <botocore.model.ServiceModel object at 0x7f89dfae3dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('QueryObjects', OrderedDict([('input_token', 'marker'), ('output_token', 'marker'), ('more_results', 'hasMoreResults'), ('limit_key', 'limit'), ('result_key', 'ids')]), <botocore.model.ServiceModel object at 0x7f89dfae3dd8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListArtifacts', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'artifacts')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDevicePools', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'devicePools')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDevices', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'devices')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListJobs', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'jobs')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListProjects', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'projects')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRuns', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'runs')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSamples', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'samples')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSuites', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'suites')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTests', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'tests')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListUniqueProblems', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'uniqueProblems')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListUploads', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'uploads')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetOfferingStatus', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', ['current', 'nextPeriod'])]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOfferingTransactions', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'offeringTransactions')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOfferings', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('result_key', 'offerings')]), <botocore.model.ServiceModel object at 0x7f89df9f8a20>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSchemas', OrderedDict([('result_key', 'Schemas'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCertificates', OrderedDict([('result_key', 'Certificates'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEndpoints', OrderedDict([('result_key', 'Endpoints'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEventSubscriptions', OrderedDict([('result_key', 'EventSubscriptionsList'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEndpointTypes', OrderedDict([('result_key', 'SupportedEndpointTypes'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReplicationInstances', OrderedDict([('result_key', 'ReplicationInstances'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTableStatistics', OrderedDict([('result_key', 'TableStatistics'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeConnections', OrderedDict([('result_key', 'Connections'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReplicationTaskAssessmentResults', OrderedDict([('result_key', 'ReplicationTaskAssessmentResults'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvents', OrderedDict([('result_key', 'Events'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeOrderableReplicationInstances', OrderedDict([('result_key', 'OrderableReplicationInstances'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReplicationSubnetGroups', OrderedDict([('result_key', 'ReplicationSubnetGroups'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReplicationTasks', OrderedDict([('result_key', 'ReplicationTasks'), ('output_token', 'Marker'), ('input_token', 'Marker'), ('limit_key', 'MaxRecords')]), <botocore.model.ServiceModel object at 0x7f89df8704e0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDomainControllers', OrderedDict([('result_key', 'DomainControllers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'Limit')]), <botocore.model.ServiceModel object at 0x7f89df7a0588>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTables', OrderedDict([('input_token', 'ExclusiveStartTableName'), ('output_token', 'LastEvaluatedTableName'), ('limit_key', 'Limit'), ('result_key', 'TableNames')]), <botocore.model.ServiceModel object at 0x7f89df72efd0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('Query', OrderedDict([('input_token', 'ExclusiveStartKey'), ('output_token', 'LastEvaluatedKey'), ('limit_key', 'Limit'), ('result_key', ['Items', 'Count', 'ScannedCount']), ('non_aggregate_keys', ['ConsumedCapacity'])]), <botocore.model.ServiceModel object at 0x7f89df72efd0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('Scan', OrderedDict([('input_token', 'ExclusiveStartKey'), ('output_token', 'LastEvaluatedKey'), ('limit_key', 'Limit'), ('result_key', ['Items', 'Count', 'ScannedCount']), ('non_aggregate_keys', ['ConsumedCapacity'])]), <botocore.model.ServiceModel object at 0x7f89df72efd0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeIamInstanceProfileAssociations', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'IamInstanceProfileAssociations')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeInstanceStatus', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'InstanceStatuses')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeInstances', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Reservations')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedInstancesOfferings', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ReservedInstancesOfferings')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedInstancesModifications', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'ReservedInstancesModifications')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSecurityGroups', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'SecurityGroups')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSnapshots', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Snapshots')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSpotFleetInstances', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ActiveInstances')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSpotFleetRequests', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'SpotFleetRequestConfigs')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSpotPriceHistory', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'SpotPriceHistory')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTags', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Tags')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeVolumeStatus', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'VolumeStatuses')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeVolumes', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Volumes')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeNatGateways', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'NatGateways')]), <botocore.model.ServiceModel object at 0x7f89df2c6ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListImages', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'imageIds')]), <botocore.model.ServiceModel object at 0x7f89df2bbbe0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeImages', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'imageDetails')]), <botocore.model.ServiceModel object at 0x7f89df2bbbe0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeRepositories', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'repositories')]), <botocore.model.ServiceModel object at 0x7f89df2bbbe0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListClusters', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'clusterArns')]), <botocore.model.ServiceModel object at 0x7f89df18a080>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListContainerInstances', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'containerInstanceArns')]), <botocore.model.ServiceModel object at 0x7f89df18a080>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTaskDefinitions', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'taskDefinitionArns')]), <botocore.model.ServiceModel object at 0x7f89df18a080>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTaskDefinitionFamilies', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'families')]), <botocore.model.ServiceModel object at 0x7f89df18a080>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTasks', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'taskArns')]), <botocore.model.ServiceModel object at 0x7f89df18a080>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListServices', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'serviceArns')]), <botocore.model.ServiceModel object at 0x7f89df18a080>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeFileSystems', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'MaxItems'), ('result_key', 'FileSystems')]), <botocore.model.ServiceModel object at 0x7f89df1b4b70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeMountTargets', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'MaxItems'), ('result_key', 'MountTargets')]), <botocore.model.ServiceModel object at 0x7f89df1b4b70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTags', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'MaxItems'), ('result_key', 'Tags')]), <botocore.model.ServiceModel object at 0x7f89df1b4b70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCacheClusters', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'CacheClusters')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCacheEngineVersions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'CacheEngineVersions')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCacheParameterGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'CacheParameterGroups')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCacheParameters', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Parameters')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCacheSecurityGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'CacheSecurityGroups')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCacheSubnetGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'CacheSubnetGroups')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEngineDefaultParameters', OrderedDict([('input_token', 'Marker'), ('output_token', 'EngineDefaults.Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'EngineDefaults.Parameters')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvents', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Events')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedCacheNodes', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReservedCacheNodes')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedCacheNodesOfferings', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReservedCacheNodesOfferings')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReplicationGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReplicationGroups')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSnapshots', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Snapshots')]), <botocore.model.ServiceModel object at 0x7f89df089ba8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvents', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxRecords'), ('result_key', 'Events')]), <botocore.model.ServiceModel object at 0x7f89df01bd68>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListJobsByPipeline', OrderedDict([('input_token', 'PageToken'), ('output_token', 'NextPageToken'), ('result_key', 'Jobs')]), <botocore.model.ServiceModel object at 0x7f89defa9908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListJobsByStatus', OrderedDict([('input_token', 'PageToken'), ('output_token', 'NextPageToken'), ('result_key', 'Jobs')]), <botocore.model.ServiceModel object at 0x7f89defa9908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPipelines', OrderedDict([('input_token', 'PageToken'), ('output_token', 'NextPageToken'), ('result_key', 'Pipelines')]), <botocore.model.ServiceModel object at 0x7f89defa9908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPresets', OrderedDict([('input_token', 'PageToken'), ('output_token', 'NextPageToken'), ('result_key', 'Presets')]), <botocore.model.ServiceModel object at 0x7f89defa9908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeLoadBalancers', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('result_key', 'LoadBalancerDescriptions'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89def0fc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeLoadBalancers', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'PageSize'), ('result_key', 'LoadBalancers')]), <botocore.model.ServiceModel object at 0x7f89df01be80>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTargetGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'PageSize'), ('result_key', 'TargetGroups')]), <botocore.model.ServiceModel object at 0x7f89df01be80>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeListeners', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'PageSize'), ('result_key', 'Listeners')]), <botocore.model.ServiceModel object at 0x7f89df01be80>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListBootstrapActions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('result_key', 'BootstrapActions')]), <botocore.model.ServiceModel object at 0x7f89dedcff60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListClusters', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('result_key', 'Clusters')]), <botocore.model.ServiceModel object at 0x7f89dedcff60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInstanceGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('result_key', 'InstanceGroups')]), <botocore.model.ServiceModel object at 0x7f89dedcff60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInstances', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('result_key', 'Instances')]), <botocore.model.ServiceModel object at 0x7f89dedcff60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSteps', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('result_key', 'Steps')]), <botocore.model.ServiceModel object at 0x7f89dedcff60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInstanceFleets', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('result_key', 'InstanceFleets')]), <botocore.model.ServiceModel object at 0x7f89dedcff60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListElasticsearchInstanceTypes', OrderedDict([('result_key', 'ElasticsearchInstanceTypes'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89deda6588>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListElasticsearchVersions', OrderedDict([('result_key', 'ElasticsearchVersions'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89deda6588>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListJobs', OrderedDict([('input_token', 'marker'), ('output_token', 'Marker'), ('limit_key', 'limit'), ('result_key', 'JobList')]), <botocore.model.ServiceModel object at 0x7f89deb8e9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListMultipartUploads', OrderedDict([('input_token', 'marker'), ('output_token', 'Marker'), ('limit_key', 'limit'), ('result_key', 'UploadsList')]), <botocore.model.ServiceModel object at 0x7f89deb8e9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListParts', OrderedDict([('input_token', 'marker'), ('output_token', 'Marker'), ('limit_key', 'limit'), ('result_key', 'Parts')]), <botocore.model.ServiceModel object at 0x7f89deb8e9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListVaults', OrderedDict([('input_token', 'marker'), ('output_token', 'Marker'), ('limit_key', 'limit'), ('result_key', 'VaultList')]), <botocore.model.ServiceModel object at 0x7f89deb8e9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetJobs', OrderedDict([('result_key', 'Jobs'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetPartitions', OrderedDict([('result_key', 'Partitions'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetDatabases', OrderedDict([('result_key', 'DatabaseList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetClassifiers', OrderedDict([('result_key', 'Classifiers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTableVersions', OrderedDict([('result_key', 'TableVersions'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetCrawlers', OrderedDict([('result_key', 'Crawlers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetDevEndpoints', OrderedDict([('result_key', 'DevEndpoints'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetJobRuns', OrderedDict([('result_key', 'JobRuns'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTriggers', OrderedDict([('result_key', 'Triggers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTables', OrderedDict([('result_key', 'TableList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetUserDefinedFunctions', OrderedDict([('result_key', 'UserDefinedFunctions'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetCrawlerMetrics', OrderedDict([('result_key', 'CrawlerMetricsList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetConnections', OrderedDict([('result_key', 'ConnectionList'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dea99e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDetectors', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'DetectorIds')]), <botocore.model.ServiceModel object at 0x7f89de9e8208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListFindings', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'FindingIds')]), <botocore.model.ServiceModel object at 0x7f89de9e8208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListIPSets', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'IpSetIds')]), <botocore.model.ServiceModel object at 0x7f89de9e8208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListThreatIntelSets', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'ThreatIntelSetIds')]), <botocore.model.ServiceModel object at 0x7f89de9e8208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInvitations', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'Invitations')]), <botocore.model.ServiceModel object at 0x7f89de9e8208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListMembers', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'Members')]), <botocore.model.ServiceModel object at 0x7f89de9e8208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeAffectedEntities', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'entities')]), <botocore.model.ServiceModel object at 0x7f89de996c50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEventAggregates', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'eventAggregates')]), <botocore.model.ServiceModel object at 0x7f89de996c50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvents', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'events')]), <botocore.model.ServiceModel object at 0x7f89de996c50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEventTypes', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'eventTypes')]), <botocore.model.ServiceModel object at 0x7f89de996c50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetAccountAuthorizationDetails', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', ['UserDetailList', 'GroupDetailList', 'RoleDetailList', 'Policies'])]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetGroup', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Users'), ('non_aggregate_keys', ['Group'])]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAccessKeys', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'AccessKeyMetadata')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAccountAliases', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'AccountAliases')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAttachedGroupPolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'AttachedPolicies')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAttachedRolePolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'AttachedPolicies')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAttachedUserPolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'AttachedPolicies')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEntitiesForPolicy', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', ['PolicyGroups', 'PolicyUsers', 'PolicyRoles'])]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroupPolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'PolicyNames')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroups', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Groups')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroupsForUser', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Groups')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInstanceProfiles', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'InstanceProfiles')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInstanceProfilesForRole', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'InstanceProfiles')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListMFADevices', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'MFADevices')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Policies')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPolicyVersions', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Versions')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRolePolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'PolicyNames')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRoles', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Roles')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListServerCertificates', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'ServerCertificateMetadataList')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSigningCertificates', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Certificates')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSSHPublicKeys', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'SSHPublicKeys')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListUserPolicies', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'PolicyNames')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListUsers', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'Users')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListVirtualMFADevices', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'VirtualMFADevices')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SimulateCustomPolicy', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'EvaluationResults')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SimulatePrincipalPolicy', OrderedDict([('input_token', 'Marker'), ('limit_key', 'MaxItems'), ('more_results', 'IsTruncated'), ('output_token', 'Marker'), ('result_key', 'EvaluationResults')]), <botocore.model.ServiceModel object at 0x7f89de870550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListJobs', OrderedDict([('input_token', 'Marker'), ('output_token', 'Jobs[-1].JobId'), ('more_results', 'IsTruncated'), ('limit_key', 'MaxJobs'), ('result_key', 'Jobs')]), <botocore.model.ServiceModel object at 0x7f89df0ab748>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListFindings', OrderedDict([('result_key', 'findingArns'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAssessmentTemplates', OrderedDict([('result_key', 'assessmentTemplateArns'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('PreviewAgents', OrderedDict([('result_key', 'agentPreviews'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEventSubscriptions', OrderedDict([('result_key', 'subscriptions'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRulesPackages', OrderedDict([('result_key', 'rulesPackageArns'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAssessmentRunAgents', OrderedDict([('result_key', 'assessmentRunAgents'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAssessmentRuns', OrderedDict([('result_key', 'assessmentRunArns'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAssessmentTargets', OrderedDict([('result_key', 'assessmentTargetArns'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89f479dc88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCACertificates', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'certificates')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCertificates', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'certificates')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCertificatesByCA', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'certificates')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOutgoingCertificates', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'outgoingCertificates')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPolicies', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'policies')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPolicyPrincipals', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'principals')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPrincipalPolicies', OrderedDict([('input_token', 'marker'), ('output_token', 'nextMarker'), ('limit_key', 'pageSize'), ('result_key', 'policies')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPrincipalThings', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'things')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListThingTypes', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'thingTypes')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListThings', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'things')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTopicRules', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'rules')]), <botocore.model.ServiceModel object at 0x7f89ff2140f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeStream', OrderedDict([('input_token', 'ExclusiveStartShardId'), ('limit_key', 'Limit'), ('more_results', 'StreamDescription.HasMoreShards'), ('output_token', 'StreamDescription.Shards[-1].ShardId'), ('result_key', 'StreamDescription.Shards'), ('non_aggregate_keys', ['StreamDescription.StreamARN', 'StreamDescription.StreamName', 'StreamDescription.StreamStatus', 'StreamDescription.RetentionPeriodHours', 'StreamDescription.EnhancedMonitoring', 'StreamDescription.EncryptionType', 'StreamDescription.KeyId', 'StreamDescription.StreamCreationTimestamp'])]), <botocore.model.ServiceModel object at 0x7f89fc9850f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListStreams', OrderedDict([('input_token', 'ExclusiveStartStreamName'), ('limit_key', 'Limit'), ('more_results', 'HasMoreStreams'), ('output_token', 'StreamNames[-1]'), ('result_key', 'StreamNames')]), <botocore.model.ServiceModel object at 0x7f89fc9850f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAliases', OrderedDict([('limit_key', 'Limit'), ('input_token', 'Marker'), ('output_token', 'NextMarker'), ('more_results', 'Truncated'), ('result_key', 'Aliases')]), <botocore.model.ServiceModel object at 0x7f89f479d470>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGrants', OrderedDict([('limit_key', 'Limit'), ('input_token', 'Marker'), ('output_token', 'NextMarker'), ('more_results', 'Truncated'), ('result_key', 'Grants')]), <botocore.model.ServiceModel object at 0x7f89f479d470>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListKeyPolicies', OrderedDict([('limit_key', 'Limit'), ('input_token', 'Marker'), ('output_token', 'NextMarker'), ('more_results', 'Truncated'), ('result_key', 'PolicyNames')]), <botocore.model.ServiceModel object at 0x7f89f479d470>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListKeys', OrderedDict([('limit_key', 'Limit'), ('input_token', 'Marker'), ('output_token', 'NextMarker'), ('more_results', 'Truncated'), ('result_key', 'Keys')]), <botocore.model.ServiceModel object at 0x7f89f479d470>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEventSourceMappings', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'MaxItems'), ('result_key', 'EventSourceMappings')]), <botocore.model.ServiceModel object at 0x7f89de694be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListFunctions', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'MaxItems'), ('result_key', 'Functions')]), <botocore.model.ServiceModel object at 0x7f89de694be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAliases', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('limit_key', 'MaxItems'), ('result_key', 'Aliases')]), <botocore.model.ServiceModel object at 0x7f89de694be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetSlotTypeVersions', OrderedDict([('result_key', 'slotTypes'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetSlotTypes', OrderedDict([('result_key', 'slotTypes'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetIntents', OrderedDict([('result_key', 'intents'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBotChannelAssociations', OrderedDict([('result_key', 'botChannelAssociations'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBots', OrderedDict([('result_key', 'bots'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBuiltinSlotTypes', OrderedDict([('result_key', 'slotTypes'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetIntentVersions', OrderedDict([('result_key', 'intents'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBotAliases', OrderedDict([('result_key', 'BotAliases'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBuiltinIntents', OrderedDict([('result_key', 'intents'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBotVersions', OrderedDict([('result_key', 'bots'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de633e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetActiveNames', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'activeNames')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBlueprints', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'blueprints')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetBundles', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'bundles')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetDomains', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'domains')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetInstanceSnapshots', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'instanceSnapshots')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetInstances', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'instances')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetKeyPairs', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'keyPairs')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetOperations', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'operations')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetStaticIps', OrderedDict([('input_token', 'pageToken'), ('output_token', 'nextPageToken'), ('result_key', 'staticIps')]), <botocore.model.ServiceModel object at 0x7f89de4e4e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDestinations', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'limit'), ('result_key', 'destinations')]), <botocore.model.ServiceModel object at 0x7f89de466828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeLogGroups', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'limit'), ('result_key', 'logGroups')]), <botocore.model.ServiceModel object at 0x7f89de466828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeLogStreams', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'limit'), ('result_key', 'logStreams')]), <botocore.model.ServiceModel object at 0x7f89de466828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeMetricFilters', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'limit'), ('result_key', 'metricFilters')]), <botocore.model.ServiceModel object at 0x7f89de466828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeSubscriptionFilters', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'limit'), ('result_key', 'subscriptionFilters')]), <botocore.model.ServiceModel object at 0x7f89de466828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('FilterLogEvents', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'limit'), ('result_key', ['events', 'searchedLogStreams'])]), <botocore.model.ServiceModel object at 0x7f89de466828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeBatchPredictions', OrderedDict([('limit_key', 'Limit'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('result_key', 'Results')]), <botocore.model.ServiceModel object at 0x7f89de38e0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDataSources', OrderedDict([('limit_key', 'Limit'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('result_key', 'Results')]), <botocore.model.ServiceModel object at 0x7f89de38e0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvaluations', OrderedDict([('limit_key', 'Limit'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('result_key', 'Results')]), <botocore.model.ServiceModel object at 0x7f89de38e0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeMLModels', OrderedDict([('limit_key', 'Limit'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('result_key', 'Results')]), <botocore.model.ServiceModel object at 0x7f89de38e0b8>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInputs', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Inputs')]), <botocore.model.ServiceModel object at 0x7f89de2fcf60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListChannels', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Channels')]), <botocore.model.ServiceModel object at 0x7f89de2fcf60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInputSecurityGroups', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'InputSecurityGroups')]), <botocore.model.ServiceModel object at 0x7f89de2fcf60>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListChannels', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Channels')]), <botocore.model.ServiceModel object at 0x7f89de255208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOriginEndpoints', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'OriginEndpoints')]), <botocore.model.ServiceModel object at 0x7f89de255208>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListBundles', OrderedDict([('result_key', 'bundleList'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de1ee588>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListProjects', OrderedDict([('result_key', 'projects'), ('output_token', 'nextToken'), ('input_token', 'nextToken'), ('limit_key', 'maxResults')]), <botocore.model.ServiceModel object at 0x7f89de1ee588>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAssignmentsForHIT', OrderedDict([('result_key', 'Assignments'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListQualificationTypes', OrderedDict([('result_key', 'QualificationTypes'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListHITs', OrderedDict([('result_key', 'HITs'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListWorkerBlocks', OrderedDict([('result_key', 'WorkerBlocks'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListReviewableHITs', OrderedDict([('result_key', 'HITs'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListHITsForQualificationType', OrderedDict([('result_key', 'HITs'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListQualificationRequests', OrderedDict([('result_key', 'QualificationRequests'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListWorkersWithQualificationType', OrderedDict([('result_key', 'Qualifications'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListBonusPayments', OrderedDict([('result_key', 'BonusPayments'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89de166d30>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEcsClusters', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'EcsClusters')]), <botocore.model.ServiceModel object at 0x7f89de067da0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAccounts', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Accounts')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAccountsForParent', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Accounts')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListChildren', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Children')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCreateAccountStatus', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'CreateAccountStatuses')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListHandshakesForAccount', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Handshakes')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListHandshakesForOrganization', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Handshakes')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOrganizationalUnitsForParent', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'OrganizationalUnits')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListParents', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Parents')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPolicies', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Policies')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPoliciesForTarget', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Policies')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRoots', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Roots')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTargetsForPolicy', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Targets')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAWSServiceAccessForOrganization', OrderedDict([('result_key', 'EnabledServicePrincipals'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89ddfaeb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeVoices', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Voices')]), <botocore.model.ServiceModel object at 0x7f89ddf04b00>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeServices', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Services'), ('non_aggregate_keys', ['FormatVersion'])]), <botocore.model.ServiceModel object at 0x7f89de255400>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetAttributeValues', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'AttributeValues')]), <botocore.model.ServiceModel object at 0x7f89de255400>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetProducts', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'PriceList'), ('non_aggregate_keys', ['FormatVersion'])]), <botocore.model.ServiceModel object at 0x7f89de255400>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBClusterSnapshots', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBClusterSnapshots')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBEngineVersions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBEngineVersions')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBInstances', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBInstances')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBLogFiles', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DescribeDBLogFiles')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBParameterGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBParameterGroups')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBParameters', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Parameters')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBSecurityGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBSecurityGroups')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBSnapshots', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBSnapshots')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDBSubnetGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DBSubnetGroups')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEngineDefaultParameters', OrderedDict([('input_token', 'Marker'), ('output_token', 'EngineDefaults.Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'EngineDefaults.Parameters')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEventSubscriptions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'EventSubscriptionsList')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvents', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Events')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeOptionGroupOptions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'OptionGroupOptions')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeOptionGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'OptionGroupsList')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeOrderableDBInstanceOptions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'OrderableDBInstanceOptions')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedDBInstances', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReservedDBInstances')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedDBInstancesOfferings', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReservedDBInstancesOfferings')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DownloadDBLogFilePortion', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'NumberOfLines'), ('more_results', 'AdditionalDataPending'), ('result_key', 'LogFileData')]), <botocore.model.ServiceModel object at 0x7f89ddd88a58>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusterParameterGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ParameterGroups')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusterParameters', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Parameters')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusterSecurityGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ClusterSecurityGroups')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusterSnapshots', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Snapshots')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusterSubnetGroups', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ClusterSubnetGroups')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusterVersions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ClusterVersions')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeClusters', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Clusters')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDefaultClusterParameters', OrderedDict([('input_token', 'Marker'), ('output_token', 'DefaultClusterParameters.Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'DefaultClusterParameters.Parameters')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEventSubscriptions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'EventSubscriptionsList')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeEvents', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'Events')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeHsmClientCertificates', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'HsmClientCertificates')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeHsmConfigurations', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'HsmConfigurations')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeOrderableClusterOptions', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'OrderableClusterOptions')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedNodeOfferings', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReservedNodeOfferings')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeReservedNodes', OrderedDict([('input_token', 'Marker'), ('output_token', 'Marker'), ('limit_key', 'MaxRecords'), ('result_key', 'ReservedNodes')]), <botocore.model.ServiceModel object at 0x7f89ddc49e48>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCollections', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', ['CollectionIds', 'FaceModelVersions'])]), <botocore.model.ServiceModel object at 0x7f89ddb90e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListFaces', OrderedDict([('input_token', 'NextToken'), ('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('result_key', 'Faces'), ('non_aggregate_keys', ['FaceModelVersion'])]), <botocore.model.ServiceModel object at 0x7f89ddb90e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListStreamProcessors', OrderedDict([('result_key', 'StreamProcessors'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89ddb90e10>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroups', OrderedDict([('result_key', 'Groups'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89ddbbfe80>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchResources', OrderedDict([('result_key', 'ResourceIdentifiers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89ddbbfe80>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroupResources', OrderedDict([('result_key', 'ResourceIdentifiers'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89ddbbfe80>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetResources', OrderedDict([('input_token', 'PaginationToken'), ('limit_key', 'ResourcesPerPage'), ('output_token', 'PaginationToken'), ('result_key', 'ResourceTagMappingList')]), <botocore.model.ServiceModel object at 0x7f89ddb6a908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTagKeys', OrderedDict([('input_token', 'PaginationToken'), ('output_token', 'PaginationToken'), ('result_key', 'TagKeys')]), <botocore.model.ServiceModel object at 0x7f89ddb6a908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTagValues', OrderedDict([('input_token', 'PaginationToken'), ('output_token', 'PaginationToken'), ('result_key', 'TagValues')]), <botocore.model.ServiceModel object at 0x7f89ddb6a908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListHealthChecks', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('more_results', 'IsTruncated'), ('limit_key', 'MaxItems'), ('result_key', 'HealthChecks')]), <botocore.model.ServiceModel object at 0x7f89ddaf0fd0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListHostedZones', OrderedDict([('input_token', 'Marker'), ('output_token', 'NextMarker'), ('more_results', 'IsTruncated'), ('limit_key', 'MaxItems'), ('result_key', 'HostedZones')]), <botocore.model.ServiceModel object at 0x7f89ddaf0fd0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListResourceRecordSets', OrderedDict([('more_results', 'IsTruncated'), ('limit_key', 'MaxItems'), ('result_key', 'ResourceRecordSets'), ('input_token', ['StartRecordName', 'StartRecordType', 'StartRecordIdentifier']), ('output_token', ['NextRecordName', 'NextRecordType', 'NextRecordIdentifier'])]), <botocore.model.ServiceModel object at 0x7f89ddaf0fd0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDomains', OrderedDict([('limit_key', 'MaxItems'), ('input_token', 'Marker'), ('output_token', 'NextPageMarker'), ('result_key', 'Domains')]), <botocore.model.ServiceModel object at 0x7f89dda5c5c0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOperations', OrderedDict([('limit_key', 'MaxItems'), ('input_token', 'Marker'), ('output_token', 'NextPageMarker'), ('result_key', 'Operations')]), <botocore.model.ServiceModel object at 0x7f89dda5c5c0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListMultipartUploads', OrderedDict([('limit_key', 'MaxUploads'), ('more_results', 'IsTruncated'), ('output_token', ['NextKeyMarker', 'NextUploadIdMarker']), ('input_token', ['KeyMarker', 'UploadIdMarker']), ('result_key', ['Uploads', 'CommonPrefixes'])]), <botocore.model.ServiceModel object at 0x7f89dd91e0f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListObjectVersions', OrderedDict([('more_results', 'IsTruncated'), ('limit_key', 'MaxKeys'), ('output_token', ['NextKeyMarker', 'NextVersionIdMarker']), ('input_token', ['KeyMarker', 'VersionIdMarker']), ('result_key', ['Versions', 'DeleteMarkers', 'CommonPrefixes'])]), <botocore.model.ServiceModel object at 0x7f89dd91e0f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListObjects', OrderedDict([('more_results', 'IsTruncated'), ('limit_key', 'MaxKeys'), ('output_token', 'NextMarker || Contents[-1].Key'), ('input_token', 'Marker'), ('result_key', ['Contents', 'CommonPrefixes'])]), <botocore.model.ServiceModel object at 0x7f89dd91e0f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListObjectsV2', OrderedDict([('more_results', 'IsTruncated'), ('limit_key', 'MaxKeys'), ('output_token', 'NextContinuationToken'), ('input_token', 'ContinuationToken'), ('result_key', ['Contents', 'CommonPrefixes'])]), <botocore.model.ServiceModel object at 0x7f89dd91e0f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListParts', OrderedDict([('more_results', 'IsTruncated'), ('limit_key', 'MaxParts'), ('output_token', 'NextPartNumberMarker'), ('input_token', 'PartNumberMarker'), ('result_key', 'Parts'), ('non_aggregate_keys', ['Initiator', 'Owner', 'StorageClass'])]), <botocore.model.ServiceModel object at 0x7f89dd91e0f0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTrainingJobs', OrderedDict([('result_key', 'TrainingJobSummaries'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dd8ab160>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEndpoints', OrderedDict([('result_key', 'Endpoints'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dd8ab160>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEndpointConfigs', OrderedDict([('result_key', 'EndpointConfigs'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dd8ab160>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListNotebookInstances', OrderedDict([('result_key', 'NotebookInstances'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dd8ab160>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTags', OrderedDict([('result_key', 'Tags'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dd8ab160>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListModels', OrderedDict([('result_key', 'Models'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dd8ab160>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDomains', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxNumberOfDomains'), ('result_key', 'DomainNames')]), <botocore.model.ServiceModel object at 0x7f89dd8742b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('Select', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Items')]), <botocore.model.ServiceModel object at 0x7f89dd8742b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('SearchProductsAsAdmin', OrderedDict([('result_key', 'ProductViewDetails'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAcceptedPortfolioShares', OrderedDict([('result_key', 'PortfolioDetails'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPortfolios', OrderedDict([('result_key', 'PortfolioDetails'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListConstraintsForPortfolio', OrderedDict([('result_key', 'ConstraintDetails'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListLaunchPaths', OrderedDict([('result_key', 'LaunchPathSummaries'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTagOptions', OrderedDict([('result_key', 'TagOptionDetails'), ('output_token', 'PageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPortfoliosForProduct', OrderedDict([('result_key', 'PortfolioDetails'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPrincipalsForPortfolio', OrderedDict([('result_key', 'Principals'), ('output_token', 'NextPageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListResourcesForTagOption', OrderedDict([('result_key', 'ResourceDetails'), ('output_token', 'PageToken'), ('input_token', 'PageToken'), ('limit_key', 'PageSize')]), <botocore.model.ServiceModel object at 0x7f89dd92a630>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListServices', OrderedDict([('result_key', 'Services'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dcf2e908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListInstances', OrderedDict([('result_key', 'Instances'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dcf2e908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListNamespaces', OrderedDict([('result_key', 'Namespaces'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dcf2e908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOperations', OrderedDict([('result_key', 'Operations'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dcf2e908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListIdentities', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxItems'), ('result_key', 'Identities')]), <botocore.model.ServiceModel object at 0x7f89dce23128>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCustomVerificationEmailTemplates', OrderedDict([('result_key', 'CustomVerificationEmailTemplates'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dce23128>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetReplicationJobs', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'replicationJobList')]), <botocore.model.ServiceModel object at 0x7f89dcdf0be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetReplicationRuns', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'replicationRunList')]), <botocore.model.ServiceModel object at 0x7f89dcdf0be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetConnectors', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'connectorList')]), <botocore.model.ServiceModel object at 0x7f89dcdf0be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetServers', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'serverList')]), <botocore.model.ServiceModel object at 0x7f89dcdf0be0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListJobs', OrderedDict([('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('result_key', 'JobListEntries')]), <botocore.model.ServiceModel object at 0x7f89dcdb0f28>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeAddresses', OrderedDict([('limit_key', 'MaxResults'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('result_key', 'Addresses')]), <botocore.model.ServiceModel object at 0x7f89dcdb0f28>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListEndpointsByPlatformApplication', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Endpoints')]), <botocore.model.ServiceModel object at 0x7f89dcd14b00>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListPlatformApplications', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'PlatformApplications')]), <botocore.model.ServiceModel object at 0x7f89dcd14b00>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSubscriptions', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Subscriptions')]), <botocore.model.ServiceModel object at 0x7f89dcd14b00>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSubscriptionsByTopic', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Subscriptions')]), <botocore.model.ServiceModel object at 0x7f89dcd14b00>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListTopics', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Topics')]), <botocore.model.ServiceModel object at 0x7f89dcd14b00>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAssociations', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Associations')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCommandInvocations', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'CommandInvocations')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListCommands', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Commands')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDocuments', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'DocumentIdentifiers')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeInstanceInformation', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'InstanceInformationList')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeActivations', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'ActivationList')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeParameters', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('limit_key', 'MaxResults'), ('result_key', 'Parameters')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetParametersByPath', OrderedDict([('result_key', 'Parameters'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetParameterHistory', OrderedDict([('result_key', 'Parameters'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dcb1c828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetExecutionHistory', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'events')]), <botocore.model.ServiceModel object at 0x7f89dca91710>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListActivities', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'activities')]), <botocore.model.ServiceModel object at 0x7f89dca91710>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListExecutions', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'executions')]), <botocore.model.ServiceModel object at 0x7f89dca91710>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListStateMachines', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'stateMachines')]), <botocore.model.ServiceModel object at 0x7f89dca91710>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTapeArchives', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'TapeArchives')]), <botocore.model.ServiceModel object at 0x7f89dc9e0438>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTapeRecoveryPoints', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'TapeRecoveryPointInfos')]), <botocore.model.ServiceModel object at 0x7f89dc9e0438>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeTapes', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'Tapes')]), <botocore.model.ServiceModel object at 0x7f89dc9e0438>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeVTLDevices', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'VTLDevices')]), <botocore.model.ServiceModel object at 0x7f89dc9e0438>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGateways', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'Gateways')]), <botocore.model.ServiceModel object at 0x7f89dc9e0438>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListVolumes', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'VolumeInfos')]), <botocore.model.ServiceModel object at 0x7f89dc9e0438>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCases', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'cases')]), <botocore.model.ServiceModel object at 0x7f89dc94a828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeCommunications', OrderedDict([('input_token', 'nextToken'), ('output_token', 'nextToken'), ('limit_key', 'maxResults'), ('result_key', 'communications')]), <botocore.model.ServiceModel object at 0x7f89dc94a828>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetWorkflowExecutionHistory', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'events')]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListActivityTypes', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'typeInfos')]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListClosedWorkflowExecutions', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'executionInfos')]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListDomains', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'domainInfos')]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOpenWorkflowExecutions', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'executionInfos')]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListWorkflowTypes', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'typeInfos')]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('PollForDecisionTask', OrderedDict([('limit_key', 'maximumPageSize'), ('input_token', 'nextPageToken'), ('output_token', 'nextPageToken'), ('result_key', 'events'), ('non_aggregate_keys', ['taskToken', 'startedEventId', 'workflowExecution', 'workflowType', 'previousStartedEventId'])]), <botocore.model.ServiceModel object at 0x7f89dc88b9b0>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListByteMatchSets', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'ByteMatchSets')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListIPSets', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'IPSets')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListRules', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'Rules')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSizeConstraintSets', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'SizeConstraintSets')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListSqlInjectionMatchSets', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'SqlInjectionMatchSets')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListWebACLs', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'WebACLs')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListXssMatchSets', OrderedDict([('input_token', 'NextMarker'), ('output_token', 'NextMarker'), ('limit_key', 'Limit'), ('result_key', 'XssMatchSets')]), <botocore.model.ServiceModel object at 0x7f89dc79ec50>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeDocumentVersions', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'DocumentVersions')]), <botocore.model.ServiceModel object at 0x7f89dc61eb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeFolderContents', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', ['Folders', 'Documents'])]), <botocore.model.ServiceModel object at 0x7f89dc61eb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeUsers', OrderedDict([('input_token', 'Marker'), ('limit_key', 'Limit'), ('output_token', 'Marker'), ('result_key', 'Users')]), <botocore.model.ServiceModel object at 0x7f89dc61eb70>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListUsers', OrderedDict([('result_key', 'Users'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dc58ac88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroupMembers', OrderedDict([('result_key', 'Members'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dc58ac88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListOrganizations', OrderedDict([('result_key', 'OrganizationSummaries'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dc58ac88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListGroups', OrderedDict([('result_key', 'Groups'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dc58ac88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListResources', OrderedDict([('result_key', 'Resources'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dc58ac88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('ListAliases', OrderedDict([('result_key', 'Aliases'), ('output_token', 'NextToken'), ('input_token', 'NextToken'), ('limit_key', 'MaxResults')]), <botocore.model.ServiceModel object at 0x7f89dc58ac88>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeWorkspaceBundles', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Bundles')]), <botocore.model.ServiceModel object at 0x7f89dc55a908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeWorkspaceDirectories', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Directories')]), <botocore.model.ServiceModel object at 0x7f89dc55a908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('DescribeWorkspaces', OrderedDict([('limit_key', 'Limit'), ('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Workspaces')]), <botocore.model.ServiceModel object at 0x7f89dc55a908>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('BatchGetTraces', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Traces')]), <botocore.model.ServiceModel object at 0x7f89dc51c550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetServiceGraph', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Services')]), <botocore.model.ServiceModel object at 0x7f89dc51c550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTraceGraph', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'Services')]), <botocore.model.ServiceModel object at 0x7f89dc51c550>) ... ok
tests.functional.test_paginator_config.test_lint_pagination_configs('GetTraceSummaries', OrderedDict([('input_token', 'NextToken'), ('output_token', 'NextToken'), ('result_key', 'TraceSummaries')]), <botocore.model.ServiceModel object at 0x7f89dc51c550>) ... ok
tests.functional.test_public_apis.test_public_apis_will_not_be_signed(<bound method ClientCreator._create_api_method.<locals>._api_call of <botocore.client.CognitoIdentity object at 0x7f89dc55ab70>>, {'IdentityPoolId': 'region:1234'}) ... ok
tests.functional.test_public_apis.test_public_apis_will_not_be_signed(<bound method ClientCreator._create_api_method.<locals>._api_call of <botocore.client.CognitoIdentity object at 0x7f89dc55ab70>>, {'IdentityId': 'region:1234'}) ... ok
tests.functional.test_public_apis.test_public_apis_will_not_be_signed(<bound method ClientCreator._create_api_method.<locals>._api_call of <botocore.client.CognitoIdentity object at 0x7f89dc55ab70>>, {'IdentityId': 'region:1234', 'Logins': {}, 'LoginsToRemove': []}) ... ok
tests.functional.test_public_apis.test_public_apis_will_not_be_signed(<bound method ClientCreator._create_api_method.<locals>._api_call of <botocore.client.CognitoIdentity object at 0x7f89dc55ab70>>, {'IdentityId': 'region:1234'}) ... ok
tests.functional.test_public_apis.test_public_apis_will_not_be_signed(<bound method ClientCreator._create_api_method.<locals>._api_call of <botocore.client.STS object at 0x7f89dc5a1860>>, {'PrincipalArn': 'aaaaaaaaaaaaaaaaaaaa', 'RoleArn': 'aaaaaaaaaaaaaaaaaaaa', 'SAMLAssertion': 'abcd'}) ... ok
tests.functional.test_public_apis.test_public_apis_will_not_be_signed(<bound method ClientCreator._create_api_method.<locals>._api_call of <botocore.client.STS object at 0x7f89dc5a1860>>, {'RoleArn': 'aaaaaaaaaaaaaaaaaaaa', 'RoleSessionName': 'foo', 'WebIdentityToken': 'abcd'}) ... ok
test_generate_db_auth_token (tests.functional.test_rds.TestRDS) ... ok
test_copy_snapshot (tests.functional.test_rds.TestRDSPresignUrlInjection) ... ok
test_create_db_instance_read_replica (tests.functional.test_rds.TestRDSPresignUrlInjection) ... ok
tests.functional.test_regions.test_all_s3_endpoints_have_s3v4 ... ok
tests.functional.test_regions.test_known_endpoints('importexport', 'https://importexport.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_known_endpoints('cloudfront', 'https://cloudfront.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_known_endpoints('waf', 'https://waf.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_known_endpoints('route53', 'https://route53.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_known_endpoints('s3', 'https://s3.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_known_endpoints('sts', 'https://sts.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_known_endpoints('iam', 'https://iam.amazonaws.com', <botocore.regions.EndpointResolver object at 0x7f89dc3a9390>) ... ok
tests.functional.test_regions.test_non_partition_endpoint_requires_region ... ok
test_can_clobber_max_attempts_on_session (tests.functional.test_retry.TestRetry) ... ok
test_can_override_max_attempts (tests.functional.test_retry.TestRetry) ... ok
test_do_not_attempt_retries (tests.functional.test_retry.TestRetry) ... ok
test_service_specific_defaults_do_not_mutate_general_defaults (tests.functional.test_retry.TestRetry) ... ok
test_set_max_attempts_on_session (tests.functional.test_retry.TestRetry) ... ok
test_setting_max_attempts_does_not_set_for_other_clients (tests.functional.test_retry.TestRetry) ... ok
test_paginate_with_max_items_int (tests.functional.test_route53.TestRoute53Pagination) ... ok
test_paginate_with_max_items_str (tests.functional.test_route53.TestRoute53Pagination) ... ok
test_int_values_with_sigv4 (tests.functional.test_s3.TestCanSendIntegerHeaders) ... ok
test_default_presign_sigv4_in_sigv4_only_region (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_default_presign_uses_sigv2 (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_generate_unauthed_post (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_generate_unauthed_url (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_presign_post_s3_accelerate (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_presign_s3_accelerate (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_presign_unsigned (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_presign_url_with_ssec (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_sigv2_presign (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_sigv4_presign (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_uses_sigv4_for_unknown_region (tests.functional.test_s3.TestGeneratePresigned) ... ok
test_validates_non_ascii_chars_trigger_validation_error (tests.functional.test_s3.TestOnlyAsciiCharsAllowed) ... ok
test_region_redirect (tests.functional.test_s3.TestRegionRedirect) ... ok
test_region_redirect_cache (tests.functional.test_s3.TestRegionRedirect) ... ok
test_resign_request_in_us_east_1 (tests.functional.test_s3.TestRegionRedirect) ... ok
test_resign_request_in_us_east_1_fails (tests.functional.test_s3.TestRegionRedirect) ... ok
test_resign_request_with_region_when_needed (tests.functional.test_s3.TestRegionRedirect) ... ok
test_invalid_bucket_name_raises_error (tests.functional.test_s3.TestS3BucketValidation) ... ok
test_multiple_transitions_returns_one (tests.functional.test_s3.TestS3GetBucketLifecycle) ... ok
test_500_error_with_non_xml_body (tests.functional.test_s3.TestS3PutObject) ... ok
test_content_md5_set (tests.functional.test_s3.TestS3SigV4) ... ok
test_content_sha256_not_set_if_config_value_is_false (tests.functional.test_s3.TestS3SigV4) ... ok
test_content_sha256_set_if_config_value_is_true (tests.functional.test_s3.TestS3SigV4) ... ok
test_content_sha256_set_if_md5_is_unavailable (tests.functional.test_s3.TestS3SigV4) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.us-west-2.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.us-west-1.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-1', 'bucket', 'key', None, False, None, 'http://bucket.s3.us-west-1.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.us-west-2.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.us-west-1.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-1', 'bucket', 'key', None, False, None, 'http://bucket.s3.us-west-1.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('cn-north-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.cn-north-1.amazonaws.com.cn/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('cn-north-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.cn-north-1.amazonaws.com.cn/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('cn-north-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.cn-north-1.amazonaws.com.cn/key', <botocore.UNSIGNED object at 0x7f8a0ff447b8>) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('cn-north-1', 'bucket.dot', 'key', None, True, None, 'https://s3.cn-north-1.amazonaws.com.cn/bucket.dot/key', <botocore.UNSIGNED object at 0x7f8a0ff447b8>) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('cn-north-1', 'bucket', 'key', {'addressing_style': 'virtual'}, True, None, 'https://bucket.s3.cn-north-1.amazonaws.com.cn/key', <botocore.UNSIGNED object at 0x7f8a0ff447b8>) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('cn-north-1', 'bucket', 'key', {'addressing_style': 'path'}, True, None, 'https://s3.cn-north-1.amazonaws.com.cn/bucket/key', <botocore.UNSIGNED object at 0x7f8a0ff447b8>) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket.dot', 'key', None, True, None, 'https://s3.us-west-2.amazonaws.com/bucket.dot/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket.dot', 'key', None, True, None, 'https://s3.amazonaws.com/bucket.dot/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3(None, 'foo', 'bar', None, True, 'https://my-custom-s3/', 'https://my-custom-s3/foo/bar', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3(None, 'bucket.dots', 'bar', None, True, 'https://my-custom-s3/', 'https://my-custom-s3/bucket.dots/bar', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'foo', 'bar', None, True, 'https://my-custom-s3/', 'https://my-custom-s3/foo/bar', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'addressing_style': 'virtual'}, True, None, 'https://bucket.s3.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', {'addressing_style': 'virtual'}, True, None, 'https://bucket.s3.us-west-2.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('eu-central-1', 'bucket', 'key', {'addressing_style': 'virtual'}, True, None, 'https://bucket.s3.eu-central-1.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'addressing_style': 'virtual'}, True, 'https://foo.amazonaws.com', 'https://bucket.foo.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-gov-west-1', 'bucket', 'key', {'addressing_style': 'virtual'}, True, None, 'https://bucket.s3.us-gov-west-1.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-gov-west-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.us-gov-west-1.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('fips-us-gov-west-1', 'bucket', 'key', None, True, None, 'https://bucket.s3-fips-us-gov-west-1.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'addressing_style': 'path'}, True, None, 'https://s3.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'addressing_style': 'path'}, True, 'https://foo.amazonaws.com/', 'https://foo.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_accelerate_endpoint': True}, True, None, 'https://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', {'use_accelerate_endpoint': True}, True, None, 'https://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.amazonaws.com', 'https://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'http://s3-accelerate.amazonaws.com', 'http://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_accelerate_endpoint': True}, False, None, 'http://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://foo.s3-accelerate.amazonaws.com', 'https://foo.s3-accelerate.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.notamazon.com', 'https://s3-accelerate.notamazon.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.foo.amazonaws.com', 'https://s3-accelerate.foo.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_accelerate_endpoint': True, 'addressing_style': 'path'}, True, None, 'https://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-east-1.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-west-2.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-east-1.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-west-2.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket.dot', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://s3.dualstack.us-west-2.amazonaws.com/bucket.dot/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket.dot', 'key', {'use_dualstack_endpoint': True}, False, None, 'http://s3.dualstack.us-west-2.amazonaws.com/bucket.dot/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', {'use_dualstack_endpoint': True, 'addressing_style': 'path'}, True, None, 'https://s3.dualstack.us-west-2.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_accelerate_endpoint': True, 'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3-accelerate.dualstack.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-west-2', 'bucket', 'key', {'use_accelerate_endpoint': True, 'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3-accelerate.dualstack.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, 'https://s3-accelerate.amazonaws.com', 'https://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.dualstack.amazonaws.com', 'https://bucket.s3-accelerate.dualstack.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.dualstack.dualstack.amazonaws.com', 'https://s3-accelerate.dualstack.dualstack.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.dualstack.dualstack.dualstack.amazonaws.com', 'https://s3-accelerate.dualstack.dualstack.dualstack.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', None, True, 'https://s3-accelerate.foo.amazonaws.com', 'https://s3-accelerate.foo.amazonaws.com/bucket/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_accelerate_endpoint': True, 'use_dualstack_endpoint': True}, False, None, 'http://bucket.s3-accelerate.dualstack.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_correct_url_used_for_s3('us-east-1', 'bucket', 'key', {'use_accelerate_endpoint': True, 'use_dualstack_endpoint': True, 'addressing_style': 'path'}, True, None, 'https://bucket.s3-accelerate.dualstack.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-1', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-1', 'bucket', 'key', {'addressing_style': 'path'}, True, None, 'https://s3.amazonaws.com/bucket/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', {'addressing_style': 'path'}, True, None, 'https://s3.us-west-2.amazonaws.com/bucket/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-2', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-east-2', 'bucket', 'key', {'addressing_style': 'path'}, True, None, 'https://s3.us-east-2.amazonaws.com/bucket/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-west-2.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-west-2.amazonaws.com/key', 's3') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', {'use_dualstack_endpoint': True}, True, None, 'https://bucket.s3.dualstack.us-west-2.amazonaws.com/key', 's3v4') ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', {'use_accelerate_endpoint': True}, True, None, 'https://bucket.s3-accelerate.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-50', 'bucket', 'key', None, True, None, 'https://bucket.s3.amazonaws.com/key', None) ... ok
tests.functional.test_s3.test_addressing_for_presigned_urls('us-west-2', 'bucket', 'key', None, True, 'https://foo.com/', 'https://foo.com/bucket/key', None) ... ok
tests.functional.test_service_alias.test_can_use_service_alias(<botocore.session.Session object at 0x7f89be598898>, 'sagemaker-runtime', 'runtime.sagemaker') ... ok
tests.functional.test_service_names.test_service_names_are_valid('acm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('acm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('alexaforbusiness',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('alexaforbusiness',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('apigateway',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('apigateway',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('application-autoscaling',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('application-autoscaling',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('appstream',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('appstream',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('appsync',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('appsync',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('athena',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('athena',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('autoscaling',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('autoscaling',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('autoscaling-plans',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('autoscaling-plans',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('batch',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('batch',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('budgets',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('budgets',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ce',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ce',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloud9',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloud9',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('clouddirectory',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('clouddirectory',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudformation',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudformation',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudfront',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudfront',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudhsm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudhsm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudhsmv2',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudhsmv2',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudsearch',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudsearch',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudsearchdomain',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudsearchdomain',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudtrail',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudtrail',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudwatch',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cloudwatch',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codebuild',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codebuild',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codecommit',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codecommit',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codedeploy',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codedeploy',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codepipeline',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codepipeline',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codestar',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('codestar',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cognito-identity',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cognito-identity',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cognito-idp',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cognito-idp',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cognito-sync',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cognito-sync',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('comprehend',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('comprehend',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('config',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('config',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cur',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('cur',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('datapipeline',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('datapipeline',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dax',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dax',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('devicefarm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('devicefarm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('directconnect',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('directconnect',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('discovery',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('discovery',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dms',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dms',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ds',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ds',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dynamodb',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dynamodb',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dynamodbstreams',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('dynamodbstreams',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ec2',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ec2',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ecr',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ecr',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ecs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ecs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('efs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('efs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elasticache',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elasticache',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elasticbeanstalk',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elasticbeanstalk',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elastictranscoder',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elastictranscoder',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elb',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elb',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elbv2',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('elbv2',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('emr',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('emr',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('es',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('es',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('events',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('events',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('firehose',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('firehose',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('gamelift',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('gamelift',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('glacier',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('glacier',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('glue',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('glue',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('greengrass',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('greengrass',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('guardduty',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('guardduty',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('health',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('health',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iam',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iam',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('importexport',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('importexport',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('inspector',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('inspector',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iot',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iot',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iot-data',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iot-data',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iot-jobs-data',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('iot-jobs-data',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesis',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesis',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesis-video-archived-media',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesis-video-archived-media',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesis-video-media',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesis-video-media',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesisanalytics',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesisanalytics',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesisvideo',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kinesisvideo',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kms',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('kms',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lambda',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lambda',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lex-models',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lex-models',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lex-runtime',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lex-runtime',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lightsail',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('lightsail',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('logs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('logs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('machinelearning',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('machinelearning',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('marketplace-entitlement',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('marketplace-entitlement',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('marketplacecommerceanalytics',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('marketplacecommerceanalytics',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediaconvert',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediaconvert',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('medialive',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('medialive',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediapackage',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediapackage',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediastore',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediastore',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediastore-data',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mediastore-data',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('meteringmarketplace',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('meteringmarketplace',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mgh',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mgh',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mobile',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mobile',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mq',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mq',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mturk',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('mturk',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('opsworks',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('opsworks',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('opsworkscm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('opsworkscm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('organizations',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('organizations',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('pinpoint',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('pinpoint',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('polly',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('polly',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('pricing',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('pricing',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('rds',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('rds',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('redshift',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('redshift',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('rekognition',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('rekognition',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('resource-groups',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('resource-groups',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('resourcegroupstaggingapi',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('resourcegroupstaggingapi',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('route53',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('route53',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('route53domains',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('route53domains',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('s3',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('s3',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sagemaker',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sagemaker',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sagemaker-runtime',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sagemaker-runtime',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sdb',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sdb',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('serverlessrepo',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('serverlessrepo',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('servicecatalog',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('servicecatalog',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('servicediscovery',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('servicediscovery',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ses',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ses',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('shield',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('shield',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sms',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sms',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('snowball',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('snowball',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sns',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sns',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sqs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sqs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ssm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('ssm',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('stepfunctions',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('stepfunctions',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('storagegateway',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('storagegateway',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sts',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('sts',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('support',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('support',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('swf',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('swf',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('transcribe',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('transcribe',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('translate',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('translate',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('waf',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('waf',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('waf-regional',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('waf-regional',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('workdocs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('workdocs',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('workmail',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('workmail',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('workspaces',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('workspaces',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('xray',) ... ok
tests.functional.test_service_names.test_service_names_are_valid('xray',) ... ok
test_credentials_with_profile_precedence (tests.functional.test_session.TestSession) ... ok
test_does_not_provide_regions_for_mismatch_service_name (tests.functional.test_session.TestSession) ... ok
test_profile_does_not_win_if_all_from_env_vars (tests.functional.test_session.TestSession) ... ok
test_profile_precedence (tests.functional.test_session.TestSession) ... ok
test_provides_available_regions_for_different_endpoint_prefix (tests.functional.test_session.TestSession) ... ok
test_provides_available_regions_for_same_endpoint_prefix (tests.functional.test_session.TestSession) ... ok
test_session_profile_overrides_env_vars (tests.functional.test_session.TestSession) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/__init__.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/args.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/auth.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/awsrequest.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/client.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/compat.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/config.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/configloader.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/credentials.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/endpoint.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/errorfactory.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/exceptions.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/handlers.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/history.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/hooks.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/loaders.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/model.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/paginate.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/parsers.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/regions.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/response.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/retryhandler.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/serialize.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/session.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/signers.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/stub.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/translate.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/utils.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/validate.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/waiter.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/__init__.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/client.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/docstring.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/example.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/method.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/paginator.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/params.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/service.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/shape.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/sharedexample.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/utils.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/waiter.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/bcdoc/__init__.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/bcdoc/docevents.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/bcdoc/docstringparser.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/bcdoc/restdoc.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/bcdoc/style.py',) ... ok
tests.functional.test_six_imports.test_no_bare_six_imports('/home/srezepin/anaconda3/lib/python3.6/site-packages/botocore/docs/bcdoc/textwriter.py',) ... ok
tests.functional.test_six_threading.test_six_thread_safety ... ok
test_presigned_url_contains_no_content_type (tests.functional.test_sts.TestSTSPresignedUrl) ... ok
test_ANY_repr (tests.functional.test_stub.TestStubber) ... ok
test_activated_stubber_errors_with_no_registered_stubs (tests.functional.test_stub.TestStubber) ... ok
test_any_ignores_param_for_validation (tests.functional.test_stub.TestStubber) ... ok
test_can_add_expected_params_to_client_error (tests.functional.test_stub.TestStubber) ... ok
test_can_continue_to_call_after_expected_params_fail (tests.functional.test_stub.TestStubber) ... ok
test_can_expected_param_fails_in_client_error (tests.functional.test_stub.TestStubber) ... ok
test_can_stub_with_presign_url_mixed_in (tests.functional.test_stub.TestStubber) ... ok
test_client_error_response (tests.functional.test_stub.TestStubber) ... ok
test_context_manager_returns_response (tests.functional.test_stub.TestStubber) ... ok
test_expected_params_fail (tests.functional.test_stub.TestStubber) ... ok
test_expected_params_mixed_with_errors_responses (tests.functional.test_stub.TestStubber) ... ok
test_expected_params_success (tests.functional.test_stub.TestStubber) ... ok
test_many_expected_params (tests.functional.test_stub.TestStubber) ... ok
test_mixed_any_and_concrete_params (tests.functional.test_stub.TestStubber) ... ok
test_nested_any_param (tests.functional.test_stub.TestStubber) ... ok
test_no_stub_for_presign_url (tests.functional.test_stub.TestStubber) ... ok
test_none_param (tests.functional.test_stub.TestStubber) ... ok
test_still_relies_on_param_validation_with_expected_params (tests.functional.test_stub.TestStubber) ... ok
test_stubber_errors_when_stubs_are_used_up (tests.functional.test_stub.TestStubber) ... ok
test_stubber_returns_response (tests.functional.test_stub.TestStubber) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('FleetStarted', OrderedDict([('delay', 30), ('maxAttempts', 40), ('operation', 'DescribeFleets'), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'Fleets[].State'), ('expected', 'ACTIVE')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'Fleets[].State'), ('expected', 'PENDING_DEACTIVATE')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'Fleets[].State'), ('expected', 'INACTIVE')])])])), ('FleetStopped', OrderedDict([('delay', 30), ('maxAttempts', 40), ('operation', 'DescribeFleets'), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'Fleets[].State'), ('expected', 'INACTIVE')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'Fleets[].State'), ('expected', 'PENDING_ACTIVATE')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'Fleets[].State'), ('expected', 'ACTIVE')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.AppStream object at 0x7f89f44d8ef0>, 'fleet_started', <botocore.model.ServiceModel object at 0x7f89df7b2208>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.AppStream object at 0x7f89f44d8ef0>, 'fleet_stopped', <botocore.model.ServiceModel object at 0x7f89df7b2208>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('StackExists', OrderedDict([('delay', 5), ('operation', 'DescribeStacks'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('matcher', 'status'), ('expected', 200), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'ValidationError'), ('state', 'retry')])])])), ('StackCreateComplete', OrderedDict([('delay', 30), ('operation', 'DescribeStacks'), ('maxAttempts', 120), ('description', 'Wait until stack status is CREATE_COMPLETE.'), ('acceptors', [OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'CREATE_COMPLETE'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'CREATE_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'DELETE_COMPLETE'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'DELETE_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'ROLLBACK_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'ROLLBACK_COMPLETE'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('expected', 'ValidationError'), ('matcher', 'error'), ('state', 'failure')])])])), ('StackDeleteComplete', OrderedDict([('delay', 30), ('operation', 'DescribeStacks'), ('maxAttempts', 120), ('description', 'Wait until stack status is DELETE_COMPLETE.'), ('acceptors', [OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'DELETE_COMPLETE'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('expected', 'ValidationError'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'DELETE_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'CREATE_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'ROLLBACK_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'UPDATE_ROLLBACK_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'UPDATE_ROLLBACK_IN_PROGRESS'), ('matcher', 'pathAny'), ('state', 'failure')])])])), ('StackUpdateComplete', OrderedDict([('delay', 30), ('maxAttempts', 120), ('operation', 'DescribeStacks'), ('description', 'Wait until stack status is UPDATE_COMPLETE.'), ('acceptors', [OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'UPDATE_COMPLETE'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('expected', 'UPDATE_FAILED'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Stacks[].StackStatus')]), OrderedDict([('argument', 'Stacks[].StackStatus'), ('expected', 'UPDATE_ROLLBACK_FAILED'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('expected', 'UPDATE_ROLLBACK_COMPLETE'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Stacks[].StackStatus')]), OrderedDict([('expected', 'ValidationError'), ('matcher', 'error'), ('state', 'failure')])])])), ('ChangeSetCreateComplete', OrderedDict([('delay', 30), ('operation', 'DescribeChangeSet'), ('maxAttempts', 120), ('description', 'Wait until change set status is CREATE_COMPLETE.'), ('acceptors', [OrderedDict([('argument', 'Status'), ('expected', 'CREATE_COMPLETE'), ('matcher', 'path'), ('state', 'success')]), OrderedDict([('argument', 'Status'), ('expected', 'FAILED'), ('matcher', 'path'), ('state', 'failure')]), OrderedDict([('expected', 'ValidationError'), ('matcher', 'error'), ('state', 'failure')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFormation object at 0x7f89de2bb5f8>, 'change_set_create_complete', <botocore.model.ServiceModel object at 0x7f89df25fac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFormation object at 0x7f89de2bb5f8>, 'stack_create_complete', <botocore.model.ServiceModel object at 0x7f89df25fac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFormation object at 0x7f89de2bb5f8>, 'stack_delete_complete', <botocore.model.ServiceModel object at 0x7f89df25fac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFormation object at 0x7f89de2bb5f8>, 'stack_exists', <botocore.model.ServiceModel object at 0x7f89df25fac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFormation object at 0x7f89de2bb5f8>, 'stack_update_complete', <botocore.model.ServiceModel object at 0x7f89df25fac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('DistributionDeployed', OrderedDict([('delay', 60), ('operation', 'GetDistribution'), ('maxAttempts', 25), ('description', 'Wait until a distribution is deployed.'), ('acceptors', [OrderedDict([('expected', 'Deployed'), ('matcher', 'path'), ('state', 'success'), ('argument', 'Distribution.Status')])])])), ('InvalidationCompleted', OrderedDict([('delay', 20), ('operation', 'GetInvalidation'), ('maxAttempts', 30), ('description', 'Wait until an invalidation has completed.'), ('acceptors', [OrderedDict([('expected', 'Completed'), ('matcher', 'path'), ('state', 'success'), ('argument', 'Invalidation.Status')])])])), ('StreamingDistributionDeployed', OrderedDict([('delay', 60), ('operation', 'GetStreamingDistribution'), ('maxAttempts', 25), ('description', 'Wait until a streaming distribution is deployed.'), ('acceptors', [OrderedDict([('expected', 'Deployed'), ('matcher', 'path'), ('state', 'success'), ('argument', 'StreamingDistribution.Status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFront object at 0x7f89de93dda0>, 'distribution_deployed', <botocore.model.ServiceModel object at 0x7f89f44cbbe0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFront object at 0x7f89de93dda0>, 'invalidation_completed', <botocore.model.ServiceModel object at 0x7f89f44cbbe0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudFront object at 0x7f89de93dda0>, 'streaming_distribution_deployed', <botocore.model.ServiceModel object at 0x7f89f44cbbe0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('AlarmExists', OrderedDict([('delay', 5), ('maxAttempts', 40), ('operation', 'DescribeAlarms'), ('acceptors', [OrderedDict([('matcher', 'path'), ('expected', True), ('argument', 'length(MetricAlarms[]) > `0`'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CloudWatch object at 0x7f89f40a9550>, 'alarm_exists', <botocore.model.ServiceModel object at 0x7f89de8c7dd8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('DeploymentSuccessful', OrderedDict([('delay', 15), ('operation', 'GetDeployment'), ('maxAttempts', 120), ('acceptors', [OrderedDict([('expected', 'Succeeded'), ('matcher', 'path'), ('state', 'success'), ('argument', 'deploymentInfo.status')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'deploymentInfo.status')]), OrderedDict([('expected', 'Stopped'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'deploymentInfo.status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.CodeDeploy object at 0x7f89f45135f8>, 'deployment_successful', <botocore.model.ServiceModel object at 0x7f89de92b0b8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('TableExists', OrderedDict([('delay', 20), ('operation', 'DescribeTable'), ('maxAttempts', 25), ('acceptors', [OrderedDict([('expected', 'ACTIVE'), ('matcher', 'path'), ('state', 'success'), ('argument', 'Table.TableStatus')]), OrderedDict([('expected', 'ResourceNotFoundException'), ('matcher', 'error'), ('state', 'retry')])])])), ('TableNotExists', OrderedDict([('delay', 20), ('operation', 'DescribeTable'), ('maxAttempts', 25), ('acceptors', [OrderedDict([('expected', 'ResourceNotFoundException'), ('matcher', 'error'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.DynamoDB object at 0x7f89dfbf7a90>, 'table_exists', <botocore.model.ServiceModel object at 0x7f89dfbf77b8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.DynamoDB object at 0x7f89dfbf7a90>, 'table_not_exists', <botocore.model.ServiceModel object at 0x7f89dfbf77b8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('InstanceExists', OrderedDict([('delay', 5), ('maxAttempts', 40), ('operation', 'DescribeInstances'), ('acceptors', [OrderedDict([('matcher', 'path'), ('expected', True), ('argument', 'length(Reservations[]) > `0`'), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidInstanceID.NotFound'), ('state', 'retry')])])])), ('BundleTaskComplete', OrderedDict([('delay', 15), ('operation', 'DescribeBundleTasks'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'complete'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'BundleTasks[].State')]), OrderedDict([('expected', 'failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'BundleTasks[].State')])])])), ('ConversionTaskCancelled', OrderedDict([('delay', 15), ('operation', 'DescribeConversionTasks'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'cancelled'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'ConversionTasks[].State')])])])), ('ConversionTaskCompleted', OrderedDict([('delay', 15), ('operation', 'DescribeConversionTasks'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'completed'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'ConversionTasks[].State')]), OrderedDict([('expected', 'cancelled'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'ConversionTasks[].State')]), OrderedDict([('expected', 'cancelling'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'ConversionTasks[].State')])])])), ('ConversionTaskDeleted', OrderedDict([('delay', 15), ('operation', 'DescribeConversionTasks'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'ConversionTasks[].State')])])])), ('CustomerGatewayAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeCustomerGateways'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'CustomerGateways[].State')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'CustomerGateways[].State')]), OrderedDict([('expected', 'deleting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'CustomerGateways[].State')])])])), ('ExportTaskCancelled', OrderedDict([('delay', 15), ('operation', 'DescribeExportTasks'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'cancelled'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'ExportTasks[].State')])])])), ('ExportTaskCompleted', OrderedDict([('delay', 15), ('operation', 'DescribeExportTasks'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'completed'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'ExportTasks[].State')])])])), ('ImageExists', OrderedDict([('operation', 'DescribeImages'), ('maxAttempts', 40), ('delay', 15), ('acceptors', [OrderedDict([('matcher', 'path'), ('expected', True), ('argument', 'length(Images[]) > `0`'), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidAMIID.NotFound'), ('state', 'retry')])])])), ('ImageAvailable', OrderedDict([('operation', 'DescribeImages'), ('maxAttempts', 40), ('delay', 15), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'Images[].State'), ('expected', 'available')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'Images[].State'), ('expected', 'failed')])])])), ('InstanceRunning', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'running'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'shutting-down'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'terminated'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'stopping'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidInstanceID.NotFound'), ('state', 'retry')])])])), ('InstanceStatusOk', OrderedDict([('operation', 'DescribeInstanceStatus'), ('maxAttempts', 40), ('delay', 15), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'InstanceStatuses[].InstanceStatus.Status'), ('expected', 'ok')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidInstanceID.NotFound'), ('state', 'retry')])])])), ('InstanceStopped', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'stopped'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'pending'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'terminated'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')])])])), ('InstanceTerminated', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'terminated'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'pending'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')]), OrderedDict([('expected', 'stopping'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Reservations[].Instances[].State.Name')])])])), ('KeyPairExists', OrderedDict([('operation', 'DescribeKeyPairs'), ('delay', 5), ('maxAttempts', 6), ('acceptors', [OrderedDict([('expected', True), ('matcher', 'path'), ('state', 'success'), ('argument', 'length(KeyPairs[].KeyName) > `0`')]), OrderedDict([('expected', 'InvalidKeyPair.NotFound'), ('matcher', 'error'), ('state', 'retry')])])])), ('NatGatewayAvailable', OrderedDict([('operation', 'DescribeNatGateways'), ('delay', 15), ('maxAttempts', 40), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'NatGateways[].State'), ('expected', 'available')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'NatGateways[].State'), ('expected', 'failed')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'NatGateways[].State'), ('expected', 'deleting')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'NatGateways[].State'), ('expected', 'deleted')]), OrderedDict([('state', 'retry'), ('matcher', 'error'), ('expected', 'NatGatewayNotFound')])])])), ('NetworkInterfaceAvailable', OrderedDict([('operation', 'DescribeNetworkInterfaces'), ('delay', 20), ('maxAttempts', 10), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'NetworkInterfaces[].Status')]), OrderedDict([('expected', 'InvalidNetworkInterfaceID.NotFound'), ('matcher', 'error'), ('state', 'failure')])])])), ('PasswordDataAvailable', OrderedDict([('operation', 'GetPasswordData'), ('maxAttempts', 40), ('delay', 15), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'path'), ('argument', 'length(PasswordData) > `0`'), ('expected', True)])])])), ('SnapshotCompleted', OrderedDict([('delay', 15), ('operation', 'DescribeSnapshots'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'completed'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Snapshots[].State')])])])), ('SpotInstanceRequestFulfilled', OrderedDict([('operation', 'DescribeSpotInstanceRequests'), ('maxAttempts', 40), ('delay', 15), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'SpotInstanceRequests[].Status.Code'), ('expected', 'fulfilled')]), OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'SpotInstanceRequests[].Status.Code'), ('expected', 'request-canceled-and-instance-running')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'SpotInstanceRequests[].Status.Code'), ('expected', 'schedule-expired')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'SpotInstanceRequests[].Status.Code'), ('expected', 'canceled-before-fulfillment')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'SpotInstanceRequests[].Status.Code'), ('expected', 'bad-parameters')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'SpotInstanceRequests[].Status.Code'), ('expected', 'system-error')]), OrderedDict([('state', 'retry'), ('matcher', 'error'), ('expected', 'InvalidSpotInstanceRequestID.NotFound')])])])), ('SubnetAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeSubnets'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Subnets[].State')])])])), ('SystemStatusOk', OrderedDict([('operation', 'DescribeInstanceStatus'), ('maxAttempts', 40), ('delay', 15), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'InstanceStatuses[].SystemStatus.Status'), ('expected', 'ok')])])])), ('VolumeAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeVolumes'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Volumes[].State')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Volumes[].State')])])])), ('VolumeDeleted', OrderedDict([('delay', 15), ('operation', 'DescribeVolumes'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Volumes[].State')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidVolume.NotFound'), ('state', 'success')])])])), ('VolumeInUse', OrderedDict([('delay', 15), ('operation', 'DescribeVolumes'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'in-use'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Volumes[].State')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Volumes[].State')])])])), ('VpcAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeVpcs'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Vpcs[].State')])])])), ('VpcExists', OrderedDict([('operation', 'DescribeVpcs'), ('delay', 1), ('maxAttempts', 5), ('acceptors', [OrderedDict([('matcher', 'status'), ('expected', 200), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidVpcID.NotFound'), ('state', 'retry')])])])), ('VpnConnectionAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeVpnConnections'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'VpnConnections[].State')]), OrderedDict([('expected', 'deleting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'VpnConnections[].State')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'VpnConnections[].State')])])])), ('VpnConnectionDeleted', OrderedDict([('delay', 15), ('operation', 'DescribeVpnConnections'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'VpnConnections[].State')]), OrderedDict([('expected', 'pending'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'VpnConnections[].State')])])])), ('VpcPeeringConnectionExists', OrderedDict([('delay', 15), ('operation', 'DescribeVpcPeeringConnections'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('matcher', 'status'), ('expected', 200), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidVpcPeeringConnectionID.NotFound'), ('state', 'retry')])])])), ('VpcPeeringConnectionDeleted', OrderedDict([('delay', 15), ('operation', 'DescribeVpcPeeringConnections'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'VpcPeeringConnections[].Status.Code')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidVpcPeeringConnectionID.NotFound'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'bundle_task_complete', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'conversion_task_cancelled', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'conversion_task_completed', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'conversion_task_deleted', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'customer_gateway_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'export_task_cancelled', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'export_task_completed', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'image_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'image_exists', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'instance_exists', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'instance_running', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'instance_status_ok', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'instance_stopped', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'instance_terminated', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'key_pair_exists', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'nat_gateway_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'network_interface_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'password_data_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'snapshot_completed', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'spot_instance_request_fulfilled', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'subnet_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'system_status_ok', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'volume_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'volume_deleted', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'volume_in_use', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'vpc_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'vpc_exists', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'vpc_peering_connection_deleted', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'vpc_peering_connection_exists', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'vpn_connection_available', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EC2 object at 0x7f89df03dbe0>, 'vpn_connection_deleted', <botocore.model.ServiceModel object at 0x7f89dfe3a7f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('TasksRunning', OrderedDict([('delay', 6), ('operation', 'DescribeTasks'), ('maxAttempts', 100), ('acceptors', [OrderedDict([('expected', 'STOPPED'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'tasks[].lastStatus')]), OrderedDict([('expected', 'MISSING'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'failures[].reason')]), OrderedDict([('expected', 'RUNNING'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'tasks[].lastStatus')])])])), ('TasksStopped', OrderedDict([('delay', 6), ('operation', 'DescribeTasks'), ('maxAttempts', 100), ('acceptors', [OrderedDict([('expected', 'STOPPED'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'tasks[].lastStatus')])])])), ('ServicesStable', OrderedDict([('delay', 15), ('operation', 'DescribeServices'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'MISSING'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'failures[].reason')]), OrderedDict([('expected', 'DRAINING'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'services[].status')]), OrderedDict([('expected', 'INACTIVE'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'services[].status')]), OrderedDict([('expected', True), ('matcher', 'path'), ('state', 'success'), ('argument', 'length(services[?!(length(deployments) == `1` && runningCount == desiredCount)]) == `0`')])])])), ('ServicesInactive', OrderedDict([('delay', 15), ('operation', 'DescribeServices'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'MISSING'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'failures[].reason')]), OrderedDict([('expected', 'INACTIVE'), ('matcher', 'pathAny'), ('state', 'success'), ('argument', 'services[].status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ECS object at 0x7f89def3df98>, 'services_inactive', <botocore.model.ServiceModel object at 0x7f89deebefd0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ECS object at 0x7f89def3df98>, 'services_stable', <botocore.model.ServiceModel object at 0x7f89deebefd0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ECS object at 0x7f89def3df98>, 'tasks_running', <botocore.model.ServiceModel object at 0x7f89deebefd0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ECS object at 0x7f89def3df98>, 'tasks_stopped', <botocore.model.ServiceModel object at 0x7f89deebefd0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('CacheClusterAvailable', OrderedDict([('acceptors', [OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'deleting'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'incompatible-network'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'restore-failed'), ('matcher', 'pathAny'), ('state', 'failure')])]), ('delay', 15), ('description', 'Wait until ElastiCache cluster is available.'), ('maxAttempts', 40), ('operation', 'DescribeCacheClusters')])), ('CacheClusterDeleted', OrderedDict([('acceptors', [OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('expected', 'CacheClusterNotFound'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'available'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'creating'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'incompatible-network'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'modifying'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'restore-failed'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('argument', 'CacheClusters[].CacheClusterStatus'), ('expected', 'snapshotting'), ('matcher', 'pathAny'), ('state', 'failure')])]), ('delay', 15), ('description', 'Wait until ElastiCache cluster is deleted.'), ('maxAttempts', 40), ('operation', 'DescribeCacheClusters')])), ('ReplicationGroupAvailable', OrderedDict([('acceptors', [OrderedDict([('argument', 'ReplicationGroups[].Status'), ('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('argument', 'ReplicationGroups[].Status'), ('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure')])]), ('delay', 15), ('description', 'Wait until ElastiCache replication group is available.'), ('maxAttempts', 40), ('operation', 'DescribeReplicationGroups')])), ('ReplicationGroupDeleted', OrderedDict([('acceptors', [OrderedDict([('argument', 'ReplicationGroups[].Status'), ('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('argument', 'ReplicationGroups[].Status'), ('expected', 'available'), ('matcher', 'pathAny'), ('state', 'failure')]), OrderedDict([('expected', 'ReplicationGroupNotFoundFault'), ('matcher', 'error'), ('state', 'success')])]), ('delay', 15), ('description', 'Wait until ElastiCache replication group is deleted.'), ('maxAttempts', 40), ('operation', 'DescribeReplicationGroups')]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElastiCache object at 0x7f89deb35630>, 'cache_cluster_available', <botocore.model.ServiceModel object at 0x7f89dec06780>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElastiCache object at 0x7f89deb35630>, 'cache_cluster_deleted', <botocore.model.ServiceModel object at 0x7f89dec06780>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElastiCache object at 0x7f89deb35630>, 'replication_group_available', <botocore.model.ServiceModel object at 0x7f89dec06780>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElastiCache object at 0x7f89deb35630>, 'replication_group_deleted', <botocore.model.ServiceModel object at 0x7f89dec06780>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('JobComplete', OrderedDict([('delay', 30), ('operation', 'ReadJob'), ('maxAttempts', 120), ('acceptors', [OrderedDict([('expected', 'Complete'), ('matcher', 'path'), ('state', 'success'), ('argument', 'Job.Status')]), OrderedDict([('expected', 'Canceled'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'Job.Status')]), OrderedDict([('expected', 'Error'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'Job.Status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticTranscoder object at 0x7f89def1b128>, 'job_complete', <botocore.model.ServiceModel object at 0x7f89de894160>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('InstanceDeregistered', OrderedDict([('delay', 15), ('operation', 'DescribeInstanceHealth'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'OutOfService'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'InstanceStates[].State')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidInstance'), ('state', 'success')])])])), ('AnyInstanceInService', OrderedDict([('acceptors', [OrderedDict([('argument', 'InstanceStates[].State'), ('expected', 'InService'), ('matcher', 'pathAny'), ('state', 'success')])]), ('delay', 15), ('maxAttempts', 40), ('operation', 'DescribeInstanceHealth')])), ('InstanceInService', OrderedDict([('acceptors', [OrderedDict([('argument', 'InstanceStates[].State'), ('expected', 'InService'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidInstance'), ('state', 'retry')])]), ('delay', 15), ('maxAttempts', 40), ('operation', 'DescribeInstanceHealth')]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancing object at 0x7f89de669860>, 'any_instance_in_service', <botocore.model.ServiceModel object at 0x7f89deb35ac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancing object at 0x7f89de669860>, 'instance_deregistered', <botocore.model.ServiceModel object at 0x7f89deb35ac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancing object at 0x7f89de669860>, 'instance_in_service', <botocore.model.ServiceModel object at 0x7f89deb35ac8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('LoadBalancerExists', OrderedDict([('delay', 15), ('operation', 'DescribeLoadBalancers'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('matcher', 'status'), ('expected', 200), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'LoadBalancerNotFound'), ('state', 'retry')])])])), ('LoadBalancerAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeLoadBalancers'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'LoadBalancers[].State.Code'), ('expected', 'active')]), OrderedDict([('state', 'retry'), ('matcher', 'pathAny'), ('argument', 'LoadBalancers[].State.Code'), ('expected', 'provisioning')]), OrderedDict([('state', 'retry'), ('matcher', 'error'), ('expected', 'LoadBalancerNotFound')])])])), ('LoadBalancersDeleted', OrderedDict([('delay', 15), ('operation', 'DescribeLoadBalancers'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('state', 'retry'), ('matcher', 'pathAll'), ('argument', 'LoadBalancers[].State.Code'), ('expected', 'active')]), OrderedDict([('matcher', 'error'), ('expected', 'LoadBalancerNotFound'), ('state', 'success')])])])), ('TargetInService', OrderedDict([('delay', 15), ('maxAttempts', 40), ('operation', 'DescribeTargetHealth'), ('acceptors', [OrderedDict([('argument', 'TargetHealthDescriptions[].TargetHealth.State'), ('expected', 'healthy'), ('matcher', 'pathAll'), ('state', 'success')]), OrderedDict([('matcher', 'error'), ('expected', 'InvalidInstance'), ('state', 'retry')])])])), ('TargetDeregistered', OrderedDict([('delay', 15), ('maxAttempts', 40), ('operation', 'DescribeTargetHealth'), ('acceptors', [OrderedDict([('matcher', 'error'), ('expected', 'InvalidTarget'), ('state', 'success')]), OrderedDict([('argument', 'TargetHealthDescriptions[].TargetHealth.State'), ('expected', 'unused'), ('matcher', 'pathAll'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancingv2 object at 0x7f89de510ef0>, 'load_balancer_available', <botocore.model.ServiceModel object at 0x7f89dee85f98>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancingv2 object at 0x7f89de510ef0>, 'load_balancer_exists', <botocore.model.ServiceModel object at 0x7f89dee85f98>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancingv2 object at 0x7f89de510ef0>, 'load_balancers_deleted', <botocore.model.ServiceModel object at 0x7f89dee85f98>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancingv2 object at 0x7f89de510ef0>, 'target_deregistered', <botocore.model.ServiceModel object at 0x7f89dee85f98>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.ElasticLoadBalancingv2 object at 0x7f89de510ef0>, 'target_in_service', <botocore.model.ServiceModel object at 0x7f89dee85f98>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('ClusterRunning', OrderedDict([('delay', 30), ('operation', 'DescribeCluster'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'RUNNING')]), OrderedDict([('state', 'success'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'WAITING')]), OrderedDict([('state', 'failure'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'TERMINATING')]), OrderedDict([('state', 'failure'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'TERMINATED')]), OrderedDict([('state', 'failure'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'TERMINATED_WITH_ERRORS')])])])), ('StepComplete', OrderedDict([('delay', 30), ('operation', 'DescribeStep'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'path'), ('argument', 'Step.Status.State'), ('expected', 'COMPLETED')]), OrderedDict([('state', 'failure'), ('matcher', 'path'), ('argument', 'Step.Status.State'), ('expected', 'FAILED')]), OrderedDict([('state', 'failure'), ('matcher', 'path'), ('argument', 'Step.Status.State'), ('expected', 'CANCELLED')])])])), ('ClusterTerminated', OrderedDict([('delay', 30), ('operation', 'DescribeCluster'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'TERMINATED')]), OrderedDict([('state', 'failure'), ('matcher', 'path'), ('argument', 'Cluster.Status.State'), ('expected', 'TERMINATED_WITH_ERRORS')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EMR object at 0x7f89de3d5518>, 'cluster_running', <botocore.model.ServiceModel object at 0x7f89de510278>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EMR object at 0x7f89de3d5518>, 'cluster_terminated', <botocore.model.ServiceModel object at 0x7f89de510278>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.EMR object at 0x7f89de3d5518>, 'step_complete', <botocore.model.ServiceModel object at 0x7f89de510278>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('VaultExists', OrderedDict([('operation', 'DescribeVault'), ('delay', 3), ('maxAttempts', 15), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'status'), ('expected', 200)]), OrderedDict([('state', 'retry'), ('matcher', 'error'), ('expected', 'ResourceNotFoundException')])])])), ('VaultNotExists', OrderedDict([('operation', 'DescribeVault'), ('delay', 3), ('maxAttempts', 15), ('acceptors', [OrderedDict([('state', 'retry'), ('matcher', 'status'), ('expected', 200)]), OrderedDict([('state', 'success'), ('matcher', 'error'), ('expected', 'ResourceNotFoundException')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Glacier object at 0x7f89ddffa6a0>, 'vault_exists', <botocore.model.ServiceModel object at 0x7f89de25e6a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Glacier object at 0x7f89ddffa6a0>, 'vault_not_exists', <botocore.model.ServiceModel object at 0x7f89de25e6a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('InstanceProfileExists', OrderedDict([('delay', 1), ('operation', 'GetInstanceProfile'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 200), ('matcher', 'status'), ('state', 'success')]), OrderedDict([('state', 'retry'), ('matcher', 'status'), ('expected', 404)])])])), ('UserExists', OrderedDict([('delay', 1), ('operation', 'GetUser'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'status'), ('expected', 200)]), OrderedDict([('state', 'retry'), ('matcher', 'error'), ('expected', 'NoSuchEntity')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.IAM object at 0x7f89dd84e0f0>, 'instance_profile_exists', <botocore.model.ServiceModel object at 0x7f89dd86d080>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.IAM object at 0x7f89dd84e0f0>, 'user_exists', <botocore.model.ServiceModel object at 0x7f89dd86d080>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('StreamExists', OrderedDict([('delay', 10), ('operation', 'DescribeStream'), ('maxAttempts', 18), ('acceptors', [OrderedDict([('expected', 'ACTIVE'), ('matcher', 'path'), ('state', 'success'), ('argument', 'StreamDescription.StreamStatus')])])])), ('StreamNotExists', OrderedDict([('delay', 10), ('operation', 'DescribeStream'), ('maxAttempts', 18), ('acceptors', [OrderedDict([('expected', 'ResourceNotFoundException'), ('matcher', 'error'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Kinesis object at 0x7f89bc145860>, 'stream_exists', <botocore.model.ServiceModel object at 0x7f89bc1de8d0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Kinesis object at 0x7f89bc145860>, 'stream_not_exists', <botocore.model.ServiceModel object at 0x7f89bc1de8d0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('DataSourceAvailable', OrderedDict([('delay', 30), ('operation', 'DescribeDataSources'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'COMPLETED'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Results[].Status')]), OrderedDict([('expected', 'FAILED'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Results[].Status')])])])), ('MLModelAvailable', OrderedDict([('delay', 30), ('operation', 'DescribeMLModels'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'COMPLETED'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Results[].Status')]), OrderedDict([('expected', 'FAILED'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Results[].Status')])])])), ('EvaluationAvailable', OrderedDict([('delay', 30), ('operation', 'DescribeEvaluations'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'COMPLETED'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Results[].Status')]), OrderedDict([('expected', 'FAILED'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Results[].Status')])])])), ('BatchPredictionAvailable', OrderedDict([('delay', 30), ('operation', 'DescribeBatchPredictions'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'COMPLETED'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Results[].Status')]), OrderedDict([('expected', 'FAILED'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Results[].Status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.MachineLearning object at 0x7f899f4925c0>, 'batch_prediction_available', <botocore.model.ServiceModel object at 0x7f899f584c18>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.MachineLearning object at 0x7f899f4925c0>, 'data_source_available', <botocore.model.ServiceModel object at 0x7f899f584c18>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.MachineLearning object at 0x7f899f4925c0>, 'evaluation_available', <botocore.model.ServiceModel object at 0x7f899f584c18>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.MachineLearning object at 0x7f899f4925c0>, 'ml_model_available', <botocore.model.ServiceModel object at 0x7f899f584c18>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('AppExists', OrderedDict([('delay', 1), ('operation', 'DescribeApps'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 200), ('matcher', 'status'), ('state', 'success')]), OrderedDict([('matcher', 'status'), ('expected', 400), ('state', 'failure')])])])), ('DeploymentSuccessful', OrderedDict([('delay', 15), ('operation', 'DescribeDeployments'), ('maxAttempts', 40), ('description', 'Wait until a deployment has completed successfully'), ('acceptors', [OrderedDict([('expected', 'successful'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Deployments[].Status')]), OrderedDict([('expected', 'failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Deployments[].Status')])])])), ('InstanceOnline', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('description', 'Wait until OpsWorks instance is online.'), ('acceptors', [OrderedDict([('expected', 'online'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'setup_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'shutting_down'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'start_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stopped'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stopping'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'terminating'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'terminated'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stop_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')])])])), ('InstanceRegistered', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('description', 'Wait until OpsWorks instance is registered.'), ('acceptors', [OrderedDict([('expected', 'registered'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'setup_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'shutting_down'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stopped'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stopping'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'terminating'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'terminated'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stop_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')])])])), ('InstanceStopped', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('description', 'Wait until OpsWorks instance is stopped.'), ('acceptors', [OrderedDict([('expected', 'stopped'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'booting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'online'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'pending'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'rebooting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'requested'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'running_setup'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'setup_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'start_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'stop_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')])])])), ('InstanceTerminated', OrderedDict([('delay', 15), ('operation', 'DescribeInstances'), ('maxAttempts', 40), ('description', 'Wait until OpsWorks instance is terminated.'), ('acceptors', [OrderedDict([('expected', 'terminated'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'ResourceNotFoundException'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'booting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'online'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'pending'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'rebooting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'requested'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'running_setup'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'setup_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')]), OrderedDict([('expected', 'start_failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Instances[].Status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorks object at 0x7f899ef877b8>, 'app_exists', <botocore.model.ServiceModel object at 0x7f899f1120f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorks object at 0x7f899ef877b8>, 'deployment_successful', <botocore.model.ServiceModel object at 0x7f899f1120f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorks object at 0x7f899ef877b8>, 'instance_online', <botocore.model.ServiceModel object at 0x7f899f1120f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorks object at 0x7f899ef877b8>, 'instance_registered', <botocore.model.ServiceModel object at 0x7f899f1120f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorks object at 0x7f899ef877b8>, 'instance_stopped', <botocore.model.ServiceModel object at 0x7f899f1120f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorks object at 0x7f899ef877b8>, 'instance_terminated', <botocore.model.ServiceModel object at 0x7f899f1120f0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('NodeAssociated', OrderedDict([('delay', 15), ('maxAttempts', 15), ('operation', 'DescribeNodeAssociationStatus'), ('description', 'Wait until node is associated or disassociated.'), ('acceptors', [OrderedDict([('expected', 'SUCCESS'), ('state', 'success'), ('matcher', 'path'), ('argument', 'NodeAssociationStatus')]), OrderedDict([('expected', 'FAILED'), ('state', 'failure'), ('matcher', 'path'), ('argument', 'NodeAssociationStatus')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.OpsWorksCM object at 0x7f899f099f98>, 'node_associated', <botocore.model.ServiceModel object at 0x7f899f099cf8>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('DBInstanceAvailable', OrderedDict([('delay', 30), ('operation', 'DescribeDBInstances'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'deleting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'incompatible-restore'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'incompatible-parameters'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')])])])), ('DBInstanceDeleted', OrderedDict([('delay', 30), ('operation', 'DescribeDBInstances'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'DBInstanceNotFound'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'creating'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'modifying'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'rebooting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')]), OrderedDict([('expected', 'resetting-master-credentials'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBInstances[].DBInstanceStatus')])])])), ('DBSnapshotAvailable', OrderedDict([('delay', 30), ('operation', 'DescribeDBSnapshots'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'deleting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'incompatible-restore'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'incompatible-parameters'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')])])])), ('DBSnapshotDeleted', OrderedDict([('delay', 30), ('operation', 'DescribeDBSnapshots'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'deleted'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'DBSnapshotNotFound'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'creating'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'modifying'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'rebooting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')]), OrderedDict([('expected', 'resetting-master-credentials'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'DBSnapshots[].Status')])])])), ('DBSnapshotCompleted', OrderedDict([('delay', 15), ('operation', 'DescribeDBSnapshots'), ('maxAttempts', 40), ('acceptors', [OrderedDict([('expected', 'DBSnapshotNotFound'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'DBSnapshots[].Status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.RDS object at 0x7f899ebcbb38>, 'db_instance_available', <botocore.model.ServiceModel object at 0x7f899edb46a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.RDS object at 0x7f899ebcbb38>, 'db_instance_deleted', <botocore.model.ServiceModel object at 0x7f899edb46a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.RDS object at 0x7f899ebcbb38>, 'db_snapshot_available', <botocore.model.ServiceModel object at 0x7f899edb46a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.RDS object at 0x7f899ebcbb38>, 'db_snapshot_completed', <botocore.model.ServiceModel object at 0x7f899edb46a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.RDS object at 0x7f899ebcbb38>, 'db_snapshot_deleted', <botocore.model.ServiceModel object at 0x7f899edb46a0>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('ClusterAvailable', OrderedDict([('delay', 60), ('operation', 'DescribeClusters'), ('maxAttempts', 30), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Clusters[].ClusterStatus')]), OrderedDict([('expected', 'deleting'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Clusters[].ClusterStatus')]), OrderedDict([('expected', 'ClusterNotFound'), ('matcher', 'error'), ('state', 'retry')])])])), ('ClusterDeleted', OrderedDict([('delay', 60), ('operation', 'DescribeClusters'), ('maxAttempts', 30), ('acceptors', [OrderedDict([('expected', 'ClusterNotFound'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'creating'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Clusters[].ClusterStatus')]), OrderedDict([('expected', 'modifying'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Clusters[].ClusterStatus')])])])), ('ClusterRestored', OrderedDict([('operation', 'DescribeClusters'), ('maxAttempts', 30), ('delay', 60), ('acceptors', [OrderedDict([('state', 'success'), ('matcher', 'pathAll'), ('argument', 'Clusters[].RestoreStatus.Status'), ('expected', 'completed')]), OrderedDict([('state', 'failure'), ('matcher', 'pathAny'), ('argument', 'Clusters[].ClusterStatus'), ('expected', 'deleting')])])])), ('SnapshotAvailable', OrderedDict([('delay', 15), ('operation', 'DescribeClusterSnapshots'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('expected', 'available'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'Snapshots[].Status')]), OrderedDict([('expected', 'failed'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Snapshots[].Status')]), OrderedDict([('expected', 'deleted'), ('matcher', 'pathAny'), ('state', 'failure'), ('argument', 'Snapshots[].Status')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Redshift object at 0x7f899ea87ef0>, 'cluster_available', <botocore.model.ServiceModel object at 0x7f899ed5e048>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Redshift object at 0x7f899ea87ef0>, 'cluster_deleted', <botocore.model.ServiceModel object at 0x7f899ed5e048>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Redshift object at 0x7f899ea87ef0>, 'cluster_restored', <botocore.model.ServiceModel object at 0x7f899ed5e048>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Redshift object at 0x7f899ea87ef0>, 'snapshot_available', <botocore.model.ServiceModel object at 0x7f899ed5e048>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('ResourceRecordSetsChanged', OrderedDict([('delay', 30), ('maxAttempts', 60), ('operation', 'GetChange'), ('acceptors', [OrderedDict([('matcher', 'path'), ('expected', 'INSYNC'), ('argument', 'ChangeInfo.Status'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.Route53 object at 0x7f899e8ecf60>, 'resource_record_sets_changed', <botocore.model.ServiceModel object at 0x7f899ef57048>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('BucketExists', OrderedDict([('delay', 5), ('operation', 'HeadBucket'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('expected', 200), ('matcher', 'status'), ('state', 'success')]), OrderedDict([('expected', 301), ('matcher', 'status'), ('state', 'success')]), OrderedDict([('expected', 403), ('matcher', 'status'), ('state', 'success')]), OrderedDict([('expected', 404), ('matcher', 'status'), ('state', 'retry')])])])), ('BucketNotExists', OrderedDict([('delay', 5), ('operation', 'HeadBucket'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('expected', 404), ('matcher', 'status'), ('state', 'success')])])])), ('ObjectExists', OrderedDict([('delay', 5), ('operation', 'HeadObject'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('expected', 200), ('matcher', 'status'), ('state', 'success')]), OrderedDict([('expected', 404), ('matcher', 'status'), ('state', 'retry')])])])), ('ObjectNotExists', OrderedDict([('delay', 5), ('operation', 'HeadObject'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('expected', 404), ('matcher', 'status'), ('state', 'success')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.S3 object at 0x7f899e72a7b8>, 'bucket_exists', <botocore.model.ServiceModel object at 0x7f899ea96080>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.S3 object at 0x7f899e72a7b8>, 'bucket_not_exists', <botocore.model.ServiceModel object at 0x7f899ea96080>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.S3 object at 0x7f899e72a7b8>, 'object_exists', <botocore.model.ServiceModel object at 0x7f899ea96080>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.S3 object at 0x7f899e72a7b8>, 'object_not_exists', <botocore.model.ServiceModel object at 0x7f899ea96080>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('NotebookInstanceInService', OrderedDict([('delay', 30), ('maxAttempts', 60), ('operation', 'DescribeNotebookInstance'), ('acceptors', [OrderedDict([('expected', 'InService'), ('matcher', 'path'), ('state', 'success'), ('argument', 'NotebookInstanceStatus')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'NotebookInstanceStatus')])])])), ('NotebookInstanceStopped', OrderedDict([('delay', 30), ('operation', 'DescribeNotebookInstance'), ('maxAttempts', 60), ('acceptors', [OrderedDict([('expected', 'Stopped'), ('matcher', 'path'), ('state', 'success'), ('argument', 'NotebookInstanceStatus')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'NotebookInstanceStatus')])])])), ('NotebookInstanceDeleted', OrderedDict([('delay', 30), ('maxAttempts', 60), ('operation', 'DescribeNotebookInstance'), ('acceptors', [OrderedDict([('expected', 'ValidationException'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'NotebookInstanceStatus')])])])), ('TrainingJobCompletedOrStopped', OrderedDict([('delay', 120), ('maxAttempts', 180), ('operation', 'DescribeTrainingJob'), ('acceptors', [OrderedDict([('expected', 'Completed'), ('matcher', 'path'), ('state', 'success'), ('argument', 'TrainingJobStatus')]), OrderedDict([('expected', 'Stopped'), ('matcher', 'path'), ('state', 'success'), ('argument', 'TrainingJobStatus')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'TrainingJobStatus')]), OrderedDict([('expected', 'ValidationException'), ('matcher', 'error'), ('state', 'failure')])])])), ('EndpointInService', OrderedDict([('delay', 30), ('maxAttempts', 120), ('operation', 'DescribeEndpoint'), ('acceptors', [OrderedDict([('expected', 'InService'), ('matcher', 'path'), ('state', 'success'), ('argument', 'EndpointStatus')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'EndpointStatus')]), OrderedDict([('expected', 'ValidationException'), ('matcher', 'error'), ('state', 'failure')])])])), ('EndpointDeleted', OrderedDict([('delay', 30), ('maxAttempts', 60), ('operation', 'DescribeEndpoint'), ('acceptors', [OrderedDict([('expected', 'ValidationException'), ('matcher', 'error'), ('state', 'success')]), OrderedDict([('expected', 'Failed'), ('matcher', 'path'), ('state', 'failure'), ('argument', 'EndpointStatus')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SageMaker object at 0x7f899e8ecb38>, 'endpoint_deleted', <botocore.model.ServiceModel object at 0x7f899e8b5b70>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SageMaker object at 0x7f899e8ecb38>, 'endpoint_in_service', <botocore.model.ServiceModel object at 0x7f899e8b5b70>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SageMaker object at 0x7f899e8ecb38>, 'notebook_instance_deleted', <botocore.model.ServiceModel object at 0x7f899e8b5b70>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SageMaker object at 0x7f899e8ecb38>, 'notebook_instance_in_service', <botocore.model.ServiceModel object at 0x7f899e8b5b70>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SageMaker object at 0x7f899e8ecb38>, 'notebook_instance_stopped', <botocore.model.ServiceModel object at 0x7f899e8b5b70>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SageMaker object at 0x7f899e8ecb38>, 'training_job_completed_or_stopped', <botocore.model.ServiceModel object at 0x7f899e8b5b70>) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<jsonschema.validators.create.<locals>.Validator object at 0x7f89df738668>, OrderedDict([('version', 2), ('waiters', OrderedDict([('IdentityExists', OrderedDict([('delay', 3), ('operation', 'GetIdentityVerificationAttributes'), ('maxAttempts', 20), ('acceptors', [OrderedDict([('expected', 'Success'), ('matcher', 'pathAll'), ('state', 'success'), ('argument', 'VerificationAttributes.*.VerificationStatus')])])]))]))])) ... ok
tests.functional.test_waiter_config.test_lint_waiter_configs(<botocore.client.SES object at 0x7f899e5109b0>, 'identity_exists', <botocore.model.ServiceModel object at 0x7f899e530080>) ... ok

======================================================================
ERROR: Failure: FileNotFoundError ([Errno 2] No such file or directory: '/home/srezepin/git/botocore/botocore/data/endpoints.json')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/srezepin/anaconda3/lib/python3.6/site-packages/nose/failure.py", line 39, in runTest
    raise self.exc_val.with_traceback(self.tb)
  File "/home/srezepin/anaconda3/lib/python3.6/site-packages/nose/loader.py", line 251, in generate
    for test in g():
  File "/home/srezepin/git/botocore/tests/functional/test_endpoints.py", line 63, in test_endpoint_matches_service
    with open(endpoints_path, 'r') as f:
FileNotFoundError: [Errno 2] No such file or directory: '/home/srezepin/git/botocore/botocore/data/endpoints.json'
-------------------- >> begin captured logging << --------------------
botocore.session: DEBUG: Loading variable profile from defaults.
botocore.session: DEBUG: Loading variable config_file from environment with value '/tmp/tmpehrohl2c/config'.
botocore.session: DEBUG: Loading variable credentials_file from defaults.
botocore.session: DEBUG: Loading variable data_path from defaults.
--------------------- >> end captured logging << ---------------------

----------------------------------------------------------------------
XML: /home/srezepin/git/botocore/tests/nosetests.xml
----------------------------------------------------------------------
Ran 4279 tests in 122.154s

FAILED (errors=1)
Traceback (most recent call last):
  File "scripts/ci/run-tests", line 19, in <module>
    run('nosetests --with-coverage --cover-erase --cover-package botocore '
  File "scripts/ci/run-tests", line 16, in run
    return check_call(command, shell=True)
  File "/home/srezepin/anaconda3/lib/python3.6/subprocess.py", line 291, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command 'nosetests --with-coverage --cover-erase --cover-package botocore --with-xunit --cover-xml -v unit/ functional/' returned non-zero exit status 1.
